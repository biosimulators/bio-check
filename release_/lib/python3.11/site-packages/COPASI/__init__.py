
# import statement needed on some systems
import sys
import os.path
sys.path.append(os.path.dirname(__file__))
# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _COPASI
else:
    import _COPASI

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref



class AutoProperty(type):
    """
    Auto-detect Python class getX/setX methods.

    This class is attached to SBase and automatically applies for all classes
    which inherit from it.  Its purpose is to make libSBML more convenient to
    use from Python.  It works by analyzing classes at class creation time
    (not at instantiation) and adding corresponding properties (directly
    calling C methods where possible) to the class dictionary.

    @note The code should work for python 2.6 upwards, however for python 3 it 
          needs to be attached via constructors.
    """
    def __new__(cls, classname, bases, classdict):
        """
        Iterate over the items in the classdict looking for get/set pairs
        and declaring them as properties.
        """

        import re
        import keyword
        import sys
        if sys.version_info < (3, 0):
          from inspect import getargspec as mygetargspec
        else:
          from inspect import getfullargspec as mygetargspec

        re_mangle = re.compile(r'[A-Za-z][a-z]+|[A-Z]+(?=$|[A-Z0-9])|\d+')
        re_id = re.compile(r'^[A-Za-z_][A-Za-z0-9_]*$')
        re_getdoc = re.compile(r'^\s*[A-Za-z_][A-Za-z0-9_]*\(self\)')
        re_setdoc = re.compile(r'^\s*[A-Za-z_][A-Za-z0-9_]*\(self,[^,)]+\)')

#convert ACapitalCasedStringXYZ123 -> a_capital_cased_string_xyz_123
        mangle_name = lambda x: ('_'.join(re_mangle.findall(x))).lower()

        get_methods = set()
        set_methods = set()
        swig_setter = classdict.get('__swig_setmethods__', {})

        allowed_methods = [
                           'Annotation', 
                           'AnnotationString', 
                           'Notes', 
                           'NotesString', 
                           ]

#only search for get/set methods
#we assume that any unset method also has either get or set
#a small number of set without get cases exist so we can't only
#search for get methods
        for k, v in classdict.items():
            name = k[3:]
            prefix = k[:3]
            mangled = mangle_name(name)
            if name:
                if callable(v):
                    if re_id.match(mangled) and mangled not in keyword.kwlist and name != 'Array':
                        if prefix == 'get':
                            get_methods.add(name)
                        elif prefix == 'set':
                            set_methods.add(name)

        for name in get_methods | set_methods:

            mangled = mangle_name(name)

#ListOfFoobars -> foobars
            if mangled.startswith('list_of_'):
                mangled = mangled[8:]

            getter = setter = deleter = None
            if name in get_methods:
                getter = classdict['get'+name]

#this is a very dirty way of checking if the get method
#requires extra arguments (and hence cannot be a property)
#it should be possible to do this properly in SWIG?
                try:
                  argspec = mygetargspec(getter)
                  numargs = len(argspec.args)
                  if numargs > 1 or (numargs == 1 and argspec.args[0] != 'self')  \
                    or (argspec.varargs!=None and name not in allowed_methods and not name.startswith('ListOf') ):
                    continue
                except:
                  continue

#use the c-level get function if the python function
#only consists of a call to it
                cname = classname + '_get' + name
#test if function is "return _COPASI.CLASS_getNAME(__args__)"
                try:
                  if getter.func_code.co_names == ('_COPASI', cname):
                    getter = getattr(_COPASI, cname)
                except:
                  if getter.__code__.co_names == ('_COPASI', cname):
                    getter = getattr(_COPASI, cname)

            if name in set_methods:
                setter = classdict['set'+name]
                try:
                 argspec = mygetargspec(getter)
                 numargs = len(argspec.args)
                 if numargs > 1 and argspec.args[0] == 'self':
                   cname = classname + '_set' + name
                   try:
                     if setter.func_code.co_names == ('_COPASI', cname):
                         setter = getattr(_COPASI, cname)
                   except:
                     if setter.__code__.co_names == ('_COPASI', cname):
                         setter = getattr(_COPASI, cname)

#property fget does not get intercepted by __getattr__
#but fset does, so we implement property setting via
#the __swig_setmethods__ dict
                   swig_setter[mangled] = setter
                   continue
                except:
                  pass

            if 'unset' + name in classdict:
                deleter = classdict['unset'+name]

                try:
                  argspec = mygetargspec(getter)
                  numargs = len(argspec.args)
                  if numargs == 1 and argspec.args[0] == 'self' and \
                    (argspec.varargs==None or name in allowed_methods):
                    cname = classname + '_unset' + name
                    try:
                      if deleter.func_code.co_names == ('_COPASI', cname):
                          deleter = getattr(_COPASI, cname)                    
                    except:
                      if deleter.__code__.co_names == ('_COPASI', cname):
                          deleter = getattr(_COPASI, cname)                    
                except:
                  pass

            if getter or setter or deleter:
#fset is technically redundant since the method is dispatched
#via _swig_setattr rather than through the property due to that
#function not delegating to object.__setattr__ which properly
#handles properties
                classdict[mangled] = property(fget=getter, fset=setter, fdel=deleter)

            def __repr__(self):
                desc = self.__class__.__name__
                if hasattr(self, '__len__'):
                    desc += '[%s]' % self.__len__()
                if hasattr(self, 'id') and self.id:
                    desc += ' %s' % self.id
                if hasattr(self, 'name') and self.name:
                    desc += ' "%s"' % self.name
                if hasattr(self, 'object_name') and self.object_name:
                    desc += ' "%s"' % self.object_name
                return '<' + desc + '>'

            if classdict.get('__repr__', None) in (_swig_repr, None):
                classdict['__repr__'] = __repr__


        return type.__new__(cls, classname, bases, classdict)



import types
import sys 

TriUnspecified = _COPASI.TriUnspecified

TriFalse = _COPASI.TriFalse

TriTrue = _COPASI.TriTrue

class CCore(object):
    r"""Proxy of C++ CCore class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    SimulationContext_Default = _COPASI.CCore_SimulationContext_Default
    
    SimulationContext_UseMoieties = _COPASI.CCore_SimulationContext_UseMoieties
    
    SimulationContext_UpdateMoieties = _COPASI.CCore_SimulationContext_UpdateMoieties
    
    SimulationContext_EventHandling = _COPASI.CCore_SimulationContext_EventHandling
    
    SimulationContext_DelayValues = _COPASI.CCore_SimulationContext_DelayValues
    
    SimulationContext___SIZE = _COPASI.CCore_SimulationContext___SIZE
    
    Framework_Concentration = _COPASI.CCore_Framework_Concentration
    
    Framework_ParticleNumbers = _COPASI.CCore_Framework_ParticleNumbers
    
    Framework___SIZE = _COPASI.CCore_Framework___SIZE
    

    def __init__(self):
        r"""__init__(CCore self) -> CCore"""
        _COPASI.CCore_swiginit(self, _COPASI.new_CCore())
    __swig_destroy__ = _COPASI.delete_CCore

# Register CCore in _COPASI:
_COPASI.CCore_swigregister(CCore)
cvar = _COPASI.cvar
CCore.FrameworkNames = _COPASI.cvar.CCore_FrameworkNames


def INVALID_INDEX():
    r"""INVALID_INDEX() -> size_t"""
    return _COPASI.INVALID_INDEX()
class SwigPyIterator(object):
    r"""Proxy of C++ swig::SwigPyIterator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _COPASI.delete_SwigPyIterator

    def value(self):
        r"""value(SwigPyIterator self) -> PyObject *"""
        return _COPASI.SwigPyIterator_value(self)

    def incr(self, n=1):
        r"""incr(SwigPyIterator self, size_t n=1) -> SwigPyIterator"""
        return _COPASI.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        r"""decr(SwigPyIterator self, size_t n=1) -> SwigPyIterator"""
        return _COPASI.SwigPyIterator_decr(self, n)

    def distance(self, x):
        r"""distance(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t"""
        return _COPASI.SwigPyIterator_distance(self, x)

    def equal(self, x):
        r"""equal(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _COPASI.SwigPyIterator_equal(self, x)

    def copy(self):
        r"""copy(SwigPyIterator self) -> SwigPyIterator"""
        return _COPASI.SwigPyIterator_copy(self)

    def next(self):
        r"""next(SwigPyIterator self) -> PyObject *"""
        return _COPASI.SwigPyIterator_next(self)

    def __next__(self):
        r"""__next__(SwigPyIterator self) -> PyObject *"""
        return _COPASI.SwigPyIterator___next__(self)

    def previous(self):
        r"""previous(SwigPyIterator self) -> PyObject *"""
        return _COPASI.SwigPyIterator_previous(self)

    def advance(self, n):
        r"""advance(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _COPASI.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        r"""__eq__(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _COPASI.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        r"""__ne__(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _COPASI.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        r"""__iadd__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _COPASI.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        r"""__isub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _COPASI.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        r"""__add__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _COPASI.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        r"""
        __sub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator
        __sub__(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t
        """
        return _COPASI.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _COPASI:
_COPASI.SwigPyIterator_swigregister(SwigPyIterator)
class CUndoObjectInterface(object):
    r"""Proxy of C++ CUndoObjectInterface class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _COPASI.delete_CUndoObjectInterface

    def destruct(self):
        r"""destruct(CUndoObjectInterface self)"""
        return _COPASI.CUndoObjectInterface_destruct(self)

    def createUndoData(self, *args):
        r"""createUndoData(CUndoObjectInterface self, CUndoData undoData, CUndoData::Type const & type, CData oldData=CData(), CCore::Framework const & framework=ParticleNumbers)"""
        return _COPASI.CUndoObjectInterface_createUndoData(self, *args)

    def insert(self, data):
        r"""insert(CUndoObjectInterface self, CData data) -> CUndoObjectInterface"""
        return _COPASI.CUndoObjectInterface_insert(self, data)

    def updateIndex(self, index, pUndoObject):
        r"""updateIndex(CUndoObjectInterface self, size_t const & index, CUndoObjectInterface pUndoObject)"""
        return _COPASI.CUndoObjectInterface_updateIndex(self, index, pUndoObject)

    def getUuid(self):
        r"""getUuid(CUndoObjectInterface self) -> xg::Guid const &"""
        return _COPASI.CUndoObjectInterface_getUuid(self)

    def setUuid(self, *args):
        r"""
        setUuid(CUndoObjectInterface self, xg::Guid const & uuid) -> bool
        setUuid(CUndoObjectInterface self, std::string const & uuid) -> bool
        """
        return _COPASI.CUndoObjectInterface_setUuid(self, *args)

    def generateUuid(self):
        r"""generateUuid(CUndoObjectInterface self) -> bool"""
        return _COPASI.CUndoObjectInterface_generateUuid(self)

# Register CUndoObjectInterface in _COPASI:
_COPASI.CUndoObjectInterface_swigregister(CUndoObjectInterface)
class CDataStdVector(object):
    r"""Proxy of C++ std::vector< CData > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(CDataStdVector self) -> SwigPyIterator"""
        return _COPASI.CDataStdVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(CDataStdVector self) -> bool"""
        return _COPASI.CDataStdVector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(CDataStdVector self) -> bool"""
        return _COPASI.CDataStdVector___bool__(self)

    def __len__(self):
        r"""__len__(CDataStdVector self) -> std::vector< CData >::size_type"""
        return _COPASI.CDataStdVector___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(CDataStdVector self, std::vector< CData >::difference_type i, std::vector< CData >::difference_type j) -> CDataStdVector"""
        return _COPASI.CDataStdVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(CDataStdVector self, std::vector< CData >::difference_type i, std::vector< CData >::difference_type j)
        __setslice__(CDataStdVector self, std::vector< CData >::difference_type i, std::vector< CData >::difference_type j, CDataStdVector v)
        """
        return _COPASI.CDataStdVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(CDataStdVector self, std::vector< CData >::difference_type i, std::vector< CData >::difference_type j)"""
        return _COPASI.CDataStdVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(CDataStdVector self, std::vector< CData >::difference_type i)
        __delitem__(CDataStdVector self, SWIGPY_SLICEOBJECT * slice)
        """
        return _COPASI.CDataStdVector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(CDataStdVector self, SWIGPY_SLICEOBJECT * slice) -> CDataStdVector
        __getitem__(CDataStdVector self, std::vector< CData >::difference_type i) -> CData
        """
        return _COPASI.CDataStdVector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(CDataStdVector self, SWIGPY_SLICEOBJECT * slice, CDataStdVector v)
        __setitem__(CDataStdVector self, SWIGPY_SLICEOBJECT * slice)
        __setitem__(CDataStdVector self, std::vector< CData >::difference_type i, CData x)
        """
        return _COPASI.CDataStdVector___setitem__(self, *args)

    def pop(self):
        r"""pop(CDataStdVector self) -> CData"""
        return _COPASI.CDataStdVector_pop(self)

    def append(self, x):
        r"""append(CDataStdVector self, CData x)"""
        return _COPASI.CDataStdVector_append(self, x)

    def empty(self):
        r"""empty(CDataStdVector self) -> bool"""
        return _COPASI.CDataStdVector_empty(self)

    def size(self):
        r"""size(CDataStdVector self) -> std::vector< CData >::size_type"""
        return _COPASI.CDataStdVector_size(self)

    def swap(self, v):
        r"""swap(CDataStdVector self, CDataStdVector v)"""
        return _COPASI.CDataStdVector_swap(self, v)

    def rbegin(self):
        r"""rbegin(CDataStdVector self) -> std::vector< CData >::reverse_iterator"""
        return _COPASI.CDataStdVector_rbegin(self)

    def rend(self):
        r"""rend(CDataStdVector self) -> std::vector< CData >::reverse_iterator"""
        return _COPASI.CDataStdVector_rend(self)

    def clear(self):
        r"""clear(CDataStdVector self)"""
        return _COPASI.CDataStdVector_clear(self)

    def get_allocator(self):
        r"""get_allocator(CDataStdVector self) -> std::vector< CData >::allocator_type"""
        return _COPASI.CDataStdVector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(CDataStdVector self)"""
        return _COPASI.CDataStdVector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(CDataStdVector self, std::vector< CData >::iterator pos) -> std::vector< CData >::iterator
        erase(CDataStdVector self, std::vector< CData >::iterator first, std::vector< CData >::iterator last) -> std::vector< CData >::iterator
        """
        return _COPASI.CDataStdVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(CDataStdVector self) -> CDataStdVector
        __init__(CDataStdVector self, CDataStdVector other) -> CDataStdVector
        __init__(CDataStdVector self, std::vector< CData >::size_type size) -> CDataStdVector
        __init__(CDataStdVector self, std::vector< CData >::size_type size, CData value) -> CDataStdVector
        """
        _COPASI.CDataStdVector_swiginit(self, _COPASI.new_CDataStdVector(*args))

    def push_back(self, x):
        r"""push_back(CDataStdVector self, CData x)"""
        return _COPASI.CDataStdVector_push_back(self, x)

    def front(self):
        r"""front(CDataStdVector self) -> CData"""
        return _COPASI.CDataStdVector_front(self)

    def back(self):
        r"""back(CDataStdVector self) -> CData"""
        return _COPASI.CDataStdVector_back(self)

    def assign(self, n, x):
        r"""assign(CDataStdVector self, std::vector< CData >::size_type n, CData x)"""
        return _COPASI.CDataStdVector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(CDataStdVector self, std::vector< CData >::size_type new_size)
        resize(CDataStdVector self, std::vector< CData >::size_type new_size, CData x)
        """
        return _COPASI.CDataStdVector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(CDataStdVector self, std::vector< CData >::iterator pos, CData x) -> std::vector< CData >::iterator
        insert(CDataStdVector self, std::vector< CData >::iterator pos, std::vector< CData >::size_type n, CData x)
        """
        return _COPASI.CDataStdVector_insert(self, *args)

    def reserve(self, n):
        r"""reserve(CDataStdVector self, std::vector< CData >::size_type n)"""
        return _COPASI.CDataStdVector_reserve(self, n)

    def capacity(self):
        r"""capacity(CDataStdVector self) -> std::vector< CData >::size_type"""
        return _COPASI.CDataStdVector_capacity(self)
    __swig_destroy__ = _COPASI.delete_CDataStdVector

# Register CDataStdVector in _COPASI:
_COPASI.CDataStdVector_swigregister(CDataStdVector)
class CData(object):
    r"""Proxy of C++ CData class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    EXPRESSION = _COPASI.CData_EXPRESSION
    
    INITIAL_EXPRESSION = _COPASI.CData_INITIAL_EXPRESSION
    
    INITIAL_VALUE = _COPASI.CData_INITIAL_VALUE
    
    INITIAL_INTENSIVE_VALUE = _COPASI.CData_INITIAL_INTENSIVE_VALUE
    
    SIMULATION_TYPE = _COPASI.CData_SIMULATION_TYPE
    
    SPATIAL_DIMENSION = _COPASI.CData_SPATIAL_DIMENSION
    
    ADD_NOISE = _COPASI.CData_ADD_NOISE
    
    NOISE_EXPRESSION = _COPASI.CData_NOISE_EXPRESSION
    
    CHEMICAL_EQUATION = _COPASI.CData_CHEMICAL_EQUATION
    
    KINETIC_LAW = _COPASI.CData_KINETIC_LAW
    
    KINETIC_LAW_UNIT_TYPE = _COPASI.CData_KINETIC_LAW_UNIT_TYPE
    
    KINETIC_LAW_VARIABLE_MAPPING = _COPASI.CData_KINETIC_LAW_VARIABLE_MAPPING
    
    LOCAL_REACTION_PARAMETERS = _COPASI.CData_LOCAL_REACTION_PARAMETERS
    
    SCALING_COMPARTMENT = _COPASI.CData_SCALING_COMPARTMENT
    
    OBJECT_UUID = _COPASI.CData_OBJECT_UUID
    
    OBJECT_NAME = _COPASI.CData_OBJECT_NAME
    
    OBJECT_PARENT_CN = _COPASI.CData_OBJECT_PARENT_CN
    
    OBJECT_TYPE = _COPASI.CData_OBJECT_TYPE
    
    OBJECT_FLAG = _COPASI.CData_OBJECT_FLAG
    
    OBJECT_HASH = _COPASI.CData_OBJECT_HASH
    
    OBJECT_INDEX = _COPASI.CData_OBJECT_INDEX
    
    OBJECT_REFERENCES = _COPASI.CData_OBJECT_REFERENCES
    
    OBJECT_REFERENCE = _COPASI.CData_OBJECT_REFERENCE
    
    OBJECT_REFERENCE_CN = _COPASI.CData_OBJECT_REFERENCE_CN
    
    OBJECT_REFERENCE_INDEX = _COPASI.CData_OBJECT_REFERENCE_INDEX
    
    OBJECT_POINTER = _COPASI.CData_OBJECT_POINTER
    
    EVALUATION_TREE_TYPE = _COPASI.CData_EVALUATION_TREE_TYPE
    
    TASK_TYPE = _COPASI.CData_TASK_TYPE
    
    TASK_SCHEDULED = _COPASI.CData_TASK_SCHEDULED
    
    TASK_UPDATE_MODEL = _COPASI.CData_TASK_UPDATE_MODEL
    
    TASK_REPORT = _COPASI.CData_TASK_REPORT
    
    TASK_REPORT_TARGET = _COPASI.CData_TASK_REPORT_TARGET
    
    TASK_REPORT_APPEND = _COPASI.CData_TASK_REPORT_APPEND
    
    TASK_REPORT_CONFIRM_OVERWRITE = _COPASI.CData_TASK_REPORT_CONFIRM_OVERWRITE
    
    PROBLEM = _COPASI.CData_PROBLEM
    
    METHOD = _COPASI.CData_METHOD
    
    METHOD_TYPE = _COPASI.CData_METHOD_TYPE
    
    PLOT_TYPE = _COPASI.CData_PLOT_TYPE
    
    PLOT_ITEM_TYPE = _COPASI.CData_PLOT_ITEM_TYPE
    
    PARAMETER_TYPE = _COPASI.CData_PARAMETER_TYPE
    
    PARAMETER_ROLE = _COPASI.CData_PARAMETER_ROLE
    
    PARAMETER_USED = _COPASI.CData_PARAMETER_USED
    
    PARAMETER_VALUE = _COPASI.CData_PARAMETER_VALUE
    
    UNIT = _COPASI.CData_UNIT
    
    VOLUME_UNIT = _COPASI.CData_VOLUME_UNIT
    
    AREA_UNIT = _COPASI.CData_AREA_UNIT
    
    LENGTH_UNIT = _COPASI.CData_LENGTH_UNIT
    
    TIME_UNIT = _COPASI.CData_TIME_UNIT
    
    QUANTITY_UNIT = _COPASI.CData_QUANTITY_UNIT
    
    MODEL_TYPE = _COPASI.CData_MODEL_TYPE
    
    AVOGADRO_NUMBER = _COPASI.CData_AVOGADRO_NUMBER
    
    DIMENSIONALITY = _COPASI.CData_DIMENSIONALITY
    
    ARRAY_ELEMENT_INDEX = _COPASI.CData_ARRAY_ELEMENT_INDEX
    
    REPORT_SEPARATOR = _COPASI.CData_REPORT_SEPARATOR
    
    REPORT_IS_TABLE = _COPASI.CData_REPORT_IS_TABLE
    
    REPORT_SHOW_TITLE = _COPASI.CData_REPORT_SHOW_TITLE
    
    REPORT_PRECISION = _COPASI.CData_REPORT_PRECISION
    
    NOTES = _COPASI.CData_NOTES
    
    MIRIAM_RDF_XML = _COPASI.CData_MIRIAM_RDF_XML
    
    MIRIAM_PREDICATE = _COPASI.CData_MIRIAM_PREDICATE
    
    MIRIAM_RESOURCE = _COPASI.CData_MIRIAM_RESOURCE
    
    MIRIAM_DESCRIPTION = _COPASI.CData_MIRIAM_DESCRIPTION
    
    MIRIAM_ID = _COPASI.CData_MIRIAM_ID
    
    DATE = _COPASI.CData_DATE
    
    GIVEN_NAME = _COPASI.CData_GIVEN_NAME
    
    FAMILY_NAME = _COPASI.CData_FAMILY_NAME
    
    EMAIL = _COPASI.CData_EMAIL
    
    ORGANIZATION = _COPASI.CData_ORGANIZATION
    
    FRAMEWORK = _COPASI.CData_FRAMEWORK
    
    VALUE = _COPASI.CData_VALUE
    
    DELAY_ASSIGNMENT = _COPASI.CData_DELAY_ASSIGNMENT
    
    FIRE_AT_INITIALTIME = _COPASI.CData_FIRE_AT_INITIALTIME
    
    PERSISTENT_TRIGGER = _COPASI.CData_PERSISTENT_TRIGGER
    
    TRIGGER_EXPRESSION = _COPASI.CData_TRIGGER_EXPRESSION
    
    DELAY_EXPRESSION = _COPASI.CData_DELAY_EXPRESSION
    
    PRIORITY_EXPRESSION = _COPASI.CData_PRIORITY_EXPRESSION
    
    ASSIGNMENTS = _COPASI.CData_ASSIGNMENTS
    
    VECTOR_CONTENT = _COPASI.CData_VECTOR_CONTENT
    
    UNIT_SYMBOL = _COPASI.CData_UNIT_SYMBOL
    
    UNIT_EXPRESSION = _COPASI.CData_UNIT_EXPRESSION
    
    __SIZE = _COPASI.CData___SIZE
    

    def __init__(self, *args):
        r"""
        __init__(CData self) -> CData
        __init__(CData self, CData src) -> CData
        """
        _COPASI.CData_swiginit(self, _COPASI.new_CData(*args))
    __swig_destroy__ = _COPASI.delete_CData

    def __eq__(self, rhs):
        r"""__eq__(CData self, CData rhs) -> bool"""
        return _COPASI.CData___eq__(self, rhs)

    def __ne__(self, rhs):
        r"""__ne__(CData self, CData rhs) -> bool"""
        return _COPASI.CData___ne__(self, rhs)

    def getProperty(self, *args):
        r"""
        getProperty(CData self, std::string const & name) -> CDataValue
        getProperty(CData self, CData::Property const & property) -> CDataValue
        getProperty(CData self, std::string const & name) -> CDataValue
        getProperty(CData self, CData::Property const & property) -> CDataValue
        """
        return _COPASI.CData_getProperty(self, *args)

    def addProperty(self, *args):
        r"""
        addProperty(CData self, std::string const & name, CDataValue value) -> bool
        addProperty(CData self, CData::Property const & property, CDataValue value) -> bool
        """
        return _COPASI.CData_addProperty(self, *args)

    def appendData(self, data):
        r"""appendData(CData self, CData data) -> bool"""
        return _COPASI.CData_appendData(self, data)

    def removeProperty(self, *args):
        r"""
        removeProperty(CData self, std::string const & name) -> bool
        removeProperty(CData self, CData::Property const & property) -> bool
        """
        return _COPASI.CData_removeProperty(self, *args)

    def isSetProperty(self, *args):
        r"""
        isSetProperty(CData self, std::string const & name) -> bool
        isSetProperty(CData self, CData::Property const & property) -> bool
        """
        return _COPASI.CData_isSetProperty(self, *args)

    def empty(self):
        r"""empty(CData self) -> bool"""
        return _COPASI.CData_empty(self)

    def clear(self):
        r"""clear(CData self)"""
        return _COPASI.CData_clear(self)

    def hash(self):
        r"""hash(CData self) -> std::string"""
        return _COPASI.CData_hash(self)

# Register CData in _COPASI:
_COPASI.CData_swigregister(CData)
CData.PropertyName = _COPASI.cvar.CData_PropertyName

class CDataValueStdVector(object):
    r"""Proxy of C++ std::vector< CDataValue > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(CDataValueStdVector self) -> SwigPyIterator"""
        return _COPASI.CDataValueStdVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(CDataValueStdVector self) -> bool"""
        return _COPASI.CDataValueStdVector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(CDataValueStdVector self) -> bool"""
        return _COPASI.CDataValueStdVector___bool__(self)

    def __len__(self):
        r"""__len__(CDataValueStdVector self) -> std::vector< CDataValue >::size_type"""
        return _COPASI.CDataValueStdVector___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(CDataValueStdVector self, std::vector< CDataValue >::difference_type i, std::vector< CDataValue >::difference_type j) -> CDataValueStdVector"""
        return _COPASI.CDataValueStdVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(CDataValueStdVector self, std::vector< CDataValue >::difference_type i, std::vector< CDataValue >::difference_type j)
        __setslice__(CDataValueStdVector self, std::vector< CDataValue >::difference_type i, std::vector< CDataValue >::difference_type j, CDataValueStdVector v)
        """
        return _COPASI.CDataValueStdVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(CDataValueStdVector self, std::vector< CDataValue >::difference_type i, std::vector< CDataValue >::difference_type j)"""
        return _COPASI.CDataValueStdVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(CDataValueStdVector self, std::vector< CDataValue >::difference_type i)
        __delitem__(CDataValueStdVector self, SWIGPY_SLICEOBJECT * slice)
        """
        return _COPASI.CDataValueStdVector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(CDataValueStdVector self, SWIGPY_SLICEOBJECT * slice) -> CDataValueStdVector
        __getitem__(CDataValueStdVector self, std::vector< CDataValue >::difference_type i) -> CDataValue
        """
        return _COPASI.CDataValueStdVector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(CDataValueStdVector self, SWIGPY_SLICEOBJECT * slice, CDataValueStdVector v)
        __setitem__(CDataValueStdVector self, SWIGPY_SLICEOBJECT * slice)
        __setitem__(CDataValueStdVector self, std::vector< CDataValue >::difference_type i, CDataValue x)
        """
        return _COPASI.CDataValueStdVector___setitem__(self, *args)

    def pop(self):
        r"""pop(CDataValueStdVector self) -> CDataValue"""
        return _COPASI.CDataValueStdVector_pop(self)

    def append(self, x):
        r"""append(CDataValueStdVector self, CDataValue x)"""
        return _COPASI.CDataValueStdVector_append(self, x)

    def empty(self):
        r"""empty(CDataValueStdVector self) -> bool"""
        return _COPASI.CDataValueStdVector_empty(self)

    def size(self):
        r"""size(CDataValueStdVector self) -> std::vector< CDataValue >::size_type"""
        return _COPASI.CDataValueStdVector_size(self)

    def swap(self, v):
        r"""swap(CDataValueStdVector self, CDataValueStdVector v)"""
        return _COPASI.CDataValueStdVector_swap(self, v)

    def rbegin(self):
        r"""rbegin(CDataValueStdVector self) -> std::vector< CDataValue >::reverse_iterator"""
        return _COPASI.CDataValueStdVector_rbegin(self)

    def rend(self):
        r"""rend(CDataValueStdVector self) -> std::vector< CDataValue >::reverse_iterator"""
        return _COPASI.CDataValueStdVector_rend(self)

    def clear(self):
        r"""clear(CDataValueStdVector self)"""
        return _COPASI.CDataValueStdVector_clear(self)

    def get_allocator(self):
        r"""get_allocator(CDataValueStdVector self) -> std::vector< CDataValue >::allocator_type"""
        return _COPASI.CDataValueStdVector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(CDataValueStdVector self)"""
        return _COPASI.CDataValueStdVector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(CDataValueStdVector self, std::vector< CDataValue >::iterator pos) -> std::vector< CDataValue >::iterator
        erase(CDataValueStdVector self, std::vector< CDataValue >::iterator first, std::vector< CDataValue >::iterator last) -> std::vector< CDataValue >::iterator
        """
        return _COPASI.CDataValueStdVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(CDataValueStdVector self) -> CDataValueStdVector
        __init__(CDataValueStdVector self, CDataValueStdVector other) -> CDataValueStdVector
        __init__(CDataValueStdVector self, std::vector< CDataValue >::size_type size) -> CDataValueStdVector
        __init__(CDataValueStdVector self, std::vector< CDataValue >::size_type size, CDataValue value) -> CDataValueStdVector
        """
        _COPASI.CDataValueStdVector_swiginit(self, _COPASI.new_CDataValueStdVector(*args))

    def push_back(self, x):
        r"""push_back(CDataValueStdVector self, CDataValue x)"""
        return _COPASI.CDataValueStdVector_push_back(self, x)

    def front(self):
        r"""front(CDataValueStdVector self) -> CDataValue"""
        return _COPASI.CDataValueStdVector_front(self)

    def back(self):
        r"""back(CDataValueStdVector self) -> CDataValue"""
        return _COPASI.CDataValueStdVector_back(self)

    def assign(self, n, x):
        r"""assign(CDataValueStdVector self, std::vector< CDataValue >::size_type n, CDataValue x)"""
        return _COPASI.CDataValueStdVector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(CDataValueStdVector self, std::vector< CDataValue >::size_type new_size)
        resize(CDataValueStdVector self, std::vector< CDataValue >::size_type new_size, CDataValue x)
        """
        return _COPASI.CDataValueStdVector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(CDataValueStdVector self, std::vector< CDataValue >::iterator pos, CDataValue x) -> std::vector< CDataValue >::iterator
        insert(CDataValueStdVector self, std::vector< CDataValue >::iterator pos, std::vector< CDataValue >::size_type n, CDataValue x)
        """
        return _COPASI.CDataValueStdVector_insert(self, *args)

    def reserve(self, n):
        r"""reserve(CDataValueStdVector self, std::vector< CDataValue >::size_type n)"""
        return _COPASI.CDataValueStdVector_reserve(self, n)

    def capacity(self):
        r"""capacity(CDataValueStdVector self) -> std::vector< CDataValue >::size_type"""
        return _COPASI.CDataValueStdVector_capacity(self)
    __swig_destroy__ = _COPASI.delete_CDataValueStdVector

# Register CDataValueStdVector in _COPASI:
_COPASI.CDataValueStdVector_swigregister(CDataValueStdVector)
class CDataValue(object):
    r"""Proxy of C++ CDataValue class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    DOUBLE = _COPASI.CDataValue_DOUBLE
    
    INT = _COPASI.CDataValue_INT
    
    UINT = _COPASI.CDataValue_UINT
    
    BOOL = _COPASI.CDataValue_BOOL
    
    STRING = _COPASI.CDataValue_STRING
    
    DATA = _COPASI.CDataValue_DATA
    
    DATA_VALUES = _COPASI.CDataValue_DATA_VALUES
    
    DATA_VECTOR = _COPASI.CDataValue_DATA_VECTOR
    
    VOID_POINTER = _COPASI.CDataValue_VOID_POINTER
    
    INVALID = _COPASI.CDataValue_INVALID
    
    __SIZE = _COPASI.CDataValue___SIZE
    

    def __init__(self, *args):
        r"""
        __init__(CDataValue self, CDataValue::Type const & type=INVALID) -> CDataValue
        __init__(CDataValue self, CDataValue src) -> CDataValue
        __init__(CDataValue self, double const & value) -> CDataValue
        __init__(CDataValue self, int const & value) -> CDataValue
        __init__(CDataValue self, unsigned int const & value) -> CDataValue
        __init__(CDataValue self, bool const & value) -> CDataValue
        __init__(CDataValue self, std::string const & value) -> CDataValue
        __init__(CDataValue self, char const * value) -> CDataValue
        __init__(CDataValue self, CData value) -> CDataValue
        __init__(CDataValue self, CDataValueStdVector value) -> CDataValue
        __init__(CDataValue self, CDataStdVector value) -> CDataValue
        __init__(CDataValue self, void const * pVoidPointer) -> CDataValue
        """
        _COPASI.CDataValue_swiginit(self, _COPASI.new_CDataValue(*args))
    __swig_destroy__ = _COPASI.delete_CDataValue

    def toDouble(self):
        r"""toDouble(CDataValue self) -> double const &"""
        return _COPASI.CDataValue_toDouble(self)

    def toInt(self):
        r"""toInt(CDataValue self) -> int const &"""
        return _COPASI.CDataValue_toInt(self)

    def toUint(self):
        r"""toUint(CDataValue self) -> unsigned int const &"""
        return _COPASI.CDataValue_toUint(self)

    def toSizeT(self):
        r"""toSizeT(CDataValue self) -> size_t"""
        return _COPASI.CDataValue_toSizeT(self)

    def toBool(self):
        r"""toBool(CDataValue self) -> bool const &"""
        return _COPASI.CDataValue_toBool(self)

    def toString(self):
        r"""toString(CDataValue self) -> std::string const &"""
        return _COPASI.CDataValue_toString(self)

    def toDataValues(self):
        r"""toDataValues(CDataValue self) -> CDataValueStdVector"""
        return _COPASI.CDataValue_toDataValues(self)

    def toDataVector(self):
        r"""toDataVector(CDataValue self) -> CDataStdVector"""
        return _COPASI.CDataValue_toDataVector(self)

    def toVoidPointer(self):
        r"""toVoidPointer(CDataValue self) -> void const *"""
        return _COPASI.CDataValue_toVoidPointer(self)

    def raw(self):
        r"""raw(CDataValue self) -> void const *"""
        return _COPASI.CDataValue_raw(self)

    def getType(self):
        r"""getType(CDataValue self) -> CDataValue::Type const &"""
        return _COPASI.CDataValue_getType(self)

    def __eq__(self, rhs):
        r"""__eq__(CDataValue self, CDataValue rhs) -> bool"""
        return _COPASI.CDataValue___eq__(self, rhs)

    def __ne__(self, rhs):
        r"""__ne__(CDataValue self, CDataValue rhs) -> bool"""
        return _COPASI.CDataValue___ne__(self, rhs)

# Register CDataValue in _COPASI:
_COPASI.CDataValue_swigregister(CDataValue)
CDataValue.TypeName = _COPASI.cvar.CDataValue_TypeName

class CUndoData(object):
    r"""Proxy of C++ CUndoData class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Type_INSERT = _COPASI.CUndoData_Type_INSERT
    
    Type_CHANGE = _COPASI.CUndoData_Type_CHANGE
    
    Type_REMOVE = _COPASI.CUndoData_Type_REMOVE
    
    Type___SIZE = _COPASI.CUndoData_Type___SIZE
    

    @staticmethod
    def getObject(dataModel, data):
        r"""getObject(CDataModel dataModel, CData data) -> CUndoObjectInterface"""
        return _COPASI.CUndoData_getObject(dataModel, data)

    def __init__(self, *args):
        r"""
        __init__(CUndoData self) -> CUndoData
        __init__(CUndoData self, CUndoData::Type const & type, CUndoObjectInterface pObject, size_t const & authorId=(std::numeric_limits< size_t >::max())) -> CUndoData
        __init__(CUndoData self, CUndoData::Type const & type, CData data, size_t const & authorId=(std::numeric_limits< size_t >::max())) -> CUndoData
        __init__(CUndoData self, CUndoData src) -> CUndoData
        """
        _COPASI.CUndoData_swiginit(self, _COPASI.new_CUndoData(*args))
    __swig_destroy__ = _COPASI.delete_CUndoData

    def getType(self):
        r"""getType(CUndoData self) -> CUndoData::Type const &"""
        return _COPASI.CUndoData_getType(self)

    def addProperty(self, *args):
        r"""
        addProperty(CUndoData self, CData::Property const & property, CDataValue value) -> bool
        addProperty(CUndoData self, CData::Property const & property, CDataValue oldValue, CDataValue newValue) -> bool
        """
        return _COPASI.CUndoData_addProperty(self, *args)

    def removeProperty(self, property):
        r"""removeProperty(CUndoData self, CData::Property const & property) -> bool"""
        return _COPASI.CUndoData_removeProperty(self, property)

    def isSetProperty(self, property):
        r"""isSetProperty(CUndoData self, CData::Property const & property) -> bool"""
        return _COPASI.CUndoData_isSetProperty(self, property)

    def appendData(self, *args):
        r"""
        appendData(CUndoData self, CData data) -> bool
        appendData(CUndoData self, CData oldData, CData newData) -> bool
        """
        return _COPASI.CUndoData_appendData(self, *args)

    def addPreProcessData(self, *args):
        r"""
        addPreProcessData(CUndoData self, CUndoData dependentData) -> bool
        addPreProcessData(CUndoData self, std::vector< CUndoData,std::allocator< CUndoData > > & dependentData) -> bool
        """
        return _COPASI.CUndoData_addPreProcessData(self, *args)

    def addPostProcessData(self, *args):
        r"""
        addPostProcessData(CUndoData self, CUndoData dependentData) -> bool
        addPostProcessData(CUndoData self, std::vector< CUndoData,std::allocator< CUndoData > > & dependentData) -> bool
        """
        return _COPASI.CUndoData_addPostProcessData(self, *args)

    def getOldData(self):
        r"""getOldData(CUndoData self) -> CData"""
        return _COPASI.CUndoData_getOldData(self)

    def getNewData(self):
        r"""getNewData(CUndoData self) -> CData"""
        return _COPASI.CUndoData_getNewData(self)

    def getPreProcessData(self, *args):
        r"""
        getPreProcessData(CUndoData self) -> std::vector< CUndoData,std::allocator< CUndoData > > const
        getPreProcessData(CUndoData self) -> std::vector< CUndoData,std::allocator< CUndoData > > &
        """
        return _COPASI.CUndoData_getPreProcessData(self, *args)

    def getPostProcessData(self, *args):
        r"""
        getPostProcessData(CUndoData self) -> std::vector< CUndoData,std::allocator< CUndoData > > const
        getPostProcessData(CUndoData self) -> std::vector< CUndoData,std::allocator< CUndoData > > &
        """
        return _COPASI.CUndoData_getPostProcessData(self, *args)

    def getChangedProperties(self):
        r"""getChangedProperties(CUndoData self) -> StringSet"""
        return _COPASI.CUndoData_getChangedProperties(self)

    def isChangedProperty(self, property):
        r"""isChangedProperty(CUndoData self, CData::Property const & property) -> bool"""
        return _COPASI.CUndoData_isChangedProperty(self, property)

    def apply(self, dataModel, changes, execute):
        r"""apply(CUndoData self, CDataModel dataModel, CUndoData::CChangeSet & changes, bool const & execute) -> bool"""
        return _COPASI.CUndoData_apply(self, dataModel, changes, execute)

    def undo(self, dataModel, changes, execute):
        r"""undo(CUndoData self, CDataModel dataModel, CUndoData::CChangeSet & changes, bool const & execute) -> bool"""
        return _COPASI.CUndoData_undo(self, dataModel, changes, execute)

    def addMetaDataProperty(self, property, value):
        r"""addMetaDataProperty(CUndoData self, std::string const & property, CDataValue value) -> bool"""
        return _COPASI.CUndoData_addMetaDataProperty(self, property, value)

    def appendMetaData(self, data):
        r"""appendMetaData(CUndoData self, CData data) -> bool"""
        return _COPASI.CUndoData_appendMetaData(self, data)

    def removeMetaDataProperty(self, property):
        r"""removeMetaDataProperty(CUndoData self, std::string const & property) -> bool"""
        return _COPASI.CUndoData_removeMetaDataProperty(self, property)

    def isSetMetaDataProperty(self, property):
        r"""isSetMetaDataProperty(CUndoData self, std::string const & property) -> bool"""
        return _COPASI.CUndoData_isSetMetaDataProperty(self, property)

    def getMetaDataProperty(self, property):
        r"""getMetaDataProperty(CUndoData self, std::string const & property) -> CDataValue"""
        return _COPASI.CUndoData_getMetaDataProperty(self, property)

    def getMetaData(self):
        r"""getMetaData(CUndoData self) -> CData"""
        return _COPASI.CUndoData_getMetaData(self)

    def getTime(self):
        r"""getTime(CUndoData self) -> std::time_t const &"""
        return _COPASI.CUndoData_getTime(self)

    def getLocalTime(self):
        r"""getLocalTime(CUndoData self) -> std::tm *"""
        return _COPASI.CUndoData_getLocalTime(self)

    def getUTCTime(self):
        r"""getUTCTime(CUndoData self) -> std::tm *"""
        return _COPASI.CUndoData_getUTCTime(self)

    def getAuthorID(self):
        r"""getAuthorID(CUndoData self) -> size_t const &"""
        return _COPASI.CUndoData_getAuthorID(self)

    def getObjectDisplayName(self):
        r"""getObjectDisplayName(CUndoData self) -> std::string"""
        return _COPASI.CUndoData_getObjectDisplayName(self)

    def getObjectCN(self, apply):
        r"""getObjectCN(CUndoData self, bool const & apply) -> std::string"""
        return _COPASI.CUndoData_getObjectCN(self, apply)

    def getObjectType(self):
        r"""getObjectType(CUndoData self) -> std::string"""
        return _COPASI.CUndoData_getObjectType(self)

    def __lt__(self, rhs):
        r"""__lt__(CUndoData self, CUndoData rhs) -> bool"""
        return _COPASI.CUndoData___lt__(self, rhs)

    def empty(self):
        r"""empty(CUndoData self) -> bool"""
        return _COPASI.CUndoData_empty(self)

    def clear(self):
        r"""clear(CUndoData self)"""
        return _COPASI.CUndoData_clear(self)

# Register CUndoData in _COPASI:
_COPASI.CUndoData_swigregister(CUndoData)
CUndoData.TypeName = _COPASI.cvar.CUndoData_TypeName

class CObjectInterface(object, metaclass=AutoProperty):
    r"""Proxy of C++ CObjectInterface class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def DataObject(pInterface):
        r"""DataObject(CObjectInterface pInterface) -> CDataObject"""
        return _COPASI.CObjectInterface_DataObject(pInterface)

    @staticmethod
    def GetObjectFromCN(listOfContainer, objName):
        r"""GetObjectFromCN(ContainerList listOfContainer, CCommonName objName) -> CObjectInterface"""
        return _COPASI.CObjectInterface_GetObjectFromCN(listOfContainer, objName)
    __swig_destroy__ = _COPASI.delete_CObjectInterface

    def calculateValue(self):
        r"""calculateValue(CObjectInterface self)"""
        return _COPASI.CObjectInterface_calculateValue(self)

    def getCN(self):
        r"""getCN(CObjectInterface self) -> CCommonName"""
        return _COPASI.CObjectInterface_getCN(self)

    def getObject(self, cn):
        r"""getObject(CObjectInterface self, CCommonName cn) -> CObjectInterface"""
        return _COPASI.CObjectInterface_getObject(self, cn)

    def getValuePointer(self):
        r"""getValuePointer(CObjectInterface self) -> void *"""
        return _COPASI.CObjectInterface_getValuePointer(self)

    def getDataObject(self):
        r"""getDataObject(CObjectInterface self) -> CDataObject"""
        return _COPASI.CObjectInterface_getDataObject(self)

    def getObjectDisplayName(self):
        r"""getObjectDisplayName(CObjectInterface self) -> std::string"""
        return _COPASI.CObjectInterface_getObjectDisplayName(self)

    def getValidity(self):
        r"""getValidity(CObjectInterface self) -> CValidity"""
        return _COPASI.CObjectInterface_getValidity(self)

    def validityChanged(self, changedValidity):
        r"""validityChanged(CObjectInterface self, CValidity changedValidity)"""
        return _COPASI.CObjectInterface_validityChanged(self, changedValidity)

    __metaclass__ = AutoProperty


    def toObject(self):
        r"""toObject(CObjectInterface self) -> CDataObject"""
        return _COPASI.CObjectInterface_toObject(self)

    def printToString(self):
        r"""printToString(CObjectInterface self) -> std::string"""
        return _COPASI.CObjectInterface_printToString(self)

    def getBoolValue(self):
        r"""getBoolValue(CObjectInterface self) -> bool"""
        return _COPASI.CObjectInterface_getBoolValue(self)

    def setBoolValue(self, value):
        r"""setBoolValue(CObjectInterface self, bool value) -> bool"""
        return _COPASI.CObjectInterface_setBoolValue(self, value)

    def getIntValue(self):
        r"""getIntValue(CObjectInterface self) -> int"""
        return _COPASI.CObjectInterface_getIntValue(self)

    def setIntValue(self, value):
        r"""setIntValue(CObjectInterface self, int value) -> bool"""
        return _COPASI.CObjectInterface_setIntValue(self, value)

    def getDblValue(self):
        r"""getDblValue(CObjectInterface self) -> double"""
        return _COPASI.CObjectInterface_getDblValue(self)

    def setDblValue(self, value):
        r"""setDblValue(CObjectInterface self, double value) -> bool"""
        return _COPASI.CObjectInterface_setDblValue(self, value)

# Register CObjectInterface in _COPASI:
_COPASI.CObjectInterface_swigregister(CObjectInterface)
class CIssue(object):
    r"""Proxy of C++ CIssue class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CIssue self, CIssue::eSeverity const & severity=Success, CIssue::eKind const & kind=Unknown) -> CIssue
        __init__(CIssue self, CIssue src) -> CIssue
        """
        _COPASI.CIssue_swiginit(self, _COPASI.new_CIssue(*args))
    __swig_destroy__ = _COPASI.delete_CIssue

    def __iand__(self, rhs):
        r"""__iand__(CIssue self, CIssue rhs) -> CIssue"""
        return _COPASI.CIssue___iand__(self, rhs)

    def isSuccess(self):
        r"""isSuccess(CIssue self) -> bool"""
        return _COPASI.CIssue_isSuccess(self)

    def __eq__(self, rhs):
        r"""__eq__(CIssue self, CIssue rhs) -> bool"""
        return _COPASI.CIssue___eq__(self, rhs)

    def isError(self):
        r"""isError(CIssue self) -> bool"""
        return _COPASI.CIssue_isError(self)

    def getSeverity(self):
        r"""getSeverity(CIssue self) -> CIssue::eSeverity const &"""
        return _COPASI.CIssue_getSeverity(self)

    def getKind(self):
        r"""getKind(CIssue self) -> CIssue::eKind const &"""
        return _COPASI.CIssue_getKind(self)

# Register CIssue in _COPASI:
_COPASI.CIssue_swigregister(CIssue)
CIssue.severityNames = _COPASI.cvar.CIssue_severityNames

class CValidity(object):
    r"""Proxy of C++ CValidity class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CValidity self, CObjectInterface pObjectInterface=None) -> CValidity
        __init__(CValidity self, CValidity src, CObjectInterface pObjectInterface=None) -> CValidity
        """
        _COPASI.CValidity_swiginit(self, _COPASI.new_CValidity(*args))
    __swig_destroy__ = _COPASI.delete_CValidity

    def clear(self):
        r"""clear(CValidity self)"""
        return _COPASI.CValidity_clear(self)

    def empty(self):
        r"""empty(CValidity self) -> bool"""
        return _COPASI.CValidity_empty(self)

    def add(self, issue):
        r"""add(CValidity self, CIssue issue)"""
        return _COPASI.CValidity_add(self, issue)

    def remove(self, *args):
        r"""
        remove(CValidity self, CIssue issue)
        remove(CValidity self, CValidity::Severity const & severity, CValidity::Kind const & kind)
        """
        return _COPASI.CValidity_remove(self, *args)

    def getHighestSeverity(self, *args):
        r"""getHighestSeverity(CValidity self, CValidity::Severity const & filterSeverity=CValidity::Severity::All, CValidity::Kind const & filterKind=CValidity::Kind::All) -> CIssue::eSeverity"""
        return _COPASI.CValidity_getHighestSeverity(self, *args)

    def get(self, severity):
        r"""get(CValidity self, CIssue::eSeverity const & severity) -> CValidity::Kind const &"""
        return _COPASI.CValidity_get(self, severity)

    def getIssueMessages(self, *args):
        r"""getIssueMessages(CValidity self, CValidity::Severity const & severityFilter=Severity::All, CValidity::Kind const & kindFilter=Kind::All) -> std::string const"""
        return _COPASI.CValidity_getIssueMessages(self, *args)

    def __ior__(self, rhs):
        r"""__ior__(CValidity self, CValidity rhs) -> CValidity"""
        return _COPASI.CValidity___ior__(self, rhs)

    def getFirstWorstIssue(self):
        r"""getFirstWorstIssue(CValidity self) -> CIssue"""
        return _COPASI.CValidity_getFirstWorstIssue(self)

# Register CValidity in _COPASI:
_COPASI.CValidity_swigregister(CValidity)
class CCommonName(object):
    r"""Proxy of C++ CCommonName class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def nameFromCN(cn):
        r"""nameFromCN(CCommonName cn) -> std::string"""
        return _COPASI.CCommonName_nameFromCN(cn)

    @staticmethod
    def compartmentNameFromCN(cn):
        r"""compartmentNameFromCN(CCommonName cn) -> std::string"""
        return _COPASI.CCommonName_compartmentNameFromCN(cn)
    __swig_destroy__ = _COPASI.delete_CCommonName

    def __init__(self, *args):
        r"""
        __init__(CCommonName self) -> CCommonName
        __init__(CCommonName self, CCommonName src) -> CCommonName
        __init__(CCommonName self, char const * name) -> CCommonName
        __init__(CCommonName self, std::string const & name) -> CCommonName
        """
        _COPASI.CCommonName_swiginit(self, _COPASI.new_CCommonName(*args))

    def getPrimary(self):
        r"""getPrimary(CCommonName self) -> CCommonName"""
        return _COPASI.CCommonName_getPrimary(self)

    def getRemainder(self):
        r"""getRemainder(CCommonName self) -> CCommonName"""
        return _COPASI.CCommonName_getRemainder(self)

    def getObjectType(self):
        r"""getObjectType(CCommonName self) -> std::string"""
        return _COPASI.CCommonName_getObjectType(self)

    def getObjectName(self):
        r"""getObjectName(CCommonName self) -> std::string"""
        return _COPASI.CCommonName_getObjectName(self)

    def getElementIndex(self, pos=0):
        r"""getElementIndex(CCommonName self, size_t const & pos=0) -> size_t"""
        return _COPASI.CCommonName_getElementIndex(self, pos)

    def getElementName(self, pos, unescape=True):
        r"""getElementName(CCommonName self, size_t const & pos, bool const & unescape=True) -> std::string"""
        return _COPASI.CCommonName_getElementName(self, pos, unescape)

    def split(self, parentCN, objectType, objectName):
        r"""split(CCommonName self, CCommonName parentCN, std::string & objectType, std::string & objectName)"""
        return _COPASI.CCommonName_split(self, parentCN, objectType, objectName)

    @staticmethod
    def escape(name):
        r"""escape(std::string const & name) -> std::string"""
        return _COPASI.CCommonName_escape(name)

    @staticmethod
    def unescape(name):
        r"""unescape(std::string const & name) -> std::string"""
        return _COPASI.CCommonName_unescape(name)

    @staticmethod
    def fromData(data):
        r"""fromData(CData data) -> std::string"""
        return _COPASI.CCommonName_fromData(data)

    @staticmethod
    def construct(parent, objectType, objectName):
        r"""construct(CCommonName parent, std::string const & objectType, std::string const & objectName) -> std::string"""
        return _COPASI.CCommonName_construct(parent, objectType, objectName)

    def findNext(self, toFind, pos=0):
        r"""findNext(CCommonName self, std::string const & toFind, std::string::size_type const & pos=0) -> std::string::size_type"""
        return _COPASI.CCommonName_findNext(self, toFind, pos)

    def findPrevious(self, *args):
        r"""findPrevious(CCommonName self, std::string const & toFind, std::string::size_type const & pos=std::string::npos) -> std::string::size_type"""
        return _COPASI.CCommonName_findPrevious(self, *args)

    __metaclass__ = AutoProperty


    def getString(self):
        r"""getString(CCommonName self) -> std::string"""
        return _COPASI.CCommonName_getString(self)

    def __str__(self):
      return self.getString()
    def __repr__(self):
      return self.getString()


# Register CCommonName in _COPASI:
_COPASI.CCommonName_swigregister(CCommonName)
class CRegisteredCommonName(CCommonName):
    r"""Proxy of C++ CRegisteredCommonName class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _COPASI.delete_CRegisteredCommonName

    def __init__(self, *args):
        r"""
        __init__(CRegisteredCommonName self) -> CRegisteredCommonName
        __init__(CRegisteredCommonName self, CRegisteredCommonName src) -> CRegisteredCommonName
        __init__(CRegisteredCommonName self, std::string const & name) -> CRegisteredCommonName
        """
        _COPASI.CRegisteredCommonName_swiginit(self, _COPASI.new_CRegisteredCommonName(*args))

    @staticmethod
    def setEnabled(enabled):
        r"""setEnabled(bool const & enabled)"""
        return _COPASI.CRegisteredCommonName_setEnabled(enabled)

    @staticmethod
    def isEnabled():
        r"""isEnabled() -> bool const &"""
        return _COPASI.CRegisteredCommonName_isEnabled()

    @staticmethod
    def handle(oldCN, newCN):
        r"""handle(std::string const & oldCN, std::string const & newCN)"""
        return _COPASI.CRegisteredCommonName_handle(oldCN, newCN)

    @staticmethod
    def sanitizeObjectNames():
        r"""sanitizeObjectNames()"""
        return _COPASI.CRegisteredCommonName_sanitizeObjectNames()

    @staticmethod
    def registerHandler(pRenameHandler):
        r"""registerHandler(CRegisteredCommonName::RenameInterface * pRenameHandler)"""
        return _COPASI.CRegisteredCommonName_registerHandler(pRenameHandler)

    @staticmethod
    def deregisterHandler(pRenameHandler):
        r"""deregisterHandler(CRegisteredCommonName::RenameInterface * pRenameHandler)"""
        return _COPASI.CRegisteredCommonName_deregisterHandler(pRenameHandler)

    def __str__(self):
      return self.getString()
    def __repr__(self):
      return self.getString()


# Register CRegisteredCommonName in _COPASI:
_COPASI.CRegisteredCommonName_swigregister(CRegisteredCommonName)
class ReportItemVector(object):
    r"""Proxy of C++ std::vector< CRegisteredCommonName > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(ReportItemVector self) -> SwigPyIterator"""
        return _COPASI.ReportItemVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(ReportItemVector self) -> bool"""
        return _COPASI.ReportItemVector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(ReportItemVector self) -> bool"""
        return _COPASI.ReportItemVector___bool__(self)

    def __len__(self):
        r"""__len__(ReportItemVector self) -> std::vector< CRegisteredCommonName >::size_type"""
        return _COPASI.ReportItemVector___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(ReportItemVector self, std::vector< CRegisteredCommonName >::difference_type i, std::vector< CRegisteredCommonName >::difference_type j) -> ReportItemVector"""
        return _COPASI.ReportItemVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(ReportItemVector self, std::vector< CRegisteredCommonName >::difference_type i, std::vector< CRegisteredCommonName >::difference_type j)
        __setslice__(ReportItemVector self, std::vector< CRegisteredCommonName >::difference_type i, std::vector< CRegisteredCommonName >::difference_type j, ReportItemVector v)
        """
        return _COPASI.ReportItemVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(ReportItemVector self, std::vector< CRegisteredCommonName >::difference_type i, std::vector< CRegisteredCommonName >::difference_type j)"""
        return _COPASI.ReportItemVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(ReportItemVector self, std::vector< CRegisteredCommonName >::difference_type i)
        __delitem__(ReportItemVector self, SWIGPY_SLICEOBJECT * slice)
        """
        return _COPASI.ReportItemVector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(ReportItemVector self, SWIGPY_SLICEOBJECT * slice) -> ReportItemVector
        __getitem__(ReportItemVector self, std::vector< CRegisteredCommonName >::difference_type i) -> CRegisteredCommonName
        """
        return _COPASI.ReportItemVector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(ReportItemVector self, SWIGPY_SLICEOBJECT * slice, ReportItemVector v)
        __setitem__(ReportItemVector self, SWIGPY_SLICEOBJECT * slice)
        __setitem__(ReportItemVector self, std::vector< CRegisteredCommonName >::difference_type i, CRegisteredCommonName x)
        """
        return _COPASI.ReportItemVector___setitem__(self, *args)

    def pop(self):
        r"""pop(ReportItemVector self) -> CRegisteredCommonName"""
        return _COPASI.ReportItemVector_pop(self)

    def append(self, x):
        r"""append(ReportItemVector self, CRegisteredCommonName x)"""
        return _COPASI.ReportItemVector_append(self, x)

    def empty(self):
        r"""empty(ReportItemVector self) -> bool"""
        return _COPASI.ReportItemVector_empty(self)

    def size(self):
        r"""size(ReportItemVector self) -> std::vector< CRegisteredCommonName >::size_type"""
        return _COPASI.ReportItemVector_size(self)

    def swap(self, v):
        r"""swap(ReportItemVector self, ReportItemVector v)"""
        return _COPASI.ReportItemVector_swap(self, v)

    def rbegin(self):
        r"""rbegin(ReportItemVector self) -> std::vector< CRegisteredCommonName >::reverse_iterator"""
        return _COPASI.ReportItemVector_rbegin(self)

    def rend(self):
        r"""rend(ReportItemVector self) -> std::vector< CRegisteredCommonName >::reverse_iterator"""
        return _COPASI.ReportItemVector_rend(self)

    def clear(self):
        r"""clear(ReportItemVector self)"""
        return _COPASI.ReportItemVector_clear(self)

    def get_allocator(self):
        r"""get_allocator(ReportItemVector self) -> std::vector< CRegisteredCommonName >::allocator_type"""
        return _COPASI.ReportItemVector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(ReportItemVector self)"""
        return _COPASI.ReportItemVector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(ReportItemVector self, std::vector< CRegisteredCommonName >::iterator pos) -> std::vector< CRegisteredCommonName >::iterator
        erase(ReportItemVector self, std::vector< CRegisteredCommonName >::iterator first, std::vector< CRegisteredCommonName >::iterator last) -> std::vector< CRegisteredCommonName >::iterator
        """
        return _COPASI.ReportItemVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(ReportItemVector self) -> ReportItemVector
        __init__(ReportItemVector self, ReportItemVector other) -> ReportItemVector
        __init__(ReportItemVector self, std::vector< CRegisteredCommonName >::size_type size) -> ReportItemVector
        __init__(ReportItemVector self, std::vector< CRegisteredCommonName >::size_type size, CRegisteredCommonName value) -> ReportItemVector
        """
        _COPASI.ReportItemVector_swiginit(self, _COPASI.new_ReportItemVector(*args))

    def push_back(self, x):
        r"""push_back(ReportItemVector self, CRegisteredCommonName x)"""
        return _COPASI.ReportItemVector_push_back(self, x)

    def front(self):
        r"""front(ReportItemVector self) -> CRegisteredCommonName"""
        return _COPASI.ReportItemVector_front(self)

    def back(self):
        r"""back(ReportItemVector self) -> CRegisteredCommonName"""
        return _COPASI.ReportItemVector_back(self)

    def assign(self, n, x):
        r"""assign(ReportItemVector self, std::vector< CRegisteredCommonName >::size_type n, CRegisteredCommonName x)"""
        return _COPASI.ReportItemVector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(ReportItemVector self, std::vector< CRegisteredCommonName >::size_type new_size)
        resize(ReportItemVector self, std::vector< CRegisteredCommonName >::size_type new_size, CRegisteredCommonName x)
        """
        return _COPASI.ReportItemVector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(ReportItemVector self, std::vector< CRegisteredCommonName >::iterator pos, CRegisteredCommonName x) -> std::vector< CRegisteredCommonName >::iterator
        insert(ReportItemVector self, std::vector< CRegisteredCommonName >::iterator pos, std::vector< CRegisteredCommonName >::size_type n, CRegisteredCommonName x)
        """
        return _COPASI.ReportItemVector_insert(self, *args)

    def reserve(self, n):
        r"""reserve(ReportItemVector self, std::vector< CRegisteredCommonName >::size_type n)"""
        return _COPASI.ReportItemVector_reserve(self, n)

    def capacity(self):
        r"""capacity(ReportItemVector self) -> std::vector< CRegisteredCommonName >::size_type"""
        return _COPASI.ReportItemVector_capacity(self)
    __swig_destroy__ = _COPASI.delete_ReportItemVector

# Register ReportItemVector in _COPASI:
_COPASI.ReportItemVector_swigregister(ReportItemVector)
class VectorOfReportItemVectors(object):
    r"""Proxy of C++ std::vector< std::vector< CRegisteredCommonName > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(VectorOfReportItemVectors self) -> SwigPyIterator"""
        return _COPASI.VectorOfReportItemVectors_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(VectorOfReportItemVectors self) -> bool"""
        return _COPASI.VectorOfReportItemVectors___nonzero__(self)

    def __bool__(self):
        r"""__bool__(VectorOfReportItemVectors self) -> bool"""
        return _COPASI.VectorOfReportItemVectors___bool__(self)

    def __len__(self):
        r"""__len__(VectorOfReportItemVectors self) -> std::vector< std::vector< CRegisteredCommonName > >::size_type"""
        return _COPASI.VectorOfReportItemVectors___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(VectorOfReportItemVectors self, std::vector< std::vector< CRegisteredCommonName > >::difference_type i, std::vector< std::vector< CRegisteredCommonName > >::difference_type j) -> VectorOfReportItemVectors"""
        return _COPASI.VectorOfReportItemVectors___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(VectorOfReportItemVectors self, std::vector< std::vector< CRegisteredCommonName > >::difference_type i, std::vector< std::vector< CRegisteredCommonName > >::difference_type j)
        __setslice__(VectorOfReportItemVectors self, std::vector< std::vector< CRegisteredCommonName > >::difference_type i, std::vector< std::vector< CRegisteredCommonName > >::difference_type j, VectorOfReportItemVectors v)
        """
        return _COPASI.VectorOfReportItemVectors___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(VectorOfReportItemVectors self, std::vector< std::vector< CRegisteredCommonName > >::difference_type i, std::vector< std::vector< CRegisteredCommonName > >::difference_type j)"""
        return _COPASI.VectorOfReportItemVectors___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(VectorOfReportItemVectors self, std::vector< std::vector< CRegisteredCommonName > >::difference_type i)
        __delitem__(VectorOfReportItemVectors self, SWIGPY_SLICEOBJECT * slice)
        """
        return _COPASI.VectorOfReportItemVectors___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(VectorOfReportItemVectors self, SWIGPY_SLICEOBJECT * slice) -> VectorOfReportItemVectors
        __getitem__(VectorOfReportItemVectors self, std::vector< std::vector< CRegisteredCommonName > >::difference_type i) -> ReportItemVector
        """
        return _COPASI.VectorOfReportItemVectors___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(VectorOfReportItemVectors self, SWIGPY_SLICEOBJECT * slice, VectorOfReportItemVectors v)
        __setitem__(VectorOfReportItemVectors self, SWIGPY_SLICEOBJECT * slice)
        __setitem__(VectorOfReportItemVectors self, std::vector< std::vector< CRegisteredCommonName > >::difference_type i, ReportItemVector x)
        """
        return _COPASI.VectorOfReportItemVectors___setitem__(self, *args)

    def pop(self):
        r"""pop(VectorOfReportItemVectors self) -> ReportItemVector"""
        return _COPASI.VectorOfReportItemVectors_pop(self)

    def append(self, x):
        r"""append(VectorOfReportItemVectors self, ReportItemVector x)"""
        return _COPASI.VectorOfReportItemVectors_append(self, x)

    def empty(self):
        r"""empty(VectorOfReportItemVectors self) -> bool"""
        return _COPASI.VectorOfReportItemVectors_empty(self)

    def size(self):
        r"""size(VectorOfReportItemVectors self) -> std::vector< std::vector< CRegisteredCommonName > >::size_type"""
        return _COPASI.VectorOfReportItemVectors_size(self)

    def swap(self, v):
        r"""swap(VectorOfReportItemVectors self, VectorOfReportItemVectors v)"""
        return _COPASI.VectorOfReportItemVectors_swap(self, v)

    def rbegin(self):
        r"""rbegin(VectorOfReportItemVectors self) -> std::vector< std::vector< CRegisteredCommonName > >::reverse_iterator"""
        return _COPASI.VectorOfReportItemVectors_rbegin(self)

    def rend(self):
        r"""rend(VectorOfReportItemVectors self) -> std::vector< std::vector< CRegisteredCommonName > >::reverse_iterator"""
        return _COPASI.VectorOfReportItemVectors_rend(self)

    def clear(self):
        r"""clear(VectorOfReportItemVectors self)"""
        return _COPASI.VectorOfReportItemVectors_clear(self)

    def get_allocator(self):
        r"""get_allocator(VectorOfReportItemVectors self) -> std::vector< std::vector< CRegisteredCommonName > >::allocator_type"""
        return _COPASI.VectorOfReportItemVectors_get_allocator(self)

    def pop_back(self):
        r"""pop_back(VectorOfReportItemVectors self)"""
        return _COPASI.VectorOfReportItemVectors_pop_back(self)

    def erase(self, *args):
        r"""
        erase(VectorOfReportItemVectors self, std::vector< std::vector< CRegisteredCommonName > >::iterator pos) -> std::vector< std::vector< CRegisteredCommonName > >::iterator
        erase(VectorOfReportItemVectors self, std::vector< std::vector< CRegisteredCommonName > >::iterator first, std::vector< std::vector< CRegisteredCommonName > >::iterator last) -> std::vector< std::vector< CRegisteredCommonName > >::iterator
        """
        return _COPASI.VectorOfReportItemVectors_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(VectorOfReportItemVectors self) -> VectorOfReportItemVectors
        __init__(VectorOfReportItemVectors self, VectorOfReportItemVectors other) -> VectorOfReportItemVectors
        __init__(VectorOfReportItemVectors self, std::vector< std::vector< CRegisteredCommonName > >::size_type size) -> VectorOfReportItemVectors
        __init__(VectorOfReportItemVectors self, std::vector< std::vector< CRegisteredCommonName > >::size_type size, ReportItemVector value) -> VectorOfReportItemVectors
        """
        _COPASI.VectorOfReportItemVectors_swiginit(self, _COPASI.new_VectorOfReportItemVectors(*args))

    def push_back(self, x):
        r"""push_back(VectorOfReportItemVectors self, ReportItemVector x)"""
        return _COPASI.VectorOfReportItemVectors_push_back(self, x)

    def front(self):
        r"""front(VectorOfReportItemVectors self) -> ReportItemVector"""
        return _COPASI.VectorOfReportItemVectors_front(self)

    def back(self):
        r"""back(VectorOfReportItemVectors self) -> ReportItemVector"""
        return _COPASI.VectorOfReportItemVectors_back(self)

    def assign(self, n, x):
        r"""assign(VectorOfReportItemVectors self, std::vector< std::vector< CRegisteredCommonName > >::size_type n, ReportItemVector x)"""
        return _COPASI.VectorOfReportItemVectors_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(VectorOfReportItemVectors self, std::vector< std::vector< CRegisteredCommonName > >::size_type new_size)
        resize(VectorOfReportItemVectors self, std::vector< std::vector< CRegisteredCommonName > >::size_type new_size, ReportItemVector x)
        """
        return _COPASI.VectorOfReportItemVectors_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(VectorOfReportItemVectors self, std::vector< std::vector< CRegisteredCommonName > >::iterator pos, ReportItemVector x) -> std::vector< std::vector< CRegisteredCommonName > >::iterator
        insert(VectorOfReportItemVectors self, std::vector< std::vector< CRegisteredCommonName > >::iterator pos, std::vector< std::vector< CRegisteredCommonName > >::size_type n, ReportItemVector x)
        """
        return _COPASI.VectorOfReportItemVectors_insert(self, *args)

    def reserve(self, n):
        r"""reserve(VectorOfReportItemVectors self, std::vector< std::vector< CRegisteredCommonName > >::size_type n)"""
        return _COPASI.VectorOfReportItemVectors_reserve(self, n)

    def capacity(self):
        r"""capacity(VectorOfReportItemVectors self) -> std::vector< std::vector< CRegisteredCommonName > >::size_type"""
        return _COPASI.VectorOfReportItemVectors_capacity(self)
    __swig_destroy__ = _COPASI.delete_VectorOfReportItemVectors

# Register VectorOfReportItemVectors in _COPASI:
_COPASI.VectorOfReportItemVectors_swigregister(VectorOfReportItemVectors)
class CObjectLists(object):
    r"""Proxy of C++ CObjectLists class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    EMPTY_LIST = _COPASI.CObjectLists_EMPTY_LIST
    
    SINGLE_OBJECT = _COPASI.CObjectLists_SINGLE_OBJECT
    
    METABS = _COPASI.CObjectLists_METABS
    
    METAB_INITIAL_CONCENTRATIONS = _COPASI.CObjectLists_METAB_INITIAL_CONCENTRATIONS
    
    METAB_INITIAL_NUMBERS = _COPASI.CObjectLists_METAB_INITIAL_NUMBERS
    
    METAB_CONCENTRATIONS = _COPASI.CObjectLists_METAB_CONCENTRATIONS
    
    METAB_NUMBERS = _COPASI.CObjectLists_METAB_NUMBERS
    
    NON_CONST_METAB_CONCENTRATIONS = _COPASI.CObjectLists_NON_CONST_METAB_CONCENTRATIONS
    
    NON_CONST_METAB_NUMBERS = _COPASI.CObjectLists_NON_CONST_METAB_NUMBERS
    
    CONST_METAB_CONCENTRATIONS = _COPASI.CObjectLists_CONST_METAB_CONCENTRATIONS
    
    CONST_METAB_NUMBERS = _COPASI.CObjectLists_CONST_METAB_NUMBERS
    
    ODE_METAB_CONCENTRATIONS = _COPASI.CObjectLists_ODE_METAB_CONCENTRATIONS
    
    ODE_METAB_NUMBERS = _COPASI.CObjectLists_ODE_METAB_NUMBERS
    
    REACTION_METAB_CONCENTRATIONS = _COPASI.CObjectLists_REACTION_METAB_CONCENTRATIONS
    
    REACTION_METAB_NUMBERS = _COPASI.CObjectLists_REACTION_METAB_NUMBERS
    
    ASS_METAB_CONCENTRATIONS = _COPASI.CObjectLists_ASS_METAB_CONCENTRATIONS
    
    ASS_METAB_NUMBERS = _COPASI.CObjectLists_ASS_METAB_NUMBERS
    
    METAB_CONC_RATES = _COPASI.CObjectLists_METAB_CONC_RATES
    
    METAB_PART_RATES = _COPASI.CObjectLists_METAB_PART_RATES
    
    METAB_TRANSITION_TIME = _COPASI.CObjectLists_METAB_TRANSITION_TIME
    
    REACTIONS = _COPASI.CObjectLists_REACTIONS
    
    REACTION_CONC_FLUXES = _COPASI.CObjectLists_REACTION_CONC_FLUXES
    
    REACTION_PART_FLUXES = _COPASI.CObjectLists_REACTION_PART_FLUXES
    
    GLOBAL_PARAMETERS = _COPASI.CObjectLists_GLOBAL_PARAMETERS
    
    GLOBAL_PARAMETER_INITIAL_VALUES = _COPASI.CObjectLists_GLOBAL_PARAMETER_INITIAL_VALUES
    
    GLOBAL_PARAMETER_VALUES = _COPASI.CObjectLists_GLOBAL_PARAMETER_VALUES
    
    NON_CONST_GLOBAL_PARAMETER_VALUES = _COPASI.CObjectLists_NON_CONST_GLOBAL_PARAMETER_VALUES
    
    CONST_GLOBAL_PARAMETER_INITIAL_VALUES = _COPASI.CObjectLists_CONST_GLOBAL_PARAMETER_INITIAL_VALUES
    
    ODE_GLOBAL_PARAMETER_VALUES = _COPASI.CObjectLists_ODE_GLOBAL_PARAMETER_VALUES
    
    ASS_GLOBAL_PARAMETER_VALUES = _COPASI.CObjectLists_ASS_GLOBAL_PARAMETER_VALUES
    
    GLOBAL_PARAMETER_RATES = _COPASI.CObjectLists_GLOBAL_PARAMETER_RATES
    
    COMPARTMENTS = _COPASI.CObjectLists_COMPARTMENTS
    
    COMPARTMENT_INITIAL_VOLUMES = _COPASI.CObjectLists_COMPARTMENT_INITIAL_VOLUMES
    
    COMPARTMENT_VOLUMES = _COPASI.CObjectLists_COMPARTMENT_VOLUMES
    
    NON_CONST_COMPARTMENT_VOLUMES = _COPASI.CObjectLists_NON_CONST_COMPARTMENT_VOLUMES
    
    CONST_COMPARTMENT_VOLUMES = _COPASI.CObjectLists_CONST_COMPARTMENT_VOLUMES
    
    ODE_COMPARTMENT_VOLUMES = _COPASI.CObjectLists_ODE_COMPARTMENT_VOLUMES
    
    ASS_COMPARTMENT_VOLUMES = _COPASI.CObjectLists_ASS_COMPARTMENT_VOLUMES
    
    COMPARTMENT_RATES = _COPASI.CObjectLists_COMPARTMENT_RATES
    
    ALL_INITIAL_VALUES = _COPASI.CObjectLists_ALL_INITIAL_VALUES
    
    ALL_LOCAL_PARAMETER_VALUES = _COPASI.CObjectLists_ALL_LOCAL_PARAMETER_VALUES
    
    ALL_PARAMETER_VALUES = _COPASI.CObjectLists_ALL_PARAMETER_VALUES
    
    ALL_PARAMETER_AND_INITIAL_VALUES = _COPASI.CObjectLists_ALL_PARAMETER_AND_INITIAL_VALUES
    
    ALL_VARIABLES = _COPASI.CObjectLists_ALL_VARIABLES
    
    ALL_ODE_VARIABLES = _COPASI.CObjectLists_ALL_ODE_VARIABLES
    
    REDUCED_JACOBIAN_EV_RE = _COPASI.CObjectLists_REDUCED_JACOBIAN_EV_RE
    
    REDUCED_JACOBIAN_EV_IM = _COPASI.CObjectLists_REDUCED_JACOBIAN_EV_IM
    

    @staticmethod
    def existsFixedMetab(model):
        r"""existsFixedMetab(CModel model) -> bool"""
        return _COPASI.CObjectLists_existsFixedMetab(model)

    def __init__(self):
        r"""__init__(CObjectLists self) -> CObjectLists"""
        _COPASI.CObjectLists_swiginit(self, _COPASI.new_CObjectLists())
    __swig_destroy__ = _COPASI.delete_CObjectLists

# Register CObjectLists in _COPASI:
_COPASI.CObjectLists_swigregister(CObjectLists)
class FloatVectorCore(object):
    r"""Proxy of C++ CVectorCore< double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, size=0, buffer=None):
        r"""__init__(FloatVectorCore self, size_t const & size=0, double * buffer=None) -> FloatVectorCore"""
        _COPASI.FloatVectorCore_swiginit(self, _COPASI.new_FloatVectorCore(size, buffer))
    __swig_destroy__ = _COPASI.delete_FloatVectorCore

    def initialize(self, *args):
        r"""
        initialize(FloatVectorCore self, size_t const & size, double const * vector)
        initialize(FloatVectorCore self, FloatVectorCore src)
        """
        return _COPASI.FloatVectorCore_initialize(self, *args)

    def __eq__(self, rhs):
        r"""__eq__(FloatVectorCore self, FloatVectorCore rhs) -> bool"""
        return _COPASI.FloatVectorCore___eq__(self, rhs)

    def size(self):
        r"""size(FloatVectorCore self) -> size_t"""
        return _COPASI.FloatVectorCore_size(self)

    def __call__(self, *args):
        r"""
        __call__(FloatVectorCore self, size_t const & row) -> double
        __call__(FloatVectorCore self, size_t const & row) -> double const &
        """
        return _COPASI.FloatVectorCore___call__(self, *args)

    def applyPivot(self, pivot):
        r"""applyPivot(FloatVectorCore self, SizeTVectorCore pivot) -> bool"""
        return _COPASI.FloatVectorCore_applyPivot(self, pivot)

    def get(self, index):
        r"""get(FloatVectorCore self, unsigned int index) -> double"""
        return _COPASI.FloatVectorCore_get(self, index)

    def __len__(self):
        r"""__len__(FloatVectorCore self) -> size_t"""
        return _COPASI.FloatVectorCore___len__(self)

# Register FloatVectorCore in _COPASI:
_COPASI.FloatVectorCore_swigregister(FloatVectorCore)
class FloatVector(FloatVectorCore):
    r"""Proxy of C++ CVector< double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(FloatVector self, size_t size=0) -> FloatVector
        __init__(FloatVector self, FloatVectorCore src) -> FloatVector
        __init__(FloatVector self, FloatVector src) -> FloatVector
        """
        _COPASI.FloatVector_swiginit(self, _COPASI.new_FloatVector(*args))
    __swig_destroy__ = _COPASI.delete_FloatVector

# Register FloatVector in _COPASI:
_COPASI.FloatVector_swigregister(FloatVector)
class SizeTVectorCore(object):
    r"""Proxy of C++ CVectorCore< size_t > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, size=0, buffer=None):
        r"""__init__(SizeTVectorCore self, size_t const & size=0, size_t * buffer=None) -> SizeTVectorCore"""
        _COPASI.SizeTVectorCore_swiginit(self, _COPASI.new_SizeTVectorCore(size, buffer))
    __swig_destroy__ = _COPASI.delete_SizeTVectorCore

    def initialize(self, *args):
        r"""
        initialize(SizeTVectorCore self, size_t const & size, size_t const * vector)
        initialize(SizeTVectorCore self, SizeTVectorCore src)
        """
        return _COPASI.SizeTVectorCore_initialize(self, *args)

    def __eq__(self, rhs):
        r"""__eq__(SizeTVectorCore self, SizeTVectorCore rhs) -> bool"""
        return _COPASI.SizeTVectorCore___eq__(self, rhs)

    def size(self):
        r"""size(SizeTVectorCore self) -> size_t"""
        return _COPASI.SizeTVectorCore_size(self)

    def __call__(self, *args):
        r"""
        __call__(SizeTVectorCore self, size_t const & row) -> size_t
        __call__(SizeTVectorCore self, size_t const & row) -> size_t const &
        """
        return _COPASI.SizeTVectorCore___call__(self, *args)

    def applyPivot(self, pivot):
        r"""applyPivot(SizeTVectorCore self, SizeTVectorCore pivot) -> bool"""
        return _COPASI.SizeTVectorCore_applyPivot(self, pivot)

    def get(self, index):
        r"""get(SizeTVectorCore self, unsigned int index) -> size_t"""
        return _COPASI.SizeTVectorCore_get(self, index)

    def __len__(self):
        r"""__len__(SizeTVectorCore self) -> size_t"""
        return _COPASI.SizeTVectorCore___len__(self)

# Register SizeTVectorCore in _COPASI:
_COPASI.SizeTVectorCore_swigregister(SizeTVectorCore)
class SizeTVector(SizeTVectorCore):
    r"""Proxy of C++ CVector< size_t > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(SizeTVector self, size_t size=0) -> SizeTVector
        __init__(SizeTVector self, SizeTVectorCore src) -> SizeTVector
        __init__(SizeTVector self, SizeTVector src) -> SizeTVector
        """
        _COPASI.SizeTVector_swiginit(self, _COPASI.new_SizeTVector(*args))
    __swig_destroy__ = _COPASI.delete_SizeTVector

# Register SizeTVector in _COPASI:
_COPASI.SizeTVector_swigregister(SizeTVector)
class ObjectVectorCore(object):
    r"""Proxy of C++ CVectorCore< CDataObject * > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, size=0, buffer=None):
        r"""__init__(ObjectVectorCore self, size_t const & size=0, CDataObject ** buffer=None) -> ObjectVectorCore"""
        _COPASI.ObjectVectorCore_swiginit(self, _COPASI.new_ObjectVectorCore(size, buffer))
    __swig_destroy__ = _COPASI.delete_ObjectVectorCore

    def initialize(self, *args):
        r"""
        initialize(ObjectVectorCore self, size_t const & size, CDataObject *const * vector)
        initialize(ObjectVectorCore self, ObjectVectorCore src)
        """
        return _COPASI.ObjectVectorCore_initialize(self, *args)

    def __eq__(self, rhs):
        r"""__eq__(ObjectVectorCore self, ObjectVectorCore rhs) -> bool"""
        return _COPASI.ObjectVectorCore___eq__(self, rhs)

    def size(self):
        r"""size(ObjectVectorCore self) -> size_t"""
        return _COPASI.ObjectVectorCore_size(self)

    def __call__(self, *args):
        r"""
        __call__(ObjectVectorCore self, size_t const & row) -> CDataObject
        __call__(ObjectVectorCore self, size_t const & row) -> CDataObject
        """
        return _COPASI.ObjectVectorCore___call__(self, *args)

    def applyPivot(self, pivot):
        r"""applyPivot(ObjectVectorCore self, SizeTVectorCore pivot) -> bool"""
        return _COPASI.ObjectVectorCore_applyPivot(self, pivot)

    def get(self, index):
        r"""get(ObjectVectorCore self, unsigned int index) -> CDataObject"""
        return _COPASI.ObjectVectorCore_get(self, index)

    def __len__(self):
        r"""__len__(ObjectVectorCore self) -> size_t"""
        return _COPASI.ObjectVectorCore___len__(self)

# Register ObjectVectorCore in _COPASI:
_COPASI.ObjectVectorCore_swigregister(ObjectVectorCore)
class ObjectVector(ObjectVectorCore):
    r"""Proxy of C++ CVector< CDataObject * > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ObjectVector self, size_t size=0) -> ObjectVector
        __init__(ObjectVector self, ObjectVectorCore src) -> ObjectVector
        __init__(ObjectVector self, ObjectVector src) -> ObjectVector
        """
        _COPASI.ObjectVector_swiginit(self, _COPASI.new_ObjectVector(*args))
    __swig_destroy__ = _COPASI.delete_ObjectVector

    def get(self, i):
        r"""get(ObjectVector self, int i) -> CDataObject"""
        return _COPASI.ObjectVector_get(self, i)

    def size(self):
        r"""size(ObjectVector self) -> size_t"""
        return _COPASI.ObjectVector_size(self)

# Register ObjectVector in _COPASI:
_COPASI.ObjectVector_swigregister(ObjectVector)
class ConstObjectVectorCore(object):
    r"""Proxy of C++ CVectorCore< CDataObject const * > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, size=0, buffer=None):
        r"""__init__(ConstObjectVectorCore self, size_t const & size=0, CDataObject const ** buffer=None) -> ConstObjectVectorCore"""
        _COPASI.ConstObjectVectorCore_swiginit(self, _COPASI.new_ConstObjectVectorCore(size, buffer))
    __swig_destroy__ = _COPASI.delete_ConstObjectVectorCore

    def initialize(self, *args):
        r"""
        initialize(ConstObjectVectorCore self, size_t const & size, CDataObject const *const * vector)
        initialize(ConstObjectVectorCore self, ConstObjectVectorCore src)
        """
        return _COPASI.ConstObjectVectorCore_initialize(self, *args)

    def __eq__(self, rhs):
        r"""__eq__(ConstObjectVectorCore self, ConstObjectVectorCore rhs) -> bool"""
        return _COPASI.ConstObjectVectorCore___eq__(self, rhs)

    def size(self):
        r"""size(ConstObjectVectorCore self) -> size_t"""
        return _COPASI.ConstObjectVectorCore_size(self)

    def __call__(self, *args):
        r"""
        __call__(ConstObjectVectorCore self, size_t const & row) -> CDataObject
        __call__(ConstObjectVectorCore self, size_t const & row) -> CDataObject
        """
        return _COPASI.ConstObjectVectorCore___call__(self, *args)

    def applyPivot(self, pivot):
        r"""applyPivot(ConstObjectVectorCore self, SizeTVectorCore pivot) -> bool"""
        return _COPASI.ConstObjectVectorCore_applyPivot(self, pivot)

    def get(self, index):
        r"""get(ConstObjectVectorCore self, unsigned int index) -> CDataObject"""
        return _COPASI.ConstObjectVectorCore_get(self, index)

    def __len__(self):
        r"""__len__(ConstObjectVectorCore self) -> size_t"""
        return _COPASI.ConstObjectVectorCore___len__(self)

# Register ConstObjectVectorCore in _COPASI:
_COPASI.ConstObjectVectorCore_swigregister(ConstObjectVectorCore)
class ConstObjectVector(ConstObjectVectorCore):
    r"""Proxy of C++ CVector< CDataObject const * > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ConstObjectVector self, size_t size=0) -> ConstObjectVector
        __init__(ConstObjectVector self, ConstObjectVectorCore src) -> ConstObjectVector
        __init__(ConstObjectVector self, ConstObjectVector src) -> ConstObjectVector
        """
        _COPASI.ConstObjectVector_swiginit(self, _COPASI.new_ConstObjectVector(*args))
    __swig_destroy__ = _COPASI.delete_ConstObjectVector

    def get(self, i):
        r"""get(ConstObjectVector self, int i) -> CDataObject"""
        return _COPASI.ConstObjectVector_get(self, i)

    def size(self):
        r"""size(ConstObjectVector self) -> size_t"""
        return _COPASI.ConstObjectVector_size(self)

# Register ConstObjectVector in _COPASI:
_COPASI.ConstObjectVector_swigregister(ConstObjectVector)
class ConstFunctionVector(object):
    r"""Proxy of C++ CVector< CFunction const * > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ConstFunctionVector self, size_t size=0) -> ConstFunctionVector
        __init__(ConstFunctionVector self, ConstFunctionVectorCore src) -> ConstFunctionVector
        __init__(ConstFunctionVector self, ConstFunctionVector src) -> ConstFunctionVector
        """
        _COPASI.ConstFunctionVector_swiginit(self, _COPASI.new_ConstFunctionVector(*args))
    __swig_destroy__ = _COPASI.delete_ConstFunctionVector

    def get(self, i):
        r"""get(ConstFunctionVector self, int i) -> CFunction"""
        return _COPASI.ConstFunctionVector_get(self, i)

    def size(self):
        r"""size(ConstFunctionVector self) -> size_t"""
        return _COPASI.ConstFunctionVector_size(self)

# Register ConstFunctionVector in _COPASI:
_COPASI.ConstFunctionVector_swigregister(ConstFunctionVector)
class ConstFunctionVectorCore(object):
    r"""Proxy of C++ CVectorCore< CFunction const * > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, size=0, buffer=None):
        r"""__init__(ConstFunctionVectorCore self, size_t const & size=0, CFunction const ** buffer=None) -> ConstFunctionVectorCore"""
        _COPASI.ConstFunctionVectorCore_swiginit(self, _COPASI.new_ConstFunctionVectorCore(size, buffer))
    __swig_destroy__ = _COPASI.delete_ConstFunctionVectorCore

    def initialize(self, *args):
        r"""
        initialize(ConstFunctionVectorCore self, size_t const & size, CFunction const *const * vector)
        initialize(ConstFunctionVectorCore self, ConstFunctionVectorCore src)
        """
        return _COPASI.ConstFunctionVectorCore_initialize(self, *args)

    def __eq__(self, rhs):
        r"""__eq__(ConstFunctionVectorCore self, ConstFunctionVectorCore rhs) -> bool"""
        return _COPASI.ConstFunctionVectorCore___eq__(self, rhs)

    def size(self):
        r"""size(ConstFunctionVectorCore self) -> size_t"""
        return _COPASI.ConstFunctionVectorCore_size(self)

    def __call__(self, *args):
        r"""
        __call__(ConstFunctionVectorCore self, size_t const & row) -> CFunction
        __call__(ConstFunctionVectorCore self, size_t const & row) -> CFunction
        """
        return _COPASI.ConstFunctionVectorCore___call__(self, *args)

    def applyPivot(self, pivot):
        r"""applyPivot(ConstFunctionVectorCore self, SizeTVectorCore pivot) -> bool"""
        return _COPASI.ConstFunctionVectorCore_applyPivot(self, pivot)

    def get(self, index):
        r"""get(ConstFunctionVectorCore self, unsigned int index) -> CFunction"""
        return _COPASI.ConstFunctionVectorCore_get(self, index)

    def __len__(self):
        r"""__len__(ConstFunctionVectorCore self) -> size_t"""
        return _COPASI.ConstFunctionVectorCore___len__(self)

# Register ConstFunctionVectorCore in _COPASI:
_COPASI.ConstFunctionVectorCore_swigregister(ConstFunctionVectorCore)
class ConstObjectInterfaceVector(object):
    r"""Proxy of C++ CVector< CObjectInterface const * > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ConstObjectInterfaceVector self, size_t size=0) -> ConstObjectInterfaceVector
        __init__(ConstObjectInterfaceVector self, ConstObjectInterfaceVectorCore src) -> ConstObjectInterfaceVector
        __init__(ConstObjectInterfaceVector self, ConstObjectInterfaceVector src) -> ConstObjectInterfaceVector
        """
        _COPASI.ConstObjectInterfaceVector_swiginit(self, _COPASI.new_ConstObjectInterfaceVector(*args))
    __swig_destroy__ = _COPASI.delete_ConstObjectInterfaceVector

    def get(self, i):
        r"""get(ConstObjectInterfaceVector self, int i) -> CObjectInterface"""
        return _COPASI.ConstObjectInterfaceVector_get(self, i)

    def size(self):
        r"""size(ConstObjectInterfaceVector self) -> size_t"""
        return _COPASI.ConstObjectInterfaceVector_size(self)

# Register ConstObjectInterfaceVector in _COPASI:
_COPASI.ConstObjectInterfaceVector_swigregister(ConstObjectInterfaceVector)
class ConstObjectInterfaceVectorCore(object):
    r"""Proxy of C++ CVectorCore< CObjectInterface const * > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, size=0, buffer=None):
        r"""__init__(ConstObjectInterfaceVectorCore self, size_t const & size=0, CObjectInterface const ** buffer=None) -> ConstObjectInterfaceVectorCore"""
        _COPASI.ConstObjectInterfaceVectorCore_swiginit(self, _COPASI.new_ConstObjectInterfaceVectorCore(size, buffer))
    __swig_destroy__ = _COPASI.delete_ConstObjectInterfaceVectorCore

    def initialize(self, *args):
        r"""
        initialize(ConstObjectInterfaceVectorCore self, size_t const & size, CObjectInterface const *const * vector)
        initialize(ConstObjectInterfaceVectorCore self, ConstObjectInterfaceVectorCore src)
        """
        return _COPASI.ConstObjectInterfaceVectorCore_initialize(self, *args)

    def __eq__(self, rhs):
        r"""__eq__(ConstObjectInterfaceVectorCore self, ConstObjectInterfaceVectorCore rhs) -> bool"""
        return _COPASI.ConstObjectInterfaceVectorCore___eq__(self, rhs)

    def size(self):
        r"""size(ConstObjectInterfaceVectorCore self) -> size_t"""
        return _COPASI.ConstObjectInterfaceVectorCore_size(self)

    def __call__(self, *args):
        r"""
        __call__(ConstObjectInterfaceVectorCore self, size_t const & row) -> CObjectInterface
        __call__(ConstObjectInterfaceVectorCore self, size_t const & row) -> CObjectInterface
        """
        return _COPASI.ConstObjectInterfaceVectorCore___call__(self, *args)

    def applyPivot(self, pivot):
        r"""applyPivot(ConstObjectInterfaceVectorCore self, SizeTVectorCore pivot) -> bool"""
        return _COPASI.ConstObjectInterfaceVectorCore_applyPivot(self, pivot)

    def get(self, index):
        r"""get(ConstObjectInterfaceVectorCore self, unsigned int index) -> CObjectInterface"""
        return _COPASI.ConstObjectInterfaceVectorCore_get(self, index)

    def __len__(self):
        r"""__len__(ConstObjectInterfaceVectorCore self) -> size_t"""
        return _COPASI.ConstObjectInterfaceVectorCore___len__(self)

# Register ConstObjectInterfaceVectorCore in _COPASI:
_COPASI.ConstObjectInterfaceVectorCore_swigregister(ConstObjectInterfaceVectorCore)
class CRandom(object):
    r"""Proxy of C++ CRandom class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    r250 = _COPASI.CRandom_r250
    
    mt19937 = _COPASI.CRandom_mt19937
    
    mt19937HR = _COPASI.CRandom_mt19937HR
    
    unkown = _COPASI.CRandom_unkown
    

    @staticmethod
    def getSystemSeed():
        r"""getSystemSeed() -> unsigned int"""
        return _COPASI.CRandom_getSystemSeed()

    @staticmethod
    def createGenerator(*args):
        r"""createGenerator(CRandom::Type type=mt19937, unsigned int seed=0) -> CRandom"""
        return _COPASI.CRandom_createGenerator(*args)
    __swig_destroy__ = _COPASI.delete_CRandom

    def copy(self):
        r"""copy(CRandom self) -> CRandom"""
        return _COPASI.CRandom_copy(self)

    def getType(self):
        r"""getType(CRandom self) -> CRandom::Type const &"""
        return _COPASI.CRandom_getType(self)

    def getModulus(self):
        r"""getModulus(CRandom self) -> unsigned int const &"""
        return _COPASI.CRandom_getModulus(self)

    def initialize(self, *args):
        r"""initialize(CRandom self, unsigned int seed=CRandom::getSystemSeed())"""
        return _COPASI.CRandom_initialize(self, *args)

    def getRandomU(self, *args):
        r"""
        getRandomU(CRandom self) -> unsigned int
        getRandomU(CRandom self, unsigned int const & max) -> unsigned int
        """
        return _COPASI.CRandom_getRandomU(self, *args)

    def getRandomS(self, *args):
        r"""
        getRandomS(CRandom self) -> int
        getRandomS(CRandom self, int const & max) -> int
        """
        return _COPASI.CRandom_getRandomS(self, *args)

    def getRandomCC(self):
        r"""getRandomCC(CRandom self) -> double"""
        return _COPASI.CRandom_getRandomCC(self)

    def getRandomCO(self):
        r"""getRandomCO(CRandom self) -> double"""
        return _COPASI.CRandom_getRandomCO(self)

    def getRandomOO(self):
        r"""getRandomOO(CRandom self) -> double"""
        return _COPASI.CRandom_getRandomOO(self)

    def getRandomNormal01(self):
        r"""getRandomNormal01(CRandom self) -> double"""
        return _COPASI.CRandom_getRandomNormal01(self)

    def getRandomNormal(self, mean, sd):
        r"""getRandomNormal(CRandom self, double const & mean, double const & sd) -> double"""
        return _COPASI.CRandom_getRandomNormal(self, mean, sd)

    def getRandomNormalPositive(self, mean, sd):
        r"""getRandomNormalPositive(CRandom self, double const & mean, double const & sd) -> double"""
        return _COPASI.CRandom_getRandomNormalPositive(self, mean, sd)

    def getRandomNormalLog(self, mean, sd):
        r"""getRandomNormalLog(CRandom self, double const & mean, double const & sd) -> double"""
        return _COPASI.CRandom_getRandomNormalLog(self, mean, sd)

    def getRandomPoisson(self, mean):
        r"""getRandomPoisson(CRandom self, double const & mean) -> double"""
        return _COPASI.CRandom_getRandomPoisson(self, mean)

    def getRandomExp(self):
        r"""getRandomExp(CRandom self) -> double"""
        return _COPASI.CRandom_getRandomExp(self)

    def getRandomGamma(self, shape, scale):
        r"""getRandomGamma(CRandom self, double shape, double scale) -> double"""
        return _COPASI.CRandom_getRandomGamma(self, shape, scale)

    def getRandomStdGamma(self, shape):
        r"""getRandomStdGamma(CRandom self, double shape) -> double"""
        return _COPASI.CRandom_getRandomStdGamma(self, shape)

    __metaclass__ = AutoProperty


# Register CRandom in _COPASI:
_COPASI.CRandom_swigregister(CRandom)
MCopasiBase = _COPASI.MCopasiBase

MCReadConfig = _COPASI.MCReadConfig

MCWriteConfig = _COPASI.MCWriteConfig

MCRange = _COPASI.MCRange

MCKinFunction = _COPASI.MCKinFunction

MCDataVector = _COPASI.MCDataVector

MCFunctionParameters = _COPASI.MCFunctionParameters

MCMassAction = _COPASI.MCMassAction

MCCopasiMethod = _COPASI.MCCopasiMethod

MCReaction = _COPASI.MCReaction

MCParameter = _COPASI.MCParameter

MCChemEq = _COPASI.MCChemEq

MCTrajectoryMethod = _COPASI.MCTrajectoryMethod

MCXML = _COPASI.MCXML

MCCopasiMessage = _COPASI.MCCopasiMessage

MCConfiguration = _COPASI.MCConfiguration

MCOptimization = _COPASI.MCOptimization

MCSBML = _COPASI.MCSBML

MCTrajectoryProblem = _COPASI.MCTrajectoryProblem

MCDirEntry = _COPASI.MCDirEntry

MCFunction = _COPASI.MCFunction

MCMathML = _COPASI.MCMathML

MCEvaluationNodeObject = _COPASI.MCEvaluationNodeObject

MCCopasiTask = _COPASI.MCCopasiTask

MCSteadyState = _COPASI.MCSteadyState

MCFitting = _COPASI.MCFitting

MCObject = _COPASI.MCObject

MCLyap = _COPASI.MCLyap

MCODEExporter = _COPASI.MCODEExporter

MCRegistration = _COPASI.MCRegistration

MCTSSAMethod = _COPASI.MCTSSAMethod

MCTSSAProblem = _COPASI.MCTSSAProblem

MCEigen = _COPASI.MCEigen

MCAnnotation = _COPASI.MCAnnotation

MCMathModel = _COPASI.MCMathModel

MCModelMerging = _COPASI.MCModelMerging

MCModelExpansion = _COPASI.MCModelExpansion

MCEFMAnalysis = _COPASI.MCEFMAnalysis

MCLayout = _COPASI.MCLayout

MCScan = _COPASI.MCScan

MCSEDML = _COPASI.MCSEDML

MCMCA = _COPASI.MCMCA

MCUnit = _COPASI.MCUnit

MCUnitDefinition = _COPASI.MCUnitDefinition

MCJitCompilation = _COPASI.MCJitCompilation

class CCopasiMessage(object):
    r"""Proxy of C++ CCopasiMessage class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    RAW = _COPASI.CCopasiMessage_RAW
    
    TRACE = _COPASI.CCopasiMessage_TRACE
    
    COMMANDLINE = _COPASI.CCopasiMessage_COMMANDLINE
    
    WARNING = _COPASI.CCopasiMessage_WARNING
    
    ERROR = _COPASI.CCopasiMessage_ERROR
    
    EXCEPTION = _COPASI.CCopasiMessage_EXCEPTION
    
    RAW_FILTERED = _COPASI.CCopasiMessage_RAW_FILTERED
    
    TRACE_FILTERED = _COPASI.CCopasiMessage_TRACE_FILTERED
    
    COMMANDLINE_FILTERED = _COPASI.CCopasiMessage_COMMANDLINE_FILTERED
    
    WARNING_FILTERED = _COPASI.CCopasiMessage_WARNING_FILTERED
    
    ERROR_FILTERED = _COPASI.CCopasiMessage_ERROR_FILTERED
    
    EXCEPTION_FILTERED = _COPASI.CCopasiMessage_EXCEPTION_FILTERED
    

    @staticmethod
    def peekFirstMessage():
        r"""peekFirstMessage() -> CCopasiMessage"""
        return _COPASI.CCopasiMessage_peekFirstMessage()

    @staticmethod
    def peekLastMessage():
        r"""peekLastMessage() -> CCopasiMessage"""
        return _COPASI.CCopasiMessage_peekLastMessage()

    @staticmethod
    def getFirstMessage():
        r"""getFirstMessage() -> CCopasiMessage"""
        return _COPASI.CCopasiMessage_getFirstMessage()

    @staticmethod
    def getLastMessage():
        r"""getLastMessage() -> CCopasiMessage"""
        return _COPASI.CCopasiMessage_getLastMessage()

    @staticmethod
    def getAllMessageText(chronological=True):
        r"""getAllMessageText(bool const & chronological=True) -> std::string"""
        return _COPASI.CCopasiMessage_getAllMessageText(chronological)

    @staticmethod
    def clearDeque():
        r"""clearDeque()"""
        return _COPASI.CCopasiMessage_clearDeque()

    @staticmethod
    def size():
        r"""size() -> size_t"""
        return _COPASI.CCopasiMessage_size()

    @staticmethod
    def getHighestSeverity():
        r"""getHighestSeverity() -> CCopasiMessage::Type"""
        return _COPASI.CCopasiMessage_getHighestSeverity()

    @staticmethod
    def checkForMessage(number):
        r"""checkForMessage(size_t const & number) -> bool"""
        return _COPASI.CCopasiMessage_checkForMessage(number)

    @staticmethod
    def setIsGUI(isGUI):
        r"""setIsGUI(bool const & isGUI)"""
        return _COPASI.CCopasiMessage_setIsGUI(isGUI)
    __swig_destroy__ = _COPASI.delete_CCopasiMessage

    def getText(self):
        r"""getText(CCopasiMessage self) -> std::string const &"""
        return _COPASI.CCopasiMessage_getText(self)

    def getType(self):
        r"""getType(CCopasiMessage self) -> CCopasiMessage::Type const &"""
        return _COPASI.CCopasiMessage_getType(self)

    def getNumber(self):
        r"""getNumber(CCopasiMessage self) -> size_t const &"""
        return _COPASI.CCopasiMessage_getNumber(self)

    def __init__(self, *args):
        r"""
        __init__(CCopasiMessage self) -> CCopasiMessage
        __init__(CCopasiMessage self, CCopasiMessage src) -> CCopasiMessage
        __init__(CCopasiMessage self, CCopasiMessage::Type type, char const * format) -> CCopasiMessage
        __init__(CCopasiMessage self, CCopasiMessage::Type type, size_t number) -> CCopasiMessage
        __init__(CCopasiMessage self, CCopasiMessage::Type type, char const * format) -> CCopasiMessage
        __init__(CCopasiMessage self, CCopasiMessage::Type type, char const * format, char const * arg) -> CCopasiMessage
        __init__(CCopasiMessage self, CCopasiMessage::Type type, size_t number) -> CCopasiMessage
        __init__(CCopasiMessage self, CCopasiMessage::Type type, size_t number, char const * arg) -> CCopasiMessage
        """
        _COPASI.CCopasiMessage_swiginit(self, _COPASI.new_CCopasiMessage(*args))

# Register CCopasiMessage in _COPASI:
_COPASI.CCopasiMessage_swigregister(CCopasiMessage)
class CKeyFactory(object):
    r"""Proxy of C++ CKeyFactory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def isValidKey(*args):
        r"""isValidKey(std::string const & key, std::string const & prefix="") -> bool"""
        return _COPASI.CKeyFactory_isValidKey(*args)

    def __init__(self):
        r"""__init__(CKeyFactory self) -> CKeyFactory"""
        _COPASI.CKeyFactory_swiginit(self, _COPASI.new_CKeyFactory())
    __swig_destroy__ = _COPASI.delete_CKeyFactory

    def get(self, key):
        r"""get(CKeyFactory self, std::string const & key) -> CDataObject"""
        return _COPASI.CKeyFactory_get(self, key)

# Register CKeyFactory in _COPASI:
_COPASI.CKeyFactory_swigregister(CKeyFactory)
class CCopasiException(Exception):
    r"""Proxy of C++ CCopasiException class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, message):
        r"""__init__(CCopasiException self, CCopasiMessage message) -> CCopasiException"""
        _COPASI.CCopasiException_swiginit(self, _COPASI.new_CCopasiException(message))
    __swig_destroy__ = _COPASI.delete_CCopasiException

    def getMessage(self):
        r"""getMessage(CCopasiException self) -> CCopasiMessage"""
        return _COPASI.CCopasiException_getMessage(self)

# Register CCopasiException in _COPASI:
_COPASI.CCopasiException_swigregister(CCopasiException)
class CDataObject(CObjectInterface, CUndoObjectInterface):
    r"""Proxy of C++ CDataObject class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Container = _COPASI.CDataObject_Container
    
    Vector = _COPASI.CDataObject_Vector
    
    Matrix = _COPASI.CDataObject_Matrix
    
    NameVector = _COPASI.CDataObject_NameVector
    
    Reference = _COPASI.CDataObject_Reference
    
    ValueBool = _COPASI.CDataObject_ValueBool
    
    ValueInt = _COPASI.CDataObject_ValueInt
    
    ValueInt64 = _COPASI.CDataObject_ValueInt64
    
    ValueDbl = _COPASI.CDataObject_ValueDbl
    
    NonUniqueName = _COPASI.CDataObject_NonUniqueName
    
    StaticString = _COPASI.CDataObject_StaticString
    
    ValueString = _COPASI.CDataObject_ValueString
    
    Separator = _COPASI.CDataObject_Separator
    
    DisplayName = _COPASI.CDataObject_DisplayName
    
    ModelEntity = _COPASI.CDataObject_ModelEntity
    
    Array = _COPASI.CDataObject_Array
    
    DataModel = _COPASI.CDataObject_DataModel
    
    Root = _COPASI.CDataObject_Root
    
    Gui = _COPASI.CDataObject_Gui
    
    __SIZE = _COPASI.CDataObject___SIZE
    

    @staticmethod
    def fromData(data, pParent):
        r"""fromData(CData data, CUndoObjectInterface pParent) -> CDataObject"""
        return _COPASI.CDataObject_fromData(data, pParent)

    @staticmethod
    def sanitizeObjectName(name):
        r"""sanitizeObjectName(std::string & name)"""
        return _COPASI.CDataObject_sanitizeObjectName(name)

    def __init__(self, src, pParent=None):
        r"""__init__(CDataObject self, CDataObject src, CDataContainer pParent=None) -> CDataObject"""
        _COPASI.CDataObject_swiginit(self, _COPASI.new_CDataObject(src, pParent))
    __swig_destroy__ = _COPASI.delete_CDataObject

    def calculateValue(self):
        r"""calculateValue(CDataObject self)"""
        return _COPASI.CDataObject_calculateValue(self)

    def getCN(self):
        r"""getCN(CDataObject self) -> CCommonName"""
        return _COPASI.CDataObject_getCN(self)

    def getObject(self, cn):
        r"""getObject(CDataObject self, CCommonName cn) -> CObjectInterface"""
        return _COPASI.CDataObject_getObject(self, cn)

    def getDataObject(self):
        r"""getDataObject(CDataObject self) -> CDataObject"""
        return _COPASI.CDataObject_getDataObject(self)

    def getObjectDisplayName(self):
        r"""getObjectDisplayName(CDataObject self) -> std::string"""
        return _COPASI.CDataObject_getObjectDisplayName(self)

    def validityChanged(self, changedValidity):
        r"""validityChanged(CDataObject self, CValidity changedValidity)"""
        return _COPASI.CDataObject_validityChanged(self, changedValidity)

    def validityRemoved(self, changedValidity):
        r"""validityRemoved(CDataObject self, CValidity changedValidity)"""
        return _COPASI.CDataObject_validityRemoved(self, changedValidity)

    def setObjectName(self, name):
        r"""setObjectName(CDataObject self, std::string const & name) -> bool"""
        return _COPASI.CDataObject_setObjectName(self, name)

    def getObjectName(self):
        r"""getObjectName(CDataObject self) -> std::string const &"""
        return _COPASI.CDataObject_getObjectName(self)

    def getObjectType(self):
        r"""getObjectType(CDataObject self) -> std::string const &"""
        return _COPASI.CDataObject_getObjectType(self)

    def setObjectParent(self, pParent):
        r"""setObjectParent(CDataObject self, CDataContainer pParent) -> bool"""
        return _COPASI.CDataObject_setObjectParent(self, pParent)

    def getObjectParent(self):
        r"""getObjectParent(CDataObject self) -> CDataContainer"""
        return _COPASI.CDataObject_getObjectParent(self)

    def addReference(self, pReference):
        r"""addReference(CDataObject self, CDataContainer pReference)"""
        return _COPASI.CDataObject_addReference(self, pReference)

    def removeReference(self, pReference):
        r"""removeReference(CDataObject self, CDataContainer pReference)"""
        return _COPASI.CDataObject_removeReference(self, pReference)

    def getObjectDataModel(self):
        r"""getObjectDataModel(CDataObject self) -> CDataModel"""
        return _COPASI.CDataObject_getObjectDataModel(self)

    def getObjectAncestor(self, type):
        r"""getObjectAncestor(CDataObject self, std::string const & type) -> CDataContainer"""
        return _COPASI.CDataObject_getObjectAncestor(self, type)

    def prerequisitsContains(self, objects):
        r"""prerequisitsContains(CDataObject self, DataObjectSet objects) -> bool"""
        return _COPASI.CDataObject_prerequisitsContains(self, objects)

    def getUnits(self):
        r"""getUnits(CDataObject self) -> std::string const"""
        return _COPASI.CDataObject_getUnits(self)

    def hasFlag(self, flag):
        r"""hasFlag(CDataObject self, CDataObject::Flag const & flag) -> bool"""
        return _COPASI.CDataObject_hasFlag(self, flag)

    def getValueObject(self):
        r"""getValueObject(CDataObject self) -> CDataObject"""
        return _COPASI.CDataObject_getValueObject(self)

    def getKey(self):
        r"""getKey(CDataObject self) -> std::string const &"""
        return _COPASI.CDataObject_getKey(self)

    def getObjectFromCN(self, cn):
        r"""getObjectFromCN(CDataObject self, CCommonName cn) -> CObjectInterface"""
        return _COPASI.CDataObject_getObjectFromCN(self, cn)

    def addIssue(self, issue):
        r"""addIssue(CDataObject self, CIssue issue)"""
        return _COPASI.CDataObject_addIssue(self, issue)

    def removeIssue(self, issue):
        r"""removeIssue(CDataObject self, CIssue issue)"""
        return _COPASI.CDataObject_removeIssue(self, issue)

# Register CDataObject in _COPASI:
_COPASI.CDataObject_swigregister(CDataObject)
class DataObjectSet(object):
    r"""Proxy of C++ std::set< CDataObject const * > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(DataObjectSet self) -> SwigPyIterator"""
        return _COPASI.DataObjectSet_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(DataObjectSet self) -> bool"""
        return _COPASI.DataObjectSet___nonzero__(self)

    def __bool__(self):
        r"""__bool__(DataObjectSet self) -> bool"""
        return _COPASI.DataObjectSet___bool__(self)

    def __len__(self):
        r"""__len__(DataObjectSet self) -> std::set< CDataObject const * >::size_type"""
        return _COPASI.DataObjectSet___len__(self)

    def append(self, x):
        r"""append(DataObjectSet self, CDataObject x)"""
        return _COPASI.DataObjectSet_append(self, x)

    def __contains__(self, x):
        r"""__contains__(DataObjectSet self, CDataObject x) -> bool"""
        return _COPASI.DataObjectSet___contains__(self, x)

    def __getitem__(self, i):
        r"""__getitem__(DataObjectSet self, std::set< CDataObject const * >::difference_type i) -> CDataObject"""
        return _COPASI.DataObjectSet___getitem__(self, i)

    def add(self, x):
        r"""add(DataObjectSet self, CDataObject x)"""
        return _COPASI.DataObjectSet_add(self, x)

    def discard(self, x):
        r"""discard(DataObjectSet self, CDataObject x)"""
        return _COPASI.DataObjectSet_discard(self, x)

    def __init__(self, *args):
        r"""
        __init__(DataObjectSet self, std::less< CDataObject const * > const & other) -> DataObjectSet
        __init__(DataObjectSet self) -> DataObjectSet
        __init__(DataObjectSet self, DataObjectSet other) -> DataObjectSet
        """
        _COPASI.DataObjectSet_swiginit(self, _COPASI.new_DataObjectSet(*args))

    def empty(self):
        r"""empty(DataObjectSet self) -> bool"""
        return _COPASI.DataObjectSet_empty(self)

    def size(self):
        r"""size(DataObjectSet self) -> std::set< CDataObject const * >::size_type"""
        return _COPASI.DataObjectSet_size(self)

    def clear(self):
        r"""clear(DataObjectSet self)"""
        return _COPASI.DataObjectSet_clear(self)

    def swap(self, v):
        r"""swap(DataObjectSet self, DataObjectSet v)"""
        return _COPASI.DataObjectSet_swap(self, v)

    def count(self, x):
        r"""count(DataObjectSet self, CDataObject x) -> std::set< CDataObject const * >::size_type"""
        return _COPASI.DataObjectSet_count(self, x)

    def rbegin(self):
        r"""rbegin(DataObjectSet self) -> std::set< CDataObject const * >::reverse_iterator"""
        return _COPASI.DataObjectSet_rbegin(self)

    def rend(self):
        r"""rend(DataObjectSet self) -> std::set< CDataObject const * >::reverse_iterator"""
        return _COPASI.DataObjectSet_rend(self)

    def erase(self, *args):
        r"""
        erase(DataObjectSet self, CDataObject x) -> std::set< CDataObject const * >::size_type
        erase(DataObjectSet self, std::set< CDataObject const * >::iterator pos)
        erase(DataObjectSet self, std::set< CDataObject const * >::iterator first, std::set< CDataObject const * >::iterator last)
        """
        return _COPASI.DataObjectSet_erase(self, *args)

    def find(self, x):
        r"""find(DataObjectSet self, CDataObject x) -> std::set< CDataObject const * >::iterator"""
        return _COPASI.DataObjectSet_find(self, x)

    def lower_bound(self, x):
        r"""lower_bound(DataObjectSet self, CDataObject x) -> std::set< CDataObject const * >::iterator"""
        return _COPASI.DataObjectSet_lower_bound(self, x)

    def upper_bound(self, x):
        r"""upper_bound(DataObjectSet self, CDataObject x) -> std::set< CDataObject const * >::iterator"""
        return _COPASI.DataObjectSet_upper_bound(self, x)

    def equal_range(self, x):
        r"""equal_range(DataObjectSet self, CDataObject x) -> std::pair< std::set< CDataObject const * >::iterator,std::set< CDataObject const * >::iterator >"""
        return _COPASI.DataObjectSet_equal_range(self, x)

    def insert(self, __x):
        r"""insert(DataObjectSet self, CDataObject __x) -> std::pair< std::set< CDataObject const * >::iterator,bool >"""
        return _COPASI.DataObjectSet_insert(self, __x)
    __swig_destroy__ = _COPASI.delete_DataObjectSet

# Register DataObjectSet in _COPASI:
_COPASI.DataObjectSet_swigregister(DataObjectSet)
class DataObjectMap(object):
    r"""Proxy of C++ std::map< CDataObject const *,CDataObject const * > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(DataObjectMap self) -> SwigPyIterator"""
        return _COPASI.DataObjectMap_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(DataObjectMap self) -> bool"""
        return _COPASI.DataObjectMap___nonzero__(self)

    def __bool__(self):
        r"""__bool__(DataObjectMap self) -> bool"""
        return _COPASI.DataObjectMap___bool__(self)

    def __len__(self):
        r"""__len__(DataObjectMap self) -> std::map< CDataObject const *,CDataObject const * >::size_type"""
        return _COPASI.DataObjectMap___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        r"""__getitem__(DataObjectMap self, CDataObject key) -> CDataObject"""
        return _COPASI.DataObjectMap___getitem__(self, key)

    def __delitem__(self, key):
        r"""__delitem__(DataObjectMap self, CDataObject key)"""
        return _COPASI.DataObjectMap___delitem__(self, key)

    def has_key(self, key):
        r"""has_key(DataObjectMap self, CDataObject key) -> bool"""
        return _COPASI.DataObjectMap_has_key(self, key)

    def keys(self):
        r"""keys(DataObjectMap self) -> PyObject *"""
        return _COPASI.DataObjectMap_keys(self)

    def values(self):
        r"""values(DataObjectMap self) -> PyObject *"""
        return _COPASI.DataObjectMap_values(self)

    def items(self):
        r"""items(DataObjectMap self) -> PyObject *"""
        return _COPASI.DataObjectMap_items(self)

    def __contains__(self, key):
        r"""__contains__(DataObjectMap self, CDataObject key) -> bool"""
        return _COPASI.DataObjectMap___contains__(self, key)

    def key_iterator(self):
        r"""key_iterator(DataObjectMap self) -> SwigPyIterator"""
        return _COPASI.DataObjectMap_key_iterator(self)

    def value_iterator(self):
        r"""value_iterator(DataObjectMap self) -> SwigPyIterator"""
        return _COPASI.DataObjectMap_value_iterator(self)

    def __setitem__(self, *args):
        r"""
        __setitem__(DataObjectMap self, CDataObject key)
        __setitem__(DataObjectMap self, CDataObject key, CDataObject x)
        """
        return _COPASI.DataObjectMap___setitem__(self, *args)

    def asdict(self):
        r"""asdict(DataObjectMap self) -> PyObject *"""
        return _COPASI.DataObjectMap_asdict(self)

    def __init__(self, *args):
        r"""
        __init__(DataObjectMap self, std::less< CDataObject const * > const & other) -> DataObjectMap
        __init__(DataObjectMap self) -> DataObjectMap
        __init__(DataObjectMap self, DataObjectMap other) -> DataObjectMap
        """
        _COPASI.DataObjectMap_swiginit(self, _COPASI.new_DataObjectMap(*args))

    def empty(self):
        r"""empty(DataObjectMap self) -> bool"""
        return _COPASI.DataObjectMap_empty(self)

    def size(self):
        r"""size(DataObjectMap self) -> std::map< CDataObject const *,CDataObject const * >::size_type"""
        return _COPASI.DataObjectMap_size(self)

    def swap(self, v):
        r"""swap(DataObjectMap self, DataObjectMap v)"""
        return _COPASI.DataObjectMap_swap(self, v)

    def rbegin(self):
        r"""rbegin(DataObjectMap self) -> std::map< CDataObject const *,CDataObject const * >::reverse_iterator"""
        return _COPASI.DataObjectMap_rbegin(self)

    def rend(self):
        r"""rend(DataObjectMap self) -> std::map< CDataObject const *,CDataObject const * >::reverse_iterator"""
        return _COPASI.DataObjectMap_rend(self)

    def clear(self):
        r"""clear(DataObjectMap self)"""
        return _COPASI.DataObjectMap_clear(self)

    def get_allocator(self):
        r"""get_allocator(DataObjectMap self) -> std::map< CDataObject const *,CDataObject const * >::allocator_type"""
        return _COPASI.DataObjectMap_get_allocator(self)

    def count(self, x):
        r"""count(DataObjectMap self, CDataObject x) -> std::map< CDataObject const *,CDataObject const * >::size_type"""
        return _COPASI.DataObjectMap_count(self, x)

    def erase(self, *args):
        r"""
        erase(DataObjectMap self, CDataObject x) -> std::map< CDataObject const *,CDataObject const * >::size_type
        erase(DataObjectMap self, std::map< CDataObject const *,CDataObject const * >::iterator position)
        erase(DataObjectMap self, std::map< CDataObject const *,CDataObject const * >::iterator first, std::map< CDataObject const *,CDataObject const * >::iterator last)
        """
        return _COPASI.DataObjectMap_erase(self, *args)

    def find(self, x):
        r"""find(DataObjectMap self, CDataObject x) -> std::map< CDataObject const *,CDataObject const * >::iterator"""
        return _COPASI.DataObjectMap_find(self, x)

    def lower_bound(self, x):
        r"""lower_bound(DataObjectMap self, CDataObject x) -> std::map< CDataObject const *,CDataObject const * >::iterator"""
        return _COPASI.DataObjectMap_lower_bound(self, x)

    def upper_bound(self, x):
        r"""upper_bound(DataObjectMap self, CDataObject x) -> std::map< CDataObject const *,CDataObject const * >::iterator"""
        return _COPASI.DataObjectMap_upper_bound(self, x)
    __swig_destroy__ = _COPASI.delete_DataObjectMap

# Register DataObjectMap in _COPASI:
_COPASI.DataObjectMap_swigregister(DataObjectMap)
class DataObjectVector(object):
    r"""Proxy of C++ std::vector< CDataObject const * > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(DataObjectVector self) -> SwigPyIterator"""
        return _COPASI.DataObjectVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(DataObjectVector self) -> bool"""
        return _COPASI.DataObjectVector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(DataObjectVector self) -> bool"""
        return _COPASI.DataObjectVector___bool__(self)

    def __len__(self):
        r"""__len__(DataObjectVector self) -> std::vector< CDataObject const * >::size_type"""
        return _COPASI.DataObjectVector___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(DataObjectVector self, std::vector< CDataObject const * >::difference_type i, std::vector< CDataObject const * >::difference_type j) -> DataObjectVector"""
        return _COPASI.DataObjectVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(DataObjectVector self, std::vector< CDataObject const * >::difference_type i, std::vector< CDataObject const * >::difference_type j)
        __setslice__(DataObjectVector self, std::vector< CDataObject const * >::difference_type i, std::vector< CDataObject const * >::difference_type j, DataObjectVector v)
        """
        return _COPASI.DataObjectVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(DataObjectVector self, std::vector< CDataObject const * >::difference_type i, std::vector< CDataObject const * >::difference_type j)"""
        return _COPASI.DataObjectVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(DataObjectVector self, std::vector< CDataObject const * >::difference_type i)
        __delitem__(DataObjectVector self, SWIGPY_SLICEOBJECT * slice)
        """
        return _COPASI.DataObjectVector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(DataObjectVector self, SWIGPY_SLICEOBJECT * slice) -> DataObjectVector
        __getitem__(DataObjectVector self, std::vector< CDataObject const * >::difference_type i) -> CDataObject
        """
        return _COPASI.DataObjectVector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(DataObjectVector self, SWIGPY_SLICEOBJECT * slice, DataObjectVector v)
        __setitem__(DataObjectVector self, SWIGPY_SLICEOBJECT * slice)
        __setitem__(DataObjectVector self, std::vector< CDataObject const * >::difference_type i, CDataObject x)
        """
        return _COPASI.DataObjectVector___setitem__(self, *args)

    def pop(self):
        r"""pop(DataObjectVector self) -> CDataObject"""
        return _COPASI.DataObjectVector_pop(self)

    def append(self, x):
        r"""append(DataObjectVector self, CDataObject x)"""
        return _COPASI.DataObjectVector_append(self, x)

    def empty(self):
        r"""empty(DataObjectVector self) -> bool"""
        return _COPASI.DataObjectVector_empty(self)

    def size(self):
        r"""size(DataObjectVector self) -> std::vector< CDataObject const * >::size_type"""
        return _COPASI.DataObjectVector_size(self)

    def swap(self, v):
        r"""swap(DataObjectVector self, DataObjectVector v)"""
        return _COPASI.DataObjectVector_swap(self, v)

    def rbegin(self):
        r"""rbegin(DataObjectVector self) -> std::vector< CDataObject const * >::reverse_iterator"""
        return _COPASI.DataObjectVector_rbegin(self)

    def rend(self):
        r"""rend(DataObjectVector self) -> std::vector< CDataObject const * >::reverse_iterator"""
        return _COPASI.DataObjectVector_rend(self)

    def clear(self):
        r"""clear(DataObjectVector self)"""
        return _COPASI.DataObjectVector_clear(self)

    def get_allocator(self):
        r"""get_allocator(DataObjectVector self) -> std::vector< CDataObject const * >::allocator_type"""
        return _COPASI.DataObjectVector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(DataObjectVector self)"""
        return _COPASI.DataObjectVector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(DataObjectVector self, std::vector< CDataObject const * >::iterator pos) -> std::vector< CDataObject const * >::iterator
        erase(DataObjectVector self, std::vector< CDataObject const * >::iterator first, std::vector< CDataObject const * >::iterator last) -> std::vector< CDataObject const * >::iterator
        """
        return _COPASI.DataObjectVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(DataObjectVector self) -> DataObjectVector
        __init__(DataObjectVector self, DataObjectVector other) -> DataObjectVector
        __init__(DataObjectVector self, std::vector< CDataObject const * >::size_type size) -> DataObjectVector
        __init__(DataObjectVector self, std::vector< CDataObject const * >::size_type size, CDataObject value) -> DataObjectVector
        """
        _COPASI.DataObjectVector_swiginit(self, _COPASI.new_DataObjectVector(*args))

    def push_back(self, x):
        r"""push_back(DataObjectVector self, CDataObject x)"""
        return _COPASI.DataObjectVector_push_back(self, x)

    def front(self):
        r"""front(DataObjectVector self) -> CDataObject"""
        return _COPASI.DataObjectVector_front(self)

    def back(self):
        r"""back(DataObjectVector self) -> CDataObject"""
        return _COPASI.DataObjectVector_back(self)

    def assign(self, n, x):
        r"""assign(DataObjectVector self, std::vector< CDataObject const * >::size_type n, CDataObject x)"""
        return _COPASI.DataObjectVector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(DataObjectVector self, std::vector< CDataObject const * >::size_type new_size)
        resize(DataObjectVector self, std::vector< CDataObject const * >::size_type new_size, CDataObject x)
        """
        return _COPASI.DataObjectVector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(DataObjectVector self, std::vector< CDataObject const * >::iterator pos, CDataObject x) -> std::vector< CDataObject const * >::iterator
        insert(DataObjectVector self, std::vector< CDataObject const * >::iterator pos, std::vector< CDataObject const * >::size_type n, CDataObject x)
        """
        return _COPASI.DataObjectVector_insert(self, *args)

    def reserve(self, n):
        r"""reserve(DataObjectVector self, std::vector< CDataObject const * >::size_type n)"""
        return _COPASI.DataObjectVector_reserve(self, n)

    def capacity(self):
        r"""capacity(DataObjectVector self) -> std::vector< CDataObject const * >::size_type"""
        return _COPASI.DataObjectVector_capacity(self)
    __swig_destroy__ = _COPASI.delete_DataObjectVector

# Register DataObjectVector in _COPASI:
_COPASI.DataObjectVector_swigregister(DataObjectVector)
class VectorOfDataObjectVector(object):
    r"""Proxy of C++ std::vector< std::vector< CDataObject const * > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(VectorOfDataObjectVector self) -> SwigPyIterator"""
        return _COPASI.VectorOfDataObjectVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(VectorOfDataObjectVector self) -> bool"""
        return _COPASI.VectorOfDataObjectVector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(VectorOfDataObjectVector self) -> bool"""
        return _COPASI.VectorOfDataObjectVector___bool__(self)

    def __len__(self):
        r"""__len__(VectorOfDataObjectVector self) -> std::vector< std::vector< CDataObject const * > >::size_type"""
        return _COPASI.VectorOfDataObjectVector___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(VectorOfDataObjectVector self, std::vector< std::vector< CDataObject const * > >::difference_type i, std::vector< std::vector< CDataObject const * > >::difference_type j) -> VectorOfDataObjectVector"""
        return _COPASI.VectorOfDataObjectVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(VectorOfDataObjectVector self, std::vector< std::vector< CDataObject const * > >::difference_type i, std::vector< std::vector< CDataObject const * > >::difference_type j)
        __setslice__(VectorOfDataObjectVector self, std::vector< std::vector< CDataObject const * > >::difference_type i, std::vector< std::vector< CDataObject const * > >::difference_type j, VectorOfDataObjectVector v)
        """
        return _COPASI.VectorOfDataObjectVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(VectorOfDataObjectVector self, std::vector< std::vector< CDataObject const * > >::difference_type i, std::vector< std::vector< CDataObject const * > >::difference_type j)"""
        return _COPASI.VectorOfDataObjectVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(VectorOfDataObjectVector self, std::vector< std::vector< CDataObject const * > >::difference_type i)
        __delitem__(VectorOfDataObjectVector self, SWIGPY_SLICEOBJECT * slice)
        """
        return _COPASI.VectorOfDataObjectVector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(VectorOfDataObjectVector self, SWIGPY_SLICEOBJECT * slice) -> VectorOfDataObjectVector
        __getitem__(VectorOfDataObjectVector self, std::vector< std::vector< CDataObject const * > >::difference_type i) -> DataObjectVector
        """
        return _COPASI.VectorOfDataObjectVector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(VectorOfDataObjectVector self, SWIGPY_SLICEOBJECT * slice, VectorOfDataObjectVector v)
        __setitem__(VectorOfDataObjectVector self, SWIGPY_SLICEOBJECT * slice)
        __setitem__(VectorOfDataObjectVector self, std::vector< std::vector< CDataObject const * > >::difference_type i, DataObjectVector x)
        """
        return _COPASI.VectorOfDataObjectVector___setitem__(self, *args)

    def pop(self):
        r"""pop(VectorOfDataObjectVector self) -> DataObjectVector"""
        return _COPASI.VectorOfDataObjectVector_pop(self)

    def append(self, x):
        r"""append(VectorOfDataObjectVector self, DataObjectVector x)"""
        return _COPASI.VectorOfDataObjectVector_append(self, x)

    def empty(self):
        r"""empty(VectorOfDataObjectVector self) -> bool"""
        return _COPASI.VectorOfDataObjectVector_empty(self)

    def size(self):
        r"""size(VectorOfDataObjectVector self) -> std::vector< std::vector< CDataObject const * > >::size_type"""
        return _COPASI.VectorOfDataObjectVector_size(self)

    def swap(self, v):
        r"""swap(VectorOfDataObjectVector self, VectorOfDataObjectVector v)"""
        return _COPASI.VectorOfDataObjectVector_swap(self, v)

    def rbegin(self):
        r"""rbegin(VectorOfDataObjectVector self) -> std::vector< std::vector< CDataObject const * > >::reverse_iterator"""
        return _COPASI.VectorOfDataObjectVector_rbegin(self)

    def rend(self):
        r"""rend(VectorOfDataObjectVector self) -> std::vector< std::vector< CDataObject const * > >::reverse_iterator"""
        return _COPASI.VectorOfDataObjectVector_rend(self)

    def clear(self):
        r"""clear(VectorOfDataObjectVector self)"""
        return _COPASI.VectorOfDataObjectVector_clear(self)

    def get_allocator(self):
        r"""get_allocator(VectorOfDataObjectVector self) -> std::vector< std::vector< CDataObject const * > >::allocator_type"""
        return _COPASI.VectorOfDataObjectVector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(VectorOfDataObjectVector self)"""
        return _COPASI.VectorOfDataObjectVector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(VectorOfDataObjectVector self, std::vector< std::vector< CDataObject const * > >::iterator pos) -> std::vector< std::vector< CDataObject const * > >::iterator
        erase(VectorOfDataObjectVector self, std::vector< std::vector< CDataObject const * > >::iterator first, std::vector< std::vector< CDataObject const * > >::iterator last) -> std::vector< std::vector< CDataObject const * > >::iterator
        """
        return _COPASI.VectorOfDataObjectVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(VectorOfDataObjectVector self) -> VectorOfDataObjectVector
        __init__(VectorOfDataObjectVector self, VectorOfDataObjectVector other) -> VectorOfDataObjectVector
        __init__(VectorOfDataObjectVector self, std::vector< std::vector< CDataObject const * > >::size_type size) -> VectorOfDataObjectVector
        __init__(VectorOfDataObjectVector self, std::vector< std::vector< CDataObject const * > >::size_type size, DataObjectVector value) -> VectorOfDataObjectVector
        """
        _COPASI.VectorOfDataObjectVector_swiginit(self, _COPASI.new_VectorOfDataObjectVector(*args))

    def push_back(self, x):
        r"""push_back(VectorOfDataObjectVector self, DataObjectVector x)"""
        return _COPASI.VectorOfDataObjectVector_push_back(self, x)

    def front(self):
        r"""front(VectorOfDataObjectVector self) -> DataObjectVector"""
        return _COPASI.VectorOfDataObjectVector_front(self)

    def back(self):
        r"""back(VectorOfDataObjectVector self) -> DataObjectVector"""
        return _COPASI.VectorOfDataObjectVector_back(self)

    def assign(self, n, x):
        r"""assign(VectorOfDataObjectVector self, std::vector< std::vector< CDataObject const * > >::size_type n, DataObjectVector x)"""
        return _COPASI.VectorOfDataObjectVector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(VectorOfDataObjectVector self, std::vector< std::vector< CDataObject const * > >::size_type new_size)
        resize(VectorOfDataObjectVector self, std::vector< std::vector< CDataObject const * > >::size_type new_size, DataObjectVector x)
        """
        return _COPASI.VectorOfDataObjectVector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(VectorOfDataObjectVector self, std::vector< std::vector< CDataObject const * > >::iterator pos, DataObjectVector x) -> std::vector< std::vector< CDataObject const * > >::iterator
        insert(VectorOfDataObjectVector self, std::vector< std::vector< CDataObject const * > >::iterator pos, std::vector< std::vector< CDataObject const * > >::size_type n, DataObjectVector x)
        """
        return _COPASI.VectorOfDataObjectVector_insert(self, *args)

    def reserve(self, n):
        r"""reserve(VectorOfDataObjectVector self, std::vector< std::vector< CDataObject const * > >::size_type n)"""
        return _COPASI.VectorOfDataObjectVector_reserve(self, n)

    def capacity(self):
        r"""capacity(VectorOfDataObjectVector self) -> std::vector< std::vector< CDataObject const * > >::size_type"""
        return _COPASI.VectorOfDataObjectVector_capacity(self)
    __swig_destroy__ = _COPASI.delete_VectorOfDataObjectVector

# Register VectorOfDataObjectVector in _COPASI:
_COPASI.VectorOfDataObjectVector_swigregister(VectorOfDataObjectVector)
class FloatReference(CDataObject):
    r"""Proxy of C++ CDataObjectReference< double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _COPASI.delete_FloatReference

    def getValueObject(self):
        r"""getValueObject(FloatReference self) -> CDataObject"""
        return _COPASI.FloatReference_getValueObject(self)

    def getObjectDisplayName(self):
        r"""getObjectDisplayName(FloatReference self) -> std::string"""
        return _COPASI.FloatReference_getObjectDisplayName(self)

# Register FloatReference in _COPASI:
_COPASI.FloatReference_swigregister(FloatReference)
class CDataContainer(CDataObject):
    r"""Proxy of C++ CDataContainer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def fromData(data, pParent):
        r"""fromData(CData data, CUndoObjectInterface pParent) -> CDataContainer"""
        return _COPASI.CDataContainer_fromData(data, pParent)

    def appendDeletedDependentData(self, undoData):
        r"""appendDeletedDependentData(CDataContainer self, CUndoData undoData) -> bool"""
        return _COPASI.CDataContainer_appendDeletedDependentData(self, undoData)

    def __init__(self, *args):
        r"""
        __init__(CDataContainer self, std::string const & name, CDataContainer pParent=static_cast< CDataContainer * >((void *) 0), std::string const & type="CN", CFlags< CDataObject::Flag > const & flag=CFlags< Flag >::None) -> CDataContainer
        __init__(CDataContainer self, CDataContainer src, CDataContainer pParent) -> CDataContainer
        """
        _COPASI.CDataContainer_swiginit(self, _COPASI.new_CDataContainer(*args))
    __swig_destroy__ = _COPASI.delete_CDataContainer

    def getObject(self, cn):
        r"""getObject(CDataContainer self, CCommonName cn) -> CObjectInterface"""
        return _COPASI.CDataContainer_getObject(self, cn)

    def getValueObject(self):
        r"""getValueObject(CDataContainer self) -> CDataObject"""
        return _COPASI.CDataContainer_getValueObject(self)

    def add(self, pObject, adopt=True):
        
        return _COPASI.CDataContainer_add(self, pObject, adopt)

    def objectRenamed(self, pObject, oldName):
        r"""objectRenamed(CDataContainer self, CDataObject pObject, std::string const & oldName)"""
        return _COPASI.CDataContainer_objectRenamed(self, pObject, oldName)

    def getUnits(self):
        r"""getUnits(CDataContainer self) -> std::string const"""
        return _COPASI.CDataContainer_getUnits(self)

    def getChildObjectUnits(self, pObject):
        r"""getChildObjectUnits(CDataContainer self, CDataObject pObject) -> std::string"""
        return _COPASI.CDataContainer_getChildObjectUnits(self, pObject)

    def getIndex(self, pObject):
        r"""getIndex(CDataContainer self, CDataObject pObject) -> size_t"""
        return _COPASI.CDataContainer_getIndex(self, pObject)

    def getDescendants(self, descendants, recursive=False):
        r"""getDescendants(CDataContainer self, DataObjectSet descendants, bool const & recursive=False)"""
        return _COPASI.CDataContainer_getDescendants(self, descendants, recursive)

    __metaclass__ = AutoProperty


# Register CDataContainer in _COPASI:
_COPASI.CDataContainer_swigregister(CDataContainer)
CDataContainer.EmptyList = _COPASI.cvar.CDataContainer_EmptyList

class ContainerList(object):
    r"""Proxy of C++ std::vector< CDataContainer const * > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(ContainerList self) -> SwigPyIterator"""
        return _COPASI.ContainerList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(ContainerList self) -> bool"""
        return _COPASI.ContainerList___nonzero__(self)

    def __bool__(self):
        r"""__bool__(ContainerList self) -> bool"""
        return _COPASI.ContainerList___bool__(self)

    def __len__(self):
        r"""__len__(ContainerList self) -> std::vector< CDataContainer const * >::size_type"""
        return _COPASI.ContainerList___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(ContainerList self, std::vector< CDataContainer const * >::difference_type i, std::vector< CDataContainer const * >::difference_type j) -> ContainerList"""
        return _COPASI.ContainerList___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(ContainerList self, std::vector< CDataContainer const * >::difference_type i, std::vector< CDataContainer const * >::difference_type j)
        __setslice__(ContainerList self, std::vector< CDataContainer const * >::difference_type i, std::vector< CDataContainer const * >::difference_type j, ContainerList v)
        """
        return _COPASI.ContainerList___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(ContainerList self, std::vector< CDataContainer const * >::difference_type i, std::vector< CDataContainer const * >::difference_type j)"""
        return _COPASI.ContainerList___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(ContainerList self, std::vector< CDataContainer const * >::difference_type i)
        __delitem__(ContainerList self, SWIGPY_SLICEOBJECT * slice)
        """
        return _COPASI.ContainerList___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(ContainerList self, SWIGPY_SLICEOBJECT * slice) -> ContainerList
        __getitem__(ContainerList self, std::vector< CDataContainer const * >::difference_type i) -> CDataContainer
        """
        return _COPASI.ContainerList___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(ContainerList self, SWIGPY_SLICEOBJECT * slice, ContainerList v)
        __setitem__(ContainerList self, SWIGPY_SLICEOBJECT * slice)
        __setitem__(ContainerList self, std::vector< CDataContainer const * >::difference_type i, CDataContainer x)
        """
        return _COPASI.ContainerList___setitem__(self, *args)

    def pop(self):
        r"""pop(ContainerList self) -> CDataContainer"""
        return _COPASI.ContainerList_pop(self)

    def append(self, x):
        r"""append(ContainerList self, CDataContainer x)"""
        return _COPASI.ContainerList_append(self, x)

    def empty(self):
        r"""empty(ContainerList self) -> bool"""
        return _COPASI.ContainerList_empty(self)

    def size(self):
        r"""size(ContainerList self) -> std::vector< CDataContainer const * >::size_type"""
        return _COPASI.ContainerList_size(self)

    def swap(self, v):
        r"""swap(ContainerList self, ContainerList v)"""
        return _COPASI.ContainerList_swap(self, v)

    def rbegin(self):
        r"""rbegin(ContainerList self) -> std::vector< CDataContainer const * >::reverse_iterator"""
        return _COPASI.ContainerList_rbegin(self)

    def rend(self):
        r"""rend(ContainerList self) -> std::vector< CDataContainer const * >::reverse_iterator"""
        return _COPASI.ContainerList_rend(self)

    def clear(self):
        r"""clear(ContainerList self)"""
        return _COPASI.ContainerList_clear(self)

    def get_allocator(self):
        r"""get_allocator(ContainerList self) -> std::vector< CDataContainer const * >::allocator_type"""
        return _COPASI.ContainerList_get_allocator(self)

    def pop_back(self):
        r"""pop_back(ContainerList self)"""
        return _COPASI.ContainerList_pop_back(self)

    def erase(self, *args):
        r"""
        erase(ContainerList self, std::vector< CDataContainer const * >::iterator pos) -> std::vector< CDataContainer const * >::iterator
        erase(ContainerList self, std::vector< CDataContainer const * >::iterator first, std::vector< CDataContainer const * >::iterator last) -> std::vector< CDataContainer const * >::iterator
        """
        return _COPASI.ContainerList_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(ContainerList self) -> ContainerList
        __init__(ContainerList self, ContainerList other) -> ContainerList
        __init__(ContainerList self, std::vector< CDataContainer const * >::size_type size) -> ContainerList
        __init__(ContainerList self, std::vector< CDataContainer const * >::size_type size, CDataContainer value) -> ContainerList
        """
        _COPASI.ContainerList_swiginit(self, _COPASI.new_ContainerList(*args))

    def push_back(self, x):
        r"""push_back(ContainerList self, CDataContainer x)"""
        return _COPASI.ContainerList_push_back(self, x)

    def front(self):
        r"""front(ContainerList self) -> CDataContainer"""
        return _COPASI.ContainerList_front(self)

    def back(self):
        r"""back(ContainerList self) -> CDataContainer"""
        return _COPASI.ContainerList_back(self)

    def assign(self, n, x):
        r"""assign(ContainerList self, std::vector< CDataContainer const * >::size_type n, CDataContainer x)"""
        return _COPASI.ContainerList_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(ContainerList self, std::vector< CDataContainer const * >::size_type new_size)
        resize(ContainerList self, std::vector< CDataContainer const * >::size_type new_size, CDataContainer x)
        """
        return _COPASI.ContainerList_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(ContainerList self, std::vector< CDataContainer const * >::iterator pos, CDataContainer x) -> std::vector< CDataContainer const * >::iterator
        insert(ContainerList self, std::vector< CDataContainer const * >::iterator pos, std::vector< CDataContainer const * >::size_type n, CDataContainer x)
        """
        return _COPASI.ContainerList_insert(self, *args)

    def reserve(self, n):
        r"""reserve(ContainerList self, std::vector< CDataContainer const * >::size_type n)"""
        return _COPASI.ContainerList_reserve(self, n)

    def capacity(self):
        r"""capacity(ContainerList self) -> std::vector< CDataContainer const * >::size_type"""
        return _COPASI.ContainerList_capacity(self)
    __swig_destroy__ = _COPASI.delete_ContainerList

# Register ContainerList in _COPASI:
_COPASI.ContainerList_swigregister(ContainerList)
class CDataArray(CDataContainer):
    r"""Proxy of C++ CDataArray class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Mode_Objects = _COPASI.CDataArray_Mode_Objects
    
    Mode_Vector = _COPASI.CDataArray_Mode_Vector
    
    Mode_VectorOnTheFly = _COPASI.CDataArray_Mode_VectorOnTheFly
    
    Mode_Strings = _COPASI.CDataArray_Mode_Strings
    
    Mode_Numbers = _COPASI.CDataArray_Mode_Numbers
    
    Mode___SIZE = _COPASI.CDataArray_Mode___SIZE
    

    def __init__(self, name, pParent, array, adopt):
        r"""__init__(CDataArray self, std::string const & name, CDataContainer pParent, CArrayInterface array, bool const & adopt) -> CDataArray"""
        _COPASI.CDataArray_swiginit(self, _COPASI.new_CDataArray(name, pParent, array, adopt))
    __swig_destroy__ = _COPASI.delete_CDataArray

    def setArray(self, a):
        r"""setArray(CDataArray self, CArrayInterface a)"""
        return _COPASI.CDataArray_setArray(self, a)

    def array(self):
        r"""array(CDataArray self) -> CArrayInterface"""
        return _COPASI.CDataArray_array(self)

    def setMode(self, *args):
        r"""
        setMode(CDataArray self, size_t d, CDataArray::Mode m)
        setMode(CDataArray self, CDataArray::Mode m)
        """
        return _COPASI.CDataArray_setMode(self, *args)

    def getMode(self, d):
        r"""getMode(CDataArray self, size_t d) -> CDataArray::Mode"""
        return _COPASI.CDataArray_getMode(self, d)

    def getDefaultMode(self):
        r"""getDefaultMode(CDataArray self) -> CDataArray::Mode"""
        return _COPASI.CDataArray_getDefaultMode(self)

    def dimensionality(self):
        r"""dimensionality(CDataArray self) -> size_t"""
        return _COPASI.CDataArray_dimensionality(self)

    def size(self):
        r"""size(CDataArray self) -> SizeTStdVector"""
        return _COPASI.CDataArray_size(self)

    def setAnnotation(self, d, i, pObject):
        r"""setAnnotation(CDataArray self, size_t d, size_t i, CDataObject pObject)"""
        return _COPASI.CDataArray_setAnnotation(self, d, i, pObject)

    def setAnnotationString(self, d, i, s):
        r"""setAnnotationString(CDataArray self, size_t d, size_t i, std::string const s)"""
        return _COPASI.CDataArray_setAnnotationString(self, d, i, s)

    def getAnnotationsCN(self, d):
        r"""getAnnotationsCN(CDataArray self, size_t d) -> ReportItemVector"""
        return _COPASI.CDataArray_getAnnotationsCN(self, d)

    def getAnnotationsString(self, d, display=True):
        r"""getAnnotationsString(CDataArray self, size_t d, bool display=True) -> StringStdVector"""
        return _COPASI.CDataArray_getAnnotationsString(self, d, display)

    def getDimensionDescription(self, d):
        r"""getDimensionDescription(CDataArray self, size_t d) -> std::string const &"""
        return _COPASI.CDataArray_getDimensionDescription(self, d)

    def setDimensionDescription(self, d, s):
        r"""setDimensionDescription(CDataArray self, size_t d, std::string const & s)"""
        return _COPASI.CDataArray_setDimensionDescription(self, d, s)

    def getDescription(self):
        r"""getDescription(CDataArray self) -> std::string const &"""
        return _COPASI.CDataArray_getDescription(self)

    def setDescription(self, s):
        r"""setDescription(CDataArray self, std::string const & s)"""
        return _COPASI.CDataArray_setDescription(self, s)

    def resize(self):
        r"""resize(CDataArray self)"""
        return _COPASI.CDataArray_resize(self)

    def addElementReference(self, *args):
        r"""
        addElementReference(CDataArray self, SizeTStdVector index) -> CDataObject
        addElementReference(CDataArray self, StringStdVector nameIndex) -> CDataObject
        addElementReference(CDataArray self, int u, int v) -> CDataObject
        addElementReference(CDataArray self, int u) -> CDataObject
        """
        return _COPASI.CDataArray_addElementReference(self, *args)

    def getObject(self, cn):
        r"""getObject(CDataArray self, CCommonName cn) -> CObjectInterface"""
        return _COPASI.CDataArray_getObject(self, cn)

    def isEmpty(self):
        r"""isEmpty(CDataArray self) -> bool"""
        return _COPASI.CDataArray_isEmpty(self)

    def reDimensionalize(self, d):
        r"""reDimensionalize(CDataArray self, size_t d)"""
        return _COPASI.CDataArray_reDimensionalize(self, d)

    def resizeOneDimension(self, d):
        r"""resizeOneDimension(CDataArray self, size_t d)"""
        return _COPASI.CDataArray_resizeOneDimension(self, d)

    def printRecursively(self, ostream, level, index, display):
        r"""printRecursively(CDataArray self, std::ostream & ostream, size_t level, SizeTStdVector index, VectorOfStringVectors display)"""
        return _COPASI.CDataArray_printRecursively(self, ostream, level, index, display)

    def getObjectDisplayName(self):
        r"""getObjectDisplayName(CDataArray self) -> std::string"""
        return _COPASI.CDataArray_getObjectDisplayName(self)

    def getArray(self):
        r"""getArray(CDataArray self) -> CArrayInterface"""
        return _COPASI.CDataArray_getArray(self)

    def displayNamesToCN(self, DisplayNames):
        r"""displayNamesToCN(CDataArray self, StringStdVector DisplayNames) -> StringStdVector"""
        return _COPASI.CDataArray_displayNamesToCN(self, DisplayNames)

    def cnToIndex(self, cnIndex):
        r"""cnToIndex(CDataArray self, StringStdVector cnIndex) -> SizeTStdVector"""
        return _COPASI.CDataArray_cnToIndex(self, cnIndex)

# Register CDataArray in _COPASI:
_COPASI.CDataArray_swigregister(CDataArray)
class CArrayInterface(object):
    r"""Proxy of C++ CArrayInterface class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _COPASI.delete_CArrayInterface

    def size(self):
        r"""size(CArrayInterface self) -> SizeTStdVector"""
        return _COPASI.CArrayInterface_size(self)

    def dimensionality(self):
        r"""dimensionality(CArrayInterface self) -> size_t"""
        return _COPASI.CArrayInterface_dimensionality(self)

    def get(self, *args):
        r"""
        get(CArrayInterface self, SizeTStdVector MY_FUNNY_INDEX) -> CArrayInterface::data_type
        get(CArrayInterface self, int index1, int index2) -> CArrayInterface::data_type
        get(CArrayInterface self, int index1, int index2, int index3) -> CArrayInterface::data_type
        """
        return _COPASI.CArrayInterface_get(self, *args)

# Register CArrayInterface in _COPASI:
_COPASI.CArrayInterface_swigregister(CArrayInterface)
class CArray(CArrayInterface):
    r"""Proxy of C++ CArray class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CArray self) -> CArray
        __init__(CArray self, SizeTStdVector sizes) -> CArray
        """
        _COPASI.CArray_swiginit(self, _COPASI.new_CArray(*args))
    __swig_destroy__ = _COPASI.delete_CArray

    def resize(self, sizes):
        r"""resize(CArray self, SizeTStdVector sizes)"""
        return _COPASI.CArray_resize(self, sizes)

    def size(self):
        r"""size(CArray self) -> SizeTStdVector"""
        return _COPASI.CArray_size(self)

    def dimensionality(self):
        r"""dimensionality(CArray self) -> size_t"""
        return _COPASI.CArray_dimensionality(self)

# Register CArray in _COPASI:
_COPASI.CArray_swigregister(CArray)
class AnnotatedFloatMatrix(CArrayInterface):
    r"""Proxy of C++ CMatrixInterface< CMatrix< double > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, matrix):
        r"""__init__(AnnotatedFloatMatrix self, FloatMatrix matrix) -> AnnotatedFloatMatrix"""
        _COPASI.AnnotatedFloatMatrix_swiginit(self, _COPASI.new_AnnotatedFloatMatrix(matrix))
    __swig_destroy__ = _COPASI.delete_AnnotatedFloatMatrix

    def size(self):
        r"""size(AnnotatedFloatMatrix self) -> SizeTStdVector"""
        return _COPASI.AnnotatedFloatMatrix_size(self)

    def dimensionality(self):
        r"""dimensionality(AnnotatedFloatMatrix self) -> size_t"""
        return _COPASI.AnnotatedFloatMatrix_dimensionality(self)

# Register AnnotatedFloatMatrix in _COPASI:
_COPASI.AnnotatedFloatMatrix_swigregister(AnnotatedFloatMatrix)
class CAnnotation(object):
    r"""Proxy of C++ CAnnotation class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def castObject(pObject):
        r"""castObject(CDataObject pObject) -> CAnnotation"""
        return _COPASI.CAnnotation_castObject(pObject)

    @staticmethod
    def allocateMiriamInfo(pParent):
        r"""allocateMiriamInfo(CDataContainer pParent) -> CMIRIAMInfo"""
        return _COPASI.CAnnotation_allocateMiriamInfo(pParent)

    @staticmethod
    def freeMiriamInfo(pParent):
        r"""freeMiriamInfo(CDataContainer pParent)"""
        return _COPASI.CAnnotation_freeMiriamInfo(pParent)

    def createUndoData(self, *args):
        r"""createUndoData(CAnnotation self, CUndoData undoData, CUndoData::Type const & type, CData oldData=CData(), CCore::Framework const & framework=ParticleNumbers)"""
        return _COPASI.CAnnotation_createUndoData(self, *args)

    def __init__(self, *args):
        r"""
        __init__(CAnnotation self) -> CAnnotation
        __init__(CAnnotation self, CAnnotation src) -> CAnnotation
        """
        _COPASI.CAnnotation_swiginit(self, _COPASI.new_CAnnotation(*args))
    __swig_destroy__ = _COPASI.delete_CAnnotation

    def getKey(self):
        r"""getKey(CAnnotation self) -> std::string const &"""
        return _COPASI.CAnnotation_getKey(self)

    def initMiriamAnnotation(self, newId):
        r"""initMiriamAnnotation(CAnnotation self, std::string const & newId)"""
        return _COPASI.CAnnotation_initMiriamAnnotation(self, newId)

    def setMiriamAnnotation(self, miriamAnnotation, newId, oldId):
        r"""setMiriamAnnotation(CAnnotation self, std::string const & miriamAnnotation, std::string const & newId, std::string const & oldId)"""
        return _COPASI.CAnnotation_setMiriamAnnotation(self, miriamAnnotation, newId, oldId)

    def getMiriamAnnotation(self):
        r"""getMiriamAnnotation(CAnnotation self) -> std::string const &"""
        return _COPASI.CAnnotation_getMiriamAnnotation(self)

    def setNotes(self, notes):
        r"""setNotes(CAnnotation self, std::string const & notes)"""
        return _COPASI.CAnnotation_setNotes(self, notes)

    def getNotes(self):
        r"""getNotes(CAnnotation self) -> std::string const &"""
        return _COPASI.CAnnotation_getNotes(self)

    def addUnsupportedAnnotation(self, name, xml):
        r"""addUnsupportedAnnotation(CAnnotation self, std::string const & name, std::string const & xml) -> bool"""
        return _COPASI.CAnnotation_addUnsupportedAnnotation(self, name, xml)

    def replaceUnsupportedAnnotation(self, name, xml):
        r"""replaceUnsupportedAnnotation(CAnnotation self, std::string const & name, std::string const & xml) -> bool"""
        return _COPASI.CAnnotation_replaceUnsupportedAnnotation(self, name, xml)

    def removeUnsupportedAnnotation(self, name):
        r"""removeUnsupportedAnnotation(CAnnotation self, std::string const & name) -> bool"""
        return _COPASI.CAnnotation_removeUnsupportedAnnotation(self, name)

    def hasUnsupportedAnnotation(self, name):
        r"""hasUnsupportedAnnotation(CAnnotation self, std::string name) -> bool"""
        return _COPASI.CAnnotation_hasUnsupportedAnnotation(self, name)

    def getNumUnsupportedAnnotations(self):
        r"""getNumUnsupportedAnnotations(CAnnotation self) -> int"""
        return _COPASI.CAnnotation_getNumUnsupportedAnnotations(self)

    def getUnsupportedAnnotation(self, *args):
        r"""
        getUnsupportedAnnotation(CAnnotation self, std::string name) -> std::string
        getUnsupportedAnnotation(CAnnotation self, int index) -> std::string
        """
        return _COPASI.CAnnotation_getUnsupportedAnnotation(self, *args)

    def getUnsupportedAnnotationName(self, index):
        r"""getUnsupportedAnnotationName(CAnnotation self, int index) -> std::string"""
        return _COPASI.CAnnotation_getUnsupportedAnnotationName(self, index)

# Register CAnnotation in _COPASI:
_COPASI.CAnnotation_swigregister(CAnnotation)
class CEigen(CDataContainer):
    r"""Proxy of C++ CEigen class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CEigen self, std::string const & name="NoName", CDataContainer pParent=static_cast< CDataContainer * >((void *) 0)) -> CEigen
        __init__(CEigen self, CEigen src, CDataContainer pParent) -> CEigen
        """
        _COPASI.CEigen_swiginit(self, _COPASI.new_CEigen(*args))
    __swig_destroy__ = _COPASI.delete_CEigen

    def initialize(self):
        r"""initialize(CEigen self)"""
        return _COPASI.CEigen_initialize(self)

    def cleanup(self):
        r"""cleanup(CEigen self)"""
        return _COPASI.CEigen_cleanup(self)

    def calcEigenValues(self, matrix):
        r"""calcEigenValues(CEigen self, FloatMatrix matrix)"""
        return _COPASI.CEigen_calcEigenValues(self, matrix)

    def stabilityAnalysis(self, resolution):
        r"""stabilityAnalysis(CEigen self, double const & resolution)"""
        return _COPASI.CEigen_stabilityAnalysis(self, resolution)

    def getMaxrealpart(self):
        r"""getMaxrealpart(CEigen self) -> double const &"""
        return _COPASI.CEigen_getMaxrealpart(self)

    def getMaximagpart(self):
        r"""getMaximagpart(CEigen self) -> double const &"""
        return _COPASI.CEigen_getMaximagpart(self)

    def getNzero(self):
        r"""getNzero(CEigen self) -> size_t const &"""
        return _COPASI.CEigen_getNzero(self)

    def getStiffness(self):
        r"""getStiffness(CEigen self) -> double const &"""
        return _COPASI.CEigen_getStiffness(self)

    def getHierarchy(self):
        r"""getHierarchy(CEigen self) -> double const &"""
        return _COPASI.CEigen_getHierarchy(self)

    def getNreal(self):
        r"""getNreal(CEigen self) -> size_t const &"""
        return _COPASI.CEigen_getNreal(self)

    def getNimag(self):
        r"""getNimag(CEigen self) -> size_t const &"""
        return _COPASI.CEigen_getNimag(self)

    def getNcplxconj(self):
        r"""getNcplxconj(CEigen self) -> size_t const &"""
        return _COPASI.CEigen_getNcplxconj(self)

    def getNposreal(self):
        r"""getNposreal(CEigen self) -> size_t const &"""
        return _COPASI.CEigen_getNposreal(self)

    def getNnegreal(self):
        r"""getNnegreal(CEigen self) -> size_t const &"""
        return _COPASI.CEigen_getNnegreal(self)

    def getI(self):
        r"""getI(CEigen self) -> FloatVector"""
        return _COPASI.CEigen_getI(self)

    def getR(self):
        r"""getR(CEigen self) -> FloatVector"""
        return _COPASI.CEigen_getR(self)

# Register CEigen in _COPASI:
_COPASI.CEigen_swigregister(CEigen)
class CFunctionParameter(CDataContainer):
    r"""Proxy of C++ CFunctionParameter class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Role_SUBSTRATE = _COPASI.CFunctionParameter_Role_SUBSTRATE
    
    Role_PRODUCT = _COPASI.CFunctionParameter_Role_PRODUCT
    
    Role_MODIFIER = _COPASI.CFunctionParameter_Role_MODIFIER
    
    Role_PARAMETER = _COPASI.CFunctionParameter_Role_PARAMETER
    
    Role_VOLUME = _COPASI.CFunctionParameter_Role_VOLUME
    
    Role_TIME = _COPASI.CFunctionParameter_Role_TIME
    
    Role_VARIABLE = _COPASI.CFunctionParameter_Role_VARIABLE
    
    Role_TEMPORARY = _COPASI.CFunctionParameter_Role_TEMPORARY
    
    Role___SIZE = _COPASI.CFunctionParameter_Role___SIZE
    
    DataType_INT32 = _COPASI.CFunctionParameter_DataType_INT32
    
    DataType_FLOAT64 = _COPASI.CFunctionParameter_DataType_FLOAT64
    
    DataType_VINT32 = _COPASI.CFunctionParameter_DataType_VINT32
    
    DataType_VFLOAT64 = _COPASI.CFunctionParameter_DataType_VFLOAT64
    
    DataType___SIZE = _COPASI.CFunctionParameter_DataType___SIZE
    

    @staticmethod
    def fromData(data, pParent):
        r"""fromData(CData data, CUndoObjectInterface pParent) -> CFunctionParameter"""
        return _COPASI.CFunctionParameter_fromData(data, pParent)

    def __init__(self, *args):
        r"""
        __init__(CFunctionParameter self, std::string const & name="NoName", CDataContainer pParent=static_cast< CDataContainer * >((void *) 0)) -> CFunctionParameter
        __init__(CFunctionParameter self, CFunctionParameter src, CDataContainer pParent) -> CFunctionParameter
        __init__(CFunctionParameter self, std::string const & name, CFunctionParameter::DataType const & type, CFunctionParameter::Role usage, CDataContainer pParent=static_cast< CDataContainer * >((void *) 0)) -> CFunctionParameter
        """
        _COPASI.CFunctionParameter_swiginit(self, _COPASI.new_CFunctionParameter(*args))
    __swig_destroy__ = _COPASI.delete_CFunctionParameter

    def cleanup(self):
        r"""cleanup(CFunctionParameter self)"""
        return _COPASI.CFunctionParameter_cleanup(self)

    def getKey(self):
        r"""getKey(CFunctionParameter self) -> std::string const &"""
        return _COPASI.CFunctionParameter_getKey(self)

    def getType(self):
        r"""getType(CFunctionParameter self) -> CFunctionParameter::DataType const &"""
        return _COPASI.CFunctionParameter_getType(self)

    def setType(self, type):
        r"""setType(CFunctionParameter self, CFunctionParameter::DataType const & type)"""
        return _COPASI.CFunctionParameter_setType(self, type)

    def getUsage(self):
        r"""getUsage(CFunctionParameter self) -> CFunctionParameter::Role"""
        return _COPASI.CFunctionParameter_getUsage(self)

    def setUsage(self, usage):
        r"""setUsage(CFunctionParameter self, CFunctionParameter::Role usage)"""
        return _COPASI.CFunctionParameter_setUsage(self, usage)

    def setIsUsed(self, isUsed):
        r"""setIsUsed(CFunctionParameter self, bool const & isUsed)"""
        return _COPASI.CFunctionParameter_setIsUsed(self, isUsed)

    def isUsed(self):
        r"""isUsed(CFunctionParameter self) -> bool const &"""
        return _COPASI.CFunctionParameter_isUsed(self)

# Register CFunctionParameter in _COPASI:
_COPASI.CFunctionParameter_swigregister(CFunctionParameter)
class CFunctionParameters(CDataContainer):
    r"""Proxy of C++ CFunctionParameters class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CFunctionParameters self, std::string const & name="NoName", CDataContainer pParent=static_cast< CDataContainer * >((void *) 0)) -> CFunctionParameters
        __init__(CFunctionParameters self, CFunctionParameters src, CDataContainer pParent) -> CFunctionParameters
        """
        _COPASI.CFunctionParameters_swiginit(self, _COPASI.new_CFunctionParameters(*args))
    __swig_destroy__ = _COPASI.delete_CFunctionParameters

    def cleanup(self):
        r"""cleanup(CFunctionParameters self)"""
        return _COPASI.CFunctionParameters_cleanup(self)

    def addCopy(self, parameter):
        r"""addCopy(CFunctionParameters self, CFunctionParameter parameter)"""
        return _COPASI.CFunctionParameters_addCopy(self, parameter)

    def add(self, *args):
        r"""
        add(CFunctionParameters self, CFunctionParameter parameter, bool const & adopt=False) -> bool
        add(CFunctionParameters self, std::string const & name, CFunctionParameter::DataType const & type, CFunctionParameter::Role usage) -> bool
        """
        return _COPASI.CFunctionParameters_add(self, *args)

    def remove(self, name):
        r"""remove(CFunctionParameters self, std::string const & name)"""
        return _COPASI.CFunctionParameters_remove(self, name)

    def getParameters(self):
        r"""getParameters(CFunctionParameters self) -> CDataVectorNS< CFunctionParameter > &"""
        return _COPASI.CFunctionParameters_getParameters(self)

    def size(self):
        r"""size(CFunctionParameters self) -> size_t"""
        return _COPASI.CFunctionParameters_size(self)

    def swap(self, _from, to):
        r"""swap(CFunctionParameters self, size_t const & _from, size_t const & to)"""
        return _COPASI.CFunctionParameters_swap(self, _from, to)

    def isVector(self, role):
        r"""isVector(CFunctionParameters self, CFunctionParameter::Role role) -> bool"""
        return _COPASI.CFunctionParameters_isVector(self, role)

    def getNumberOfParametersByUsage(self, usage):
        r"""getNumberOfParametersByUsage(CFunctionParameters self, CFunctionParameter::Role usage) -> size_t"""
        return _COPASI.CFunctionParameters_getNumberOfParametersByUsage(self, usage)

    def getParameterByUsage(self, usage, pos):
        r"""getParameterByUsage(CFunctionParameters self, CFunctionParameter::Role usage, size_t pos) -> CFunctionParameter"""
        return _COPASI.CFunctionParameters_getParameterByUsage(self, usage, pos)

    def findParameterByName(self, name, dataType):
        r"""findParameterByName(CFunctionParameters self, std::string const & name, int dataType) -> unsigned int"""
        return _COPASI.CFunctionParameters_findParameterByName(self, name, dataType)

    def getParameter(self, index):
        r"""getParameter(CFunctionParameters self, unsigned int index) -> CFunctionParameter"""
        return _COPASI.CFunctionParameters_getParameter(self, index)

# Register CFunctionParameters in _COPASI:
_COPASI.CFunctionParameters_swigregister(CFunctionParameters)
class CFunctionParameterMap(object):
    r"""Proxy of C++ CFunctionParameterMap class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CFunctionParameterMap self) -> CFunctionParameterMap
        __init__(CFunctionParameterMap self, CFunctionParameterMap src) -> CFunctionParameterMap
        """
        _COPASI.CFunctionParameterMap_swiginit(self, _COPASI.new_CFunctionParameterMap(*args))
    __swig_destroy__ = _COPASI.delete_CFunctionParameterMap

    def setCallParameter(self, paramName, obj):
        r"""setCallParameter(CFunctionParameterMap self, std::string const paramName, CDataObject obj) -> CIssue"""
        return _COPASI.CFunctionParameterMap_setCallParameter(self, paramName, obj)

    def addCallParameter(self, paramName, obj):
        r"""addCallParameter(CFunctionParameterMap self, std::string const paramName, CDataObject obj) -> CIssue"""
        return _COPASI.CFunctionParameterMap_addCallParameter(self, paramName, obj)

    def clearCallParameter(self, paramName):
        r"""clearCallParameter(CFunctionParameterMap self, std::string const paramName)"""
        return _COPASI.CFunctionParameterMap_clearCallParameter(self, paramName)

    def initializeFromFunctionParameters(self, src):
        r"""initializeFromFunctionParameters(CFunctionParameterMap self, CFunctionParameters src)"""
        return _COPASI.CFunctionParameterMap_initializeFromFunctionParameters(self, src)

    def getFunctionParameters(self):
        r"""getFunctionParameters(CFunctionParameterMap self) -> CFunctionParameters"""
        return _COPASI.CFunctionParameterMap_getFunctionParameters(self)

    def getPointers(self):
        r"""getPointers(CFunctionParameterMap self) -> PointerCallParameters"""
        return _COPASI.CFunctionParameterMap_getPointers(self)

# Register CFunctionParameterMap in _COPASI:
_COPASI.CFunctionParameterMap_swigregister(CFunctionParameterMap)
class PointerCallParameters(object):
    r"""Proxy of C++ CCallParameters< double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(PointerCallParameters self, size_t const & size=0) -> PointerCallParameters
        __init__(PointerCallParameters self, PointerCallParameters src) -> PointerCallParameters
        """
        _COPASI.PointerCallParameters_swiginit(self, _COPASI.new_PointerCallParameters(*args))
    __swig_destroy__ = _COPASI.delete_PointerCallParameters

    def resize(self, size):
        r"""resize(PointerCallParameters self, size_t const & size)"""
        return _COPASI.PointerCallParameters_resize(self, size)

    def clear(self):
        r"""clear(PointerCallParameters self)"""
        return _COPASI.PointerCallParameters_clear(self)

    def size(self):
        r"""size(PointerCallParameters self) -> size_t"""
        return _COPASI.PointerCallParameters_size(self)

# Register PointerCallParameters in _COPASI:
_COPASI.PointerCallParameters_swigregister(PointerCallParameters)
class ObjectCallParameters(object):
    r"""Proxy of C++ CCallParameters< CDataObject > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ObjectCallParameters self, size_t const & size=0) -> ObjectCallParameters
        __init__(ObjectCallParameters self, ObjectCallParameters src) -> ObjectCallParameters
        """
        _COPASI.ObjectCallParameters_swiginit(self, _COPASI.new_ObjectCallParameters(*args))
    __swig_destroy__ = _COPASI.delete_ObjectCallParameters

    def resize(self, size):
        r"""resize(ObjectCallParameters self, size_t const & size)"""
        return _COPASI.ObjectCallParameters_resize(self, size)

    def clear(self):
        r"""clear(ObjectCallParameters self)"""
        return _COPASI.ObjectCallParameters_clear(self)

    def size(self):
        r"""size(ObjectCallParameters self) -> size_t"""
        return _COPASI.ObjectCallParameters_size(self)

# Register ObjectCallParameters in _COPASI:
_COPASI.ObjectCallParameters_swigregister(ObjectCallParameters)
class CEvaluationTree(CDataContainer):
    r"""Proxy of C++ CEvaluationTree class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Function = _COPASI.CEvaluationTree_Function
    
    MassAction = _COPASI.CEvaluationTree_MassAction
    
    PreDefined = _COPASI.CEvaluationTree_PreDefined
    
    UserDefined = _COPASI.CEvaluationTree_UserDefined
    
    Expression = _COPASI.CEvaluationTree_Expression
    
    MathExpression = _COPASI.CEvaluationTree_MathExpression
    

    @staticmethod
    def create(type):
        r"""create(CEvaluationTree::Type type) -> CEvaluationTree"""
        return _COPASI.CEvaluationTree_create(type)

    @staticmethod
    def copy(src):
        r"""copy(CEvaluationTree src) -> CEvaluationTree"""
        return _COPASI.CEvaluationTree_copy(src)

    @staticmethod
    def fromData(data, pParent):
        r"""fromData(CData data, CUndoObjectInterface pParent) -> CEvaluationTree"""
        return _COPASI.CEvaluationTree_fromData(data, pParent)

    def __init__(self, *args):
        r"""
        __init__(CEvaluationTree self, std::string const & name="NoName", CDataContainer pParent=static_cast< CDataContainer * >((void *) 0), CEvaluationTree::Type const & type=Function) -> CEvaluationTree
        __init__(CEvaluationTree self, CEvaluationTree src, CDataContainer pParent) -> CEvaluationTree
        """
        _COPASI.CEvaluationTree_swiginit(self, _COPASI.new_CEvaluationTree(*args))
    __swig_destroy__ = _COPASI.delete_CEvaluationTree

    def getType(self):
        r"""getType(CEvaluationTree self) -> CEvaluationTree::Type const &"""
        return _COPASI.CEvaluationTree_getType(self)

    def setTree(self, pRootNode, isFunction):
        r"""setTree(CEvaluationTree self, ASTNode const & pRootNode, bool isFunction) -> bool"""
        return _COPASI.CEvaluationTree_setTree(self, pRootNode, isFunction)

    def getNodeObject(self, CN):
        r"""getNodeObject(CEvaluationTree self, CCommonName CN) -> CObjectInterface"""
        return _COPASI.CEvaluationTree_getNodeObject(self, CN)

    def setInfix(self, infix):
        r"""setInfix(CEvaluationTree self, std::string const & infix) -> CIssue"""
        return _COPASI.CEvaluationTree_setInfix(self, infix)

    def compile(self):
        r"""compile(CEvaluationTree self) -> CIssue"""
        return _COPASI.CEvaluationTree_compile(self)

    def isBoolean(self):
        r"""isBoolean(CEvaluationTree self) -> bool"""
        return _COPASI.CEvaluationTree_isBoolean(self)

    def getInfix(self):
        r"""getInfix(CEvaluationTree self) -> std::string const &"""
        return _COPASI.CEvaluationTree_getInfix(self)

    def getVariableIndex(self, name):
        r"""getVariableIndex(CEvaluationTree self, std::string const & name) -> size_t"""
        return _COPASI.CEvaluationTree_getVariableIndex(self, name)

    def getVariableValue(self, index):
        r"""getVariableValue(CEvaluationTree self, size_t const & index) -> double const &"""
        return _COPASI.CEvaluationTree_getVariableValue(self, index)

    def updateTree(self):
        r"""updateTree(CEvaluationTree self) -> CIssue"""
        return _COPASI.CEvaluationTree_updateTree(self)

    def hasCircularDependency(self):
        r"""hasCircularDependency(CEvaluationTree self) -> bool"""
        return _COPASI.CEvaluationTree_hasCircularDependency(self)

    def hasDiscontinuity(self):
        r"""hasDiscontinuity(CEvaluationTree self) -> bool"""
        return _COPASI.CEvaluationTree_hasDiscontinuity(self)

    def containsCN(self, elements):
        r"""containsCN(CEvaluationTree self, DataObjectSet elements) -> bool"""
        return _COPASI.CEvaluationTree_containsCN(self, elements)

    def size(self):
        r"""size(CEvaluationTree self) -> size_t"""
        return _COPASI.CEvaluationTree_size(self)

    def mapObjectNodes(self, pSrc, pTarget):
        r"""mapObjectNodes(CEvaluationTree self, CDataContainer pSrc, CDataContainer pTarget) -> bool"""
        return _COPASI.CEvaluationTree_mapObjectNodes(self, pSrc, pTarget)

    def getErrorLocation(self):
        r"""getErrorLocation(CEvaluationTree self) -> int"""
        return _COPASI.CEvaluationTree_getErrorLocation(self)

    def isFunction(self):
        r"""isFunction(CEvaluationTree self) -> bool"""
        return _COPASI.CEvaluationTree_isFunction(self)

# Register CEvaluationTree in _COPASI:
_COPASI.CEvaluationTree_swigregister(CEvaluationTree)
class CExpression(CEvaluationTree):
    r"""Proxy of C++ CExpression class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CExpression self, std::string const & name="Expression", CDataContainer pParent=static_cast< CDataContainer * >((void *) 0)) -> CExpression
        __init__(CExpression self, CExpression src, CDataContainer pParent) -> CExpression
        """
        _COPASI.CExpression_swiginit(self, _COPASI.new_CExpression(*args))
    __swig_destroy__ = _COPASI.delete_CExpression

    @staticmethod
    def createInitialExpression(expression, pDataModel):
        r"""createInitialExpression(CExpression expression, CDataModel pDataModel) -> CExpression"""
        return _COPASI.CExpression_createInitialExpression(expression, pDataModel)

    def setIsBoolean(self, booleanRequired):
        r"""setIsBoolean(CExpression self, bool const & booleanRequired)"""
        return _COPASI.CExpression_setIsBoolean(self, booleanRequired)

    def setInfix(self, infix):
        r"""setInfix(CExpression self, std::string const & infix) -> CIssue"""
        return _COPASI.CExpression_setInfix(self, infix)

    def compile(self, *args):
        r"""compile(CExpression self, ContainerList listOfContainer=EmptyList) -> CIssue"""
        return _COPASI.CExpression_compile(self, *args)

    def calcValue(self):
        r"""calcValue(CExpression self) -> double const &"""
        return _COPASI.CExpression_calcValue(self)

    def refresh(self):
        r"""refresh(CExpression self)"""
        return _COPASI.CExpression_refresh(self)

    def getNodeObject(self, CN):
        r"""getNodeObject(CExpression self, CCommonName CN) -> CObjectInterface"""
        return _COPASI.CExpression_getNodeObject(self, CN)

    def getListOfContainer(self):
        r"""getListOfContainer(CExpression self) -> ContainerList"""
        return _COPASI.CExpression_getListOfContainer(self)

    def updateInfix(self):
        r"""updateInfix(CExpression self) -> bool"""
        return _COPASI.CExpression_updateInfix(self)

    def getDisplayString(self):
        r"""getDisplayString(CExpression self) -> std::string const &"""
        return _COPASI.CExpression_getDisplayString(self)

    def getCCodeString(self):
        r"""getCCodeString(CExpression self) -> std::string"""
        return _COPASI.CExpression_getCCodeString(self)

    def getBerkeleyMadonnaString(self):
        r"""getBerkeleyMadonnaString(CExpression self) -> std::string"""
        return _COPASI.CExpression_getBerkeleyMadonnaString(self)

    def getXPPString(self):
        r"""getXPPString(CExpression self) -> std::string"""
        return _COPASI.CExpression_getXPPString(self)

    def writeMathML(self, fullExpand, l):
        r"""writeMathML(CExpression self, bool fullExpand, unsigned int l) -> std::string"""
        return _COPASI.CExpression_writeMathML(self, fullExpand, l)

# Register CExpression in _COPASI:
_COPASI.CExpression_swigregister(CExpression)
class CFunction(CEvaluationTree, CAnnotation):
    r"""Proxy of C++ CFunction class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def fromData(data, pParent):
        r"""fromData(CData data, CUndoObjectInterface pParent) -> CFunction"""
        return _COPASI.CFunction_fromData(data, pParent)

    def __init__(self, *args):
        r"""
        __init__(CFunction self, std::string const & name="NoName", CDataContainer pParent=static_cast< CDataContainer * >((void *) 0), CEvaluationTree::Type const & type=Function) -> CFunction
        __init__(CFunction self, CFunction src, CDataContainer pParent) -> CFunction
        """
        _COPASI.CFunction_swiginit(self, _COPASI.new_CFunction(*args))
    __swig_destroy__ = _COPASI.delete_CFunction

    def getKey(self):
        r"""getKey(CFunction self) -> std::string const &"""
        return _COPASI.CFunction_getKey(self)

    def setSBMLId(self, id):
        r"""setSBMLId(CFunction self, std::string const & id)"""
        return _COPASI.CFunction_setSBMLId(self, id)

    def getSBMLId(self):
        r"""getSBMLId(CFunction self) -> std::string const &"""
        return _COPASI.CFunction_getSBMLId(self)

    def setInfix(self, infix):
        r"""setInfix(CFunction self, std::string const & infix) -> CIssue"""
        return _COPASI.CFunction_setInfix(self, infix)

    def isReadOnly(self):
        r"""isReadOnly(CFunction self) -> bool"""
        return _COPASI.CFunction_isReadOnly(self)

    def calcValue(self, callParameters):
        r"""calcValue(CFunction self, PointerCallParameters callParameters) -> double const &"""
        return _COPASI.CFunction_calcValue(self, callParameters)

    def getVariableIndex(self, name):
        r"""getVariableIndex(CFunction self, std::string const & name) -> size_t"""
        return _COPASI.CFunction_getVariableIndex(self, name)

    def getVariableValue(self, index):
        r"""getVariableValue(CFunction self, size_t const & index) -> double const &"""
        return _COPASI.CFunction_getVariableValue(self, index)

    def setReversible(self, reversible):
        r"""setReversible(CFunction self, TriLogic const & reversible)"""
        return _COPASI.CFunction_setReversible(self, reversible)

    def isReversible(self):
        r"""isReversible(CFunction self) -> TriLogic const &"""
        return _COPASI.CFunction_isReversible(self)

    def getVariables(self, *args):
        r"""
        getVariables(CFunction self) -> CFunctionParameters
        getVariables(CFunction self) -> CFunctionParameters
        """
        return _COPASI.CFunction_getVariables(self, *args)

    def addVariable(self, *args):
        r"""addVariable(CFunction self, std::string const & name, CFunctionParameter::Role usage=VARIABLE, CFunctionParameter::DataType const & type=FLOAT64) -> bool"""
        return _COPASI.CFunction_addVariable(self, *args)

    def isSuitable(self, noSubstrates, noProducts, reversible):
        r"""isSuitable(CFunction self, size_t const noSubstrates, size_t const noProducts, TriLogic const reversible) -> bool"""
        return _COPASI.CFunction_isSuitable(self, noSubstrates, noProducts, reversible)

    @staticmethod
    def completeFunctionList(list, added=0):
        r"""completeFunctionList(std::vector< CFunction const *,std::allocator< CFunction const * > > & list, size_t const & added=0) -> bool"""
        return _COPASI.CFunction_completeFunctionList(list, added)

    def createListOfParametersForMathML(self, env):
        r"""createListOfParametersForMathML(CFunction self, VectorOfStringVectors env)"""
        return _COPASI.CFunction_createListOfParametersForMathML(self, env)

    def createCopy(self):
        r"""createCopy(CFunction self) -> CFunction"""
        return _COPASI.CFunction_createCopy(self)

    def setNotes(self, notes):
        r"""setNotes(CFunction self, std::string const & notes)"""
        return _COPASI.CFunction_setNotes(self, notes)

    def getNotes(self):
        r"""getNotes(CFunction self) -> std::string const &"""
        return _COPASI.CFunction_getNotes(self)

    def getMiriamAnnotation(self):
        r"""getMiriamAnnotation(CFunction self) -> std::string const &"""
        return _COPASI.CFunction_getMiriamAnnotation(self)

    def setMiriamAnnotation(self, miriamAnnotation, newId, oldId):
        r"""setMiriamAnnotation(CFunction self, std::string const & miriamAnnotation, std::string const & newId, std::string const & oldId)"""
        return _COPASI.CFunction_setMiriamAnnotation(self, miriamAnnotation, newId, oldId)

    def hasUnsupportedAnnotation(self, name):
        r"""hasUnsupportedAnnotation(CFunction self, std::string name) -> bool"""
        return _COPASI.CFunction_hasUnsupportedAnnotation(self, name)

    def getNumUnsupportedAnnotations(self):
        r"""getNumUnsupportedAnnotations(CFunction self) -> int"""
        return _COPASI.CFunction_getNumUnsupportedAnnotations(self)

    def getUnsupportedAnnotation(self, *args):
        r"""
        getUnsupportedAnnotation(CFunction self, std::string name) -> std::string
        getUnsupportedAnnotation(CFunction self, int index) -> std::string
        """
        return _COPASI.CFunction_getUnsupportedAnnotation(self, *args)

    def getUnsupportedAnnotationName(self, index):
        r"""getUnsupportedAnnotationName(CFunction self, int index) -> std::string"""
        return _COPASI.CFunction_getUnsupportedAnnotationName(self, index)

    def addUnsupportedAnnotation(self, name, xml):
        r"""addUnsupportedAnnotation(CFunction self, std::string const & name, std::string const & xml) -> bool"""
        return _COPASI.CFunction_addUnsupportedAnnotation(self, name, xml)

    def replaceUnsupportedAnnotation(self, name, xml):
        r"""replaceUnsupportedAnnotation(CFunction self, std::string const & name, std::string const & xml) -> bool"""
        return _COPASI.CFunction_replaceUnsupportedAnnotation(self, name, xml)

    def removeUnsupportedAnnotation(self, name):
        r"""removeUnsupportedAnnotation(CFunction self, std::string const & name) -> bool"""
        return _COPASI.CFunction_removeUnsupportedAnnotation(self, name)

# Register CFunction in _COPASI:
_COPASI.CFunction_swigregister(CFunction)
class CFunctionDB(CDataContainer):
    r"""Proxy of C++ CFunctionDB class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name, pParent):
        r"""__init__(CFunctionDB self, std::string const & name, CDataContainer pParent) -> CFunctionDB"""
        _COPASI.CFunctionDB_swiginit(self, _COPASI.new_CFunctionDB(name, pParent))
    __swig_destroy__ = _COPASI.delete_CFunctionDB

    def cleanup(self):
        r"""cleanup(CFunctionDB self)"""
        return _COPASI.CFunctionDB_cleanup(self)

    def initObjects(self):
        r"""initObjects(CFunctionDB self)"""
        return _COPASI.CFunctionDB_initObjects(self)

    def load(self, *args):
        r"""
        load(CFunctionDB self) -> bool
        load(CFunctionDB self, std::string const & fileName) -> bool
        """
        return _COPASI.CFunctionDB_load(self, *args)

    def save(self, fileName):
        r"""save(CFunctionDB self, std::string const & fileName) -> bool"""
        return _COPASI.CFunctionDB_save(self, fileName)

    def setFilename(self, filename):
        r"""setFilename(CFunctionDB self, std::string const & filename)"""
        return _COPASI.CFunctionDB_setFilename(self, filename)

    def getFilename(self):
        r"""getFilename(CFunctionDB self) -> std::string"""
        return _COPASI.CFunctionDB_getFilename(self)

    def addAndAdaptName(self, pFunction):
        r"""addAndAdaptName(CFunctionDB self, CFunction pFunction) -> CFunction"""
        return _COPASI.CFunctionDB_addAndAdaptName(self, pFunction)

    def removeFunction(self, *args):
        r"""
        removeFunction(CFunctionDB self, size_t index) -> bool
        removeFunction(CFunctionDB self, std::string const & key) -> bool
        """
        return _COPASI.CFunctionDB_removeFunction(self, *args)

    def findFunction(self, functionName):
        r"""findFunction(CFunctionDB self, std::string const & functionName) -> CFunction"""
        return _COPASI.CFunctionDB_findFunction(self, functionName)

    def findLoadFunction(self, functionName):
        r"""findLoadFunction(CFunctionDB self, std::string const & functionName) -> CFunction"""
        return _COPASI.CFunctionDB_findLoadFunction(self, functionName)

    def loadedFunctions(self):
        r"""loadedFunctions(CFunctionDB self) -> CFunctionVectorN"""
        return _COPASI.CFunctionDB_loadedFunctions(self)

    def suitableFunctions(self, noSubstrates, noProducts, reversibility):
        r"""suitableFunctions(CFunctionDB self, size_t const noSubstrates, size_t const noProducts, TriLogic const reversibility) -> CFunctionStdVector"""
        return _COPASI.CFunctionDB_suitableFunctions(self, noSubstrates, noProducts, reversibility)

    def getUsedFunctions(self, pModel):
        r"""getUsedFunctions(CFunctionDB self, CModel pModel) -> std::vector< CFunction const *,std::allocator< CFunction const * > >"""
        return _COPASI.CFunctionDB_getUsedFunctions(self, pModel)

    def purgeUnusedUserDefinedFunctions(self):
        r"""purgeUnusedUserDefinedFunctions(CFunctionDB self)"""
        return _COPASI.CFunctionDB_purgeUnusedUserDefinedFunctions(self)

    def createFunction(self, name, t):
        r"""createFunction(CFunctionDB self, std::string const & name, CEvaluationTree::Type t) -> CEvaluationTree"""
        return _COPASI.CFunctionDB_createFunction(self, name, t)

    def addAndAdopt(self, pFunctionToKeepReferenced):
        r"""addAndAdopt(CFunctionDB self, CFunction pFunctionToKeepReferenced) -> bool"""
        return _COPASI.CFunctionDB_addAndAdopt(self, pFunctionToKeepReferenced)

    def add(self, *args):
        r"""
        add(CFunctionDB self, CFunction pFunction, bool arg3) -> bool
        add(CFunctionDB self, CFunction pFunction) -> bool
        """
        return _COPASI.CFunctionDB_add(self, *args)

# Register CFunctionDB in _COPASI:
_COPASI.CFunctionDB_swigregister(CFunctionDB)
class CDataString(CDataObject):
    r"""Proxy of C++ CDataString class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CDataString self, std::string const & name="", CDataContainer pParent=static_cast< CDataContainer * >((void *) 0), std::string const & type="String", CFlags< CDataObject::Flag > const & flag=CFlags< Flag >::None) -> CDataString
        __init__(CDataString self, CDataString src, CDataContainer pParent) -> CDataString
        """
        _COPASI.CDataString_swiginit(self, _COPASI.new_CDataString(*args))
    __swig_destroy__ = _COPASI.delete_CDataString

    def getObjectDisplayName(self):
        r"""getObjectDisplayName(CDataString self) -> std::string"""
        return _COPASI.CDataString_getObjectDisplayName(self)

    def getStaticString(self):
        r"""getStaticString(CDataString self) -> std::string const &"""
        return _COPASI.CDataString_getStaticString(self)

# Register CDataString in _COPASI:
_COPASI.CDataString_swigregister(CDataString)
class CCopasiReportSeparator(CDataString):
    r"""Proxy of C++ CCopasiReportSeparator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CCopasiReportSeparator self, std::string const & name="", CDataContainer pParent=static_cast< CDataContainer * >((void *) 0)) -> CCopasiReportSeparator
        __init__(CCopasiReportSeparator self, CDataString src, CDataContainer pParent) -> CCopasiReportSeparator
        """
        _COPASI.CCopasiReportSeparator_swiginit(self, _COPASI.new_CCopasiReportSeparator(*args))
    __swig_destroy__ = _COPASI.delete_CCopasiReportSeparator

    def getObjectDisplayName(self):
        r"""getObjectDisplayName(CCopasiReportSeparator self) -> std::string"""
        return _COPASI.CCopasiReportSeparator_getObjectDisplayName(self)

# Register CCopasiReportSeparator in _COPASI:
_COPASI.CCopasiReportSeparator_swigregister(CCopasiReportSeparator)
class CTotalNumberReference(FloatReference):
    r"""Proxy of C++ CTotalNumberReference class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, src, pParent):
        r"""__init__(CTotalNumberReference self, CTotalNumberReference src, CDataContainer pParent) -> CTotalNumberReference"""
        _COPASI.CTotalNumberReference_swiginit(self, _COPASI.new_CTotalNumberReference(src, pParent))
    __swig_destroy__ = _COPASI.delete_CTotalNumberReference

# Register CTotalNumberReference in _COPASI:
_COPASI.CTotalNumberReference_swigregister(CTotalNumberReference)
class CDependentNumberReference(FloatReference):
    r"""Proxy of C++ CDependentNumberReference class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, src, pParent):
        r"""__init__(CDependentNumberReference self, CDependentNumberReference src, CDataContainer pParent) -> CDependentNumberReference"""
        _COPASI.CDependentNumberReference_swiginit(self, _COPASI.new_CDependentNumberReference(src, pParent))
    __swig_destroy__ = _COPASI.delete_CDependentNumberReference

# Register CDependentNumberReference in _COPASI:
_COPASI.CDependentNumberReference_swigregister(CDependentNumberReference)
class CMoiety(CDataContainer):
    r"""Proxy of C++ CMoiety class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def fromData(data, pParent):
        r"""fromData(CData data, CUndoObjectInterface pParent) -> CMoiety"""
        return _COPASI.CMoiety_fromData(data, pParent)

    def __init__(self, *args):
        r"""
        __init__(CMoiety self, std::string const & name="NoName", CDataContainer pParent=static_cast< CDataContainer * >((void *) 0)) -> CMoiety
        __init__(CMoiety self, CMoiety src, CDataContainer pParent) -> CMoiety
        """
        _COPASI.CMoiety_swiginit(self, _COPASI.new_CMoiety(*args))
    __swig_destroy__ = _COPASI.delete_CMoiety

    def add(self, value, metabolite):
        r"""add(CMoiety self, double value, CMetab metabolite)"""
        return _COPASI.CMoiety_add(self, value, metabolite)

    def cleanup(self):
        r"""cleanup(CMoiety self)"""
        return _COPASI.CMoiety_cleanup(self)

    def refreshInitialValue(self):
        r"""refreshInitialValue(CMoiety self)"""
        return _COPASI.CMoiety_refreshInitialValue(self)

    def getInitialValueReference(self):
        r"""getInitialValueReference(CMoiety self) -> CDataObject"""
        return _COPASI.CMoiety_getInitialValueReference(self)

    def refreshValue(self):
        r"""refreshValue(CMoiety self)"""
        return _COPASI.CMoiety_refreshValue(self)

    def getValueReference(self):
        r"""getValueReference(CMoiety self) -> CDataObject"""
        return _COPASI.CMoiety_getValueReference(self)

    def getDescription(self, model):
        r"""getDescription(CMoiety self, CModel model) -> std::string"""
        return _COPASI.CMoiety_getDescription(self, model)

    def dependentNumber(self):
        r"""dependentNumber(CMoiety self) -> double const &"""
        return _COPASI.CMoiety_dependentNumber(self)

    def getDependentNumber(self):
        r"""getDependentNumber(CMoiety self) -> double const &"""
        return _COPASI.CMoiety_getDependentNumber(self)

    def getInitialTotalNumberReference(self):
        r"""getInitialTotalNumberReference(CMoiety self) -> CDataObject"""
        return _COPASI.CMoiety_getInitialTotalNumberReference(self)

    def getTotalNumberReference(self):
        r"""getTotalNumberReference(CMoiety self) -> CDataObject"""
        return _COPASI.CMoiety_getTotalNumberReference(self)

    def getDependentNumberReference(self):
        r"""getDependentNumberReference(CMoiety self) -> CDataObject"""
        return _COPASI.CMoiety_getDependentNumberReference(self)

    def getNumber(self):
        r"""getNumber(CMoiety self) -> double"""
        return _COPASI.CMoiety_getNumber(self)

    def getKey(self):
        r"""getKey(CMoiety self) -> std::string const &"""
        return _COPASI.CMoiety_getKey(self)

    def setObjectParent(self, pParent):
        r"""setObjectParent(CMoiety self, CDataContainer pParent) -> bool"""
        return _COPASI.CMoiety_setObjectParent(self, pParent)

    def refreshDependentNumber(self):
        r"""refreshDependentNumber(CMoiety self)"""
        return _COPASI.CMoiety_refreshDependentNumber(self)

    def getExpression(self):
        r"""getExpression(CMoiety self) -> std::string"""
        return _COPASI.CMoiety_getExpression(self)

    def getAmount(self):
        r"""getAmount(CMoiety self) -> double const &"""
        return _COPASI.CMoiety_getAmount(self)

    def refreshAmount(self):
        r"""refreshAmount(CMoiety self)"""
        return _COPASI.CMoiety_refreshAmount(self)

# Register CMoiety in _COPASI:
_COPASI.CMoiety_swigregister(CMoiety)
class CModelEntity(CDataContainer, CAnnotation):
    r"""Proxy of C++ CModelEntity class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Status_FIXED = _COPASI.CModelEntity_Status_FIXED
    
    Status_ASSIGNMENT = _COPASI.CModelEntity_Status_ASSIGNMENT
    
    Status_REACTIONS = _COPASI.CModelEntity_Status_REACTIONS
    
    Status_ODE = _COPASI.CModelEntity_Status_ODE
    
    Status_TIME = _COPASI.CModelEntity_Status_TIME
    
    Status___SIZE = _COPASI.CModelEntity_Status___SIZE
    

    @staticmethod
    def fromData(data, pParent):
        r"""fromData(CData data, CUndoObjectInterface pParent) -> CModelEntity"""
        return _COPASI.CModelEntity_fromData(data, pParent)

    def __init__(self, *args):
        r"""
        __init__(CModelEntity self, std::string const & name="NoName", CDataContainer pParent=static_cast< CDataContainer * >((void *) 0), std::string const & type="ModelEntity", CFlags< CDataObject::Flag > const & flag=CFlags< Flag >::None) -> CModelEntity
        __init__(CModelEntity self, CModelEntity src, CDataContainer pParent) -> CModelEntity
        """
        _COPASI.CModelEntity_swiginit(self, _COPASI.new_CModelEntity(*args))
    __swig_destroy__ = _COPASI.delete_CModelEntity

    def getKey(self):
        r"""getKey(CModelEntity self) -> std::string const &"""
        return _COPASI.CModelEntity_getKey(self)

    def getStatus(self):
        r"""getStatus(CModelEntity self) -> CModelEntity::Status const &"""
        return _COPASI.CModelEntity_getStatus(self)

    def compile(self):
        r"""compile(CModelEntity self) -> CIssue"""
        return _COPASI.CModelEntity_compile(self)

    def calculate(self):
        r"""calculate(CModelEntity self)"""
        return _COPASI.CModelEntity_calculate(self)

    def isFixed(self):
        r"""isFixed(CModelEntity self) -> bool"""
        return _COPASI.CModelEntity_isFixed(self)

    def getValue(self):
        r"""getValue(CModelEntity self) -> double const &"""
        return _COPASI.CModelEntity_getValue(self)

    def getInitialValue(self):
        r"""getInitialValue(CModelEntity self) -> double const &"""
        return _COPASI.CModelEntity_getInitialValue(self)

    def getRate(self):
        r"""getRate(CModelEntity self) -> double const &"""
        return _COPASI.CModelEntity_getRate(self)

    def setStatus(self, status):
        r"""setStatus(CModelEntity self, CModelEntity::Status const & status) -> bool"""
        return _COPASI.CModelEntity_setStatus(self, status)

    def setValue(self, value):
        r"""setValue(CModelEntity self, double const & value)"""
        return _COPASI.CModelEntity_setValue(self, value)

    def setInitialValue(self, initialValue):
        r"""setInitialValue(CModelEntity self, double const & initialValue)"""
        return _COPASI.CModelEntity_setInitialValue(self, initialValue)

    def setRate(self, rate):
        r"""setRate(CModelEntity self, double const & rate)"""
        return _COPASI.CModelEntity_setRate(self, rate)

    def getValueObject(self):
        r"""getValueObject(CModelEntity self) -> CDataObject"""
        return _COPASI.CModelEntity_getValueObject(self)

    def setObjectParent(self, pParent):
        r"""setObjectParent(CModelEntity self, CDataContainer pParent) -> bool"""
        return _COPASI.CModelEntity_setObjectParent(self, pParent)

    def setSBMLId(self, id):
        r"""setSBMLId(CModelEntity self, std::string const & id)"""
        return _COPASI.CModelEntity_setSBMLId(self, id)

    def getSBMLId(self):
        r"""getSBMLId(CModelEntity self) -> std::string const &"""
        return _COPASI.CModelEntity_getSBMLId(self)

    def setExpressionPtr(self, pExpression):
        r"""setExpressionPtr(CModelEntity self, CExpression pExpression) -> bool"""
        val = _COPASI.CModelEntity_setExpressionPtr(self, pExpression)

        if(len(args) > 0 and args[0] != None and isinstance(args[0], COPASI.CExpression)):
          args[0].__disown__()


        return val


    def getExpressionPtr(self):
        r"""getExpressionPtr(CModelEntity self) -> CExpression"""
        return _COPASI.CModelEntity_getExpressionPtr(self)

    def setInitialExpressionPtr(self, pExpression):
        r"""setInitialExpressionPtr(CModelEntity self, CExpression pExpression) -> bool"""
        val = _COPASI.CModelEntity_setInitialExpressionPtr(self, pExpression)

        if(len(args) > 0 and args[0] != None and isinstance(args[0], COPASI.CExpression)):
          args[0].__disown__()


        return val


    def getInitialExpressionPtr(self):
        r"""getInitialExpressionPtr(CModelEntity self) -> CExpression"""
        return _COPASI.CModelEntity_getInitialExpressionPtr(self)

    def getDefaultNoiseExpression(self):
        r"""getDefaultNoiseExpression(CModelEntity self) -> std::string"""
        return _COPASI.CModelEntity_getDefaultNoiseExpression(self)

    def setNoiseExpression(self, expression):
        r"""setNoiseExpression(CModelEntity self, std::string const & expression) -> bool"""
        return _COPASI.CModelEntity_setNoiseExpression(self, expression)

    def getNoiseExpression(self):
        r"""getNoiseExpression(CModelEntity self) -> std::string"""
        return _COPASI.CModelEntity_getNoiseExpression(self)

    def setNoiseExpressionPtr(self, pExpression):
        r"""setNoiseExpressionPtr(CModelEntity self, CExpression pExpression) -> bool"""
        return _COPASI.CModelEntity_setNoiseExpressionPtr(self, pExpression)

    def getNoiseExpressionPtr(self):
        r"""getNoiseExpressionPtr(CModelEntity self) -> CExpression"""
        return _COPASI.CModelEntity_getNoiseExpressionPtr(self)

    def setHasNoise(self, hasNoise):
        r"""setHasNoise(CModelEntity self, bool const & hasNoise)"""
        return _COPASI.CModelEntity_setHasNoise(self, hasNoise)

    def hasNoise(self):
        r"""hasNoise(CModelEntity self) -> bool const &"""
        return _COPASI.CModelEntity_hasNoise(self)

    def setExpression(self, expression):
        r"""setExpression(CModelEntity self, std::string const & expression) -> CIssue"""
        return _COPASI.CModelEntity_setExpression(self, expression)

    def getExpression(self):
        r"""getExpression(CModelEntity self) -> std::string"""
        return _COPASI.CModelEntity_getExpression(self)

    def setInitialExpression(self, expression):
        r"""setInitialExpression(CModelEntity self, std::string const & expression) -> CIssue"""
        return _COPASI.CModelEntity_setInitialExpression(self, expression)

    def getInitialExpression(self):
        r"""getInitialExpression(CModelEntity self) -> std::string"""
        return _COPASI.CModelEntity_getInitialExpression(self)

    def setUnitExpression(self, unitExpression):
        r"""setUnitExpression(CModelEntity self, std::string unitExpression) -> CIssue"""
        return _COPASI.CModelEntity_setUnitExpression(self, unitExpression)

    def getUnitExpression(self):
        r"""getUnitExpression(CModelEntity self) -> std::string const &"""
        return _COPASI.CModelEntity_getUnitExpression(self)

    def getChildObjectUnits(self, pObject):
        r"""getChildObjectUnits(CModelEntity self, CDataObject pObject) -> std::string"""
        return _COPASI.CModelEntity_getChildObjectUnits(self, pObject)

    def setUsed(self, used):
        r"""setUsed(CModelEntity self, bool const & used)"""
        return _COPASI.CModelEntity_setUsed(self, used)

    def isUsed(self):
        r"""isUsed(CModelEntity self) -> bool const &"""
        return _COPASI.CModelEntity_isUsed(self)

    def getInitialValueReference(self):
        r"""getInitialValueReference(CModelEntity self) -> CDataObject"""
        return _COPASI.CModelEntity_getInitialValueReference(self)

    def getValueReference(self):
        r"""getValueReference(CModelEntity self) -> CDataObject"""
        return _COPASI.CModelEntity_getValueReference(self)

    def getRateReference(self):
        r"""getRateReference(CModelEntity self) -> CDataObject"""
        return _COPASI.CModelEntity_getRateReference(self)

    def getNoiseReference(self):
        r"""getNoiseReference(CModelEntity self) -> CDataObject"""
        return _COPASI.CModelEntity_getNoiseReference(self)

    def getModel(self):
        r"""getModel(CModelEntity self) -> CModel"""
        return _COPASI.CModelEntity_getModel(self)

    def setNotes(self, notes):
        r"""setNotes(CModelEntity self, std::string const & notes)"""
        return _COPASI.CModelEntity_setNotes(self, notes)

    def getNotes(self):
        r"""getNotes(CModelEntity self) -> std::string const &"""
        return _COPASI.CModelEntity_getNotes(self)

    def getMiriamAnnotation(self):
        r"""getMiriamAnnotation(CModelEntity self) -> std::string const &"""
        return _COPASI.CModelEntity_getMiriamAnnotation(self)

    def setMiriamAnnotation(self, miriamAnnotation, newId, oldId):
        r"""setMiriamAnnotation(CModelEntity self, std::string const & miriamAnnotation, std::string const & newId, std::string const & oldId)"""
        return _COPASI.CModelEntity_setMiriamAnnotation(self, miriamAnnotation, newId, oldId)

    def hasUnsupportedAnnotation(self, name):
        r"""hasUnsupportedAnnotation(CModelEntity self, std::string name) -> bool"""
        return _COPASI.CModelEntity_hasUnsupportedAnnotation(self, name)

    def getNumUnsupportedAnnotations(self):
        r"""getNumUnsupportedAnnotations(CModelEntity self) -> int"""
        return _COPASI.CModelEntity_getNumUnsupportedAnnotations(self)

    def getUnsupportedAnnotation(self, *args):
        r"""
        getUnsupportedAnnotation(CModelEntity self, std::string name) -> std::string
        getUnsupportedAnnotation(CModelEntity self, int index) -> std::string
        """
        return _COPASI.CModelEntity_getUnsupportedAnnotation(self, *args)

    def getUnsupportedAnnotationName(self, index):
        r"""getUnsupportedAnnotationName(CModelEntity self, int index) -> std::string"""
        return _COPASI.CModelEntity_getUnsupportedAnnotationName(self, index)

    def addUnsupportedAnnotation(self, name, xml):
        r"""addUnsupportedAnnotation(CModelEntity self, std::string const & name, std::string const & xml) -> bool"""
        return _COPASI.CModelEntity_addUnsupportedAnnotation(self, name, xml)

    def replaceUnsupportedAnnotation(self, name, xml):
        r"""replaceUnsupportedAnnotation(CModelEntity self, std::string const & name, std::string const & xml) -> bool"""
        return _COPASI.CModelEntity_replaceUnsupportedAnnotation(self, name, xml)

    def removeUnsupportedAnnotation(self, name):
        r"""removeUnsupportedAnnotation(CModelEntity self, std::string const & name) -> bool"""
        return _COPASI.CModelEntity_removeUnsupportedAnnotation(self, name)

# Register CModelEntity in _COPASI:
_COPASI.CModelEntity_swigregister(CModelEntity)
class CModelValue(CModelEntity):
    r"""Proxy of C++ CModelValue class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def fromData(data, pParent):
        r"""fromData(CData data, CUndoObjectInterface pParent) -> CModelValue"""
        return _COPASI.CModelValue_fromData(data, pParent)

    def __init__(self, *args):
        r"""
        __init__(CModelValue self, std::string const & name="NoName", CDataContainer pParent=static_cast< CDataContainer * >((void *) 0)) -> CModelValue
        __init__(CModelValue self, CModelValue src, CDataContainer pParent) -> CModelValue
        """
        _COPASI.CModelValue_swiginit(self, _COPASI.new_CModelValue(*args))
    __swig_destroy__ = _COPASI.delete_CModelValue

    def getUnits(self):
        r"""getUnits(CModelValue self) -> std::string const"""
        return _COPASI.CModelValue_getUnits(self)

# Register CModelValue in _COPASI:
_COPASI.CModelValue_swigregister(CModelValue)
class CMetab(CModelEntity):
    r"""Proxy of C++ CMetab class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def convertToNumber(concentration, compartment):
        r"""convertToNumber(double const & concentration, CCompartment compartment) -> double"""
        return _COPASI.CMetab_convertToNumber(concentration, compartment)

    @staticmethod
    def convertToConcentration(number, compartment):
        r"""convertToConcentration(double const & number, CCompartment compartment) -> double"""
        return _COPASI.CMetab_convertToConcentration(number, compartment)

    @staticmethod
    def fromData(data, pParent):
        r"""fromData(CData data, CUndoObjectInterface pParent) -> CMetab"""
        return _COPASI.CMetab_fromData(data, pParent)

    def __init__(self, *args):
        r"""
        __init__(CMetab self, std::string const & name="NoName", CDataContainer pParent=static_cast< CDataContainer * >((void *) 0)) -> CMetab
        __init__(CMetab self, CMetab src, CDataContainer pParent) -> CMetab
        """
        _COPASI.CMetab_swiginit(self, _COPASI.new_CMetab(*args))
    __swig_destroy__ = _COPASI.delete_CMetab

    def getUnits(self):
        r"""getUnits(CMetab self) -> std::string const"""
        return _COPASI.CMetab_getUnits(self)

    def getChildObjectUnits(self, pObject):
        r"""getChildObjectUnits(CMetab self, CDataObject pObject) -> std::string"""
        return _COPASI.CMetab_getChildObjectUnits(self, pObject)

    def getValueObject(self):
        r"""getValueObject(CMetab self) -> CDataObject"""
        return _COPASI.CMetab_getValueObject(self)

    def getObjectDisplayName(self):
        r"""getObjectDisplayName(CMetab self) -> std::string"""
        return _COPASI.CMetab_getObjectDisplayName(self)

    def cleanup(self):
        r"""cleanup(CMetab self)"""
        return _COPASI.CMetab_cleanup(self)

    def initCompartment(self, pCompartment=None):
        r"""initCompartment(CMetab self, CCompartment pCompartment=None)"""
        return _COPASI.CMetab_initCompartment(self, pCompartment)

    def setObjectParent(self, pParent):
        r"""setObjectParent(CMetab self, CDataContainer pParent) -> bool"""
        return _COPASI.CMetab_setObjectParent(self, pParent)

    def setCompartment(self, compName):
        r"""setCompartment(CMetab self, std::string const & compName) -> bool"""
        return _COPASI.CMetab_setCompartment(self, compName)

    def compile(self):
        r"""compile(CMetab self) -> CIssue"""
        return _COPASI.CMetab_compile(self)

    def compileIsInitialValueChangeAllowed(self):
        r"""compileIsInitialValueChangeAllowed(CMetab self)"""
        return _COPASI.CMetab_compileIsInitialValueChangeAllowed(self)

    def isInitialValueChangeAllowed(self, framework):
        r"""isInitialValueChangeAllowed(CMetab self, CCore::Framework framework) -> bool const &"""
        return _COPASI.CMetab_isInitialValueChangeAllowed(self, framework)

    def calculate(self):
        r"""calculate(CMetab self)"""
        return _COPASI.CMetab_calculate(self)

    def setConcentration(self, concentration):
        r"""setConcentration(CMetab self, double const concentration)"""
        return _COPASI.CMetab_setConcentration(self, concentration)

    def getConcentration(self):
        r"""getConcentration(CMetab self) -> double const &"""
        return _COPASI.CMetab_getConcentration(self)

    def setInitialConcentration(self, initialConcentration):
        r"""setInitialConcentration(CMetab self, double const & initialConcentration)"""
        return _COPASI.CMetab_setInitialConcentration(self, initialConcentration)

    def getInitialConcentration(self):
        r"""getInitialConcentration(CMetab self) -> double const &"""
        return _COPASI.CMetab_getInitialConcentration(self)

    def getInitialConcentrationReference(self):
        r"""getInitialConcentrationReference(CMetab self) -> CDataObject"""
        return _COPASI.CMetab_getInitialConcentrationReference(self)

    def getConcentrationReference(self):
        r"""getConcentrationReference(CMetab self) -> CDataObject"""
        return _COPASI.CMetab_getConcentrationReference(self)

    def getConcentrationRateReference(self):
        r"""getConcentrationRateReference(CMetab self) -> CDataObject"""
        return _COPASI.CMetab_getConcentrationRateReference(self)

    def getIntensiveNoiseReference(self):
        r"""getIntensiveNoiseReference(CMetab self) -> CDataObject"""
        return _COPASI.CMetab_getIntensiveNoiseReference(self)

    def getCompartment(self):
        r"""getCompartment(CMetab self) -> CCompartment"""
        return _COPASI.CMetab_getCompartment(self)

    def setTransitionTime(self, transitionTime):
        r"""setTransitionTime(CMetab self, double const & transitionTime)"""
        return _COPASI.CMetab_setTransitionTime(self, transitionTime)

    def getTransitionTime(self):
        r"""getTransitionTime(CMetab self) -> double const &"""
        return _COPASI.CMetab_getTransitionTime(self)

    def getTransitionTimeReference(self):
        r"""getTransitionTimeReference(CMetab self) -> CDataObject"""
        return _COPASI.CMetab_getTransitionTimeReference(self)

    def getConcentrationRate(self):
        r"""getConcentrationRate(CMetab self) -> double"""
        return _COPASI.CMetab_getConcentrationRate(self)

    def setDependsOnMoiety(self, pMoiety):
        r"""setDependsOnMoiety(CMetab self, CMoiety pMoiety)"""
        return _COPASI.CMetab_setDependsOnMoiety(self, pMoiety)

    def isDependent(self):
        r"""isDependent(CMetab self) -> bool"""
        return _COPASI.CMetab_isDependent(self)

    def getMoiety(self):
        r"""getMoiety(CMetab self) -> CMoiety"""
        return _COPASI.CMetab_getMoiety(self)

    def getCountOfDependentReactions(self):
        r"""getCountOfDependentReactions(CMetab self) -> size_t"""
        return _COPASI.CMetab_getCountOfDependentReactions(self)

# Register CMetab in _COPASI:
_COPASI.CMetab_swigregister(CMetab)
class CMetabOld(CDataContainer):
    r"""Proxy of C++ CMetabOld class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def fromData(data, pParent):
        r"""fromData(CData data, CUndoObjectInterface pParent) -> CMetabOld"""
        return _COPASI.CMetabOld_fromData(data, pParent)

    def __init__(self, *args):
        r"""
        __init__(CMetabOld self, std::string const & name="NoName", CDataContainer pParent=static_cast< CDataContainer * >((void *) 0)) -> CMetabOld
        __init__(CMetabOld self, CMetabOld src, CDataContainer pParent) -> CMetabOld
        """
        _COPASI.CMetabOld_swiginit(self, _COPASI.new_CMetabOld(*args))
    __swig_destroy__ = _COPASI.delete_CMetabOld

    def cleanup(self):
        r"""cleanup(CMetabOld self)"""
        return _COPASI.CMetabOld_cleanup(self)

    def getIndex(self):
        r"""getIndex(CMetabOld self) -> int"""
        return _COPASI.CMetabOld_getIndex(self)

# Register CMetabOld in _COPASI:
_COPASI.CMetabOld_swigregister(CMetabOld)
class StringPair(object):
    r"""Proxy of C++ std::pair< std::string,std::string > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(StringPair self) -> StringPair
        __init__(StringPair self, std::string first, std::string second) -> StringPair
        __init__(StringPair self, StringPair other) -> StringPair
        """
        _COPASI.StringPair_swiginit(self, _COPASI.new_StringPair(*args))
    first = property(_COPASI.StringPair_first_get, _COPASI.StringPair_first_set, doc=r"""first : std::string""")
    second = property(_COPASI.StringPair_second_get, _COPASI.StringPair_second_set, doc=r"""second : std::string""")
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _COPASI.delete_StringPair

# Register StringPair in _COPASI:
_COPASI.StringPair_swigregister(StringPair)
class CMetabNameInterface(object):
    r"""Proxy of C++ CMetabNameInterface class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getDisplayName(*args):
        r"""
        getDisplayName(CModel model, std::string const & key, bool const & quoted) -> std::string
        getDisplayName(CModel model, CMetab metab, bool const & quoted) -> std::string
        getDisplayName(CModel model, std::string const & metabolite, std::string const & compartment, bool const & quoted) -> std::string
        """
        return _COPASI.CMetabNameInterface_getDisplayName(*args)

    @staticmethod
    def createUniqueDisplayName(*args):
        r"""
        createUniqueDisplayName(std::string const & metabolite, std::string const & compartment, bool const & quoted) -> std::string
        createUniqueDisplayName(CMetab metab, bool const & quoted) -> std::string
        """
        return _COPASI.CMetabNameInterface_createUniqueDisplayName(*args)

    @staticmethod
    def getMetabolite(model, metabolite, compartment):
        r"""getMetabolite(CModel model, std::string const & metabolite, std::string const & compartment) -> CMetab"""
        return _COPASI.CMetabNameInterface_getMetabolite(model, metabolite, compartment)

    @staticmethod
    def getMetaboliteKey(model, metabolite, compartment):
        r"""getMetaboliteKey(CModel model, std::string const & metabolite, std::string const & compartment) -> std::string"""
        return _COPASI.CMetabNameInterface_getMetaboliteKey(model, metabolite, compartment)

    @staticmethod
    def getSpeciesCN(pModel, species, compartment):
        r"""getSpeciesCN(CModel pModel, std::string const & species, std::string const & compartment) -> std::string"""
        return _COPASI.CMetabNameInterface_getSpeciesCN(pModel, species, compartment)

    @staticmethod
    def isUnique(model, name):
        r"""isUnique(CModel model, std::string const & name) -> bool"""
        return _COPASI.CMetabNameInterface_isUnique(model, name)

    @staticmethod
    def doesExist(model, metabolite, compartment):
        r"""doesExist(CModel model, std::string const & metabolite, std::string const & compartment) -> bool"""
        return _COPASI.CMetabNameInterface_doesExist(model, metabolite, compartment)

    @staticmethod
    def splitDisplayName(name):
        r"""splitDisplayName(std::string const & name) -> StringPair"""
        return _COPASI.CMetabNameInterface_splitDisplayName(name)

    @staticmethod
    def unQuote(displayName):
        r"""unQuote(std::string const & displayName) -> std::string"""
        return _COPASI.CMetabNameInterface_unQuote(displayName)

    def __init__(self):
        r"""__init__(CMetabNameInterface self) -> CMetabNameInterface"""
        _COPASI.CMetabNameInterface_swiginit(self, _COPASI.new_CMetabNameInterface())
    __swig_destroy__ = _COPASI.delete_CMetabNameInterface

# Register CMetabNameInterface in _COPASI:
_COPASI.CMetabNameInterface_swigregister(CMetabNameInterface)
class CCompartment(CModelEntity):
    r"""Proxy of C++ CCompartment class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def fromData(data, pParent):
        r"""fromData(CData data, CUndoObjectInterface pParent) -> CCompartment"""
        return _COPASI.CCompartment_fromData(data, pParent)

    def __init__(self, *args):
        r"""
        __init__(CCompartment self, std::string const & name="NoName", CDataContainer pParent=static_cast< CDataContainer * >((void *) 0)) -> CCompartment
        __init__(CCompartment self, CCompartment src, CDataContainer pParent) -> CCompartment
        """
        _COPASI.CCompartment_swiginit(self, _COPASI.new_CCompartment(*args))
    __swig_destroy__ = _COPASI.delete_CCompartment

    def getUnits(self):
        r"""getUnits(CCompartment self) -> std::string const"""
        return _COPASI.CCompartment_getUnits(self)

    def cleanup(self):
        r"""cleanup(CCompartment self)"""
        return _COPASI.CCompartment_cleanup(self)

    def getMetabolites(self, *args):
        r"""
        getMetabolites(CCompartment self) -> MetabVectorNS
        getMetabolites(CCompartment self) -> MetabVectorNS
        """
        return _COPASI.CCompartment_getMetabolites(self, *args)

    def addMetabolite(self, metabolite):
        r"""addMetabolite(CCompartment self, CMetab metabolite) -> bool"""
        return _COPASI.CCompartment_addMetabolite(self, metabolite)

    def setDimensionality(self, dim):
        r"""setDimensionality(CCompartment self, unsigned int dim) -> bool"""
        return _COPASI.CCompartment_setDimensionality(self, dim)

    def getDimensionality(self):
        r"""getDimensionality(CCompartment self) -> unsigned int"""
        return _COPASI.CCompartment_getDimensionality(self)

    def removeMetabolite(self, metab):
        r"""removeMetabolite(CCompartment self, CMetab metab) -> bool"""
        return _COPASI.CCompartment_removeMetabolite(self, metab)

# Register CCompartment in _COPASI:
_COPASI.CCompartment_swigregister(CCompartment)
class FloatMatrix(object):
    r"""Proxy of C++ CMatrix< double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(FloatMatrix self, size_t rows=0, size_t cols=0) -> FloatMatrix
        __init__(FloatMatrix self, FloatMatrix src) -> FloatMatrix
        """
        _COPASI.FloatMatrix_swiginit(self, _COPASI.new_FloatMatrix(*args))
    __swig_destroy__ = _COPASI.delete_FloatMatrix

    def size(self):
        r"""size(FloatMatrix self) -> size_t"""
        return _COPASI.FloatMatrix_size(self)

    def numRows(self):
        r"""numRows(FloatMatrix self) -> size_t"""
        return _COPASI.FloatMatrix_numRows(self)

    def numCols(self):
        r"""numCols(FloatMatrix self) -> size_t"""
        return _COPASI.FloatMatrix_numCols(self)

    def resize(self, rows, cols, copy=False):
        r"""resize(FloatMatrix self, size_t rows, size_t cols, bool const & copy=False)"""
        return _COPASI.FloatMatrix_resize(self, rows, cols, copy)

    def __call__(self, *args):
        r"""
        __call__(FloatMatrix self, size_t const & row, size_t const & col) -> CMatrix< double >::elementType
        __call__(FloatMatrix self, size_t const & row, size_t const & col) -> CMatrix< double >::elementType const &
        """
        return _COPASI.FloatMatrix___call__(self, *args)

    def array(self, *args):
        r"""
        array(FloatMatrix self) -> double
        array(FloatMatrix self) -> double const *
        """
        return _COPASI.FloatMatrix_array(self, *args)

    def applyPivot(self, pivot):
        r"""applyPivot(FloatMatrix self, SizeTVector pivot) -> bool"""
        return _COPASI.FloatMatrix_applyPivot(self, pivot)

    def get(self, row, col):
        r"""get(FloatMatrix self, unsigned int const & row, unsigned int const & col) -> CMatrix< double >::elementType"""
        return _COPASI.FloatMatrix_get(self, row, col)

# Register FloatMatrix in _COPASI:
_COPASI.FloatMatrix_swigregister(FloatMatrix)
class IntMatrix(object):
    r"""Proxy of C++ CMatrix< int > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(IntMatrix self, size_t rows=0, size_t cols=0) -> IntMatrix
        __init__(IntMatrix self, IntMatrix src) -> IntMatrix
        """
        _COPASI.IntMatrix_swiginit(self, _COPASI.new_IntMatrix(*args))
    __swig_destroy__ = _COPASI.delete_IntMatrix

    def size(self):
        r"""size(IntMatrix self) -> size_t"""
        return _COPASI.IntMatrix_size(self)

    def numRows(self):
        r"""numRows(IntMatrix self) -> size_t"""
        return _COPASI.IntMatrix_numRows(self)

    def numCols(self):
        r"""numCols(IntMatrix self) -> size_t"""
        return _COPASI.IntMatrix_numCols(self)

    def resize(self, rows, cols, copy=False):
        r"""resize(IntMatrix self, size_t rows, size_t cols, bool const & copy=False)"""
        return _COPASI.IntMatrix_resize(self, rows, cols, copy)

    def __call__(self, *args):
        r"""
        __call__(IntMatrix self, size_t const & row, size_t const & col) -> CMatrix< int >::elementType
        __call__(IntMatrix self, size_t const & row, size_t const & col) -> CMatrix< int >::elementType const &
        """
        return _COPASI.IntMatrix___call__(self, *args)

    def array(self, *args):
        r"""
        array(IntMatrix self) -> int
        array(IntMatrix self) -> int const *
        """
        return _COPASI.IntMatrix_array(self, *args)

    def applyPivot(self, pivot):
        r"""applyPivot(IntMatrix self, SizeTVector pivot) -> bool"""
        return _COPASI.IntMatrix_applyPivot(self, pivot)

    def get(self, row, col):
        r"""get(IntMatrix self, unsigned int const & row, unsigned int const & col) -> CMatrix< int >::elementType"""
        return _COPASI.IntMatrix_get(self, row, col)

# Register IntMatrix in _COPASI:
_COPASI.IntMatrix_swigregister(IntMatrix)
class CLinkMatrix(FloatMatrix):
    r"""Proxy of C++ CLinkMatrix class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CLinkMatrix self) -> CLinkMatrix
        __init__(CLinkMatrix self, CLinkMatrix src) -> CLinkMatrix
        """
        _COPASI.CLinkMatrix_swiginit(self, _COPASI.new_CLinkMatrix(*args))
    __swig_destroy__ = _COPASI.delete_CLinkMatrix

    def build(self, *args):
        r"""build(CLinkMatrix self, FloatMatrix matrix, size_t maxRank=(std::numeric_limits< size_t >::max())) -> bool"""
        return _COPASI.CLinkMatrix_build(self, *args)

    def clearPivoting(self):
        r"""clearPivoting(CLinkMatrix self)"""
        return _COPASI.CLinkMatrix_clearPivoting(self)

    def rightMultiply(self, alpha, M, P):
        r"""rightMultiply(CLinkMatrix self, double const & alpha, FloatMatrix M, FloatMatrix P) -> bool"""
        return _COPASI.CLinkMatrix_rightMultiply(self, alpha, M, P)

    def leftMultiply(self, M, P):
        r"""leftMultiply(CLinkMatrix self, FloatMatrix M, FloatMatrix P) -> bool"""
        return _COPASI.CLinkMatrix_leftMultiply(self, M, P)

    def getRowPivots(self):
        r"""getRowPivots(CLinkMatrix self) -> SizeTVector"""
        return _COPASI.CLinkMatrix_getRowPivots(self)

    def getNumIndependent(self):
        r"""getNumIndependent(CLinkMatrix self) -> size_t const &"""
        return _COPASI.CLinkMatrix_getNumIndependent(self)

    def getNumDependent(self):
        r"""getNumDependent(CLinkMatrix self) -> size_t"""
        return _COPASI.CLinkMatrix_getNumDependent(self)

    def doRowPivot(self, matrix):
        r"""doRowPivot(CLinkMatrix self, FloatMatrix matrix) -> bool"""
        return _COPASI.CLinkMatrix_doRowPivot(self, matrix)

    def undoRowPivot(self, matrix):
        r"""undoRowPivot(CLinkMatrix self, FloatMatrix matrix) -> bool"""
        return _COPASI.CLinkMatrix_undoRowPivot(self, matrix)

    def doColumnPivot(self, matrix):
        r"""doColumnPivot(CLinkMatrix self, FloatMatrix matrix) -> bool"""
        return _COPASI.CLinkMatrix_doColumnPivot(self, matrix)

    def undoColumnPivot(self, matrix):
        r"""undoColumnPivot(CLinkMatrix self, FloatMatrix matrix) -> bool"""
        return _COPASI.CLinkMatrix_undoColumnPivot(self, matrix)

# Register CLinkMatrix in _COPASI:
_COPASI.CLinkMatrix_swigregister(CLinkMatrix)
class CLinkMatrixView(object):
    r"""Proxy of C++ CLinkMatrixView class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, A):
        r"""__init__(CLinkMatrixView self, CLinkMatrix A) -> CLinkMatrixView"""
        _COPASI.CLinkMatrixView_swiginit(self, _COPASI.new_CLinkMatrixView(A))
    __swig_destroy__ = _COPASI.delete_CLinkMatrixView

    def numRows(self):
        r"""numRows(CLinkMatrixView self) -> size_t"""
        return _COPASI.CLinkMatrixView_numRows(self)

    def numCols(self):
        r"""numCols(CLinkMatrixView self) -> size_t"""
        return _COPASI.CLinkMatrixView_numCols(self)

    def __call__(self, row, col):
        r"""__call__(CLinkMatrixView self, size_t const & row, size_t const & col) -> double &"""
        return _COPASI.CLinkMatrixView___call__(self, row, col)

# Register CLinkMatrixView in _COPASI:
_COPASI.CLinkMatrixView_swigregister(CLinkMatrixView)
class CStateTemplate(object):
    r"""Proxy of C++ CStateTemplate class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model):
        r"""__init__(CStateTemplate self, CModel model) -> CStateTemplate"""
        _COPASI.CStateTemplate_swiginit(self, _COPASI.new_CStateTemplate(model))
    __swig_destroy__ = _COPASI.delete_CStateTemplate

    def add(self, entity):
        r"""add(CStateTemplate self, CModelEntity entity)"""
        return _COPASI.CStateTemplate_add(self, entity)

    def remove(self, entity):
        r"""remove(CStateTemplate self, CModelEntity entity)"""
        return _COPASI.CStateTemplate_remove(self, entity)

    def getIndex(self, entity):
        r"""getIndex(CStateTemplate self, CModelEntity entity) -> size_t"""
        return _COPASI.CStateTemplate_getIndex(self, entity)

    def getUserOrder(self):
        r"""getUserOrder(CStateTemplate self) -> SizeTVector"""
        return _COPASI.CStateTemplate_getUserOrder(self)

    def getNumIndependent(self):
        r"""getNumIndependent(CStateTemplate self) -> size_t"""
        return _COPASI.CStateTemplate_getNumIndependent(self)

    def getNumDependent(self):
        r"""getNumDependent(CStateTemplate self) -> size_t"""
        return _COPASI.CStateTemplate_getNumDependent(self)

    def getNumVariable(self):
        r"""getNumVariable(CStateTemplate self) -> size_t"""
        return _COPASI.CStateTemplate_getNumVariable(self)

    def getNumFixed(self):
        r"""getNumFixed(CStateTemplate self) -> size_t"""
        return _COPASI.CStateTemplate_getNumFixed(self)

    def size(self):
        r"""size(CStateTemplate self) -> size_t const &"""
        return _COPASI.CStateTemplate_size(self)

    def getEntity(self, index):
        r"""getEntity(CStateTemplate self, unsigned int index) -> CModelEntity"""
        return _COPASI.CStateTemplate_getEntity(self, index)

    def getIndependent(self, index):
        r"""getIndependent(CStateTemplate self, unsigned int index) -> CModelEntity"""
        return _COPASI.CStateTemplate_getIndependent(self, index)

    def getDependent(self, index):
        r"""getDependent(CStateTemplate self, unsigned int index) -> CModelEntity"""
        return _COPASI.CStateTemplate_getDependent(self, index)

    def getFixed(self, index):
        r"""getFixed(CStateTemplate self, unsigned int index) -> CModelEntity"""
        return _COPASI.CStateTemplate_getFixed(self, index)

# Register CStateTemplate in _COPASI:
_COPASI.CStateTemplate_swigregister(CStateTemplate)
class CChemEqElement(CDataContainer):
    r"""Proxy of C++ CChemEqElement class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def fromData(data, pParent):
        r"""fromData(CData data, CUndoObjectInterface pParent) -> CChemEqElement"""
        return _COPASI.CChemEqElement_fromData(data, pParent)

    def __init__(self, *args):
        r"""
        __init__(CChemEqElement self, std::string const & name="Chem Eq Element", CDataContainer pParent=static_cast< CDataContainer * >((void *) 0)) -> CChemEqElement
        __init__(CChemEqElement self, CChemEqElement src, CDataContainer pParent) -> CChemEqElement
        """
        _COPASI.CChemEqElement_swiginit(self, _COPASI.new_CChemEqElement(*args))
    __swig_destroy__ = _COPASI.delete_CChemEqElement

    def cleanup(self):
        r"""cleanup(CChemEqElement self)"""
        return _COPASI.CChemEqElement_cleanup(self)

    def setMultiplicity(self, multiplicity):
        r"""setMultiplicity(CChemEqElement self, double const multiplicity)"""
        return _COPASI.CChemEqElement_setMultiplicity(self, multiplicity)

    def addToMultiplicity(self, multiplicity=1.0):
        r"""addToMultiplicity(CChemEqElement self, double const multiplicity=1.0)"""
        return _COPASI.CChemEqElement_addToMultiplicity(self, multiplicity)

    def getMultiplicity(self):
        r"""getMultiplicity(CChemEqElement self) -> double const &"""
        return _COPASI.CChemEqElement_getMultiplicity(self)

    def setMetabolite(self, key):
        r"""setMetabolite(CChemEqElement self, std::string const & key)"""
        return _COPASI.CChemEqElement_setMetabolite(self, key)

    def getMetabolite(self):
        r"""getMetabolite(CChemEqElement self) -> CMetab"""
        return _COPASI.CChemEqElement_getMetabolite(self)

    def getMetaboliteKey(self):
        r"""getMetaboliteKey(CChemEqElement self) -> std::string const &"""
        return _COPASI.CChemEqElement_getMetaboliteKey(self)

# Register CChemEqElement in _COPASI:
_COPASI.CChemEqElement_swigregister(CChemEqElement)
class CChemEq(CDataContainer):
    r"""Proxy of C++ CChemEq class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    PRODUCT = _COPASI.CChemEq_PRODUCT
    
    SUBSTRATE = _COPASI.CChemEq_SUBSTRATE
    
    MODIFIER = _COPASI.CChemEq_MODIFIER
    
    NOROLE = _COPASI.CChemEq_NOROLE
    

    def __init__(self, *args):
        r"""
        __init__(CChemEq self, std::string const & name="NoName", CDataContainer pParent=static_cast< CDataContainer * >((void *) 0)) -> CChemEq
        __init__(CChemEq self, CChemEq src, CDataContainer pParent) -> CChemEq
        """
        _COPASI.CChemEq_swiginit(self, _COPASI.new_CChemEq(*args))
    __swig_destroy__ = _COPASI.delete_CChemEq

    def cleanup(self):
        r"""cleanup(CChemEq self)"""
        return _COPASI.CChemEq_cleanup(self)

    def setReversibility(self, reversible):
        r"""setReversibility(CChemEq self, bool const & reversible)"""
        return _COPASI.CChemEq_setReversibility(self, reversible)

    def getReversibility(self):
        r"""getReversibility(CChemEq self) -> bool const &"""
        return _COPASI.CChemEq_getReversibility(self)

    def addMetabolite(self, key, multiplicity, role):
        r"""addMetabolite(CChemEq self, std::string const & key, double const multiplicity, CChemEq::MetaboliteRole const & role) -> bool"""
        return _COPASI.CChemEq_addMetabolite(self, key, multiplicity, role)

    def getSubstrates(self):
        r"""getSubstrates(CChemEq self) -> CChemEqElementVector"""
        return _COPASI.CChemEq_getSubstrates(self)

    def getProducts(self):
        r"""getProducts(CChemEq self) -> CChemEqElementVector"""
        return _COPASI.CChemEq_getProducts(self)

    def getModifiers(self):
        r"""getModifiers(CChemEq self) -> CChemEqElementVector"""
        return _COPASI.CChemEq_getModifiers(self)

    def getBalances(self):
        r"""getBalances(CChemEq self) -> CChemEqElementVector"""
        return _COPASI.CChemEq_getBalances(self)

    def getCompartmentNumber(self):
        r"""getCompartmentNumber(CChemEq self) -> size_t"""
        return _COPASI.CChemEq_getCompartmentNumber(self)

    def getLargestCompartment(self):
        r"""getLargestCompartment(CChemEq self) -> CCompartment"""
        return _COPASI.CChemEq_getLargestCompartment(self)

    def getMolecularity(self, role):
        r"""getMolecularity(CChemEq self, CChemEq::MetaboliteRole const role) -> size_t"""
        return _COPASI.CChemEq_getMolecularity(self, role)

    def setMultiplicity(self, pMetab, newMult, role):
        r"""setMultiplicity(CChemEq self, CMetab pMetab, double newMult, CChemEq::MetaboliteRole role) -> bool"""
        return _COPASI.CChemEq_setMultiplicity(self, pMetab, newMult, role)

    def getSubstrate(self, index):
        r"""getSubstrate(CChemEq self, unsigned int index) -> CChemEqElement"""
        return _COPASI.CChemEq_getSubstrate(self, index)

    def getProduct(self, index):
        r"""getProduct(CChemEq self, unsigned int index) -> CChemEqElement"""
        return _COPASI.CChemEq_getProduct(self, index)

    def getModifier(self, index):
        r"""getModifier(CChemEq self, unsigned int index) -> CChemEqElement"""
        return _COPASI.CChemEq_getModifier(self, index)

    def getBalance(self, index):
        r"""getBalance(CChemEq self, unsigned int index) -> CChemEqElement"""
        return _COPASI.CChemEq_getBalance(self, index)

# Register CChemEq in _COPASI:
_COPASI.CChemEq_swigregister(CChemEq)
class CChemEqInterface(object):
    r"""Proxy of C++ CChemEqInterface class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(CChemEqInterface self) -> CChemEqInterface"""
        _COPASI.CChemEqInterface_swiginit(self, _COPASI.new_CChemEqInterface())
    __swig_destroy__ = _COPASI.delete_CChemEqInterface

    def init(self, ce):
        r"""init(CChemEqInterface self, CChemEq ce) -> bool"""
        return _COPASI.CChemEqInterface_init(self, ce)

    def setChemEqString(self, ces):
        r"""setChemEqString(CChemEqInterface self, std::string const & ces) -> bool"""
        return _COPASI.CChemEqInterface_setChemEqString(self, ces)

    def writeToChemEq(self, pChemEq=None):
        r"""writeToChemEq(CChemEqInterface self, CChemEq pChemEq=None) -> bool"""
        return _COPASI.CChemEqInterface_writeToChemEq(self, pChemEq)

    def toDataValue(self):
        r"""toDataValue(CChemEqInterface self) -> std::string"""
        return _COPASI.CChemEqInterface_toDataValue(self)

    def fromDataValue(self, dataValue):
        r"""fromDataValue(CChemEqInterface self, std::string const & dataValue) -> bool"""
        return _COPASI.CChemEqInterface_fromDataValue(self, dataValue)

    def getListOfMultiplicities(self, role):
        r"""getListOfMultiplicities(CChemEqInterface self, CFunctionParameter::Role role) -> FloatStdVector"""
        return _COPASI.CChemEqInterface_getListOfMultiplicities(self, role)

    def getListOfSpecies(self, role):
        r"""getListOfSpecies(CChemEqInterface self, CFunctionParameter::Role role) -> StringStdVector"""
        return _COPASI.CChemEqInterface_getListOfSpecies(self, role)

    def getListOfCompartments(self, role):
        r"""getListOfCompartments(CChemEqInterface self, CFunctionParameter::Role role) -> StringStdVector"""
        return _COPASI.CChemEqInterface_getListOfCompartments(self, role)

    def getListOfDisplayNames(self, role):
        r"""getListOfDisplayNames(CChemEqInterface self, CFunctionParameter::Role role) -> StringStdVector"""
        return _COPASI.CChemEqInterface_getListOfDisplayNames(self, role)

    def displayNameToNamePair(self, role, displayName):
        r"""displayNameToNamePair(CChemEqInterface self, CFunctionParameter::Role role, std::string const displayName) -> StringPair"""
        return _COPASI.CChemEqInterface_displayNameToNamePair(self, role, displayName)

    def addModifier(self, name):
        r"""addModifier(CChemEqInterface self, std::string const & name)"""
        return _COPASI.CChemEqInterface_addModifier(self, name)

    def clearModifiers(self):
        r"""clearModifiers(CChemEqInterface self)"""
        return _COPASI.CChemEqInterface_clearModifiers(self)

    def clearAll(self):
        r"""clearAll(CChemEqInterface self)"""
        return _COPASI.CChemEqInterface_clearAll(self)

    def getReversibility(self):
        r"""getReversibility(CChemEqInterface self) -> bool"""
        return _COPASI.CChemEqInterface_getReversibility(self)

    def setReversibility(self, rev):
        r"""setReversibility(CChemEqInterface self, bool rev)"""
        return _COPASI.CChemEqInterface_setReversibility(self, rev)

    def isMulticompartment(self):
        r"""isMulticompartment(CChemEqInterface self) -> bool"""
        return _COPASI.CChemEqInterface_isMulticompartment(self)

    def getCompartment(self):
        r"""getCompartment(CChemEqInterface self) -> CCompartment"""
        return _COPASI.CChemEqInterface_getCompartment(self)

    def getDefaultCompartment(self):
        r"""getDefaultCompartment(CChemEqInterface self) -> std::string"""
        return _COPASI.CChemEqInterface_getDefaultCompartment(self)

    def getCompartments(self):
        r"""getCompartments(CChemEqInterface self) -> StringSet"""
        return _COPASI.CChemEqInterface_getCompartments(self)

    def reverse(self):
        r"""reverse(CChemEqInterface self)"""
        return _COPASI.CChemEqInterface_reverse(self)

    def getMolecularity(self, role):
        r"""getMolecularity(CChemEqInterface self, CFunctionParameter::Role role) -> size_t"""
        return _COPASI.CChemEqInterface_getMolecularity(self, role)

    def listOfNonUniqueMetabNames(self):
        r"""listOfNonUniqueMetabNames(CChemEqInterface self) -> StringSet"""
        return _COPASI.CChemEqInterface_listOfNonUniqueMetabNames(self)

    def listOfNonExistingMetabNames(self):
        r"""listOfNonExistingMetabNames(CChemEqInterface self) -> std::set< std::pair< std::string,std::string >,std::less< std::pair< std::string,std::string > >,std::allocator< std::pair< std::string,std::string > > >"""
        return _COPASI.CChemEqInterface_listOfNonExistingMetabNames(self)

    def createNonExistingMetabs(self, createdKeys):
        r"""createNonExistingMetabs(CChemEqInterface self, StringStdVector createdKeys) -> bool"""
        return _COPASI.CChemEqInterface_createNonExistingMetabs(self, createdKeys)

    @staticmethod
    def getChemEqString(*args):
        r"""
        getChemEqString(bool expanded) -> std::string
        getChemEqString(CReaction rea, bool expanded) -> std::string
        """
        return _COPASI.CChemEqInterface_getChemEqString(*args)

    @staticmethod
    def setChemEqFromString(rea, ces):
        r"""setChemEqFromString(CReaction rea, std::string const & ces) -> bool"""
        return _COPASI.CChemEqInterface_setChemEqFromString(rea, ces)

    @staticmethod
    def isValidEq(eq):
        r"""isValidEq(std::string const & eq) -> bool"""
        return _COPASI.CChemEqInterface_isValidEq(eq)

# Register CChemEqInterface in _COPASI:
_COPASI.CChemEqInterface_swigregister(CChemEqInterface)
class StringSet(object):
    r"""Proxy of C++ std::set< std::string > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(StringSet self) -> SwigPyIterator"""
        return _COPASI.StringSet_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(StringSet self) -> bool"""
        return _COPASI.StringSet___nonzero__(self)

    def __bool__(self):
        r"""__bool__(StringSet self) -> bool"""
        return _COPASI.StringSet___bool__(self)

    def __len__(self):
        r"""__len__(StringSet self) -> std::set< std::string >::size_type"""
        return _COPASI.StringSet___len__(self)

    def append(self, x):
        r"""append(StringSet self, std::set< std::string >::value_type x)"""
        return _COPASI.StringSet_append(self, x)

    def __contains__(self, x):
        r"""__contains__(StringSet self, std::set< std::string >::value_type x) -> bool"""
        return _COPASI.StringSet___contains__(self, x)

    def __getitem__(self, i):
        r"""__getitem__(StringSet self, std::set< std::string >::difference_type i) -> std::set< std::string >::value_type"""
        return _COPASI.StringSet___getitem__(self, i)

    def add(self, x):
        r"""add(StringSet self, std::set< std::string >::value_type x)"""
        return _COPASI.StringSet_add(self, x)

    def discard(self, x):
        r"""discard(StringSet self, std::set< std::string >::value_type x)"""
        return _COPASI.StringSet_discard(self, x)

    def __init__(self, *args):
        r"""
        __init__(StringSet self, std::less< std::string > const & other) -> StringSet
        __init__(StringSet self) -> StringSet
        __init__(StringSet self, StringSet other) -> StringSet
        """
        _COPASI.StringSet_swiginit(self, _COPASI.new_StringSet(*args))

    def empty(self):
        r"""empty(StringSet self) -> bool"""
        return _COPASI.StringSet_empty(self)

    def size(self):
        r"""size(StringSet self) -> std::set< std::string >::size_type"""
        return _COPASI.StringSet_size(self)

    def clear(self):
        r"""clear(StringSet self)"""
        return _COPASI.StringSet_clear(self)

    def swap(self, v):
        r"""swap(StringSet self, StringSet v)"""
        return _COPASI.StringSet_swap(self, v)

    def count(self, x):
        r"""count(StringSet self, std::set< std::string >::key_type const & x) -> std::set< std::string >::size_type"""
        return _COPASI.StringSet_count(self, x)

    def rbegin(self):
        r"""rbegin(StringSet self) -> std::set< std::string >::reverse_iterator"""
        return _COPASI.StringSet_rbegin(self)

    def rend(self):
        r"""rend(StringSet self) -> std::set< std::string >::reverse_iterator"""
        return _COPASI.StringSet_rend(self)

    def erase(self, *args):
        r"""
        erase(StringSet self, std::set< std::string >::key_type const & x) -> std::set< std::string >::size_type
        erase(StringSet self, std::set< std::string >::iterator pos)
        erase(StringSet self, std::set< std::string >::iterator first, std::set< std::string >::iterator last)
        """
        return _COPASI.StringSet_erase(self, *args)

    def find(self, x):
        r"""find(StringSet self, std::set< std::string >::key_type const & x) -> std::set< std::string >::iterator"""
        return _COPASI.StringSet_find(self, x)

    def lower_bound(self, x):
        r"""lower_bound(StringSet self, std::set< std::string >::key_type const & x) -> std::set< std::string >::iterator"""
        return _COPASI.StringSet_lower_bound(self, x)

    def upper_bound(self, x):
        r"""upper_bound(StringSet self, std::set< std::string >::key_type const & x) -> std::set< std::string >::iterator"""
        return _COPASI.StringSet_upper_bound(self, x)

    def equal_range(self, x):
        r"""equal_range(StringSet self, std::set< std::string >::key_type const & x) -> std::pair< std::set< std::string >::iterator,std::set< std::string >::iterator >"""
        return _COPASI.StringSet_equal_range(self, x)

    def insert(self, __x):
        r"""insert(StringSet self, std::set< std::string >::value_type const & __x) -> std::pair< std::set< std::string >::iterator,bool >"""
        return _COPASI.StringSet_insert(self, __x)
    __swig_destroy__ = _COPASI.delete_StringSet

# Register StringSet in _COPASI:
_COPASI.StringSet_swigregister(StringSet)
class CReaction(CDataContainer, CAnnotation):
    r"""Proxy of C++ CReaction class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    KineticLawUnit_Default = _COPASI.CReaction_KineticLawUnit_Default
    
    KineticLawUnit_AmountPerTime = _COPASI.CReaction_KineticLawUnit_AmountPerTime
    
    KineticLawUnit_ConcentrationPerTime = _COPASI.CReaction_KineticLawUnit_ConcentrationPerTime
    
    KineticLawUnit___SIZE = _COPASI.CReaction_KineticLawUnit___SIZE
    

    @staticmethod
    def fromData(data, pParent):
        r"""fromData(CData data, CUndoObjectInterface pParent) -> CReaction"""
        return _COPASI.CReaction_fromData(data, pParent)

    def __init__(self, *args):
        r"""
        __init__(CReaction self, std::string const & name="NoName", CDataContainer pParent=static_cast< CDataContainer * >((void *) 0)) -> CReaction
        __init__(CReaction self, CReaction src, CDataContainer pParent) -> CReaction
        """
        _COPASI.CReaction_swiginit(self, _COPASI.new_CReaction(*args))
    __swig_destroy__ = _COPASI.delete_CReaction

    def getChildObjectUnits(self, pObject):
        r"""getChildObjectUnits(CReaction self, CDataObject pObject) -> std::string"""
        return _COPASI.CReaction_getChildObjectUnits(self, pObject)

    def getObjectDisplayName(self):
        r"""getObjectDisplayName(CReaction self) -> std::string"""
        return _COPASI.CReaction_getObjectDisplayName(self)

    def setObjectParent(self, pParent):
        r"""setObjectParent(CReaction self, CDataContainer pParent) -> bool"""
        return _COPASI.CReaction_setObjectParent(self, pParent)

    def getKey(self):
        r"""getKey(CReaction self) -> std::string const &"""
        return _COPASI.CReaction_getKey(self)

    def getChemEq(self, *args):
        r"""
        getChemEq(CReaction self) -> CChemEq
        getChemEq(CReaction self) -> CChemEq
        """
        return _COPASI.CReaction_getChemEq(self, *args)

    def getFunction(self):
        r"""getFunction(CReaction self) -> CFunction"""
        return _COPASI.CReaction_getFunction(self)

    def getFlux(self):
        r"""getFlux(CReaction self) -> double const &"""
        return _COPASI.CReaction_getFlux(self)

    def getParticleFlux(self):
        r"""getParticleFlux(CReaction self) -> double const &"""
        return _COPASI.CReaction_getParticleFlux(self)

    def isReversible(self):
        r"""isReversible(CReaction self) -> bool"""
        return _COPASI.CReaction_isReversible(self)

    def addSubstrate(self, metabKey, multiplicity=1.0):
        r"""addSubstrate(CReaction self, std::string const & metabKey, double const & multiplicity=1.0) -> bool"""
        return _COPASI.CReaction_addSubstrate(self, metabKey, multiplicity)

    def addProduct(self, metabKey, multiplicity=1.0):
        r"""addProduct(CReaction self, std::string const & metabKey, double const & multiplicity=1.0) -> bool"""
        return _COPASI.CReaction_addProduct(self, metabKey, multiplicity)

    def addModifier(self, metabKey, multiplicity=1.0):
        r"""addModifier(CReaction self, std::string const & metabKey, double const & multiplicity=1.0) -> bool"""
        return _COPASI.CReaction_addModifier(self, metabKey, multiplicity)

    def createFunctionFromExpression(self, infix):
        r"""createFunctionFromExpression(CReaction self, std::string const & infix) -> CFunction"""
        return _COPASI.CReaction_createFunctionFromExpression(self, infix)

    def setFunction(self, *args):
        r"""
        setFunction(CReaction self, std::string const & functionName) -> bool
        setFunction(CReaction self, CFunction pFunction) -> bool
        """
        return _COPASI.CReaction_setFunction(self, *args)

    def setParameterValue(self, parameterName, value):
        r"""setParameterValue(CReaction self, std::string const & parameterName, double const & value)"""
        return _COPASI.CReaction_setParameterValue(self, parameterName, value)

    def getParameterValue(self, parameterName):
        r"""getParameterValue(CReaction self, std::string const & parameterName) -> double const &"""
        return _COPASI.CReaction_getParameterValue(self, parameterName)

    def getParameters(self, *args):
        r"""
        getParameters(CReaction self) -> CCopasiParameterGroup
        getParameters(CReaction self) -> CCopasiParameterGroup
        """
        return _COPASI.CReaction_getParameters(self, *args)

    def isLocalParameter(self, *args):
        r"""
        isLocalParameter(CReaction self, size_t const & index) -> bool
        isLocalParameter(CReaction self, std::string const & parameterName) -> bool
        """
        return _COPASI.CReaction_isLocalParameter(self, *args)

    def getObject(self, cn):
        r"""getObject(CReaction self, CCommonName cn) -> CObjectInterface"""
        return _COPASI.CReaction_getObject(self, cn)

    def getFunctionParameters(self):
        r"""getFunctionParameters(CReaction self) -> CFunctionParameters"""
        return _COPASI.CReaction_getFunctionParameters(self)

    def setReversible(self, reversible):
        r"""setReversible(CReaction self, bool reversible)"""
        return _COPASI.CReaction_setReversible(self, reversible)

    def compile(self):
        r"""compile(CReaction self) -> CIssue"""
        return _COPASI.CReaction_compile(self)

    def getParticleFluxReference(self):
        r"""getParticleFluxReference(CReaction self) -> CDataObject"""
        return _COPASI.CReaction_getParticleFluxReference(self)

    def getFluxReference(self):
        r"""getFluxReference(CReaction self) -> CDataObject"""
        return _COPASI.CReaction_getFluxReference(self)

    def getParticleNoiseReference(self):
        r"""getParticleNoiseReference(CReaction self) -> CDataObject"""
        return _COPASI.CReaction_getParticleNoiseReference(self)

    def getNoiseReference(self):
        r"""getNoiseReference(CReaction self) -> CDataObject"""
        return _COPASI.CReaction_getNoiseReference(self)

    def getPropensityReference(self):
        r"""getPropensityReference(CReaction self) -> CDataObject"""
        return _COPASI.CReaction_getPropensityReference(self)

    def getCallParameters(self):
        r"""getCallParameters(CReaction self) -> PointerCallParameters"""
        return _COPASI.CReaction_getCallParameters(self)

    def getDefaultNoiseExpression(self):
        r"""getDefaultNoiseExpression(CReaction self) -> std::string"""
        return _COPASI.CReaction_getDefaultNoiseExpression(self)

    def setNoiseExpression(self, expression):
        r"""setNoiseExpression(CReaction self, std::string const & expression) -> bool"""
        return _COPASI.CReaction_setNoiseExpression(self, expression)

    def getNoiseExpression(self):
        r"""getNoiseExpression(CReaction self) -> std::string"""
        return _COPASI.CReaction_getNoiseExpression(self)

    def setNoiseExpressionPtr(self, pExpression):
        r"""setNoiseExpressionPtr(CReaction self, CExpression pExpression) -> bool"""
        return _COPASI.CReaction_setNoiseExpressionPtr(self, pExpression)

    def getNoiseExpressionPtr(self):
        r"""getNoiseExpressionPtr(CReaction self) -> CExpression"""
        return _COPASI.CReaction_getNoiseExpressionPtr(self)

    def setHasNoise(self, hasNoise):
        r"""setHasNoise(CReaction self, bool const & hasNoise)"""
        return _COPASI.CReaction_setHasNoise(self, hasNoise)

    def hasNoise(self):
        r"""hasNoise(CReaction self) -> bool const &"""
        return _COPASI.CReaction_hasNoise(self)

    def getReactionScheme(self):
        r"""getReactionScheme(CReaction self) -> std::string"""
        return _COPASI.CReaction_getReactionScheme(self)

    def setReactionScheme(self, *args):
        r"""setReactionScheme(CReaction self, std::string const & scheme, std::string const & newFunction="", bool createMetabolites=True, bool createOther=True) -> bool"""
        return _COPASI.CReaction_setReactionScheme(self, *args)

    def getCompartmentNumber(self):
        r"""getCompartmentNumber(CReaction self) -> size_t"""
        return _COPASI.CReaction_getCompartmentNumber(self)

    def getLargestCompartment(self):
        r"""getLargestCompartment(CReaction self) -> CCompartment"""
        return _COPASI.CReaction_getLargestCompartment(self)

    def setFunctionFromExpressionTree(self, tree, copasi2sbmlmap):
        r"""setFunctionFromExpressionTree(CReaction self, CExpression tree, std::map< CDataObject const *,SBase *,std::less< CDataObject const * >,std::allocator< std::pair< CDataObject const *const,SBase * > > > & copasi2sbmlmap) -> CFunction"""
        return _COPASI.CReaction_setFunctionFromExpressionTree(self, tree, copasi2sbmlmap)

    def setSBMLId(self, id):
        r"""setSBMLId(CReaction self, std::string const & id)"""
        return _COPASI.CReaction_setSBMLId(self, id)

    def getSBMLId(self):
        r"""getSBMLId(CReaction self) -> std::string const &"""
        return _COPASI.CReaction_getSBMLId(self)

    def printDebug(self):
        r"""printDebug(CReaction self)"""
        return _COPASI.CReaction_printDebug(self)

    def getMap(self):
        r"""getMap(CReaction self) -> CFunctionParameterMap"""
        return _COPASI.CReaction_getMap(self)

    def setFast(self, fast):
        r"""setFast(CReaction self, bool const & fast)"""
        return _COPASI.CReaction_setFast(self, fast)

    def isFast(self):
        r"""isFast(CReaction self) -> bool const &"""
        return _COPASI.CReaction_isFast(self)

    def setKineticLawUnitType(self, kineticLawUnitType):
        r"""setKineticLawUnitType(CReaction self, CReaction::KineticLawUnit const & kineticLawUnitType)"""
        return _COPASI.CReaction_setKineticLawUnitType(self, kineticLawUnitType)

    def getKineticLawUnitType(self):
        r"""getKineticLawUnitType(CReaction self) -> CReaction::KineticLawUnit const &"""
        return _COPASI.CReaction_getKineticLawUnitType(self)

    def getEffectiveKineticLawUnitType(self):
        r"""getEffectiveKineticLawUnitType(CReaction self) -> CReaction::KineticLawUnit"""
        return _COPASI.CReaction_getEffectiveKineticLawUnitType(self)

    def getKineticLawUnit(self):
        r"""getKineticLawUnit(CReaction self) -> std::string"""
        return _COPASI.CReaction_getKineticLawUnit(self)

    def setScalingCompartmentCN(self, compartmentCN):
        r"""setScalingCompartmentCN(CReaction self, std::string const & compartmentCN)"""
        return _COPASI.CReaction_setScalingCompartmentCN(self, compartmentCN)

    def getScalingCompartmentCN(self):
        r"""getScalingCompartmentCN(CReaction self) -> CCommonName"""
        return _COPASI.CReaction_getScalingCompartmentCN(self)

    def setScalingCompartment(self, pCompartment):
        r"""setScalingCompartment(CReaction self, CCompartment pCompartment)"""
        return _COPASI.CReaction_setScalingCompartment(self, pCompartment)

    def getScalingCompartment(self):
        r"""getScalingCompartment(CReaction self) -> CCompartment"""
        return _COPASI.CReaction_getScalingCompartment(self)

    def getParameterCNs(self, *args):
        r"""
        getParameterCNs(CReaction self, size_t const & index) -> ReportItemVector
        getParameterCNs(CReaction self, std::string const & name) -> ReportItemVector
        getParameterCNs(CReaction self) -> VectorOfReportItemVectors
        """
        return _COPASI.CReaction_getParameterCNs(self, *args)

    def setParameterCNs(self, *args):
        r"""
        setParameterCNs(CReaction self, size_t const & index, ReportItemVector CNs) -> bool
        setParameterCNs(CReaction self, std::string const & name, ReportItemVector CNs) -> bool
        """
        return _COPASI.CReaction_setParameterCNs(self, *args)

    def getParameterObjects(self, *args):
        r"""
        getParameterObjects(CReaction self, size_t const & index) -> DataObjectVector
        getParameterObjects(CReaction self, std::string const & name) -> DataObjectVector
        getParameterObjects(CReaction self) -> VectorOfDataObjectVector
        """
        return _COPASI.CReaction_getParameterObjects(self, *args)

    def setParameterObjects(self, *args):
        r"""
        setParameterObjects(CReaction self, size_t const & index, DataObjectVector objects) -> bool
        setParameterObjects(CReaction self, std::string const & name, DataObjectVector objects) -> bool
        """
        return _COPASI.CReaction_setParameterObjects(self, *args)

    def setParameterObject(self, *args):
        r"""
        setParameterObject(CReaction self, size_t const & index, CDataObject object) -> bool
        setParameterObject(CReaction self, std::string const & name, CDataObject object) -> bool
        """
        return _COPASI.CReaction_setParameterObject(self, *args)

    def addParameterObject(self, *args):
        r"""
        addParameterObject(CReaction self, size_t const & index, CDataObject object) -> bool
        addParameterObject(CReaction self, std::string const & name, CDataObject object) -> bool
        """
        return _COPASI.CReaction_addParameterObject(self, *args)

    def setNotes(self, notes):
        r"""setNotes(CReaction self, std::string const & notes)"""
        return _COPASI.CReaction_setNotes(self, notes)

    def getNotes(self):
        r"""getNotes(CReaction self) -> std::string const &"""
        return _COPASI.CReaction_getNotes(self)

    def getMiriamAnnotation(self):
        r"""getMiriamAnnotation(CReaction self) -> std::string const &"""
        return _COPASI.CReaction_getMiriamAnnotation(self)

    def setMiriamAnnotation(self, miriamAnnotation, newId, oldId):
        r"""setMiriamAnnotation(CReaction self, std::string const & miriamAnnotation, std::string const & newId, std::string const & oldId)"""
        return _COPASI.CReaction_setMiriamAnnotation(self, miriamAnnotation, newId, oldId)

    def hasUnsupportedAnnotation(self, name):
        r"""hasUnsupportedAnnotation(CReaction self, std::string name) -> bool"""
        return _COPASI.CReaction_hasUnsupportedAnnotation(self, name)

    def getNumUnsupportedAnnotations(self):
        r"""getNumUnsupportedAnnotations(CReaction self) -> int"""
        return _COPASI.CReaction_getNumUnsupportedAnnotations(self)

    def getUnsupportedAnnotation(self, *args):
        r"""
        getUnsupportedAnnotation(CReaction self, std::string name) -> std::string
        getUnsupportedAnnotation(CReaction self, int index) -> std::string
        """
        return _COPASI.CReaction_getUnsupportedAnnotation(self, *args)

    def getUnsupportedAnnotationName(self, index):
        r"""getUnsupportedAnnotationName(CReaction self, int index) -> std::string"""
        return _COPASI.CReaction_getUnsupportedAnnotationName(self, index)

    def addUnsupportedAnnotation(self, name, xml):
        r"""addUnsupportedAnnotation(CReaction self, std::string const & name, std::string const & xml) -> bool"""
        return _COPASI.CReaction_addUnsupportedAnnotation(self, name, xml)

    def replaceUnsupportedAnnotation(self, name, xml):
        r"""replaceUnsupportedAnnotation(CReaction self, std::string const & name, std::string const & xml) -> bool"""
        return _COPASI.CReaction_replaceUnsupportedAnnotation(self, name, xml)

    def removeUnsupportedAnnotation(self, name):
        r"""removeUnsupportedAnnotation(CReaction self, std::string const & name) -> bool"""
        return _COPASI.CReaction_removeUnsupportedAnnotation(self, name)

# Register CReaction in _COPASI:
_COPASI.CReaction_swigregister(CReaction)
class CReactionInterface(object):
    r"""Proxy of C++ CReactionInterface class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(CReactionInterface self) -> CReactionInterface"""
        _COPASI.CReactionInterface_swiginit(self, _COPASI.new_CReactionInterface())
    __swig_destroy__ = _COPASI.delete_CReactionInterface

    def setChemEqString(self, eq, newFunction):
        r"""setChemEqString(CReactionInterface self, std::string const & eq, std::string const & newFunction)"""
        return _COPASI.CReactionInterface_setChemEqString(self, eq, newFunction)

    def clearChemEquation(self):
        r"""clearChemEquation(CReactionInterface self)"""
        return _COPASI.CReactionInterface_clearChemEquation(self)

    def getChemEqString(self):
        r"""getChemEqString(CReactionInterface self) -> std::string"""
        return _COPASI.CReactionInterface_getChemEqString(self)

    def getChemEqInterface(self):
        r"""getChemEqInterface(CReactionInterface self) -> CChemEqInterface"""
        return _COPASI.CReactionInterface_getChemEqInterface(self)

    def isReversible(self):
        r"""isReversible(CReactionInterface self) -> bool"""
        return _COPASI.CReactionInterface_isReversible(self)

    def isMulticompartment(self):
        r"""isMulticompartment(CReactionInterface self) -> bool"""
        return _COPASI.CReactionInterface_isMulticompartment(self)

    def setReversibility(self, rev, newFunction):
        r"""setReversibility(CReactionInterface self, bool rev, std::string const & newFunction)"""
        return _COPASI.CReactionInterface_setReversibility(self, rev, newFunction)

    def reverse(self, rev, newFunction):
        r"""reverse(CReactionInterface self, bool rev, std::string const & newFunction)"""
        return _COPASI.CReactionInterface_reverse(self, rev, newFunction)

    def getListOfMetabs(self, role):
        r"""getListOfMetabs(CReactionInterface self, CFunctionParameter::Role role) -> StringStdVector"""
        return _COPASI.CReactionInterface_getListOfMetabs(self, role)

    def setFunctionWithEmptyMapping(self, fn):
        r"""setFunctionWithEmptyMapping(CReactionInterface self, std::string const & fn)"""
        return _COPASI.CReactionInterface_setFunctionWithEmptyMapping(self, fn)

    def setFunctionAndDoMapping(self, fn):
        r"""setFunctionAndDoMapping(CReactionInterface self, std::string const & fn)"""
        return _COPASI.CReactionInterface_setFunctionAndDoMapping(self, fn)

    def getFunctionName(self):
        r"""getFunctionName(CReactionInterface self) -> std::string"""
        return _COPASI.CReactionInterface_getFunctionName(self)

    def getFunctionDescription(self):
        r"""getFunctionDescription(CReactionInterface self) -> std::string"""
        return _COPASI.CReactionInterface_getFunctionDescription(self)

    def getFunction(self):
        r"""getFunction(CReactionInterface self) -> CFunction"""
        return _COPASI.CReactionInterface_getFunction(self)

    def getListOfPossibleFunctions(self):
        r"""getListOfPossibleFunctions(CReactionInterface self) -> StringStdVector"""
        return _COPASI.CReactionInterface_getListOfPossibleFunctions(self)

    def size(self):
        r"""size(CReactionInterface self) -> size_t"""
        return _COPASI.CReactionInterface_size(self)

    def isVector(self, index):
        r"""isVector(CReactionInterface self, size_t index) -> bool"""
        return _COPASI.CReactionInterface_isVector(self, index)

    def getUsage(self, index):
        r"""getUsage(CReactionInterface self, size_t index) -> CFunctionParameter::Role"""
        return _COPASI.CReactionInterface_getUsage(self, index)

    def getParameterName(self, index):
        r"""getParameterName(CReactionInterface self, size_t index) -> std::string"""
        return _COPASI.CReactionInterface_getParameterName(self, index)

    def setMapping(self, index, mn):
        r"""setMapping(CReactionInterface self, size_t index, std::string mn)"""
        return _COPASI.CReactionInterface_setMapping(self, index, mn)

    def getMappings(self, index):
        r"""getMappings(CReactionInterface self, size_t index) -> StringStdVector"""
        return _COPASI.CReactionInterface_getMappings(self, index)

    def getMapping(self, index):
        r"""getMapping(CReactionInterface self, size_t index) -> std::string const &"""
        return _COPASI.CReactionInterface_getMapping(self, index)

    def getUnitVector(self, index):
        r"""getUnitVector(CReactionInterface self, size_t index) -> StringStdVector"""
        return _COPASI.CReactionInterface_getUnitVector(self, index)

    def getUnit(self, index):
        r"""getUnit(CReactionInterface self, size_t index) -> std::string"""
        return _COPASI.CReactionInterface_getUnit(self, index)

    def setLocalValue(self, index, value):
        r"""setLocalValue(CReactionInterface self, size_t index, double value)"""
        return _COPASI.CReactionInterface_setLocalValue(self, index, value)

    def setLocal(self, index):
        r"""setLocal(CReactionInterface self, size_t index)"""
        return _COPASI.CReactionInterface_setLocal(self, index)

    def getLocalValue(self, index):
        r"""getLocalValue(CReactionInterface self, size_t index) -> double const &"""
        return _COPASI.CReactionInterface_getLocalValue(self, index)

    def isLocalValue(self, index):
        r"""isLocalValue(CReactionInterface self, size_t index) -> bool"""
        return _COPASI.CReactionInterface_isLocalValue(self, index)

    def init(self, reaction):
        r"""init(CReactionInterface self, CReaction reaction)"""
        return _COPASI.CReactionInterface_init(self, reaction)

    def writeBackToReaction(self, rea=None, compile=True):
        r"""writeBackToReaction(CReactionInterface self, CReaction rea=None, bool compile=True) -> bool"""
        return _COPASI.CReactionInterface_writeBackToReaction(self, rea, compile)

    def createUndoData(self, framework):
        r"""createUndoData(CReactionInterface self, CCore::Framework const & framework) -> CUndoData"""
        return _COPASI.CReactionInterface_createUndoData(self, framework)

    def createMetabolites(self, *args):
        r"""
        createMetabolites(CReactionInterface self) -> bool
        createMetabolites(CReactionInterface self, StringStdVector createdKeys) -> bool
        """
        return _COPASI.CReactionInterface_createMetabolites(self, *args)

    def createOtherObjects(self, *args):
        r"""
        createOtherObjects(CReactionInterface self) -> bool
        createOtherObjects(CReactionInterface self, StringStdVector createdKeys) -> bool
        """
        return _COPASI.CReactionInterface_createOtherObjects(self, *args)

    def isValid(self):
        r"""isValid(CReactionInterface self) -> bool"""
        return _COPASI.CReactionInterface_isValid(self)

    def isLocked(self, *args):
        r"""
        isLocked(CReactionInterface self, size_t index) -> bool
        isLocked(CReactionInterface self, CFunctionParameter::Role usage) -> bool
        """
        return _COPASI.CReactionInterface_isLocked(self, *args)

    def getDeletedParameters(self):
        r"""getDeletedParameters(CReactionInterface self) -> DataObjectSet"""
        return _COPASI.CReactionInterface_getDeletedParameters(self)

    def setKineticLawUnitType(self, kineticLawUnitType):
        r"""setKineticLawUnitType(CReactionInterface self, CReaction::KineticLawUnit const & kineticLawUnitType)"""
        return _COPASI.CReactionInterface_setKineticLawUnitType(self, kineticLawUnitType)

    def getKineticLawUnitType(self):
        r"""getKineticLawUnitType(CReactionInterface self) -> CReaction::KineticLawUnit const &"""
        return _COPASI.CReactionInterface_getKineticLawUnitType(self)

    def getEffectiveKineticLawUnitType(self):
        r"""getEffectiveKineticLawUnitType(CReactionInterface self) -> CReaction::KineticLawUnit"""
        return _COPASI.CReactionInterface_getEffectiveKineticLawUnitType(self)

    def getConcentrationRateUnit(self):
        r"""getConcentrationRateUnit(CReactionInterface self) -> std::string"""
        return _COPASI.CReactionInterface_getConcentrationRateUnit(self)

    def getAmountRateUnit(self):
        r"""getAmountRateUnit(CReactionInterface self) -> std::string"""
        return _COPASI.CReactionInterface_getAmountRateUnit(self)

    def getEffectiveKineticLawUnit(self):
        r"""getEffectiveKineticLawUnit(CReactionInterface self) -> std::string"""
        return _COPASI.CReactionInterface_getEffectiveKineticLawUnit(self)

    def setScalingCompartment(self, scalingCompartment):
        r"""setScalingCompartment(CReactionInterface self, std::string const & scalingCompartment)"""
        return _COPASI.CReactionInterface_setScalingCompartment(self, scalingCompartment)

    def getScalingCompartment(self):
        r"""getScalingCompartment(CReactionInterface self) -> std::string const &"""
        return _COPASI.CReactionInterface_getScalingCompartment(self)

    def getDefaultScalingCompartment(self):
        r"""getDefaultScalingCompartment(CReactionInterface self) -> std::string"""
        return _COPASI.CReactionInterface_getDefaultScalingCompartment(self)

    def setHasNoise(self, hasNoise):
        r"""setHasNoise(CReactionInterface self, bool const & hasNoise)"""
        return _COPASI.CReactionInterface_setHasNoise(self, hasNoise)

    def hasNoise(self):
        r"""hasNoise(CReactionInterface self) -> bool const &"""
        return _COPASI.CReactionInterface_hasNoise(self)

    def setNoiseExpression(self, expression):
        r"""setNoiseExpression(CReactionInterface self, std::string const & expression) -> bool"""
        return _COPASI.CReactionInterface_setNoiseExpression(self, expression)

    def getNoiseExpression(self):
        r"""getNoiseExpression(CReactionInterface self) -> std::string const &"""
        return _COPASI.CReactionInterface_getNoiseExpression(self)

# Register CReactionInterface in _COPASI:
_COPASI.CReactionInterface_swigregister(CReactionInterface)
class ObjectStdVector(object):
    r"""Proxy of C++ std::vector< CDataObject * > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(ObjectStdVector self) -> SwigPyIterator"""
        return _COPASI.ObjectStdVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(ObjectStdVector self) -> bool"""
        return _COPASI.ObjectStdVector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(ObjectStdVector self) -> bool"""
        return _COPASI.ObjectStdVector___bool__(self)

    def __len__(self):
        r"""__len__(ObjectStdVector self) -> std::vector< CDataObject * >::size_type"""
        return _COPASI.ObjectStdVector___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(ObjectStdVector self, std::vector< CDataObject * >::difference_type i, std::vector< CDataObject * >::difference_type j) -> ObjectStdVector"""
        return _COPASI.ObjectStdVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(ObjectStdVector self, std::vector< CDataObject * >::difference_type i, std::vector< CDataObject * >::difference_type j)
        __setslice__(ObjectStdVector self, std::vector< CDataObject * >::difference_type i, std::vector< CDataObject * >::difference_type j, ObjectStdVector v)
        """
        return _COPASI.ObjectStdVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(ObjectStdVector self, std::vector< CDataObject * >::difference_type i, std::vector< CDataObject * >::difference_type j)"""
        return _COPASI.ObjectStdVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(ObjectStdVector self, std::vector< CDataObject * >::difference_type i)
        __delitem__(ObjectStdVector self, SWIGPY_SLICEOBJECT * slice)
        """
        return _COPASI.ObjectStdVector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(ObjectStdVector self, SWIGPY_SLICEOBJECT * slice) -> ObjectStdVector
        __getitem__(ObjectStdVector self, std::vector< CDataObject * >::difference_type i) -> CDataObject
        """
        return _COPASI.ObjectStdVector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(ObjectStdVector self, SWIGPY_SLICEOBJECT * slice, ObjectStdVector v)
        __setitem__(ObjectStdVector self, SWIGPY_SLICEOBJECT * slice)
        __setitem__(ObjectStdVector self, std::vector< CDataObject * >::difference_type i, CDataObject x)
        """
        return _COPASI.ObjectStdVector___setitem__(self, *args)

    def pop(self):
        r"""pop(ObjectStdVector self) -> CDataObject"""
        return _COPASI.ObjectStdVector_pop(self)

    def append(self, x):
        r"""append(ObjectStdVector self, CDataObject x)"""
        return _COPASI.ObjectStdVector_append(self, x)

    def empty(self):
        r"""empty(ObjectStdVector self) -> bool"""
        return _COPASI.ObjectStdVector_empty(self)

    def size(self):
        r"""size(ObjectStdVector self) -> std::vector< CDataObject * >::size_type"""
        return _COPASI.ObjectStdVector_size(self)

    def swap(self, v):
        r"""swap(ObjectStdVector self, ObjectStdVector v)"""
        return _COPASI.ObjectStdVector_swap(self, v)

    def rbegin(self):
        r"""rbegin(ObjectStdVector self) -> std::vector< CDataObject * >::reverse_iterator"""
        return _COPASI.ObjectStdVector_rbegin(self)

    def rend(self):
        r"""rend(ObjectStdVector self) -> std::vector< CDataObject * >::reverse_iterator"""
        return _COPASI.ObjectStdVector_rend(self)

    def clear(self):
        r"""clear(ObjectStdVector self)"""
        return _COPASI.ObjectStdVector_clear(self)

    def get_allocator(self):
        r"""get_allocator(ObjectStdVector self) -> std::vector< CDataObject * >::allocator_type"""
        return _COPASI.ObjectStdVector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(ObjectStdVector self)"""
        return _COPASI.ObjectStdVector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(ObjectStdVector self, std::vector< CDataObject * >::iterator pos) -> std::vector< CDataObject * >::iterator
        erase(ObjectStdVector self, std::vector< CDataObject * >::iterator first, std::vector< CDataObject * >::iterator last) -> std::vector< CDataObject * >::iterator
        """
        return _COPASI.ObjectStdVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(ObjectStdVector self) -> ObjectStdVector
        __init__(ObjectStdVector self, ObjectStdVector other) -> ObjectStdVector
        __init__(ObjectStdVector self, std::vector< CDataObject * >::size_type size) -> ObjectStdVector
        __init__(ObjectStdVector self, std::vector< CDataObject * >::size_type size, CDataObject value) -> ObjectStdVector
        """
        _COPASI.ObjectStdVector_swiginit(self, _COPASI.new_ObjectStdVector(*args))

    def push_back(self, x):
        r"""push_back(ObjectStdVector self, CDataObject x)"""
        return _COPASI.ObjectStdVector_push_back(self, x)

    def front(self):
        r"""front(ObjectStdVector self) -> CDataObject"""
        return _COPASI.ObjectStdVector_front(self)

    def back(self):
        r"""back(ObjectStdVector self) -> CDataObject"""
        return _COPASI.ObjectStdVector_back(self)

    def assign(self, n, x):
        r"""assign(ObjectStdVector self, std::vector< CDataObject * >::size_type n, CDataObject x)"""
        return _COPASI.ObjectStdVector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(ObjectStdVector self, std::vector< CDataObject * >::size_type new_size)
        resize(ObjectStdVector self, std::vector< CDataObject * >::size_type new_size, CDataObject x)
        """
        return _COPASI.ObjectStdVector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(ObjectStdVector self, std::vector< CDataObject * >::iterator pos, CDataObject x) -> std::vector< CDataObject * >::iterator
        insert(ObjectStdVector self, std::vector< CDataObject * >::iterator pos, std::vector< CDataObject * >::size_type n, CDataObject x)
        """
        return _COPASI.ObjectStdVector_insert(self, *args)

    def reserve(self, n):
        r"""reserve(ObjectStdVector self, std::vector< CDataObject * >::size_type n)"""
        return _COPASI.ObjectStdVector_reserve(self, n)

    def capacity(self):
        r"""capacity(ObjectStdVector self) -> std::vector< CDataObject * >::size_type"""
        return _COPASI.ObjectStdVector_capacity(self)
    __swig_destroy__ = _COPASI.delete_ObjectStdVector

# Register ObjectStdVector in _COPASI:
_COPASI.ObjectStdVector_swigregister(ObjectStdVector)
class StringUnitMap(object):
    r"""Proxy of C++ std::map< std::string,CUnit > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(StringUnitMap self) -> SwigPyIterator"""
        return _COPASI.StringUnitMap_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(StringUnitMap self) -> bool"""
        return _COPASI.StringUnitMap___nonzero__(self)

    def __bool__(self):
        r"""__bool__(StringUnitMap self) -> bool"""
        return _COPASI.StringUnitMap___bool__(self)

    def __len__(self):
        r"""__len__(StringUnitMap self) -> std::map< std::string,CUnit >::size_type"""
        return _COPASI.StringUnitMap___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        r"""__getitem__(StringUnitMap self, std::map< std::string,CUnit >::key_type const & key) -> CUnit"""
        return _COPASI.StringUnitMap___getitem__(self, key)

    def __delitem__(self, key):
        r"""__delitem__(StringUnitMap self, std::map< std::string,CUnit >::key_type const & key)"""
        return _COPASI.StringUnitMap___delitem__(self, key)

    def has_key(self, key):
        r"""has_key(StringUnitMap self, std::map< std::string,CUnit >::key_type const & key) -> bool"""
        return _COPASI.StringUnitMap_has_key(self, key)

    def keys(self):
        r"""keys(StringUnitMap self) -> PyObject *"""
        return _COPASI.StringUnitMap_keys(self)

    def values(self):
        r"""values(StringUnitMap self) -> PyObject *"""
        return _COPASI.StringUnitMap_values(self)

    def items(self):
        r"""items(StringUnitMap self) -> PyObject *"""
        return _COPASI.StringUnitMap_items(self)

    def __contains__(self, key):
        r"""__contains__(StringUnitMap self, std::map< std::string,CUnit >::key_type const & key) -> bool"""
        return _COPASI.StringUnitMap___contains__(self, key)

    def key_iterator(self):
        r"""key_iterator(StringUnitMap self) -> SwigPyIterator"""
        return _COPASI.StringUnitMap_key_iterator(self)

    def value_iterator(self):
        r"""value_iterator(StringUnitMap self) -> SwigPyIterator"""
        return _COPASI.StringUnitMap_value_iterator(self)

    def __setitem__(self, *args):
        r"""
        __setitem__(StringUnitMap self, std::map< std::string,CUnit >::key_type const & key)
        __setitem__(StringUnitMap self, std::map< std::string,CUnit >::key_type const & key, CUnit x)
        """
        return _COPASI.StringUnitMap___setitem__(self, *args)

    def asdict(self):
        r"""asdict(StringUnitMap self) -> PyObject *"""
        return _COPASI.StringUnitMap_asdict(self)

    def __init__(self, *args):
        r"""
        __init__(StringUnitMap self, std::less< std::string > const & other) -> StringUnitMap
        __init__(StringUnitMap self) -> StringUnitMap
        __init__(StringUnitMap self, StringUnitMap other) -> StringUnitMap
        """
        _COPASI.StringUnitMap_swiginit(self, _COPASI.new_StringUnitMap(*args))

    def empty(self):
        r"""empty(StringUnitMap self) -> bool"""
        return _COPASI.StringUnitMap_empty(self)

    def size(self):
        r"""size(StringUnitMap self) -> std::map< std::string,CUnit >::size_type"""
        return _COPASI.StringUnitMap_size(self)

    def swap(self, v):
        r"""swap(StringUnitMap self, StringUnitMap v)"""
        return _COPASI.StringUnitMap_swap(self, v)

    def rbegin(self):
        r"""rbegin(StringUnitMap self) -> std::map< std::string,CUnit >::reverse_iterator"""
        return _COPASI.StringUnitMap_rbegin(self)

    def rend(self):
        r"""rend(StringUnitMap self) -> std::map< std::string,CUnit >::reverse_iterator"""
        return _COPASI.StringUnitMap_rend(self)

    def clear(self):
        r"""clear(StringUnitMap self)"""
        return _COPASI.StringUnitMap_clear(self)

    def get_allocator(self):
        r"""get_allocator(StringUnitMap self) -> std::map< std::string,CUnit >::allocator_type"""
        return _COPASI.StringUnitMap_get_allocator(self)

    def count(self, x):
        r"""count(StringUnitMap self, std::map< std::string,CUnit >::key_type const & x) -> std::map< std::string,CUnit >::size_type"""
        return _COPASI.StringUnitMap_count(self, x)

    def erase(self, *args):
        r"""
        erase(StringUnitMap self, std::map< std::string,CUnit >::key_type const & x) -> std::map< std::string,CUnit >::size_type
        erase(StringUnitMap self, std::map< std::string,CUnit >::iterator position)
        erase(StringUnitMap self, std::map< std::string,CUnit >::iterator first, std::map< std::string,CUnit >::iterator last)
        """
        return _COPASI.StringUnitMap_erase(self, *args)

    def find(self, x):
        r"""find(StringUnitMap self, std::map< std::string,CUnit >::key_type const & x) -> std::map< std::string,CUnit >::iterator"""
        return _COPASI.StringUnitMap_find(self, x)

    def lower_bound(self, x):
        r"""lower_bound(StringUnitMap self, std::map< std::string,CUnit >::key_type const & x) -> std::map< std::string,CUnit >::iterator"""
        return _COPASI.StringUnitMap_lower_bound(self, x)

    def upper_bound(self, x):
        r"""upper_bound(StringUnitMap self, std::map< std::string,CUnit >::key_type const & x) -> std::map< std::string,CUnit >::iterator"""
        return _COPASI.StringUnitMap_upper_bound(self, x)
    __swig_destroy__ = _COPASI.delete_StringUnitMap

# Register StringUnitMap in _COPASI:
_COPASI.StringUnitMap_swigregister(StringUnitMap)
class StringDoubleMap(object):
    r"""Proxy of C++ std::map< std::string,double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(StringDoubleMap self) -> SwigPyIterator"""
        return _COPASI.StringDoubleMap_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(StringDoubleMap self) -> bool"""
        return _COPASI.StringDoubleMap___nonzero__(self)

    def __bool__(self):
        r"""__bool__(StringDoubleMap self) -> bool"""
        return _COPASI.StringDoubleMap___bool__(self)

    def __len__(self):
        r"""__len__(StringDoubleMap self) -> std::map< std::string,double >::size_type"""
        return _COPASI.StringDoubleMap___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        r"""__getitem__(StringDoubleMap self, std::map< std::string,double >::key_type const & key) -> std::map< std::string,double >::mapped_type const &"""
        return _COPASI.StringDoubleMap___getitem__(self, key)

    def __delitem__(self, key):
        r"""__delitem__(StringDoubleMap self, std::map< std::string,double >::key_type const & key)"""
        return _COPASI.StringDoubleMap___delitem__(self, key)

    def has_key(self, key):
        r"""has_key(StringDoubleMap self, std::map< std::string,double >::key_type const & key) -> bool"""
        return _COPASI.StringDoubleMap_has_key(self, key)

    def keys(self):
        r"""keys(StringDoubleMap self) -> PyObject *"""
        return _COPASI.StringDoubleMap_keys(self)

    def values(self):
        r"""values(StringDoubleMap self) -> PyObject *"""
        return _COPASI.StringDoubleMap_values(self)

    def items(self):
        r"""items(StringDoubleMap self) -> PyObject *"""
        return _COPASI.StringDoubleMap_items(self)

    def __contains__(self, key):
        r"""__contains__(StringDoubleMap self, std::map< std::string,double >::key_type const & key) -> bool"""
        return _COPASI.StringDoubleMap___contains__(self, key)

    def key_iterator(self):
        r"""key_iterator(StringDoubleMap self) -> SwigPyIterator"""
        return _COPASI.StringDoubleMap_key_iterator(self)

    def value_iterator(self):
        r"""value_iterator(StringDoubleMap self) -> SwigPyIterator"""
        return _COPASI.StringDoubleMap_value_iterator(self)

    def __setitem__(self, *args):
        r"""
        __setitem__(StringDoubleMap self, std::map< std::string,double >::key_type const & key)
        __setitem__(StringDoubleMap self, std::map< std::string,double >::key_type const & key, std::map< std::string,double >::mapped_type const & x)
        """
        return _COPASI.StringDoubleMap___setitem__(self, *args)

    def asdict(self):
        r"""asdict(StringDoubleMap self) -> PyObject *"""
        return _COPASI.StringDoubleMap_asdict(self)

    def __init__(self, *args):
        r"""
        __init__(StringDoubleMap self, std::less< std::string > const & other) -> StringDoubleMap
        __init__(StringDoubleMap self) -> StringDoubleMap
        __init__(StringDoubleMap self, StringDoubleMap other) -> StringDoubleMap
        """
        _COPASI.StringDoubleMap_swiginit(self, _COPASI.new_StringDoubleMap(*args))

    def empty(self):
        r"""empty(StringDoubleMap self) -> bool"""
        return _COPASI.StringDoubleMap_empty(self)

    def size(self):
        r"""size(StringDoubleMap self) -> std::map< std::string,double >::size_type"""
        return _COPASI.StringDoubleMap_size(self)

    def swap(self, v):
        r"""swap(StringDoubleMap self, StringDoubleMap v)"""
        return _COPASI.StringDoubleMap_swap(self, v)

    def rbegin(self):
        r"""rbegin(StringDoubleMap self) -> std::map< std::string,double >::reverse_iterator"""
        return _COPASI.StringDoubleMap_rbegin(self)

    def rend(self):
        r"""rend(StringDoubleMap self) -> std::map< std::string,double >::reverse_iterator"""
        return _COPASI.StringDoubleMap_rend(self)

    def clear(self):
        r"""clear(StringDoubleMap self)"""
        return _COPASI.StringDoubleMap_clear(self)

    def get_allocator(self):
        r"""get_allocator(StringDoubleMap self) -> std::map< std::string,double >::allocator_type"""
        return _COPASI.StringDoubleMap_get_allocator(self)

    def count(self, x):
        r"""count(StringDoubleMap self, std::map< std::string,double >::key_type const & x) -> std::map< std::string,double >::size_type"""
        return _COPASI.StringDoubleMap_count(self, x)

    def erase(self, *args):
        r"""
        erase(StringDoubleMap self, std::map< std::string,double >::key_type const & x) -> std::map< std::string,double >::size_type
        erase(StringDoubleMap self, std::map< std::string,double >::iterator position)
        erase(StringDoubleMap self, std::map< std::string,double >::iterator first, std::map< std::string,double >::iterator last)
        """
        return _COPASI.StringDoubleMap_erase(self, *args)

    def find(self, x):
        r"""find(StringDoubleMap self, std::map< std::string,double >::key_type const & x) -> std::map< std::string,double >::iterator"""
        return _COPASI.StringDoubleMap_find(self, x)

    def lower_bound(self, x):
        r"""lower_bound(StringDoubleMap self, std::map< std::string,double >::key_type const & x) -> std::map< std::string,double >::iterator"""
        return _COPASI.StringDoubleMap_lower_bound(self, x)

    def upper_bound(self, x):
        r"""upper_bound(StringDoubleMap self, std::map< std::string,double >::key_type const & x) -> std::map< std::string,double >::iterator"""
        return _COPASI.StringDoubleMap_upper_bound(self, x)
    __swig_destroy__ = _COPASI.delete_StringDoubleMap

# Register StringDoubleMap in _COPASI:
_COPASI.StringDoubleMap_swigregister(StringDoubleMap)
class CUnitStdVector(object):
    r"""Proxy of C++ std::vector< CUnit > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(CUnitStdVector self) -> SwigPyIterator"""
        return _COPASI.CUnitStdVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(CUnitStdVector self) -> bool"""
        return _COPASI.CUnitStdVector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(CUnitStdVector self) -> bool"""
        return _COPASI.CUnitStdVector___bool__(self)

    def __len__(self):
        r"""__len__(CUnitStdVector self) -> std::vector< CUnit >::size_type"""
        return _COPASI.CUnitStdVector___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(CUnitStdVector self, std::vector< CUnit >::difference_type i, std::vector< CUnit >::difference_type j) -> CUnitStdVector"""
        return _COPASI.CUnitStdVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(CUnitStdVector self, std::vector< CUnit >::difference_type i, std::vector< CUnit >::difference_type j)
        __setslice__(CUnitStdVector self, std::vector< CUnit >::difference_type i, std::vector< CUnit >::difference_type j, CUnitStdVector v)
        """
        return _COPASI.CUnitStdVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(CUnitStdVector self, std::vector< CUnit >::difference_type i, std::vector< CUnit >::difference_type j)"""
        return _COPASI.CUnitStdVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(CUnitStdVector self, std::vector< CUnit >::difference_type i)
        __delitem__(CUnitStdVector self, SWIGPY_SLICEOBJECT * slice)
        """
        return _COPASI.CUnitStdVector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(CUnitStdVector self, SWIGPY_SLICEOBJECT * slice) -> CUnitStdVector
        __getitem__(CUnitStdVector self, std::vector< CUnit >::difference_type i) -> CUnit
        """
        return _COPASI.CUnitStdVector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(CUnitStdVector self, SWIGPY_SLICEOBJECT * slice, CUnitStdVector v)
        __setitem__(CUnitStdVector self, SWIGPY_SLICEOBJECT * slice)
        __setitem__(CUnitStdVector self, std::vector< CUnit >::difference_type i, CUnit x)
        """
        return _COPASI.CUnitStdVector___setitem__(self, *args)

    def pop(self):
        r"""pop(CUnitStdVector self) -> CUnit"""
        return _COPASI.CUnitStdVector_pop(self)

    def append(self, x):
        r"""append(CUnitStdVector self, CUnit x)"""
        return _COPASI.CUnitStdVector_append(self, x)

    def empty(self):
        r"""empty(CUnitStdVector self) -> bool"""
        return _COPASI.CUnitStdVector_empty(self)

    def size(self):
        r"""size(CUnitStdVector self) -> std::vector< CUnit >::size_type"""
        return _COPASI.CUnitStdVector_size(self)

    def swap(self, v):
        r"""swap(CUnitStdVector self, CUnitStdVector v)"""
        return _COPASI.CUnitStdVector_swap(self, v)

    def rbegin(self):
        r"""rbegin(CUnitStdVector self) -> std::vector< CUnit >::reverse_iterator"""
        return _COPASI.CUnitStdVector_rbegin(self)

    def rend(self):
        r"""rend(CUnitStdVector self) -> std::vector< CUnit >::reverse_iterator"""
        return _COPASI.CUnitStdVector_rend(self)

    def clear(self):
        r"""clear(CUnitStdVector self)"""
        return _COPASI.CUnitStdVector_clear(self)

    def get_allocator(self):
        r"""get_allocator(CUnitStdVector self) -> std::vector< CUnit >::allocator_type"""
        return _COPASI.CUnitStdVector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(CUnitStdVector self)"""
        return _COPASI.CUnitStdVector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(CUnitStdVector self, std::vector< CUnit >::iterator pos) -> std::vector< CUnit >::iterator
        erase(CUnitStdVector self, std::vector< CUnit >::iterator first, std::vector< CUnit >::iterator last) -> std::vector< CUnit >::iterator
        """
        return _COPASI.CUnitStdVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(CUnitStdVector self) -> CUnitStdVector
        __init__(CUnitStdVector self, CUnitStdVector other) -> CUnitStdVector
        __init__(CUnitStdVector self, std::vector< CUnit >::size_type size) -> CUnitStdVector
        __init__(CUnitStdVector self, std::vector< CUnit >::size_type size, CUnit value) -> CUnitStdVector
        """
        _COPASI.CUnitStdVector_swiginit(self, _COPASI.new_CUnitStdVector(*args))

    def push_back(self, x):
        r"""push_back(CUnitStdVector self, CUnit x)"""
        return _COPASI.CUnitStdVector_push_back(self, x)

    def front(self):
        r"""front(CUnitStdVector self) -> CUnit"""
        return _COPASI.CUnitStdVector_front(self)

    def back(self):
        r"""back(CUnitStdVector self) -> CUnit"""
        return _COPASI.CUnitStdVector_back(self)

    def assign(self, n, x):
        r"""assign(CUnitStdVector self, std::vector< CUnit >::size_type n, CUnit x)"""
        return _COPASI.CUnitStdVector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(CUnitStdVector self, std::vector< CUnit >::size_type new_size)
        resize(CUnitStdVector self, std::vector< CUnit >::size_type new_size, CUnit x)
        """
        return _COPASI.CUnitStdVector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(CUnitStdVector self, std::vector< CUnit >::iterator pos, CUnit x) -> std::vector< CUnit >::iterator
        insert(CUnitStdVector self, std::vector< CUnit >::iterator pos, std::vector< CUnit >::size_type n, CUnit x)
        """
        return _COPASI.CUnitStdVector_insert(self, *args)

    def reserve(self, n):
        r"""reserve(CUnitStdVector self, std::vector< CUnit >::size_type n)"""
        return _COPASI.CUnitStdVector_reserve(self, n)

    def capacity(self):
        r"""capacity(CUnitStdVector self) -> std::vector< CUnit >::size_type"""
        return _COPASI.CUnitStdVector_capacity(self)
    __swig_destroy__ = _COPASI.delete_CUnitStdVector

# Register CUnitStdVector in _COPASI:
_COPASI.CUnitStdVector_swigregister(CUnitStdVector)
class CValidatedUnitStdVector(object):
    r"""Proxy of C++ std::vector< CValidatedUnit > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(CValidatedUnitStdVector self) -> SwigPyIterator"""
        return _COPASI.CValidatedUnitStdVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(CValidatedUnitStdVector self) -> bool"""
        return _COPASI.CValidatedUnitStdVector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(CValidatedUnitStdVector self) -> bool"""
        return _COPASI.CValidatedUnitStdVector___bool__(self)

    def __len__(self):
        r"""__len__(CValidatedUnitStdVector self) -> std::vector< CValidatedUnit >::size_type"""
        return _COPASI.CValidatedUnitStdVector___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(CValidatedUnitStdVector self, std::vector< CValidatedUnit >::difference_type i, std::vector< CValidatedUnit >::difference_type j) -> CValidatedUnitStdVector"""
        return _COPASI.CValidatedUnitStdVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(CValidatedUnitStdVector self, std::vector< CValidatedUnit >::difference_type i, std::vector< CValidatedUnit >::difference_type j)
        __setslice__(CValidatedUnitStdVector self, std::vector< CValidatedUnit >::difference_type i, std::vector< CValidatedUnit >::difference_type j, CValidatedUnitStdVector v)
        """
        return _COPASI.CValidatedUnitStdVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(CValidatedUnitStdVector self, std::vector< CValidatedUnit >::difference_type i, std::vector< CValidatedUnit >::difference_type j)"""
        return _COPASI.CValidatedUnitStdVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(CValidatedUnitStdVector self, std::vector< CValidatedUnit >::difference_type i)
        __delitem__(CValidatedUnitStdVector self, SWIGPY_SLICEOBJECT * slice)
        """
        return _COPASI.CValidatedUnitStdVector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(CValidatedUnitStdVector self, SWIGPY_SLICEOBJECT * slice) -> CValidatedUnitStdVector
        __getitem__(CValidatedUnitStdVector self, std::vector< CValidatedUnit >::difference_type i) -> CValidatedUnit
        """
        return _COPASI.CValidatedUnitStdVector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(CValidatedUnitStdVector self, SWIGPY_SLICEOBJECT * slice, CValidatedUnitStdVector v)
        __setitem__(CValidatedUnitStdVector self, SWIGPY_SLICEOBJECT * slice)
        __setitem__(CValidatedUnitStdVector self, std::vector< CValidatedUnit >::difference_type i, CValidatedUnit x)
        """
        return _COPASI.CValidatedUnitStdVector___setitem__(self, *args)

    def pop(self):
        r"""pop(CValidatedUnitStdVector self) -> CValidatedUnit"""
        return _COPASI.CValidatedUnitStdVector_pop(self)

    def append(self, x):
        r"""append(CValidatedUnitStdVector self, CValidatedUnit x)"""
        return _COPASI.CValidatedUnitStdVector_append(self, x)

    def empty(self):
        r"""empty(CValidatedUnitStdVector self) -> bool"""
        return _COPASI.CValidatedUnitStdVector_empty(self)

    def size(self):
        r"""size(CValidatedUnitStdVector self) -> std::vector< CValidatedUnit >::size_type"""
        return _COPASI.CValidatedUnitStdVector_size(self)

    def swap(self, v):
        r"""swap(CValidatedUnitStdVector self, CValidatedUnitStdVector v)"""
        return _COPASI.CValidatedUnitStdVector_swap(self, v)

    def rbegin(self):
        r"""rbegin(CValidatedUnitStdVector self) -> std::vector< CValidatedUnit >::reverse_iterator"""
        return _COPASI.CValidatedUnitStdVector_rbegin(self)

    def rend(self):
        r"""rend(CValidatedUnitStdVector self) -> std::vector< CValidatedUnit >::reverse_iterator"""
        return _COPASI.CValidatedUnitStdVector_rend(self)

    def clear(self):
        r"""clear(CValidatedUnitStdVector self)"""
        return _COPASI.CValidatedUnitStdVector_clear(self)

    def get_allocator(self):
        r"""get_allocator(CValidatedUnitStdVector self) -> std::vector< CValidatedUnit >::allocator_type"""
        return _COPASI.CValidatedUnitStdVector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(CValidatedUnitStdVector self)"""
        return _COPASI.CValidatedUnitStdVector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(CValidatedUnitStdVector self, std::vector< CValidatedUnit >::iterator pos) -> std::vector< CValidatedUnit >::iterator
        erase(CValidatedUnitStdVector self, std::vector< CValidatedUnit >::iterator first, std::vector< CValidatedUnit >::iterator last) -> std::vector< CValidatedUnit >::iterator
        """
        return _COPASI.CValidatedUnitStdVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(CValidatedUnitStdVector self) -> CValidatedUnitStdVector
        __init__(CValidatedUnitStdVector self, CValidatedUnitStdVector other) -> CValidatedUnitStdVector
        __init__(CValidatedUnitStdVector self, std::vector< CValidatedUnit >::size_type size) -> CValidatedUnitStdVector
        __init__(CValidatedUnitStdVector self, std::vector< CValidatedUnit >::size_type size, CValidatedUnit value) -> CValidatedUnitStdVector
        """
        _COPASI.CValidatedUnitStdVector_swiginit(self, _COPASI.new_CValidatedUnitStdVector(*args))

    def push_back(self, x):
        r"""push_back(CValidatedUnitStdVector self, CValidatedUnit x)"""
        return _COPASI.CValidatedUnitStdVector_push_back(self, x)

    def front(self):
        r"""front(CValidatedUnitStdVector self) -> CValidatedUnit"""
        return _COPASI.CValidatedUnitStdVector_front(self)

    def back(self):
        r"""back(CValidatedUnitStdVector self) -> CValidatedUnit"""
        return _COPASI.CValidatedUnitStdVector_back(self)

    def assign(self, n, x):
        r"""assign(CValidatedUnitStdVector self, std::vector< CValidatedUnit >::size_type n, CValidatedUnit x)"""
        return _COPASI.CValidatedUnitStdVector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(CValidatedUnitStdVector self, std::vector< CValidatedUnit >::size_type new_size)
        resize(CValidatedUnitStdVector self, std::vector< CValidatedUnit >::size_type new_size, CValidatedUnit x)
        """
        return _COPASI.CValidatedUnitStdVector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(CValidatedUnitStdVector self, std::vector< CValidatedUnit >::iterator pos, CValidatedUnit x) -> std::vector< CValidatedUnit >::iterator
        insert(CValidatedUnitStdVector self, std::vector< CValidatedUnit >::iterator pos, std::vector< CValidatedUnit >::size_type n, CValidatedUnit x)
        """
        return _COPASI.CValidatedUnitStdVector_insert(self, *args)

    def reserve(self, n):
        r"""reserve(CValidatedUnitStdVector self, std::vector< CValidatedUnit >::size_type n)"""
        return _COPASI.CValidatedUnitStdVector_reserve(self, n)

    def capacity(self):
        r"""capacity(CValidatedUnitStdVector self) -> std::vector< CValidatedUnit >::size_type"""
        return _COPASI.CValidatedUnitStdVector_capacity(self)
    __swig_destroy__ = _COPASI.delete_CValidatedUnitStdVector

# Register CValidatedUnitStdVector in _COPASI:
_COPASI.CValidatedUnitStdVector_swigregister(CValidatedUnitStdVector)
class CUnitComponent(object, metaclass=AutoProperty):
    r"""Proxy of C++ CUnitComponent class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CUnitComponent self, CBaseUnit::Kind kind, double multiplier=1, double scale=0, double exponent=1) -> CUnitComponent
        __init__(CUnitComponent self, CUnitComponent src) -> CUnitComponent
        """
        _COPASI.CUnitComponent_swiginit(self, _COPASI.new_CUnitComponent(*args))

    def getMultiplier(self):
        r"""getMultiplier(CUnitComponent self) -> double"""
        return _COPASI.CUnitComponent_getMultiplier(self)

    def getScale(self):
        r"""getScale(CUnitComponent self) -> double"""
        return _COPASI.CUnitComponent_getScale(self)

    def getExponent(self):
        r"""getExponent(CUnitComponent self) -> double"""
        return _COPASI.CUnitComponent_getExponent(self)

    def setMultiplier(self, multiplier):
        r"""setMultiplier(CUnitComponent self, double multiplier)"""
        return _COPASI.CUnitComponent_setMultiplier(self, multiplier)

    def setScale(self, scale):
        r"""setScale(CUnitComponent self, double scale)"""
        return _COPASI.CUnitComponent_setScale(self, scale)

    def setExponent(self, exponent):
        r"""setExponent(CUnitComponent self, double exponent)"""
        return _COPASI.CUnitComponent_setExponent(self, exponent)

    def __lt__(self, rightSide):
        r"""__lt__(CUnitComponent self, CUnitComponent rightSide) -> bool"""
        return _COPASI.CUnitComponent___lt__(self, rightSide)

    def isEqual(self, rightSide):
        r"""isEqual(CUnitComponent self, CUnitComponent rightSide) -> bool"""
        return _COPASI.CUnitComponent_isEqual(self, rightSide)

    def isValid(self):
        r"""isValid(CUnitComponent self) -> bool"""
        return _COPASI.CUnitComponent_isValid(self)
    __swig_destroy__ = _COPASI.delete_CUnitComponent

    __metaclass__ = AutoProperty


# Register CUnitComponent in _COPASI:
_COPASI.CUnitComponent_swigregister(CUnitComponent)
class CUnit(object, metaclass=AutoProperty):
    r"""Proxy of C++ CUnit class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Avogadro = property(_COPASI.CUnit_Avogadro_get, _COPASI.CUnit_Avogadro_set, doc=r"""Avogadro : double""")
    time = _COPASI.CUnit_time
    
    quantity = _COPASI.CUnit_quantity
    
    volume = _COPASI.CUnit_volume
    
    area = _COPASI.CUnit_area
    
    length = _COPASI.CUnit_length
    

    @staticmethod
    def prettyPrint(expression):
        r"""prettyPrint(std::string const & expression) -> std::string"""
        return _COPASI.CUnit_prettyPrint(expression)

    def __init__(self, *args):
        r"""
        __init__(CUnit self) -> CUnit
        __init__(CUnit self, CBaseUnit::Kind const & kind) -> CUnit
        __init__(CUnit self, std::string const & expression) -> CUnit
        __init__(CUnit self, CUnit src) -> CUnit
        """
        _COPASI.CUnit_swiginit(self, _COPASI.new_CUnit(*args))
    __swig_destroy__ = _COPASI.delete_CUnit

    def setExpression(self, expression):
        r"""setExpression(CUnit self, std::string const & expression) -> CIssue"""
        return _COPASI.CUnit_setExpression(self, expression)

    def getExpression(self):
        r"""getExpression(CUnit self) -> std::string"""
        return _COPASI.CUnit_getExpression(self)

    def getUsedSymbols(self):
        r"""getUsedSymbols(CUnit self) -> StringSet"""
        return _COPASI.CUnit_getUsedSymbols(self)

    def filterUsedSymbols(self, unitDefinitiionDB):
        r"""filterUsedSymbols(CUnit self, CUnitDefinitionDB const & unitDefinitiionDB)"""
        return _COPASI.CUnit_filterUsedSymbols(self, unitDefinitiionDB)

    def replaceSymbol(self, *args):
        r"""
        replaceSymbol(CUnit self, std::string const & expression, std::string const & oldSymbol, std::string const & newSymbol) -> std::string
        replaceSymbol(CUnit self, std::string const & oldSymbol, std::string const & newSymbol)
        """
        return _COPASI.CUnit_replaceSymbol(self, *args)

    def isDimensionless(self):
        r"""isDimensionless(CUnit self) -> bool"""
        return _COPASI.CUnit_isDimensionless(self)

    def isUndefined(self):
        r"""isUndefined(CUnit self) -> bool"""
        return _COPASI.CUnit_isUndefined(self)

    def isValid(self):
        r"""isValid(CUnit self) -> bool"""
        return _COPASI.CUnit_isValid(self)

    def addComponent(self, component):
        r"""addComponent(CUnit self, CUnitComponent component)"""
        return _COPASI.CUnit_addComponent(self, component)

    def getComponents(self):
        r"""getComponents(CUnit self) -> std::set< CUnitComponent,std::less< CUnitComponent >,std::allocator< CUnitComponent > > const &"""
        return _COPASI.CUnit_getComponents(self)

    def compile(self):
        r"""compile(CUnit self) -> CIssue"""
        return _COPASI.CUnit_compile(self)

    def exponentiate(self, exp):
        r"""exponentiate(CUnit self, double exp) -> CUnit"""
        return _COPASI.CUnit_exponentiate(self, exp)

    def mul(self, rightSide):
        r"""mul(CUnit self, CUnit rightSide) -> CUnit"""
        return _COPASI.CUnit_mul(self, rightSide)

    def isEqual(self, rightSide):
        r"""isEqual(CUnit self, CUnit rightSide) -> bool"""
        return _COPASI.CUnit_isEqual(self, rightSide)

    def __lt__(self, rightSide):
        r"""__lt__(CUnit self, CUnit rightSide) -> bool"""
        return _COPASI.CUnit___lt__(self, rightSide)

    def isEquivalent(self, rightSide):
        r"""isEquivalent(CUnit self, CUnit rightSide) -> bool"""
        return _COPASI.CUnit_isEquivalent(self, rightSide)

    def buildExpression(self):
        r"""buildExpression(CUnit self)"""
        return _COPASI.CUnit_buildExpression(self)

    def isUnitType(self, type):
        r"""isUnitType(CUnit self, CUnit::UnitType type) -> bool"""
        return _COPASI.CUnit_isUnitType(self, type)

    def setDimensionLess(self, multiplier, scale, exponent):
        r"""setDimensionLess(CUnit self, double multiplier, double scale, double exponent)"""
        return _COPASI.CUnit_setDimensionLess(self, multiplier, scale, exponent)

    __metaclass__ = AutoProperty


# Register CUnit in _COPASI:
_COPASI.CUnit_swigregister(CUnit)
class CValidatedUnit(CUnit):
    r"""Proxy of C++ CValidatedUnit class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def merge(a, b):
        r"""merge(CValidatedUnit a, CValidatedUnit b) -> CValidatedUnit"""
        return _COPASI.CValidatedUnit_merge(a, b)

    def __init__(self, *args):
        r"""
        __init__(CValidatedUnit self) -> CValidatedUnit
        __init__(CValidatedUnit self, CValidatedUnit src) -> CValidatedUnit
        __init__(CValidatedUnit self, CUnit unit, bool const & conflict) -> CValidatedUnit
        """
        _COPASI.CValidatedUnit_swiginit(self, _COPASI.new_CValidatedUnit(*args))
    __swig_destroy__ = _COPASI.delete_CValidatedUnit

    def exponentiate(self, exponent):
        r"""exponentiate(CValidatedUnit self, double const & exponent) -> CValidatedUnit"""
        return _COPASI.CValidatedUnit_exponentiate(self, exponent)

    def mul(self, rightSide):
        r"""mul(CValidatedUnit self, CValidatedUnit rightSide) -> CValidatedUnit"""
        return _COPASI.CValidatedUnit_mul(self, rightSide)

    def setConflict(self, conflict):
        r"""setConflict(CValidatedUnit self, bool const & conflict)"""
        return _COPASI.CValidatedUnit_setConflict(self, conflict)

    def conflict(self):
        r"""conflict(CValidatedUnit self) -> bool const &"""
        return _COPASI.CValidatedUnit_conflict(self)

    def __lt__(self, rightSide):
        r"""__lt__(CValidatedUnit self, CValidatedUnit rightSide) -> bool"""
        return _COPASI.CValidatedUnit___lt__(self, rightSide)

# Register CValidatedUnit in _COPASI:
_COPASI.CValidatedUnit_swigregister(CValidatedUnit)
class CUnitValidator(object):
    r"""Proxy of C++ CUnitValidator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CUnitValidator self, CMathContainer math, CEvaluationTree tree) -> CUnitValidator
        __init__(CUnitValidator self, CUnitValidator src) -> CUnitValidator
        """
        _COPASI.CUnitValidator_swiginit(self, _COPASI.new_CUnitValidator(*args))
    __swig_destroy__ = _COPASI.delete_CUnitValidator

    def validateUnits(self, *args):
        r"""
        validateUnits(CUnitValidator self, CUnit unit=CUnit(CBaseUnit::undefined), CUnitStdVector variableUnits=std::vector< CUnit >()) -> bool
        validateUnits(CUnitValidator self, CValidatedUnit unit, CValidatedUnitStdVector variableUnits) -> bool
        """
        return _COPASI.CUnitValidator_validateUnits(self, *args)

    def getVariableUnits(self):
        r"""getVariableUnits(CUnitValidator self) -> CValidatedUnitStdVector"""
        return _COPASI.CUnitValidator_getVariableUnits(self)

    def getObjectUnits(self):
        r"""getObjectUnits(CUnitValidator self) -> std::map< CObjectInterface *,CValidatedUnit,std::less< CObjectInterface * >,std::allocator< std::pair< CObjectInterface *const,CValidatedUnit > > > const &"""
        return _COPASI.CUnitValidator_getObjectUnits(self)

    def getObjectUnit(self, pObject):
        r"""getObjectUnit(CUnitValidator self, CObjectInterface pObject) -> CValidatedUnit"""
        return _COPASI.CUnitValidator_getObjectUnit(self, pObject)

    def getUnit(self):
        r"""getUnit(CUnitValidator self) -> CValidatedUnit"""
        return _COPASI.CUnitValidator_getUnit(self)

# Register CUnitValidator in _COPASI:
_COPASI.CUnitValidator_swigregister(CUnitValidator)
class CMathObject(CObjectInterface):
    r"""Proxy of C++ CMathObject class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CMathObject self) -> CMathObject
        __init__(CMathObject self, CMathObject src) -> CMathObject
        """
        _COPASI.CMathObject_swiginit(self, _COPASI.new_CMathObject(*args))
    __swig_destroy__ = _COPASI.delete_CMathObject

    def copy(self, src, container):
        r"""copy(CMathObject self, CMathObject src, CMathContainer container)"""
        return _COPASI.CMathObject_copy(self, src, container)

    def relocate(self, pContainer, relocations):
        r"""relocate(CMathObject self, CMathContainer pContainer, std::vector< CMath::sRelocate,std::allocator< CMath::sRelocate > > const & relocations)"""
        return _COPASI.CMathObject_relocate(self, pContainer, relocations)

    def getCN(self):
        r"""getCN(CMathObject self) -> CCommonName"""
        return _COPASI.CMathObject_getCN(self)

    def getObjectDisplayName(self):
        r"""getObjectDisplayName(CMathObject self) -> std::string"""
        return _COPASI.CMathObject_getObjectDisplayName(self)

    def getObject(self, cn):
        r"""getObject(CMathObject self, CCommonName cn) -> CObjectInterface"""
        return _COPASI.CMathObject_getObject(self, cn)

    def setDataObject(self, pDataObject):
        r"""setDataObject(CMathObject self, CDataObject pDataObject)"""
        return _COPASI.CMathObject_setDataObject(self, pDataObject)

    def getDataObject(self):
        r"""getDataObject(CMathObject self) -> CDataObject"""
        return _COPASI.CMathObject_getDataObject(self)

    def validityChanged(self, changedValidity):
        r"""validityChanged(CMathObject self, CValidity changedValidity)"""
        return _COPASI.CMathObject_validityChanged(self, changedValidity)

    def calculateValue(self):
        r"""calculateValue(CMathObject self)"""
        return _COPASI.CMathObject_calculateValue(self)

    def getValue(self):
        r"""getValue(CMathObject self) -> double const &"""
        return _COPASI.CMathObject_getValue(self)

    def canCalculateValue(self):
        r"""canCalculateValue(CMathObject self) -> bool"""
        return _COPASI.CMathObject_canCalculateValue(self)

    @staticmethod
    def initialize(pObject, pValue, valueType, entityType, simulationType, isIntensiveProperty, isInitialValue, pDataObject):
        r"""initialize(CMathObject pObject, double * pValue, CMath::ValueType const & valueType, CMath::EntityType const & entityType, CMath::SimulationType const & simulationType, bool const & isIntensiveProperty, bool const & isInitialValue, CDataObject pDataObject)"""
        return _COPASI.CMathObject_initialize(pObject, pValue, valueType, entityType, simulationType, isIntensiveProperty, isInitialValue, pDataObject)

    def compile(self, container):
        r"""compile(CMathObject self, CMathContainer container) -> bool"""
        return _COPASI.CMathObject_compile(self, container)

    def getValueType(self):
        r"""getValueType(CMathObject self) -> CMath::ValueType const &"""
        return _COPASI.CMathObject_getValueType(self)

    def setValueType(self, valueType):
        r"""setValueType(CMathObject self, CMath::ValueType const & valueType)"""
        return _COPASI.CMathObject_setValueType(self, valueType)

    def getEntityType(self):
        r"""getEntityType(CMathObject self) -> CMath::EntityType const &"""
        return _COPASI.CMathObject_getEntityType(self)

    def getSimulationType(self):
        r"""getSimulationType(CMathObject self) -> CMath::SimulationType const &"""
        return _COPASI.CMathObject_getSimulationType(self)

    def setSimulationType(self, simulationType):
        r"""setSimulationType(CMathObject self, CMath::SimulationType const & simulationType)"""
        return _COPASI.CMathObject_setSimulationType(self, simulationType)

    def isIntensiveProperty(self):
        r"""isIntensiveProperty(CMathObject self) -> bool const &"""
        return _COPASI.CMathObject_isIntensiveProperty(self)

    def isInitialValue(self):
        r"""isInitialValue(CMathObject self) -> bool const &"""
        return _COPASI.CMathObject_isInitialValue(self)

    def getCorrespondingProperty(self):
        r"""getCorrespondingProperty(CMathObject self) -> CMathObject"""
        return _COPASI.CMathObject_getCorrespondingProperty(self)

    def getCompartmentValue(self):
        r"""getCompartmentValue(CMathObject self) -> double const *"""
        return _COPASI.CMathObject_getCompartmentValue(self)

    def setExpression(self, *args):
        r"""
        setExpression(CMathObject self, std::string const & infix, bool const & isBoolean, CMathContainer container) -> bool
        setExpression(CMathObject self, CExpression expression, CMathContainer container) -> bool
        """
        return _COPASI.CMathObject_setExpression(self, *args)

    def setExpressionPtr(self, pMathExpression):
        r"""setExpressionPtr(CMathObject self, CMathExpression * pMathExpression) -> bool"""
        return _COPASI.CMathObject_setExpressionPtr(self, pMathExpression)

    def getExpressionPtr(self):
        r"""getExpressionPtr(CMathObject self) -> CMathExpression const *"""
        return _COPASI.CMathObject_getExpressionPtr(self)

    def appendDelays(self, Delays):
        r"""appendDelays(CMathObject self, CMath::DelayData & Delays)"""
        return _COPASI.CMathObject_appendDelays(self, Delays)

# Register CMathObject in _COPASI:
_COPASI.CMathObject_swigregister(CMathObject)
class CMathEvent(object):
    r"""Proxy of C++ CMathEvent class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CMathEvent self) -> CMathEvent
        __init__(CMathEvent self, CMathEvent src) -> CMathEvent
        """
        _COPASI.CMathEvent_swiginit(self, _COPASI.new_CMathEvent(*args))
    __swig_destroy__ = _COPASI.delete_CMathEvent

    @staticmethod
    def allocate(Event, pDataEvent, container):
        r"""allocate(CMathEvent Event, CEvent pDataEvent, CMathContainer container)"""
        return _COPASI.CMathEvent_allocate(Event, pDataEvent, container)

    def initialize(self, pointers):
        r"""initialize(CMathEvent self, CMath::sPointers & pointers)"""
        return _COPASI.CMathEvent_initialize(self, pointers)

    def copy(self, src, container):
        r"""copy(CMathEvent self, CMathEvent src, CMathContainer container)"""
        return _COPASI.CMathEvent_copy(self, src, container)

    def relocate(self, pContainer, relocations):
        r"""relocate(CMathEvent self, CMathContainer pContainer, std::vector< CMath::sRelocate,std::allocator< CMath::sRelocate > > const & relocations)"""
        return _COPASI.CMathEvent_relocate(self, pContainer, relocations)

    def compile(self, *args):
        r"""
        compile(CMathEvent self, CEvent pDataEvent, CMathContainer container) -> bool
        compile(CMathEvent self, CMathContainer container) -> bool
        """
        return _COPASI.CMathEvent_compile(self, *args)

    def createUpdateSequences(self):
        r"""createUpdateSequences(CMathEvent self)"""
        return _COPASI.CMathEvent_createUpdateSequences(self)

    def fire(self, equality):
        r"""fire(CMathEvent self, bool const & equality)"""
        return _COPASI.CMathEvent_fire(self, equality)

    def addPendingAction(self, pendingAction):
        r"""addPendingAction(CMathEvent self, CMathEventQueue::iterator const & pendingAction)"""
        return _COPASI.CMathEvent_addPendingAction(self, pendingAction)

    def removePendingAction(self):
        r"""removePendingAction(CMathEvent self)"""
        return _COPASI.CMathEvent_removePendingAction(self)

    def getTargetValues(self):
        r"""getTargetValues(CMathEvent self) -> FloatVectorCore"""
        return _COPASI.CMathEvent_getTargetValues(self)

    def setTargetValues(self, targetValues):
        r"""setTargetValues(CMathEvent self, FloatVectorCore targetValues) -> CMath::StateChange"""
        return _COPASI.CMathEvent_setTargetValues(self, targetValues)

    def executeAssignment(self):
        r"""executeAssignment(CMathEvent self) -> CMath::StateChange"""
        return _COPASI.CMathEvent_executeAssignment(self)

    def delayAssignment(self):
        r"""delayAssignment(CMathEvent self) -> bool const &"""
        return _COPASI.CMathEvent_delayAssignment(self)

    def fireAtInitialTime(self):
        r"""fireAtInitialTime(CMathEvent self) -> bool const &"""
        return _COPASI.CMathEvent_fireAtInitialTime(self)

    def setTriggerExpression(self, infix, container):
        r"""setTriggerExpression(CMathEvent self, std::string const & infix, CMathContainer container)"""
        return _COPASI.CMathEvent_setTriggerExpression(self, infix, container)

    def setDelayExpression(self, infix, container):
        r"""setDelayExpression(CMathEvent self, std::string const & infix, CMathContainer container)"""
        return _COPASI.CMathEvent_setDelayExpression(self, infix, container)

    def setPriorityExpression(self, infix, container):
        r"""setPriorityExpression(CMathEvent self, std::string const & infix, CMathContainer container)"""
        return _COPASI.CMathEvent_setPriorityExpression(self, infix, container)

    def addAssignment(self, pTarget, pExpression):
        r"""addAssignment(CMathEvent self, CMathObject pTarget, CMathObject pExpression)"""
        return _COPASI.CMathEvent_addAssignment(self, pTarget, pExpression)

    def getTrigger(self):
        r"""getTrigger(CMathEvent self) -> CMathEvent::CTrigger const &"""
        return _COPASI.CMathEvent_getTrigger(self)

    def getAssignments(self):
        r"""getAssignments(CMathEvent self) -> CVector< CMathEvent::CAssignment > const &"""
        return _COPASI.CMathEvent_getAssignments(self)

    def getPriority(self):
        r"""getPriority(CMathEvent self) -> CMathObject"""
        return _COPASI.CMathEvent_getPriority(self)

    def getCalculationTime(self):
        r"""getCalculationTime(CMathEvent self) -> double"""
        return _COPASI.CMathEvent_getCalculationTime(self)

    def getExecutionTime(self):
        r"""getExecutionTime(CMathEvent self) -> double"""
        return _COPASI.CMathEvent_getExecutionTime(self)

    def getType(self):
        r"""getType(CMathEvent self) -> CEvent::Type const &"""
        return _COPASI.CMathEvent_getType(self)

    def setCallback(self, pCallback):
        r"""setCallback(CMathEvent self, CCallbackInterface * pCallback)"""
        return _COPASI.CMathEvent_setCallback(self, pCallback)

    def executeCallback(self, pCaller=None):
        r"""executeCallback(CMathEvent self, void * pCaller=None)"""
        return _COPASI.CMathEvent_executeCallback(self, pCaller)

    def setDisabled(self, disabled):
        r"""setDisabled(CMathEvent self, bool const & disabled)"""
        return _COPASI.CMathEvent_setDisabled(self, disabled)

    def isDisabled(self):
        r"""isDisabled(CMathEvent self) -> bool const &"""
        return _COPASI.CMathEvent_isDisabled(self)

# Register CMathEvent in _COPASI:
_COPASI.CMathEvent_swigregister(CMathEvent)
class CMathDependencyGraph(object):
    r"""Proxy of C++ CMathDependencyGraph class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CMathDependencyGraph self, CMathContainer pContainer=None) -> CMathDependencyGraph
        __init__(CMathDependencyGraph self, CMathDependencyGraph src, CMathContainer pContainer=None) -> CMathDependencyGraph
        """
        _COPASI.CMathDependencyGraph_swiginit(self, _COPASI.new_CMathDependencyGraph(*args))
    __swig_destroy__ = _COPASI.delete_CMathDependencyGraph

    def clear(self):
        r"""clear(CMathDependencyGraph self)"""
        return _COPASI.CMathDependencyGraph_clear(self)

    def addObject(self, pObject):
        r"""addObject(CMathDependencyGraph self, CObjectInterface pObject) -> CMathDependencyGraph::iterator"""
        return _COPASI.CMathDependencyGraph_addObject(self, pObject)

    def removeObject(self, pObject):
        r"""removeObject(CMathDependencyGraph self, CObjectInterface pObject)"""
        return _COPASI.CMathDependencyGraph_removeObject(self, pObject)

    def removePrerequisite(self, pObject, pPrerequisite):
        r"""removePrerequisite(CMathDependencyGraph self, CObjectInterface pObject, CObjectInterface pPrerequisite)"""
        return _COPASI.CMathDependencyGraph_removePrerequisite(self, pObject, pPrerequisite)

    def getUpdateSequence(self, *args):
        r"""getUpdateSequence(CMathDependencyGraph self, CCore::CUpdateSequence & updateSequence, CCore::SimulationContextFlag const & context, CObjectInterface::ObjectSet const & changedObjects, CObjectInterface::ObjectSet const & requestedObjects, CObjectInterface::ObjectSet const & calculatedObjects=CObjectInterface::ObjectSet()) -> bool"""
        return _COPASI.CMathDependencyGraph_getUpdateSequence(self, *args)

    def dependsOn(self, *args):
        r"""
        dependsOn(CMathDependencyGraph self, CObjectInterface pObject, CCore::SimulationContextFlag const & context, CObjectInterface pChangedObject) -> bool
        dependsOn(CMathDependencyGraph self, CObjectInterface pObject, CCore::SimulationContextFlag const & context, CObjectInterface::ObjectSet const & changedObjects) -> bool
        """
        return _COPASI.CMathDependencyGraph_dependsOn(self, *args)

    def hasCircularDependencies(self, pObject, context, pChangedObject):
        r"""hasCircularDependencies(CMathDependencyGraph self, CObjectInterface pObject, CCore::SimulationContextFlag const & context, CObjectInterface pChangedObject) -> bool"""
        return _COPASI.CMathDependencyGraph_hasCircularDependencies(self, pObject, context, pChangedObject)

    def appendDirectDependents(self, changedObjects, dependentObjects):
        r"""appendDirectDependents(CMathDependencyGraph self, CObjectInterface::ObjectSet const & changedObjects, CObjectInterface::ObjectSet & dependentObjects) -> bool"""
        return _COPASI.CMathDependencyGraph_appendDirectDependents(self, changedObjects, dependentObjects)

    def appendAllDependents(self, *args):
        r"""appendAllDependents(CMathDependencyGraph self, CObjectInterface::ObjectSet const & changedObjects, CObjectInterface::ObjectSet & dependentObjects, CObjectInterface::ObjectSet const & ignoredObjects=CObjectInterface::ObjectSet()) -> bool"""
        return _COPASI.CMathDependencyGraph_appendAllDependents(self, *args)

    def relocate(self, pContainer, relocations):
        r"""relocate(CMathDependencyGraph self, CMathContainer pContainer, std::vector< CMath::sRelocate,std::allocator< CMath::sRelocate > > const & relocations)"""
        return _COPASI.CMathDependencyGraph_relocate(self, pContainer, relocations)

    def exportDOTFormat(self, os, name):
        r"""exportDOTFormat(CMathDependencyGraph self, std::ostream & os, std::string const & name)"""
        return _COPASI.CMathDependencyGraph_exportDOTFormat(self, os, name)

# Register CMathDependencyGraph in _COPASI:
_COPASI.CMathDependencyGraph_swigregister(CMathDependencyGraph)
class CMathReaction(object):
    r"""Proxy of C++ CMathReaction class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CMathReaction self) -> CMathReaction
        __init__(CMathReaction self, CMathReaction src) -> CMathReaction
        """
        _COPASI.CMathReaction_swiginit(self, _COPASI.new_CMathReaction(*args))
    __swig_destroy__ = _COPASI.delete_CMathReaction

    def initialize(self, pReaction, container):
        r"""initialize(CMathReaction self, CReaction pReaction, CMathContainer container)"""
        return _COPASI.CMathReaction_initialize(self, pReaction, container)

    def copy(self, src, container):
        r"""copy(CMathReaction self, CMathReaction src, CMathContainer container)"""
        return _COPASI.CMathReaction_copy(self, src, container)

    def relocate(self, pContainer, relocations):
        r"""relocate(CMathReaction self, CMathContainer pContainer, std::vector< CMath::sRelocate,std::allocator< CMath::sRelocate > > const & relocations)"""
        return _COPASI.CMathReaction_relocate(self, pContainer, relocations)

    def fire(self):
        r"""fire(CMathReaction self)"""
        return _COPASI.CMathReaction_fire(self)

    def fireMultiple(self, count):
        r"""fireMultiple(CMathReaction self, double const & count)"""
        return _COPASI.CMathReaction_fireMultiple(self, count)

    def getParticleFluxObject(self):
        r"""getParticleFluxObject(CMathReaction self) -> CMathObject"""
        return _COPASI.CMathReaction_getParticleFluxObject(self)

    def getFluxObject(self):
        r"""getFluxObject(CMathReaction self) -> CMathObject"""
        return _COPASI.CMathReaction_getFluxObject(self)

    def getPropensityObject(self):
        r"""getPropensityObject(CMathReaction self) -> CMathObject"""
        return _COPASI.CMathReaction_getPropensityObject(self)

    def getChangedObjects(self):
        r"""getChangedObjects(CMathReaction self) -> CObjectInterface::ObjectSet const &"""
        return _COPASI.CMathReaction_getChangedObjects(self)

    def getNumberBalance(self):
        r"""getNumberBalance(CMathReaction self) -> CMathReaction::Balance const &"""
        return _COPASI.CMathReaction_getNumberBalance(self)

    def getObjectBalance(self):
        r"""getObjectBalance(CMathReaction self) -> CMathReaction::ObjectBalance const &"""
        return _COPASI.CMathReaction_getObjectBalance(self)

    def getModelReaction(self):
        r"""getModelReaction(CMathReaction self) -> CReaction"""
        return _COPASI.CMathReaction_getModelReaction(self)

    def isFast(self):
        r"""isFast(CMathReaction self) -> bool"""
        return _COPASI.CMathReaction_isFast(self)

# Register CMathReaction in _COPASI:
_COPASI.CMathReaction_swigregister(CMathReaction)
class CMathDelay(object):
    r"""Proxy of C++ CMathDelay class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(CMathDelay self) -> CMathDelay"""
        _COPASI.CMathDelay_swiginit(self, _COPASI.new_CMathDelay())
    __swig_destroy__ = _COPASI.delete_CMathDelay

    def create(self, itDelayData, delayValueCount, container, pLagObject):
        r"""create(CMathDelay self, CMath::DelayData::iterator & itDelayData, size_t const & delayValueCount, CMathContainer container, CMathObject pLagObject)"""
        return _COPASI.CMathDelay_create(self, itDelayData, delayValueCount, container, pLagObject)

    def addValueObject(self, itValueData, index, pValueObject):
        r"""addValueObject(CMathDelay self, CMath::DelayValueData::iterator & itValueData, size_t const & index, CMathObject pValueObject)"""
        return _COPASI.CMathDelay_addValueObject(self, itValueData, index, pValueObject)

    def modifyMathObject(self, itValueData, index):
        r"""modifyMathObject(CMathDelay self, CMath::DelayValueData::iterator & itValueData, size_t const & index)"""
        return _COPASI.CMathDelay_modifyMathObject(self, itValueData, index)

    def copy(self, src, container):
        r"""copy(CMathDelay self, CMathDelay src, CMathContainer container)"""
        return _COPASI.CMathDelay_copy(self, src, container)

    def relocate(self, pContainer, relocations):
        r"""relocate(CMathDelay self, CMathContainer pContainer, std::vector< CMath::sRelocate,std::allocator< CMath::sRelocate > > const & relocations)"""
        return _COPASI.CMathDelay_relocate(self, pContainer, relocations)

    def createUpdateSequences(self):
        r"""createUpdateSequences(CMathDelay self)"""
        return _COPASI.CMathDelay_createUpdateSequences(self)

    def calculateDelayValues(self, useMoieties):
        r"""calculateDelayValues(CMathDelay self, bool const & useMoieties)"""
        return _COPASI.CMathDelay_calculateDelayValues(self, useMoieties)

# Register CMathDelay in _COPASI:
_COPASI.CMathDelay_swigregister(CMathDelay)
class CMathHistoryCore(object):
    r"""Proxy of C++ CMathHistoryCore class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, rows=0, cols=0, colsAllocated=0, pArray=None):
        r"""__init__(CMathHistoryCore self, size_t const & rows=0, size_t const & cols=0, size_t const & colsAllocated=0, double * pArray=None) -> CMathHistoryCore"""
        _COPASI.CMathHistoryCore_swiginit(self, _COPASI.new_CMathHistoryCore(rows, cols, colsAllocated, pArray))
    __swig_destroy__ = _COPASI.delete_CMathHistoryCore

    def getRow(self, row):
        r"""getRow(CMathHistoryCore self, size_t const & row) -> FloatVectorCore"""
        return _COPASI.CMathHistoryCore_getRow(self, row)

    def setRow(self, row, values):
        r"""setRow(CMathHistoryCore self, size_t const & row, FloatVectorCore values)"""
        return _COPASI.CMathHistoryCore_setRow(self, row, values)

    def initialize(self, *args):
        r"""
        initialize(CMathHistoryCore self, size_t const & rows, size_t const & cols, size_t const & colsAllocated, double * pArray)
        initialize(CMathHistoryCore self, CMathHistoryCore src)
        """
        return _COPASI.CMathHistoryCore_initialize(self, *args)

    def assign(self, rhs):
        r"""assign(CMathHistoryCore self, CMathHistoryCore rhs) -> CMathHistoryCore"""
        return _COPASI.CMathHistoryCore_assign(self, rhs)

    def rows(self):
        r"""rows(CMathHistoryCore self) -> size_t const &"""
        return _COPASI.CMathHistoryCore_rows(self)

    def cols(self):
        r"""cols(CMathHistoryCore self) -> size_t const &"""
        return _COPASI.CMathHistoryCore_cols(self)

    def colsAllocated(self):
        r"""colsAllocated(CMathHistoryCore self) -> size_t const &"""
        return _COPASI.CMathHistoryCore_colsAllocated(self)

    def size(self):
        r"""size(CMathHistoryCore self) -> size_t const &"""
        return _COPASI.CMathHistoryCore_size(self)

    def array(self):
        r"""array(CMathHistoryCore self) -> double *"""
        return _COPASI.CMathHistoryCore_array(self)

# Register CMathHistoryCore in _COPASI:
_COPASI.CMathHistoryCore_swigregister(CMathHistoryCore)
class CMathHistory(CMathHistoryCore):
    r"""Proxy of C++ CMathHistory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CMathHistory self, size_t const & rows=0, size_t const & cols=0, size_t const & colsAllocated=0) -> CMathHistory
        __init__(CMathHistory self, CMathHistoryCore src) -> CMathHistory
        __init__(CMathHistory self, CMathHistory src) -> CMathHistory
        """
        _COPASI.CMathHistory_swiginit(self, _COPASI.new_CMathHistory(*args))
    __swig_destroy__ = _COPASI.delete_CMathHistory

    def assign(self, *args):
        r"""
        assign(CMathHistory self, CMathHistoryCore rhs) -> CMathHistory
        assign(CMathHistory self, CMathHistory rhs) -> CMathHistory
        """
        return _COPASI.CMathHistory_assign(self, *args)

    def resize(self, rows, cols, colsAllocated):
        r"""resize(CMathHistory self, size_t const & rows, size_t const & cols, size_t const & colsAllocated)"""
        return _COPASI.CMathHistory_resize(self, rows, cols, colsAllocated)

# Register CMathHistory in _COPASI:
_COPASI.CMathHistory_swigregister(CMathHistory)
class CMathContainer(CDataContainer):
    r"""Proxy of C++ CMathContainer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def relocateUpdateSequence(self, sequence, relocations):
        r"""relocateUpdateSequence(CMathContainer self, CCore::CUpdateSequence & sequence, std::vector< CMath::sRelocate,std::allocator< CMath::sRelocate > > const & relocations)"""
        return _COPASI.CMathContainer_relocateUpdateSequence(self, sequence, relocations)

    def relocateObjectSet(self, objectSet, relocations):
        r"""relocateObjectSet(CMathContainer self, CObjectInterface::ObjectSet & objectSet, std::vector< CMath::sRelocate,std::allocator< CMath::sRelocate > > const & relocations)"""
        return _COPASI.CMathContainer_relocateObjectSet(self, objectSet, relocations)

    def __init__(self, *args):
        r"""
        __init__(CMathContainer self, CModel model) -> CMathContainer
        __init__(CMathContainer self, CMathContainer src) -> CMathContainer
        """
        _COPASI.CMathContainer_swiginit(self, _COPASI.new_CMathContainer(*args))
    __swig_destroy__ = _COPASI.delete_CMathContainer

    def __eq__(self, rhs):
        r"""__eq__(CMathContainer self, CMathContainer rhs) -> bool"""
        return _COPASI.CMathContainer___eq__(self, rhs)

    def copy(self):
        r"""copy(CMathContainer self) -> CMathContainer"""
        return _COPASI.CMathContainer_copy(self)

    def getValues(self):
        r"""getValues(CMathContainer self) -> FloatVectorCore"""
        return _COPASI.CMathContainer_getValues(self)

    def setValues(self, values):
        r"""setValues(CMathContainer self, FloatVectorCore values)"""
        return _COPASI.CMathContainer_setValues(self, values)

    def getInitialState(self):
        r"""getInitialState(CMathContainer self) -> FloatVectorCore"""
        return _COPASI.CMathContainer_getInitialState(self)

    def setInitialState(self, initialState):
        r"""setInitialState(CMathContainer self, FloatVectorCore initialState)"""
        return _COPASI.CMathContainer_setInitialState(self, initialState)

    def getCompleteInitialState(self):
        r"""getCompleteInitialState(CMathContainer self) -> FloatVectorCore"""
        return _COPASI.CMathContainer_getCompleteInitialState(self)

    def setCompleteInitialState(self, initialState):
        r"""setCompleteInitialState(CMathContainer self, FloatVectorCore initialState)"""
        return _COPASI.CMathContainer_setCompleteInitialState(self, initialState)

    def getState(self, reduced):
        r"""getState(CMathContainer self, bool const & reduced) -> FloatVectorCore"""
        return _COPASI.CMathContainer_getState(self, reduced)

    def setState(self, state):
        r"""setState(CMathContainer self, FloatVectorCore state)"""
        return _COPASI.CMathContainer_setState(self, state)

    def isStateValid(self):
        r"""isStateValid(CMathContainer self) -> bool"""
        return _COPASI.CMathContainer_isStateValid(self)

    def isAutonomous(self):
        r"""isAutonomous(CMathContainer self) -> bool const &"""
        return _COPASI.CMathContainer_isAutonomous(self)

    def areObjectsConstant(self, objects):
        r"""areObjectsConstant(CMathContainer self, CObjectInterface::ObjectSet const & objects) -> bool"""
        return _COPASI.CMathContainer_areObjectsConstant(self, objects)

    def getQuantity2NumberFactor(self):
        r"""getQuantity2NumberFactor(CMathContainer self) -> double const &"""
        return _COPASI.CMathContainer_getQuantity2NumberFactor(self)

    def getQuantity2NumberFactorObject(self):
        r"""getQuantity2NumberFactorObject(CMathContainer self) -> CObjectInterface"""
        return _COPASI.CMathContainer_getQuantity2NumberFactorObject(self)

    def getHistory(self, reduced):
        r"""getHistory(CMathContainer self, bool const & reduced) -> CMathHistoryCore"""
        return _COPASI.CMathContainer_getHistory(self, reduced)

    def setHistory(self, history):
        r"""setHistory(CMathContainer self, CMathHistoryCore history)"""
        return _COPASI.CMathContainer_setHistory(self, history)

    def getDelayLags(self):
        r"""getDelayLags(CMathContainer self) -> FloatVectorCore"""
        return _COPASI.CMathContainer_getDelayLags(self)

    def initializeAtolVector(self, baseTolerance, reduced):
        r"""initializeAtolVector(CMathContainer self, double const & baseTolerance, bool const & reduced) -> FloatVector"""
        return _COPASI.CMathContainer_initializeAtolVector(self, baseTolerance, reduced)

    def getRate(self, reduced):
        r"""getRate(CMathContainer self, bool const & reduced) -> FloatVectorCore"""
        return _COPASI.CMathContainer_getRate(self, reduced)

    def getNoise(self, reduced):
        r"""getNoise(CMathContainer self, bool const & reduced) -> FloatVectorCore"""
        return _COPASI.CMathContainer_getNoise(self, reduced)

    def resetNoise(self):
        r"""resetNoise(CMathContainer self)"""
        return _COPASI.CMathContainer_resetNoise(self)

    def getTotalMasses(self):
        r"""getTotalMasses(CMathContainer self) -> FloatVectorCore"""
        return _COPASI.CMathContainer_getTotalMasses(self)

    def getParticleFluxes(self):
        r"""getParticleFluxes(CMathContainer self) -> FloatVectorCore"""
        return _COPASI.CMathContainer_getParticleFluxes(self)

    def getFluxes(self):
        r"""getFluxes(CMathContainer self) -> FloatVectorCore"""
        return _COPASI.CMathContainer_getFluxes(self)

    def getPropensities(self):
        r"""getPropensities(CMathContainer self) -> FloatVectorCore"""
        return _COPASI.CMathContainer_getPropensities(self)

    def getRoots(self):
        r"""getRoots(CMathContainer self) -> FloatVectorCore"""
        return _COPASI.CMathContainer_getRoots(self)

    def getRootIsDiscrete(self):
        r"""getRootIsDiscrete(CMathContainer self) -> CVectorCore< bool > const &"""
        return _COPASI.CMathContainer_getRootIsDiscrete(self)

    def getRootIsTimeDependent(self):
        r"""getRootIsTimeDependent(CMathContainer self) -> CVectorCore< bool > const &"""
        return _COPASI.CMathContainer_getRootIsTimeDependent(self)

    def getRootProcessors(self):
        r"""getRootProcessors(CMathContainer self) -> CVector< CMathEvent::CTrigger::CRootProcessor * > &"""
        return _COPASI.CMathContainer_getRootProcessors(self)

    def updateInitialValues(self, framework):
        r"""updateInitialValues(CMathContainer self, CCore::Framework const & framework)"""
        return _COPASI.CMathContainer_updateInitialValues(self, framework)

    def applyInitialValues(self):
        r"""applyInitialValues(CMathContainer self)"""
        return _COPASI.CMathContainer_applyInitialValues(self)

    def updateSimulatedValues(self, useMoieties):
        r"""updateSimulatedValues(CMathContainer self, bool const & useMoieties)"""
        return _COPASI.CMathContainer_updateSimulatedValues(self, useMoieties)

    def updateRootValues(self, useMoieties):
        r"""updateRootValues(CMathContainer self, bool const & useMoieties)"""
        return _COPASI.CMathContainer_updateRootValues(self, useMoieties)

    def updateNoiseValues(self, useMoieties):
        r"""updateNoiseValues(CMathContainer self, bool const & useMoieties)"""
        return _COPASI.CMathContainer_updateNoiseValues(self, useMoieties)

    def updateTransientDataValues(self):
        r"""updateTransientDataValues(CMathContainer self)"""
        return _COPASI.CMathContainer_updateTransientDataValues(self)

    def updateHistoryValues(self, useMoieties):
        r"""updateHistoryValues(CMathContainer self, bool const & useMoieties)"""
        return _COPASI.CMathContainer_updateHistoryValues(self, useMoieties)

    def updatePriorityValues(self):
        r"""updatePriorityValues(CMathContainer self)"""
        return _COPASI.CMathContainer_updatePriorityValues(self)

    def applyUpdateSequence(self, updateSequence):
        r"""applyUpdateSequence(CMathContainer self, CCore::CUpdateSequence const & updateSequence)"""
        return _COPASI.CMathContainer_applyUpdateSequence(self, updateSequence)

    def calculateRootDerivatives(self, rootDerivatives):
        r"""calculateRootDerivatives(CMathContainer self, FloatVector rootDerivatives)"""
        return _COPASI.CMathContainer_calculateRootDerivatives(self, rootDerivatives)

    def calculateJacobian(self, jacobian, derivationFactor, reduced, includeTime=False):
        r"""calculateJacobian(CMathContainer self, FloatMatrix jacobian, double const & derivationFactor, bool const & reduced, bool const & includeTime=False)"""
        return _COPASI.CMathContainer_calculateJacobian(self, jacobian, derivationFactor, reduced, includeTime)

    def calculateJacobianDependencies(self, jacobianDependencies, reduced):
        r"""calculateJacobianDependencies(CMathContainer self, IntMatrix jacobianDependencies, bool const & reduced)"""
        return _COPASI.CMathContainer_calculateJacobianDependencies(self, jacobianDependencies, reduced)

    def calculateElasticityDependencies(self, elasticityDependencies, reduced):
        r"""calculateElasticityDependencies(CMathContainer self, IntMatrix elasticityDependencies, bool const & reduced)"""
        return _COPASI.CMathContainer_calculateElasticityDependencies(self, elasticityDependencies, reduced)

    def processQueue(self, equality):
        r"""processQueue(CMathContainer self, bool const & equality) -> CMath::StateChange"""
        return _COPASI.CMathContainer_processQueue(self, equality)

    def getProcessQueue(self):
        r"""getProcessQueue(CMathContainer self) -> CMathEventQueue &"""
        return _COPASI.CMathContainer_getProcessQueue(self)

    def getProcessQueueExecutionTime(self):
        r"""getProcessQueueExecutionTime(CMathContainer self) -> double"""
        return _COPASI.CMathContainer_getProcessQueueExecutionTime(self)

    def fetchInitialState(self):
        r"""fetchInitialState(CMathContainer self)"""
        return _COPASI.CMathContainer_fetchInitialState(self)

    def pushInitialState(self):
        r"""pushInitialState(CMathContainer self)"""
        return _COPASI.CMathContainer_pushInitialState(self)

    def fetchState(self):
        r"""fetchState(CMathContainer self)"""
        return _COPASI.CMathContainer_fetchState(self)

    def pushState(self):
        r"""pushState(CMathContainer self)"""
        return _COPASI.CMathContainer_pushState(self)

    def pushAllTransientValues(self):
        r"""pushAllTransientValues(CMathContainer self)"""
        return _COPASI.CMathContainer_pushAllTransientValues(self)

    def getCN(self):
        r"""getCN(CMathContainer self) -> CCommonName"""
        return _COPASI.CMathContainer_getCN(self)

    def getObject(self, cn):
        r"""getObject(CMathContainer self, CCommonName cn) -> CObjectInterface"""
        return _COPASI.CMathContainer_getObject(self, cn)

    def getObjectFromCN(self, cn):
        r"""getObjectFromCN(CMathContainer self, CCommonName cn) -> CObjectInterface"""
        return _COPASI.CMathContainer_getObjectFromCN(self, cn)

    def getMathObject(self, *args):
        r"""
        getMathObject(CMathContainer self, CObjectInterface pObject) -> CMathObject
        getMathObject(CMathContainer self, double const * pDataValue) -> CMathObject
        getMathObject(CMathContainer self, CCommonName cn) -> CMathObject
        """
        return _COPASI.CMathContainer_getMathObject(self, *args)

    def getDataObject(self, pDataValue):
        r"""getDataObject(CMathContainer self, double const * pDataValue) -> CDataObject"""
        return _COPASI.CMathContainer_getDataObject(self, pDataValue)

    def getMathReaction(self, pReaction):
        r"""getMathReaction(CMathContainer self, CReaction pReaction) -> CMathReaction"""
        return _COPASI.CMathContainer_getMathReaction(self, pReaction)

    def getCompartment(self, pObject):
        r"""getCompartment(CMathContainer self, CMathObject pObject) -> CMathObject"""
        return _COPASI.CMathContainer_getCompartment(self, pObject)

    def getLargestReactionCompartment(self, pReaction):
        r"""getLargestReactionCompartment(CMathContainer self, CMathReaction pReaction) -> CMathObject"""
        return _COPASI.CMathContainer_getLargestReactionCompartment(self, pReaction)

    def getModel(self):
        r"""getModel(CMathContainer self) -> CModel"""
        return _COPASI.CMathContainer_getModel(self)

    def getCountFixedEventTargets(self):
        r"""getCountFixedEventTargets(CMathContainer self) -> size_t const &"""
        return _COPASI.CMathContainer_getCountFixedEventTargets(self)

    def getCountODEs(self):
        r"""getCountODEs(CMathContainer self) -> size_t"""
        return _COPASI.CMathContainer_getCountODEs(self)

    def getCountIndependentSpecies(self):
        r"""getCountIndependentSpecies(CMathContainer self) -> size_t"""
        return _COPASI.CMathContainer_getCountIndependentSpecies(self)

    def getCountDependentSpecies(self):
        r"""getCountDependentSpecies(CMathContainer self) -> size_t const &"""
        return _COPASI.CMathContainer_getCountDependentSpecies(self)

    def getCountAssignments(self):
        r"""getCountAssignments(CMathContainer self) -> size_t const &"""
        return _COPASI.CMathContainer_getCountAssignments(self)

    def getCountFixed(self):
        r"""getCountFixed(CMathContainer self) -> size_t const &"""
        return _COPASI.CMathContainer_getCountFixed(self)

    def getCountNoise(self):
        r"""getCountNoise(CMathContainer self) -> size_t"""
        return _COPASI.CMathContainer_getCountNoise(self)

    def addNoiseInputObject(self, pObject):
        r"""addNoiseInputObject(CMathContainer self, CMathObject pObject)"""
        return _COPASI.CMathContainer_addNoiseInputObject(self, pObject)

    def getNoiseInputObjects(self):
        r"""getNoiseInputObjects(CMathContainer self) -> CObjectInterface::ObjectSet const &"""
        return _COPASI.CMathContainer_getNoiseInputObjects(self)

    def getReactions(self):
        r"""getReactions(CMathContainer self) -> CVectorCore< CMathReaction > &"""
        return _COPASI.CMathContainer_getReactions(self)

    def getStoichiometry(self, reduced=False):
        r"""getStoichiometry(CMathContainer self, bool const & reduced=False) -> FloatMatrix"""
        return _COPASI.CMathContainer_getStoichiometry(self, reduced)

    def getEvents(self):
        r"""getEvents(CMathContainer self) -> CVectorCore< CMathEvent > const &"""
        return _COPASI.CMathContainer_getEvents(self)

    def getInitialDependencies(self):
        r"""getInitialDependencies(CMathContainer self) -> CMathDependencyGraph"""
        return _COPASI.CMathContainer_getInitialDependencies(self)

    def getTransientDependencies(self):
        r"""getTransientDependencies(CMathContainer self) -> CMathDependencyGraph"""
        return _COPASI.CMathContainer_getTransientDependencies(self)

    def getInitialStateObjects(self):
        r"""getInitialStateObjects(CMathContainer self) -> CObjectInterface::ObjectSet const &"""
        return _COPASI.CMathContainer_getInitialStateObjects(self)

    def getValueChangeProhibited(self):
        r"""getValueChangeProhibited(CMathContainer self) -> CObjectInterface::ObjectSet const &"""
        return _COPASI.CMathContainer_getValueChangeProhibited(self)

    def getStateObjects(self, reduced=False):
        r"""getStateObjects(CMathContainer self, bool const & reduced=False) -> CObjectInterface::ObjectSet const"""
        return _COPASI.CMathContainer_getStateObjects(self, reduced)

    def getSimulationUpToDateObjects(self):
        r"""getSimulationUpToDateObjects(CMathContainer self) -> CObjectInterface::ObjectSet const &"""
        return _COPASI.CMathContainer_getSimulationUpToDateObjects(self)

    def getSynchronizeInitialValuesSequence(self, framework):
        r"""getSynchronizeInitialValuesSequence(CMathContainer self, CCore::Framework const & framework) -> CCore::CUpdateSequence const &"""
        return _COPASI.CMathContainer_getSynchronizeInitialValuesSequence(self, framework)

    def getApplyInitialValuesSequence(self):
        r"""getApplyInitialValuesSequence(CMathContainer self) -> CCore::CUpdateSequence const &"""
        return _COPASI.CMathContainer_getApplyInitialValuesSequence(self)

    def getSimulationValuesSequence(self, useMoieties):
        r"""getSimulationValuesSequence(CMathContainer self, bool const & useMoieties) -> CCore::CUpdateSequence const &"""
        return _COPASI.CMathContainer_getSimulationValuesSequence(self, useMoieties)

    def getNoiseSequence(self, useMoieties):
        r"""getNoiseSequence(CMathContainer self, bool const & useMoieties) -> CCore::CUpdateSequence const &"""
        return _COPASI.CMathContainer_getNoiseSequence(self, useMoieties)

    def getTransientDataValueSequence(self):
        r"""getTransientDataValueSequence(CMathContainer self) -> CCore::CUpdateSequence const &"""
        return _COPASI.CMathContainer_getTransientDataValueSequence(self)

    def removeDataObject(self, pObject):
        r"""removeDataObject(CMathContainer self, CDataObject pObject)"""
        return _COPASI.CMathContainer_removeDataObject(self, pObject)

    def copyBranch(self, *args):
        r"""
        copyBranch(CMathContainer self, CEvaluationNode const * pSrc, bool const & replaceDiscontinuousNodes) -> CEvaluationNode
        copyBranch(CMathContainer self, CEvaluationNode const * pSrc, CMath::Variables< CEvaluationNode * > const & variables, bool const & replaceDiscontinuousNodes) -> CEvaluationNode *
        """
        return _COPASI.CMathContainer_copyBranch(self, *args)

    def replaceDiscontinuousNode(self, pSrc, children):
        r"""replaceDiscontinuousNode(CMathContainer self, CEvaluationNode const * pSrc, std::vector< CEvaluationNode *,std::allocator< CEvaluationNode * > > const & children) -> CEvaluationNode *"""
        return _COPASI.CMathContainer_replaceDiscontinuousNode(self, pSrc, children)

    def getInitialValuePointer(self, pValue):
        r"""getInitialValuePointer(CMathContainer self, double const * pValue) -> double *"""
        return _COPASI.CMathContainer_getInitialValuePointer(self, pValue)

    def getInitialValueObject(self, pObject):
        r"""getInitialValueObject(CMathContainer self, CMathObject pObject) -> CMathObject"""
        return _COPASI.CMathContainer_getInitialValueObject(self, pObject)

    def getValueObject(self, pInitialObject):
        r"""getValueObject(CMathContainer self, CMathObject pInitialObject) -> CMathObject"""
        return _COPASI.CMathContainer_getValueObject(self, pInitialObject)

    def addAnalysisObject(self, dataObjects, simulationType, infix):
        r"""addAnalysisObject(CMathContainer self, CMath::Entity< CDataObject > const & dataObjects, CMath::SimulationType const & simulationType, std::string const & infix) -> CMath::Entity< CMathObject >"""
        return _COPASI.CMathContainer_addAnalysisObject(self, dataObjects, simulationType, infix)

    def removeAnalysisObject(self, mathObjects):
        r"""removeAnalysisObject(CMathContainer self, CMath::Entity< CMathObject > & mathObjects) -> bool"""
        return _COPASI.CMathContainer_removeAnalysisObject(self, mathObjects)

    def addAnalysisEvent(self, pDataEvent):
        r"""addAnalysisEvent(CMathContainer self, CEvent pDataEvent) -> CMathEvent"""
        return _COPASI.CMathContainer_addAnalysisEvent(self, pDataEvent)

    def removeAnalysisEvent(self, pMathEvent):
        r"""removeAnalysisEvent(CMathContainer self, CMathEvent *& pMathEvent) -> bool"""
        return _COPASI.CMathContainer_removeAnalysisEvent(self, pMathEvent)

    def getRandomGenerator(self):
        r"""getRandomGenerator(CMathContainer self) -> CRandom"""
        return _COPASI.CMathContainer_getRandomGenerator(self)

    def getRandomObject(self):
        r"""getRandomObject(CMathContainer self) -> CDataObject"""
        return _COPASI.CMathContainer_getRandomObject(self)

    def compile(self):
        r"""compile(CMathContainer self)"""
        return _COPASI.CMathContainer_compile(self)

    def registerUpdateSequence(self, pUpdateSequence):
        r"""registerUpdateSequence(CMathContainer self, CMathUpdateSequence * pUpdateSequence)"""
        return _COPASI.CMathContainer_registerUpdateSequence(self, pUpdateSequence)

    def deregisterUpdateSequence(self, pUpdateSequence):
        r"""deregisterUpdateSequence(CMathContainer self, CMathUpdateSequence * pUpdateSequence)"""
        return _COPASI.CMathContainer_deregisterUpdateSequence(self, pUpdateSequence)

# Register CMathContainer in _COPASI:
_COPASI.CMathContainer_swigregister(CMathContainer)
class CModel(CModelEntity):
    r"""Proxy of C++ CModel class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ModelType_deterministic = _COPASI.CModel_ModelType_deterministic
    
    ModelType_stochastic = _COPASI.CModel_ModelType_stochastic
    
    ModelType___SIZE = _COPASI.CModel_ModelType___SIZE
    
    initial = _COPASI.CModel_initial
    
    transient = _COPASI.CModel_transient
    
    physical = _COPASI.CModel_physical
    
    volume = _COPASI.CModel_volume
    
    area = _COPASI.CModel_area
    
    length = _COPASI.CModel_length
    
    time = _COPASI.CModel_time
    
    quantity = _COPASI.CModel_quantity
    

    @staticmethod
    def fromData(data, pParent):
        r"""fromData(CData data, CUndoObjectInterface pParent) -> CModel"""
        return _COPASI.CModel_fromData(data, pParent)

    def __init__(self, pParent):
        r"""__init__(CModel self, CDataContainer pParent) -> CModel"""
        _COPASI.CModel_swiginit(self, _COPASI.new_CModel(pParent))
    __swig_destroy__ = _COPASI.delete_CModel

    def setObjectParent(self, pParent):
        r"""setObjectParent(CModel self, CDataContainer pParent) -> bool"""
        return _COPASI.CModel_setObjectParent(self, pParent)

    def getUnits(self):
        r"""getUnits(CModel self) -> std::string const"""
        return _COPASI.CModel_getUnits(self)

    def getChildObjectUnits(self, pObject):
        r"""getChildObjectUnits(CModel self, CDataObject pObject) -> std::string"""
        return _COPASI.CModel_getChildObjectUnits(self, pObject)

    def convert2NonReversible(self):
        r"""convert2NonReversible(CModel self) -> bool"""
        return _COPASI.CModel_convert2NonReversible(self)

    def createEventsForTimeseries(self, experiment=None):
        r"""createEventsForTimeseries(CModel self, CExperiment experiment=None) -> bool"""
        return _COPASI.CModel_createEventsForTimeseries(self, experiment)

    def initializeMetabolites(self):
        r"""initializeMetabolites(CModel self)"""
        return _COPASI.CModel_initializeMetabolites(self)

    def functionDefinitionChanged(self, pFunction):
        r"""functionDefinitionChanged(CModel self, CFunction pFunction)"""
        return _COPASI.CModel_functionDefinitionChanged(self, pFunction)

    def setCompileFlag(self, flag=True):
        r"""setCompileFlag(CModel self, bool flag=True)"""
        return _COPASI.CModel_setCompileFlag(self, flag)

    def isCompileNecessary(self):
        r"""isCompileNecessary(CModel self) -> bool const &"""
        return _COPASI.CModel_isCompileNecessary(self)

    def buildDependencyGraphs(self):
        r"""buildDependencyGraphs(CModel self) -> bool"""
        return _COPASI.CModel_buildDependencyGraphs(self)

    def buildStoi(self):
        r"""buildStoi(CModel self)"""
        return _COPASI.CModel_buildStoi(self)

    def buildLinkZero(self):
        r"""buildLinkZero(CModel self)"""
        return _COPASI.CModel_buildLinkZero(self)

    def buildRedStoi(self):
        r"""buildRedStoi(CModel self)"""
        return _COPASI.CModel_buildRedStoi(self)

    def buildMoieties(self):
        r"""buildMoieties(CModel self)"""
        return _COPASI.CModel_buildMoieties(self)

    def clearSbmlIds(self):
        r"""clearSbmlIds(CModel self)"""
        return _COPASI.CModel_clearSbmlIds(self)

    def getMetabolites(self):
        r"""getMetabolites(CModel self) -> MetabVector"""
        return _COPASI.CModel_getMetabolites(self)

    def getMetabolitesX(self):
        r"""getMetabolitesX(CModel self) -> MetabVector"""
        return _COPASI.CModel_getMetabolitesX(self)

    def getNumMetabs(self):
        r"""getNumMetabs(CModel self) -> size_t"""
        return _COPASI.CModel_getNumMetabs(self)

    def getNumVariableMetabs(self):
        r"""getNumVariableMetabs(CModel self) -> size_t"""
        return _COPASI.CModel_getNumVariableMetabs(self)

    def getNumODEMetabs(self):
        r"""getNumODEMetabs(CModel self) -> size_t"""
        return _COPASI.CModel_getNumODEMetabs(self)

    def getNumAssignmentMetabs(self):
        r"""getNumAssignmentMetabs(CModel self) -> size_t"""
        return _COPASI.CModel_getNumAssignmentMetabs(self)

    def getNumIndependentReactionMetabs(self):
        r"""getNumIndependentReactionMetabs(CModel self) -> size_t"""
        return _COPASI.CModel_getNumIndependentReactionMetabs(self)

    def getNumDependentReactionMetabs(self):
        r"""getNumDependentReactionMetabs(CModel self) -> size_t"""
        return _COPASI.CModel_getNumDependentReactionMetabs(self)

    def getModelValues(self):
        r"""getModelValues(CModel self) -> ModelValueVectorN"""
        return _COPASI.CModel_getModelValues(self)

    def getNumModelValues(self):
        r"""getNumModelValues(CModel self) -> size_t"""
        return _COPASI.CModel_getNumModelValues(self)

    def getModelParameterSets(self):
        r"""getModelParameterSets(CModel self) -> ModelParameterSetVectorN"""
        return _COPASI.CModel_getModelParameterSets(self)

    def getActiveModelParameterSet(self):
        r"""getActiveModelParameterSet(CModel self) -> CModelParameterSet"""
        return _COPASI.CModel_getActiveModelParameterSet(self)

    def applyActiveParameterSet(self):
        r"""applyActiveParameterSet(CModel self)"""
        return _COPASI.CModel_applyActiveParameterSet(self)

    def refreshActiveParameterSet(self):
        r"""refreshActiveParameterSet(CModel self)"""
        return _COPASI.CModel_refreshActiveParameterSet(self)

    def getReactionsPerSpecies(self, arg2):
        r"""getReactionsPerSpecies(CModel self, CMetab arg2) -> std::set< std::pair< CReaction const *,double >,std::less< std::pair< CReaction const *,double > >,std::allocator< std::pair< CReaction const *,double > > > const &"""
        return _COPASI.CModel_getReactionsPerSpecies(self, arg2)

    def getReactions(self):
        r"""getReactions(CModel self) -> ReactionVectorNS"""
        return _COPASI.CModel_getReactions(self)

    def getTotSteps(self):
        r"""getTotSteps(CModel self) -> size_t"""
        return _COPASI.CModel_getTotSteps(self)

    def getParticleFlux(self):
        r"""getParticleFlux(CModel self) -> FloatVector"""
        return _COPASI.CModel_getParticleFlux(self)

    def getEvents(self):
        r"""getEvents(CModel self) -> EventVectorN"""
        return _COPASI.CModel_getEvents(self)

    def getKey(self):
        r"""getKey(CModel self) -> std::string const &"""
        return _COPASI.CModel_getKey(self)

    def setInitialTime(self, time):
        r"""setInitialTime(CModel self, double const & time)"""
        return _COPASI.CModel_setInitialTime(self, time)

    def getInitialTime(self):
        r"""getInitialTime(CModel self) -> double const &"""
        return _COPASI.CModel_getInitialTime(self)

    def setTime(self, time):
        r"""setTime(CModel self, double const & time)"""
        return _COPASI.CModel_setTime(self, time)

    def getTime(self):
        r"""getTime(CModel self) -> double const &"""
        return _COPASI.CModel_getTime(self)

    def getCompartments(self):
        r"""getCompartments(CModel self) -> CompartmentVectorNS"""
        return _COPASI.CModel_getCompartments(self)

    def getRedStoi(self):
        r"""getRedStoi(CModel self) -> FloatMatrix"""
        return _COPASI.CModel_getRedStoi(self)

    def getRedStoiAnnotation(self):
        r"""getRedStoiAnnotation(CModel self) -> CDataArray"""
        return _COPASI.CModel_getRedStoiAnnotation(self)

    def getStoi(self):
        r"""getStoi(CModel self) -> FloatMatrix"""
        return _COPASI.CModel_getStoi(self)

    def getStoiAnnotation(self):
        r"""getStoiAnnotation(CModel self) -> CDataArray"""
        return _COPASI.CModel_getStoiAnnotation(self)

    def getMoieties(self):
        r"""getMoieties(CModel self) -> MoietyVector"""
        return _COPASI.CModel_getMoieties(self)

    def findMetabByName(self, name):
        r"""findMetabByName(CModel self, std::string const & name) -> CMetab"""
        return _COPASI.CModel_findMetabByName(self, name)

    def findMoiety(self, Target):
        r"""findMoiety(CModel self, std::string const & Target) -> size_t"""
        return _COPASI.CModel_findMoiety(self, Target)

    def getLAnnotation(self):
        r"""getLAnnotation(CModel self) -> CDataArray"""
        return _COPASI.CModel_getLAnnotation(self)

    def getL0(self):
        r"""getL0(CModel self) -> CLinkMatrix"""
        return _COPASI.CModel_getL0(self)

    def applyInitialValues(self):
        r"""applyInitialValues(CModel self)"""
        return _COPASI.CModel_applyInitialValues(self)

    def stateToIntialState(self):
        r"""stateToIntialState(CModel self)"""
        return _COPASI.CModel_stateToIntialState(self)

    def setVolumeUnit(self, name):
        r"""setVolumeUnit(CModel self, std::string const & name) -> bool"""
        return _COPASI.CModel_setVolumeUnit(self, name)

    def getVolumeUnit(self):
        r"""getVolumeUnit(CModel self) -> std::string const &"""
        return _COPASI.CModel_getVolumeUnit(self)

    def getVolumeUnitName(self):
        r"""getVolumeUnitName(CModel self) -> std::string"""
        return _COPASI.CModel_getVolumeUnitName(self)

    def setAreaUnit(self, name):
        r"""setAreaUnit(CModel self, std::string const & name) -> bool"""
        return _COPASI.CModel_setAreaUnit(self, name)

    def getAreaUnit(self):
        r"""getAreaUnit(CModel self) -> std::string const &"""
        return _COPASI.CModel_getAreaUnit(self)

    def getAreaUnitName(self):
        r"""getAreaUnitName(CModel self) -> std::string"""
        return _COPASI.CModel_getAreaUnitName(self)

    def setLengthUnit(self, name):
        r"""setLengthUnit(CModel self, std::string const & name) -> bool"""
        return _COPASI.CModel_setLengthUnit(self, name)

    def getLengthUnit(self):
        r"""getLengthUnit(CModel self) -> std::string const &"""
        return _COPASI.CModel_getLengthUnit(self)

    def getLengthUnitName(self):
        r"""getLengthUnitName(CModel self) -> std::string"""
        return _COPASI.CModel_getLengthUnitName(self)

    def setTimeUnit(self, name):
        r"""setTimeUnit(CModel self, std::string const & name) -> bool"""
        return _COPASI.CModel_setTimeUnit(self, name)

    def getTimeUnit(self):
        r"""getTimeUnit(CModel self) -> std::string const &"""
        return _COPASI.CModel_getTimeUnit(self)

    def getTimeUnitName(self):
        r"""getTimeUnitName(CModel self) -> std::string"""
        return _COPASI.CModel_getTimeUnitName(self)

    def getQuantityUnit(self):
        r"""getQuantityUnit(CModel self) -> std::string const"""
        return _COPASI.CModel_getQuantityUnit(self)

    def getQuantityUnitName(self):
        r"""getQuantityUnitName(CModel self) -> std::string"""
        return _COPASI.CModel_getQuantityUnitName(self)

    def setModelType(self, modelType):
        r"""setModelType(CModel self, CModel::ModelType const & modelType)"""
        return _COPASI.CModel_setModelType(self, modelType)

    def getModelType(self):
        r"""getModelType(CModel self) -> CModel::ModelType const &"""
        return _COPASI.CModel_getModelType(self)

    def setAvogadro(self, avogadro, frameWork):
        r"""setAvogadro(CModel self, double const & avogadro, CCore::Framework const & frameWork)"""
        return _COPASI.CModel_setAvogadro(self, avogadro, frameWork)

    def getAvogadro(self):
        r"""getAvogadro(CModel self) -> double const &"""
        return _COPASI.CModel_getAvogadro(self)

    def getQuantity2NumberFactor(self):
        r"""getQuantity2NumberFactor(CModel self) -> double const &"""
        return _COPASI.CModel_getQuantity2NumberFactor(self)

    def getNumber2QuantityFactor(self):
        r"""getNumber2QuantityFactor(CModel self) -> double const &"""
        return _COPASI.CModel_getNumber2QuantityFactor(self)

    def createMetabolite(self, *args):
        r"""createMetabolite(CModel self, std::string const & name, std::string const & compartment, double const & iconc=1.0, CModelEntity::Status const & status=REACTIONS) -> CMetab"""
        return _COPASI.CModel_createMetabolite(self, *args)

    def removeMetabolite(self, *args):
        r"""
        removeMetabolite(CModel self, std::string const & key, bool const & recursive=True) -> bool
        removeMetabolite(CModel self, size_t const index, bool const & recursive=True) -> bool
        removeMetabolite(CModel self, CMetab pMetabolite, bool const & recursive=True) -> bool
        """
        return _COPASI.CModel_removeMetabolite(self, *args)

    def appendDirectDependents(self, *args):
        r"""
        appendDirectDependents(CModel self, CDataContainer container, DataObjectSet dependentReactions, DataObjectSet dependentMetabolites, DataObjectSet dependentCompartments, DataObjectSet dependentModelValues, DataObjectSet dependentEvents, DataObjectSet dependentEventAssignments, bool const & onlyStructural=False) -> bool
        appendDirectDependents(CModel self, CObjectInterface::ObjectSet const & objects, DataObjectSet dependentReactions, DataObjectSet dependentMetabolites, DataObjectSet dependentCompartments, DataObjectSet dependentModelValues, DataObjectSet dependentEvents, DataObjectSet dependentEventAssignments, bool const & onlyStructural=False) -> bool
        """
        return _COPASI.CModel_appendDirectDependents(self, *args)

    def appendAllDependents(self, *args):
        r"""
        appendAllDependents(CModel self, CDataContainer container, DataObjectSet dependentReactions, DataObjectSet dependentMetabolites, DataObjectSet dependentCompartments, DataObjectSet dependentModelValues, DataObjectSet dependentEvents, DataObjectSet dependentEventAssignments, bool const & onlyStructural=False) -> bool
        appendAllDependents(CModel self, CObjectInterface::ObjectSet const & objects, DataObjectSet dependentReactions, DataObjectSet dependentMetabolites, DataObjectSet dependentCompartments, DataObjectSet dependentModelValues, DataObjectSet dependentEvents, DataObjectSet dependentEventAssignments, bool const & onlyStructural=False) -> bool
        """
        return _COPASI.CModel_appendAllDependents(self, *args)

    def createCompartment(self, name, volume=1.0):
        r"""createCompartment(CModel self, std::string const & name, double const & volume=1.0) -> CCompartment"""
        return _COPASI.CModel_createCompartment(self, name, volume)

    def removeCompartment(self, *args):
        r"""
        removeCompartment(CModel self, size_t const index, bool const & recursive=True) -> bool
        removeCompartment(CModel self, std::string const & key, bool const & recursive=True) -> bool
        removeCompartment(CModel self, CCompartment pCompartment, bool const & recursive=True) -> bool
        """
        return _COPASI.CModel_removeCompartment(self, *args)

    def createReaction(self, name):
        r"""createReaction(CModel self, std::string const & name) -> CReaction"""
        return _COPASI.CModel_createReaction(self, name)

    def removeReaction(self, *args):
        r"""
        removeReaction(CModel self, CReaction pReaction, bool const & recursive=True) -> bool
        removeReaction(CModel self, std::string const & key, bool const & recursive=True) -> bool
        removeReaction(CModel self, size_t const index, bool const & recursive=True) -> bool
        """
        return _COPASI.CModel_removeReaction(self, *args)

    def removeLocalReactionParameter(self, key, recursive=True):
        r"""removeLocalReactionParameter(CModel self, std::string const & key, bool const & recursive=True) -> bool"""
        return _COPASI.CModel_removeLocalReactionParameter(self, key, recursive)

    def createEvent(self, name):
        r"""createEvent(CModel self, std::string const & name) -> CEvent"""
        return _COPASI.CModel_createEvent(self, name)

    def removeEvent(self, *args):
        r"""
        removeEvent(CModel self, size_t const index, bool const & recursive=True) -> bool
        removeEvent(CModel self, std::string const & key, bool const & recursive=True) -> bool
        removeEvent(CModel self, CEvent pEvent, bool const & recursive=True) -> bool
        """
        return _COPASI.CModel_removeEvent(self, *args)

    def createModelValue(self, name, value=0.0):
        r"""createModelValue(CModel self, std::string const & name, double const & value=0.0) -> CModelValue"""
        return _COPASI.CModel_createModelValue(self, name, value)

    def removeModelValue(self, *args):
        r"""
        removeModelValue(CModel self, CModelValue pModelValue, bool const & recursive=True) -> bool
        removeModelValue(CModel self, std::string const & key, bool const & recursive=True) -> bool
        removeModelValue(CModel self, size_t const index, bool const & recursive=True) -> bool
        """
        return _COPASI.CModel_removeModelValue(self, *args)

    def removeFunction(self, pFunction, recursive=True):
        r"""removeFunction(CModel self, CFunction pFunction, bool const & recursive=True) -> bool"""
        return _COPASI.CModel_removeFunction(self, pFunction, recursive)

    def getStateTemplate(self):
        r"""getStateTemplate(CModel self) -> CStateTemplate"""
        return _COPASI.CModel_getStateTemplate(self)

    def addModelEntity(self, pModelEntity):
        r"""addModelEntity(CModel self, CModelEntity pModelEntity)"""
        return _COPASI.CModel_addModelEntity(self, pModelEntity)

    def removeModelEntity(self, pModelEntity):
        r"""removeModelEntity(CModel self, CModelEntity pModelEntity)"""
        return _COPASI.CModel_removeModelEntity(self, pModelEntity)

    def hasReversibleReaction(self):
        r"""hasReversibleReaction(CModel self) -> bool"""
        return _COPASI.CModel_hasReversibleReaction(self)

    def suitableForStochasticSimulation(self):
        r"""suitableForStochasticSimulation(CModel self) -> std::string"""
        return _COPASI.CModel_suitableForStochasticSimulation(self)

    def isAutonomous(self):
        r"""isAutonomous(CModel self) -> bool const &"""
        return _COPASI.CModel_isAutonomous(self)

    def isStateVariable(self, pObject):
        r"""isStateVariable(CModel self, CDataObject pObject) -> bool"""
        return _COPASI.CModel_isStateVariable(self, pObject)

    def getCorrespondingTransientObject(self, pObject):
        r"""getCorrespondingTransientObject(CModel self, CDataObject pObject) -> CDataObject"""
        return _COPASI.CModel_getCorrespondingTransientObject(self, pObject)

    def initializeAtolVector(self, baseTolerance, reducedModel):
        r"""initializeAtolVector(CModel self, double const & baseTolerance, bool const & reducedModel) -> FloatVector"""
        return _COPASI.CModel_initializeAtolVector(self, baseTolerance, reducedModel)

    def getMathContainer(self):
        r"""getMathContainer(CModel self) -> CMathContainer"""
        return _COPASI.CModel_getMathContainer(self)

    def prepareElasticity(self, pReaction, pVar, simplify):
        r"""prepareElasticity(CModel self, CReaction pReaction, CModelEntity pVar, bool simplify) -> CEvaluationNode *"""
        return _COPASI.CModel_prepareElasticity(self, pReaction, pVar, simplify)

    def getUnitSymbolUsage(self, symbol):
        r"""getUnitSymbolUsage(CModel self, std::string symbol) -> DataObjectSet"""
        return _COPASI.CModel_getUnitSymbolUsage(self, symbol)

    def changeUnitExpressionSymbols(self, oldSymbol, newSymbol):
        r"""changeUnitExpressionSymbols(CModel self, std::string oldSymbol, std::string newSymbol)"""
        return _COPASI.CModel_changeUnitExpressionSymbols(self, oldSymbol, newSymbol)

    def getUsedUnits(self):
        r"""getUsedUnits(CModel self) -> StringUnitMap"""
        return _COPASI.CModel_getUsedUnits(self)

    def setQuantityUnit(self, *args):
        r"""
        setQuantityUnit(CModel self, std::string const & name, CCore::Framework const & frameWork) -> bool
        setQuantityUnit(CModel self, std::string const & name) -> bool
        """
        return _COPASI.CModel_setQuantityUnit(self, *args)

    def getNumCompartments(self):
        r"""getNumCompartments(CModel self) -> unsigned int"""
        return _COPASI.CModel_getNumCompartments(self)

    def getNumReactions(self):
        r"""getNumReactions(CModel self) -> unsigned int"""
        return _COPASI.CModel_getNumReactions(self)

    def getReaction(self, *args):
        r"""
        getReaction(CModel self, unsigned int index) -> CReaction
        getReaction(CModel self, std::string const & name) -> CReaction
        """
        return _COPASI.CModel_getReaction(self, *args)

    def getCompartment(self, *args):
        r"""
        getCompartment(CModel self, unsigned int index) -> CCompartment
        getCompartment(CModel self, std::string const & name) -> CCompartment
        """
        return _COPASI.CModel_getCompartment(self, *args)

    def getMetabolite(self, *args):
        r"""
        getMetabolite(CModel self, unsigned int index) -> CMetab
        getMetabolite(CModel self, std::string const & name) -> CMetab
        """
        return _COPASI.CModel_getMetabolite(self, *args)

    def getMoiety(self, index):
        r"""getMoiety(CModel self, unsigned int index) -> CMoiety"""
        return _COPASI.CModel_getMoiety(self, index)

    def forceCompile(self):
        r"""forceCompile(CModel self) -> bool"""
        return _COPASI.CModel_forceCompile(self)

    def compileIfNecessary(self):
        r"""compileIfNecessary(CModel self) -> bool"""
        return _COPASI.CModel_compileIfNecessary(self)

    def updateInitialValues(self, *args):
        r"""
        updateInitialValues(CModel self, CCore::Framework const & framework) -> bool
        updateInitialValues(CModel self, DataObjectSet changedObjects)
        updateInitialValues(CModel self, CDataObject changedObject)
        updateInitialValues(CModel self, ObjectStdVector v)
        """
        return _COPASI.CModel_updateInitialValues(self, *args)

    def getModelValue(self, *args):
        r"""
        getModelValue(CModel self, unsigned int index) -> CModelValue
        getModelValue(CModel self, std::string const & name) -> CModelValue
        """
        return _COPASI.CModel_getModelValue(self, *args)

    def getNumIndependentMetabs(self):
        r"""getNumIndependentMetabs(CModel self) -> unsigned int"""
        return _COPASI.CModel_getNumIndependentMetabs(self)

    def getNumDependentMetabs(self):
        r"""getNumDependentMetabs(CModel self) -> unsigned int"""
        return _COPASI.CModel_getNumDependentMetabs(self)

    def setComments(self, notes):
        r"""setComments(CModel self, std::string const & notes)"""
        return _COPASI.CModel_setComments(self, notes)

    def getComments(self):
        r"""getComments(CModel self) -> std::string const &"""
        return _COPASI.CModel_getComments(self)

    def getNumEvents(self):
        r"""getNumEvents(CModel self) -> unsigned int"""
        return _COPASI.CModel_getNumEvents(self)

    def getEvent(self, *args):
        r"""
        getEvent(CModel self, std::string const & name) -> CEvent
        getEvent(CModel self, unsigned int index) -> CEvent
        """
        return _COPASI.CModel_getEvent(self, *args)

# Register CModel in _COPASI:
_COPASI.CModel_swigregister(CModel)
class CModelExpansion(object):
    r"""Proxy of C++ CModelExpansion class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, pModel):
        r"""__init__(CModelExpansion self, CModel pModel) -> CModelExpansion"""
        _COPASI.CModelExpansion_swiginit(self, _COPASI.new_CModelExpansion(pModel))

    def setModel(self, pModel):
        r"""setModel(CModelExpansion self, CModel pModel)"""
        return _COPASI.CModelExpansion_setModel(self, pModel)

    def simpleCall(self, source, listOfMetabolites, mult, diff):
        r"""simpleCall(CModelExpansion self, CCompartment source, DataObjectVector listOfMetabolites, int mult, bool diff)"""
        return _COPASI.CModelExpansion_simpleCall(self, source, listOfMetabolites, mult, diff)

    def createLinearArray(self, source, n, setOfMetabolites):
        r"""createLinearArray(CModelExpansion self, CModelExpansion_SetOfModelElements source, size_t n, DataObjectSet setOfMetabolites)"""
        return _COPASI.CModelExpansion_createLinearArray(self, source, n, setOfMetabolites)

    def createRectangularArray(self, source, nx, ny, setOfMetabolites):
        r"""createRectangularArray(CModelExpansion self, CModelExpansion_SetOfModelElements source, size_t nx, size_t ny, DataObjectSet setOfMetabolites)"""
        return _COPASI.CModelExpansion_createRectangularArray(self, source, nx, ny, setOfMetabolites)

    def copyCompleteModel(self, pSourceModel):
        r"""copyCompleteModel(CModelExpansion self, CModel pSourceModel) -> DataObjectSet"""
        return _COPASI.CModelExpansion_copyCompleteModel(self, pSourceModel)

    def duplicate(self, source, index, emap):
        r"""duplicate(CModelExpansion self, CModelExpansion_SetOfModelElements source, std::string const & index, CModelExpansion_ElementsMap emap) -> CUndoData"""
        return _COPASI.CModelExpansion_duplicate(self, source, index, emap)

    def duplicateCompartment(self, source, index, sourceSet, emap, undoData):
        r"""duplicateCompartment(CModelExpansion self, CCompartment source, std::string const & index, CModelExpansion_SetOfModelElements sourceSet, CModelExpansion_ElementsMap emap, CUndoData undoData)"""
        return _COPASI.CModelExpansion_duplicateCompartment(self, source, index, sourceSet, emap, undoData)

    def duplicateMetab(self, source, index, sourceSet, emap, undoData):
        r"""duplicateMetab(CModelExpansion self, CMetab source, std::string const & index, CModelExpansion_SetOfModelElements sourceSet, CModelExpansion_ElementsMap emap, CUndoData undoData)"""
        return _COPASI.CModelExpansion_duplicateMetab(self, source, index, sourceSet, emap, undoData)

    def duplicateReaction(self, source, index, sourceSet, emap, undoData):
        r"""duplicateReaction(CModelExpansion self, CReaction source, std::string const & index, CModelExpansion_SetOfModelElements sourceSet, CModelExpansion_ElementsMap emap, CUndoData undoData)"""
        return _COPASI.CModelExpansion_duplicateReaction(self, source, index, sourceSet, emap, undoData)

    def duplicateGlobalQuantity(self, source, index, sourceSet, emap, undoData):
        r"""duplicateGlobalQuantity(CModelExpansion self, CModelValue source, std::string const & index, CModelExpansion_SetOfModelElements sourceSet, CModelExpansion_ElementsMap emap, CUndoData undoData)"""
        return _COPASI.CModelExpansion_duplicateGlobalQuantity(self, source, index, sourceSet, emap, undoData)

    def duplicateEvent(self, source, index, sourceSet, emap, undoData):
        r"""duplicateEvent(CModelExpansion self, CEvent source, std::string const & index, CModelExpansion_SetOfModelElements sourceSet, CModelExpansion_ElementsMap emap, CUndoData undoData)"""
        return _COPASI.CModelExpansion_duplicateEvent(self, source, index, sourceSet, emap, undoData)

    def updateExpression(self, exp, index, sourceSet, emap, undoData):
        r"""updateExpression(CModelExpansion self, CExpression exp, std::string const & index, CModelExpansion_SetOfModelElements sourceSet, CModelExpansion_ElementsMap emap, CUndoData undoData)"""
        return _COPASI.CModelExpansion_updateExpression(self, exp, index, sourceSet, emap, undoData)

    def expressionContainsObject(self, exp, sourceSet):
        r"""expressionContainsObject(CModelExpansion self, CExpression exp, CModelExpansion_SetOfModelElements sourceSet) -> bool"""
        return _COPASI.CModelExpansion_expressionContainsObject(self, exp, sourceSet)

    def createDiffusionReaction(self, name, pSubstrate, pProduct, pParameter):
        r"""createDiffusionReaction(CModelExpansion self, std::string const & name, CDataObject pSubstrate, CDataObject pProduct, CDataObject pParameter)"""
        return _COPASI.CModelExpansion_createDiffusionReaction(self, name, pSubstrate, pProduct, pParameter)

    def replaceInModel(self, emap, remove):
        r"""replaceInModel(CModelExpansion self, CModelExpansion_ElementsMap emap, bool remove)"""
        return _COPASI.CModelExpansion_replaceInModel(self, emap, remove)

    def replaceInCompartment(self, pX, emap):
        r"""replaceInCompartment(CModelExpansion self, CCompartment pX, CModelExpansion_ElementsMap emap)"""
        return _COPASI.CModelExpansion_replaceInCompartment(self, pX, emap)

    def replaceInMetab(self, pX, emap):
        r"""replaceInMetab(CModelExpansion self, CMetab pX, CModelExpansion_ElementsMap emap)"""
        return _COPASI.CModelExpansion_replaceInMetab(self, pX, emap)

    def replaceInReaction(self, pX, emap):
        r"""replaceInReaction(CModelExpansion self, CReaction pX, CModelExpansion_ElementsMap emap)"""
        return _COPASI.CModelExpansion_replaceInReaction(self, pX, emap)

    def replaceInModelEntity(self, pX, emap):
        r"""replaceInModelEntity(CModelExpansion self, CModelEntity pX, CModelExpansion_ElementsMap emap)"""
        return _COPASI.CModelExpansion_replaceInModelEntity(self, pX, emap)

    def replaceInEvent(self, pX, emap):
        r"""replaceInEvent(CModelExpansion self, CEvent pX, CModelExpansion_ElementsMap emap)"""
        return _COPASI.CModelExpansion_replaceInEvent(self, pX, emap)

    def replaceInExpression(self, exp, emap):
        r"""replaceInExpression(CModelExpansion self, CExpression exp, CModelExpansion_ElementsMap emap)"""
        return _COPASI.CModelExpansion_replaceInExpression(self, exp, emap)

    def existDependentEntities(self, pObj):
        r"""existDependentEntities(CModelExpansion self, CDataObject pObj) -> bool"""
        return _COPASI.CModelExpansion_existDependentEntities(self, pObj)
    __swig_destroy__ = _COPASI.delete_CModelExpansion

# Register CModelExpansion in _COPASI:
_COPASI.CModelExpansion_swigregister(CModelExpansion)
class CModelExpansion_SetOfModelElements(object):
    r"""Proxy of C++ CModelExpansion::SetOfModelElements class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def addCompartment(self, x):
        r"""addCompartment(CModelExpansion_SetOfModelElements self, CCompartment x)"""
        return _COPASI.CModelExpansion_SetOfModelElements_addCompartment(self, x)

    def addMetab(self, x):
        r"""addMetab(CModelExpansion_SetOfModelElements self, CMetab x)"""
        return _COPASI.CModelExpansion_SetOfModelElements_addMetab(self, x)

    def addReaction(self, x):
        r"""addReaction(CModelExpansion_SetOfModelElements self, CReaction x)"""
        return _COPASI.CModelExpansion_SetOfModelElements_addReaction(self, x)

    def addGlobalQuantity(self, x):
        r"""addGlobalQuantity(CModelExpansion_SetOfModelElements self, CModelValue x)"""
        return _COPASI.CModelExpansion_SetOfModelElements_addGlobalQuantity(self, x)

    def addEvent(self, x):
        r"""addEvent(CModelExpansion_SetOfModelElements self, CEvent x)"""
        return _COPASI.CModelExpansion_SetOfModelElements_addEvent(self, x)

    def setModel(self, x):
        r"""setModel(CModelExpansion_SetOfModelElements self, CModel x)"""
        return _COPASI.CModelExpansion_SetOfModelElements_setModel(self, x)

    def addObject(self, x):
        r"""addObject(CModelExpansion_SetOfModelElements self, CDataObject x) -> bool"""
        return _COPASI.CModelExpansion_SetOfModelElements_addObject(self, x)

    def contains(self, *args):
        r"""
        contains(CModelExpansion_SetOfModelElements self, CDataObject x) -> bool
        contains(CModelExpansion_SetOfModelElements self, std::string const & key) -> bool
        """
        return _COPASI.CModelExpansion_SetOfModelElements_contains(self, *args)

    def fillDependencies(self, pModel):
        r"""fillDependencies(CModelExpansion_SetOfModelElements self, CModel pModel)"""
        return _COPASI.CModelExpansion_SetOfModelElements_fillDependencies(self, pModel)

    def fillComplete(self, pModel):
        r"""fillComplete(CModelExpansion_SetOfModelElements self, CModel pModel)"""
        return _COPASI.CModelExpansion_SetOfModelElements_fillComplete(self, pModel)

    def __init__(self):
        r"""__init__(CModelExpansion_SetOfModelElements self) -> CModelExpansion_SetOfModelElements"""
        _COPASI.CModelExpansion_SetOfModelElements_swiginit(self, _COPASI.new_CModelExpansion_SetOfModelElements())
    __swig_destroy__ = _COPASI.delete_CModelExpansion_SetOfModelElements

# Register CModelExpansion_SetOfModelElements in _COPASI:
_COPASI.CModelExpansion_SetOfModelElements_swigregister(CModelExpansion_SetOfModelElements)
class CModelExpansion_ElementsMap(object):
    r"""Proxy of C++ CModelExpansion::ElementsMap class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def exists(self, *args):
        r"""
        exists(CModelExpansion_ElementsMap self, CDataObject source) -> bool
        exists(CModelExpansion_ElementsMap self, std::string const & sourceKey) -> bool
        """
        return _COPASI.CModelExpansion_ElementsMap_exists(self, *args)

    def add(self, source, copy):
        r"""add(CModelExpansion_ElementsMap self, CDataObject source, CDataObject copy)"""
        return _COPASI.CModelExpansion_ElementsMap_add(self, source, copy)

    def getDuplicateFromObject(self, source):
        r"""getDuplicateFromObject(CModelExpansion_ElementsMap self, CDataObject source) -> CDataObject"""
        return _COPASI.CModelExpansion_ElementsMap_getDuplicateFromObject(self, source)

    def getDuplicateFromCN(self, cn):
        r"""getDuplicateFromCN(CModelExpansion_ElementsMap self, CCommonName cn) -> CCommonName"""
        return _COPASI.CModelExpansion_ElementsMap_getDuplicateFromCN(self, cn)

    def getMap(self):
        r"""getMap(CModelExpansion_ElementsMap self) -> DataObjectMap"""
        return _COPASI.CModelExpansion_ElementsMap_getMap(self)

    def __init__(self):
        r"""__init__(CModelExpansion_ElementsMap self) -> CModelExpansion_ElementsMap"""
        _COPASI.CModelExpansion_ElementsMap_swiginit(self, _COPASI.new_CModelExpansion_ElementsMap())
    __swig_destroy__ = _COPASI.delete_CModelExpansion_ElementsMap

# Register CModelExpansion_ElementsMap in _COPASI:
_COPASI.CModelExpansion_ElementsMap_swigregister(CModelExpansion_ElementsMap)
class CCopasiParameter(CDataContainer):
    r"""Proxy of C++ CCopasiParameter class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Type_DOUBLE = _COPASI.CCopasiParameter_Type_DOUBLE
    
    Type_UDOUBLE = _COPASI.CCopasiParameter_Type_UDOUBLE
    
    Type_INT = _COPASI.CCopasiParameter_Type_INT
    
    Type_UINT = _COPASI.CCopasiParameter_Type_UINT
    
    Type_BOOL = _COPASI.CCopasiParameter_Type_BOOL
    
    Type_GROUP = _COPASI.CCopasiParameter_Type_GROUP
    
    Type_STRING = _COPASI.CCopasiParameter_Type_STRING
    
    Type_CN = _COPASI.CCopasiParameter_Type_CN
    
    Type_KEY = _COPASI.CCopasiParameter_Type_KEY
    
    Type_FILE = _COPASI.CCopasiParameter_Type_FILE
    
    Type_EXPRESSION = _COPASI.CCopasiParameter_Type_EXPRESSION
    
    Type_INVALID = _COPASI.CCopasiParameter_Type_INVALID
    
    Type___SIZE = _COPASI.CCopasiParameter_Type___SIZE
    
    eUserInterfaceFlag_editable = _COPASI.CCopasiParameter_eUserInterfaceFlag_editable
    
    eUserInterfaceFlag_basic = _COPASI.CCopasiParameter_eUserInterfaceFlag_basic
    
    eUserInterfaceFlag_unsupported = _COPASI.CCopasiParameter_eUserInterfaceFlag_unsupported
    
    eUserInterfaceFlag___SIZE = _COPASI.CCopasiParameter_eUserInterfaceFlag___SIZE
    

    @staticmethod
    def allocateValue(type, pValue):
        r"""allocateValue(CCopasiParameter::Type const & type, void *& pValue)"""
        return _COPASI.CCopasiParameter_allocateValue(type, pValue)

    @staticmethod
    def assignValue(type, pValue, pNewValue):
        r"""assignValue(CCopasiParameter::Type const & type, void *& pValue, void const * pNewValue)"""
        return _COPASI.CCopasiParameter_assignValue(type, pValue, pNewValue)

    @staticmethod
    def deleteValue(type, pValue):
        r"""deleteValue(CCopasiParameter::Type const & type, void *& pValue)"""
        return _COPASI.CCopasiParameter_deleteValue(type, pValue)

    @staticmethod
    def allocateValidValues(type, pValidValues):
        r"""allocateValidValues(CCopasiParameter::Type const & type, void *& pValidValues)"""
        return _COPASI.CCopasiParameter_allocateValidValues(type, pValidValues)

    @staticmethod
    def deleteValidValues(type, pValidValues):
        r"""deleteValidValues(CCopasiParameter::Type const & type, void *& pValidValues)"""
        return _COPASI.CCopasiParameter_deleteValidValues(type, pValidValues)

    @staticmethod
    def fromData(data, pParent):
        r"""fromData(CData data, CUndoObjectInterface pParent) -> CCopasiParameter"""
        return _COPASI.CCopasiParameter_fromData(data, pParent)

    def __init__(self, *args):
        r"""__init__(CCopasiParameter self, CCopasiParameter src, CDataContainer pParent) -> CCopasiParameter"""
        _COPASI.CCopasiParameter_swiginit(self, _COPASI.new_CCopasiParameter(*args))
    __swig_destroy__ = _COPASI.delete_CCopasiParameter

    def setObjectParent(self, pParent):
        r"""setObjectParent(CCopasiParameter self, CDataContainer pParent) -> bool"""
        return _COPASI.CCopasiParameter_setObjectParent(self, pParent)

    def getKey(self):
        r"""getKey(CCopasiParameter self) -> std::string const &"""
        return _COPASI.CCopasiParameter_getKey(self)

    def setValue(self, value):
        r"""setValue(CCopasiParameter self, ParameterVector value) -> bool"""
        return _COPASI.CCopasiParameter_setValue(self, value)

    def setDefault(self, defaultValue):
        r"""setDefault(CCopasiParameter self, ParameterVector defaultValue) -> bool"""
        return _COPASI.CCopasiParameter_setDefault(self, defaultValue)

    def getValueReference(self):
        r"""getValueReference(CCopasiParameter self) -> CDataObject"""
        return _COPASI.CCopasiParameter_getValueReference(self)

    def getType(self):
        r"""getType(CCopasiParameter self) -> CCopasiParameter::Type const &"""
        return _COPASI.CCopasiParameter_getType(self)

    def isValidValue(self, *args):
        r"""
        isValidValue(CCopasiParameter self, double const & value) -> bool
        isValidValue(CCopasiParameter self, int const & value) -> bool
        isValidValue(CCopasiParameter self, unsigned int const & value) -> bool
        isValidValue(CCopasiParameter self, bool const & value) -> bool
        isValidValue(CCopasiParameter self, std::string const & value) -> bool
        isValidValue(CCopasiParameter self, CCommonName value) -> bool
        isValidValue(CCopasiParameter self, ParameterVector value) -> bool
        """
        return _COPASI.CCopasiParameter_isValidValue(self, *args)

    def hasValidValues(self):
        r"""hasValidValues(CCopasiParameter self) -> bool"""
        return _COPASI.CCopasiParameter_hasValidValues(self)

    def getCN(self):
        r"""getCN(CCopasiParameter self) -> CCommonName"""
        return _COPASI.CCopasiParameter_getCN(self)

    def getValidValuesPointer(self):
        r"""getValidValuesPointer(CCopasiParameter self) -> void *"""
        return _COPASI.CCopasiParameter_getValidValuesPointer(self)

    def getObjectDisplayName(self):
        r"""getObjectDisplayName(CCopasiParameter self) -> std::string"""
        return _COPASI.CCopasiParameter_getObjectDisplayName(self)

    def setUserInterfaceFlag(self, flag):
        r"""setUserInterfaceFlag(CCopasiParameter self, CCopasiParameter::UserInterfaceFlag const & flag)"""
        return _COPASI.CCopasiParameter_setUserInterfaceFlag(self, flag)

    def getUserInterfaceFlag(self):
        r"""getUserInterfaceFlag(CCopasiParameter self) -> CCopasiParameter::UserInterfaceFlag const &"""
        return _COPASI.CCopasiParameter_getUserInterfaceFlag(self)

    def isEditable(self):
        r"""isEditable(CCopasiParameter self) -> bool"""
        return _COPASI.CCopasiParameter_isEditable(self)

    def isBasic(self):
        r"""isBasic(CCopasiParameter self) -> bool"""
        return _COPASI.CCopasiParameter_isBasic(self)

    def isUnsupported(self):
        r"""isUnsupported(CCopasiParameter self) -> bool"""
        return _COPASI.CCopasiParameter_isUnsupported(self)

    def isDefault(self):
        r"""isDefault(CCopasiParameter self) -> bool"""
        return _COPASI.CCopasiParameter_isDefault(self)

    def getDblValue(self):
        r"""getDblValue(CCopasiParameter self) -> double"""
        return _COPASI.CCopasiParameter_getDblValue(self)

    def getUDblValue(self):
        r"""getUDblValue(CCopasiParameter self) -> double"""
        return _COPASI.CCopasiParameter_getUDblValue(self)

    def getIntValue(self):
        r"""getIntValue(CCopasiParameter self) -> int"""
        return _COPASI.CCopasiParameter_getIntValue(self)

    def getUIntValue(self):
        r"""getUIntValue(CCopasiParameter self) -> unsigned int"""
        return _COPASI.CCopasiParameter_getUIntValue(self)

    def getBoolValue(self):
        r"""getBoolValue(CCopasiParameter self) -> bool"""
        return _COPASI.CCopasiParameter_getBoolValue(self)

    def getGroupValue(self):
        r"""getGroupValue(CCopasiParameter self) -> ParameterVector"""
        return _COPASI.CCopasiParameter_getGroupValue(self)

    def getStringValue(self):
        r"""getStringValue(CCopasiParameter self) -> std::string"""
        return _COPASI.CCopasiParameter_getStringValue(self)

    def getCNValue(self):
        r"""getCNValue(CCopasiParameter self) -> CCommonName"""
        return _COPASI.CCopasiParameter_getCNValue(self)

    def getKeyValue(self):
        r"""getKeyValue(CCopasiParameter self) -> std::string"""
        return _COPASI.CCopasiParameter_getKeyValue(self)

    def getFileValue(self):
        r"""getFileValue(CCopasiParameter self) -> std::string"""
        return _COPASI.CCopasiParameter_getFileValue(self)

    def getVoidValue(self):
        r"""getVoidValue(CCopasiParameter self) -> void *"""
        return _COPASI.CCopasiParameter_getVoidValue(self)

    def setDblValue(self, v):
        r"""setDblValue(CCopasiParameter self, double const & v) -> bool"""
        return _COPASI.CCopasiParameter_setDblValue(self, v)

    def setUDblValue(self, v):
        r"""setUDblValue(CCopasiParameter self, double const & v) -> bool"""
        return _COPASI.CCopasiParameter_setUDblValue(self, v)

    def setUIntValue(self, v):
        r"""setUIntValue(CCopasiParameter self, unsigned int const & v) -> bool"""
        return _COPASI.CCopasiParameter_setUIntValue(self, v)

    def setIntValue(self, v):
        r"""setIntValue(CCopasiParameter self, int const & v) -> bool"""
        return _COPASI.CCopasiParameter_setIntValue(self, v)

    def setBoolValue(self, v):
        r"""setBoolValue(CCopasiParameter self, bool const & v) -> bool"""
        return _COPASI.CCopasiParameter_setBoolValue(self, v)

    def setGroupValue(self, v):
        r"""setGroupValue(CCopasiParameter self, ParameterVector v) -> bool"""
        return _COPASI.CCopasiParameter_setGroupValue(self, v)

    def setStringValue(self, v):
        r"""setStringValue(CCopasiParameter self, std::string const & v) -> bool"""
        return _COPASI.CCopasiParameter_setStringValue(self, v)

    def setCNValue(self, *args):
        r"""
        setCNValue(CCopasiParameter self, CCommonName v) -> bool
        setCNValue(CCopasiParameter self, std::string const & v) -> bool
        """
        return _COPASI.CCopasiParameter_setCNValue(self, *args)

    def setKeyValue(self, v):
        r"""setKeyValue(CCopasiParameter self, std::string const & v) -> bool"""
        return _COPASI.CCopasiParameter_setKeyValue(self, v)

    def setFileValue(self, v):
        r"""setFileValue(CCopasiParameter self, std::string const & v) -> bool"""
        return _COPASI.CCopasiParameter_setFileValue(self, v)


    def setValue(self,arg):
      if sys.version_info >= (3, 0): 
        return self.setValueV3(arg)
      return self.setValueV2(arg)

    def setValueV3(self,arg):
      result=False
      if(type(arg)==int):
         if((self.getType()==CCopasiParameter.Type_INT) or (arg < 0)):
           result=self.setIntValue(arg)
         else:
           result=self.setUIntValue(arg) 
      elif(type(arg)==float):
         result=self.setDblValue(arg) 
      elif(type(arg)==bool):
         result=self.setBoolValue(arg) 
      elif(type(arg)==bytes):
         result=self.setStringValue(arg) 
      elif(arg.__class__==CRegisteredCommonName):
         result=self.setCNValue(arg) 
      elif(arg.__class__ == ParameterVector):
         result=self.setGroupValue(arg) 
      return result

    def setValueV2(self,arg):
      result=False
      if(type(arg)==types.IntType):
         if((self.getType()==CCopasiParameter.Type_INT) or (arg < 0)):
           result=self.setIntValue(arg)
         else:
           result=self.setUIntValue(arg) 
      elif(type(arg)==types.FloatType):
         result=self.setDblValue(arg) 
      elif(type(arg)==types.BooleanType):
         result=self.setBoolValue(arg) 
      elif(type(arg)==types.StringType):
         result=self.setStringValue(arg) 
      elif(arg.__class__==CRegisteredCommonName):
         result=self.setCNValue(arg) 
      elif(arg.__class__ == ParameterVector):
         result=self.setGroupValue(arg) 
      return result

    def getValue(self):
      value=None
      if(self.getType()==CCopasiParameter.Type_DOUBLE):
        value=self.getDblValue()
      if(self.getType()==CCopasiParameter.Type_UDOUBLE):
        value=self.getUDblValue()
      if(self.getType()==CCopasiParameter.Type_INT):
        value=self.getIntValue()
      if(self.getType()==CCopasiParameter.Type_UINT):
        value=self.getUIntValue()
      if(self.getType()==CCopasiParameter.Type_BOOL):
        value=self.getBoolValue()
      if(self.getType()==CCopasiParameter.Type_GROUP):
        value=self.getGroupValue()
      if(self.getType()==CCopasiParameter.Type_STRING):
        value=self.getStringValue()
      if(self.getType()==CCopasiParameter.Type_KEY):
        value=self.getKeyValue()
      if(self.getType()==CCopasiParameter.Type_FILE):
        value=self.getFileValue()
      if(self.getType()==CCopasiParameter.Type_CN):
        value=self.getCNValue()
      return value            


# Register CCopasiParameter in _COPASI:
_COPASI.CCopasiParameter_swigregister(CCopasiParameter)
class CProcessReportItem(CCopasiParameter):
    r"""Proxy of C++ CProcessReportItem class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CProcessReportItem self, std::string const & name, CCopasiParameter::Type const & type, void const * pValue, void const * pEndValue=None) -> CProcessReportItem
        __init__(CProcessReportItem self, CProcessReportItem src) -> CProcessReportItem
        """
        _COPASI.CProcessReportItem_swiginit(self, _COPASI.new_CProcessReportItem(*args))
    __swig_destroy__ = _COPASI.delete_CProcessReportItem

    def getEndValuePointer(self):
        r"""getEndValuePointer(CProcessReportItem self) -> void *"""
        return _COPASI.CProcessReportItem_getEndValuePointer(self)

    def hasEndValue(self):
        r"""hasEndValue(CProcessReportItem self) -> bool const &"""
        return _COPASI.CProcessReportItem_hasEndValue(self)

# Register CProcessReportItem in _COPASI:
_COPASI.CProcessReportItem_swigregister(CProcessReportItem)
class CProcessReport(object):
    r"""Proxy of C++ CProcessReport class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, maxTime=0):
        r"""__init__(CProcessReport self, unsigned int const & maxTime=0) -> CProcessReport"""
        if self.__class__ == CProcessReport:
            _self = None
        else:
            _self = self
        _COPASI.CProcessReport_swiginit(self, _COPASI.new_CProcessReport(_self, maxTime))
    __swig_destroy__ = _COPASI.delete_CProcessReport

    def progress(self):
        r"""progress(CProcessReport self) -> bool"""
        return _COPASI.CProcessReport_progress(self)

    def progressItem(self, handle):
        r"""progressItem(CProcessReport self, size_t const & handle) -> bool"""
        return _COPASI.CProcessReport_progressItem(self, handle)

    def proceed(self):
        r"""proceed(CProcessReport self) -> bool"""
        return _COPASI.CProcessReport_proceed(self)

    def reset(self):
        r"""reset(CProcessReport self) -> bool"""
        return _COPASI.CProcessReport_reset(self)

    def resetItem(self, handle):
        r"""resetItem(CProcessReport self, size_t const & handle) -> bool"""
        return _COPASI.CProcessReport_resetItem(self, handle)

    def finish(self):
        r"""finish(CProcessReport self) -> bool"""
        return _COPASI.CProcessReport_finish(self)

    def addItem(self, *args):
        r"""
        addItem(CProcessReport self, std::string const & name, CCopasiParameter::Type const & type, void const * pValue, void const * pEndValue=None) -> size_t
        addItem(CProcessReport self, std::string const & name, std::string const & value, std::string const * pEndValue=None) -> size_t
        addItem(CProcessReport self, std::string const & name, int const & value, int const * pEndValue=None) -> size_t
        addItem(CProcessReport self, std::string const & name, unsigned int const & value, unsigned int const * pEndValue=None) -> size_t
        addItem(CProcessReport self, std::string const & name, double const & value, double const * pEndValue=None) -> size_t
        """
        return _COPASI.CProcessReport_addItem(self, *args)

    def finishItem(self, handle):
        r"""finishItem(CProcessReport self, size_t const & handle) -> bool"""
        return _COPASI.CProcessReport_finishItem(self, handle)

    def isValidHandle(self, handle):
        r"""isValidHandle(CProcessReport self, size_t const handle) -> bool"""
        return _COPASI.CProcessReport_isValidHandle(self, handle)

    def setName(self, name):
        r"""setName(CProcessReport self, std::string const & name) -> bool"""
        return _COPASI.CProcessReport_setName(self, name)

    def setIgnoreStop(self, ignoreStop=True):
        r"""setIgnoreStop(CProcessReport self, bool const & ignoreStop=True)"""
        return _COPASI.CProcessReport_setIgnoreStop(self, ignoreStop)

    def getIgnoreStop(self):
        r"""getIgnoreStop(CProcessReport self) -> bool const &"""
        return _COPASI.CProcessReport_getIgnoreStop(self)

    @staticmethod
    def getValue(*args):
        r"""
        getValue(double const * pValue) -> double
        getValue(int const * pValue) -> int
        getValue(unsigned int const * pValue) -> unsigned int
        getValue(std::string const * pValue) -> std::string
        """
        return _COPASI.CProcessReport_getValue(*args)

    @staticmethod
    def getStringValue(pValue):
        r"""getStringValue(void const * pValue) -> std::string"""
        return _COPASI.CProcessReport_getStringValue(pValue)

    @staticmethod
    def getDoubleValue(pValue):
        r"""getDoubleValue(void const * pValue) -> double"""
        return _COPASI.CProcessReport_getDoubleValue(pValue)

    @staticmethod
    def getIntValue(pValue):
        r"""getIntValue(void const * pValue) -> int"""
        return _COPASI.CProcessReport_getIntValue(pValue)

    @staticmethod
    def getUIntValue(pValue):
        r"""getUIntValue(void const * pValue) -> unsigned int"""
        return _COPASI.CProcessReport_getUIntValue(pValue)
    def __disown__(self):
        self.this.disown()
        _COPASI.disown_CProcessReport(self)
        return weakref.proxy(self)

# Register CProcessReport in _COPASI:
_COPASI.CProcessReport_swigregister(CProcessReport)
class CProcessReportLevel(object):
    r"""Proxy of C++ CProcessReportLevel class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, pInterface=None):
        r"""__init__(CProcessReportLevel self, CProcessReport pInterface=None) -> CProcessReportLevel"""
        _COPASI.CProcessReportLevel_swiginit(self, _COPASI.new_CProcessReportLevel(pInterface))
    __swig_destroy__ = _COPASI.delete_CProcessReportLevel

    def __nonzero__(self):
        return _COPASI.CProcessReportLevel___nonzero__(self)
    __bool__ = __nonzero__



    def toProcessReportPtr(self):
        r"""toProcessReportPtr(CProcessReportLevel self) -> CProcessReport"""
        return _COPASI.CProcessReportLevel_toProcessReportPtr(self)

    def progress(self):
        r"""progress(CProcessReportLevel self) -> bool"""
        return _COPASI.CProcessReportLevel_progress(self)

    def progressItem(self, handle):
        r"""progressItem(CProcessReportLevel self, size_t const & handle) -> bool"""
        return _COPASI.CProcessReportLevel_progressItem(self, handle)

    def resetItem(self, handle):
        r"""resetItem(CProcessReportLevel self, size_t const & handle) -> bool"""
        return _COPASI.CProcessReportLevel_resetItem(self, handle)

    def finish(self):
        r"""finish(CProcessReportLevel self) -> bool"""
        return _COPASI.CProcessReportLevel_finish(self)

    def finishItem(self, handle):
        r"""finishItem(CProcessReportLevel self, size_t const & handle) -> bool"""
        return _COPASI.CProcessReportLevel_finishItem(self, handle)

    def proceed(self):
        r"""proceed(CProcessReportLevel self) -> bool"""
        return _COPASI.CProcessReportLevel_proceed(self)

    def setName(self, name):
        r"""setName(CProcessReportLevel self, std::string const & name) -> bool"""
        return _COPASI.CProcessReportLevel_setName(self, name)

    def addItem(self, *args):
        r"""
        addItem(CProcessReportLevel self, std::string const & name, std::string const & value, std::string const * pEndValue=None) -> size_t
        addItem(CProcessReportLevel self, std::string const & name, int const & value, int const * pEndValue=None) -> size_t
        addItem(CProcessReportLevel self, std::string const & name, unsigned int const & value, unsigned int const * pEndValue=None) -> size_t
        addItem(CProcessReportLevel self, std::string const & name, double const & value, double const * pEndValue=None) -> size_t
        """
        return _COPASI.CProcessReportLevel_addItem(self, *args)

    def setIgnoreStop(self, ignoreStop=True):
        r"""setIgnoreStop(CProcessReportLevel self, bool const & ignoreStop=True)"""
        return _COPASI.CProcessReportLevel_setIgnoreStop(self, ignoreStop)

# Register CProcessReportLevel in _COPASI:
_COPASI.CProcessReportLevel_swigregister(CProcessReportLevel)
class CCopasiParameterGroup(CCopasiParameter):
    r"""Proxy of C++ CCopasiParameterGroup class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CCopasiParameterGroup self, CCopasiParameterGroup src, CDataContainer pParent=None) -> CCopasiParameterGroup
        __init__(CCopasiParameterGroup self, std::string const & name, CDataContainer pParent=static_cast< CDataContainer * >((void *) 0), std::string const & objectType="ParameterGroup") -> CCopasiParameterGroup
        """
        _COPASI.CCopasiParameterGroup_swiginit(self, _COPASI.new_CCopasiParameterGroup(*args))
    __swig_destroy__ = _COPASI.delete_CCopasiParameterGroup

    def getObject(self, cn):
        r"""getObject(CCopasiParameterGroup self, CCommonName cn) -> CObjectInterface"""
        return _COPASI.CCopasiParameterGroup_getObject(self, cn)

    def elevateChildren(self):
        r"""elevateChildren(CCopasiParameterGroup self) -> bool"""
        return _COPASI.CCopasiParameterGroup_elevateChildren(self)

    def addParameterCopy(self, parameter):
        r"""addParameterCopy(CCopasiParameterGroup self, CCopasiParameter parameter) -> bool"""
        return _COPASI.CCopasiParameterGroup_addParameterCopy(self, parameter)

    def addGroup(self, name):
        r"""addGroup(CCopasiParameterGroup self, std::string const & name) -> bool"""
        return _COPASI.CCopasiParameterGroup_addGroup(self, name)

    def assertGroup(self, *args):
        r"""assertGroup(CCopasiParameterGroup self, std::string const & name, CCopasiParameter::UserInterfaceFlag const & flag=CCopasiParameter::UserInterfaceFlag::All) -> CCopasiParameterGroup"""
        return _COPASI.CCopasiParameterGroup_assertGroup(self, *args)

    def removeParameter(self, *args):
        r"""
        removeParameter(CCopasiParameterGroup self, std::string const & name) -> bool
        removeParameter(CCopasiParameterGroup self, size_t const & index) -> bool
        removeParameter(CCopasiParameterGroup self, CCopasiParameter pParameter) -> bool
        """
        return _COPASI.CCopasiParameterGroup_removeParameter(self, *args)

    def getParameter(self, *args):
        r"""
        getParameter(CCopasiParameterGroup self, std::string name) -> CCopasiParameter
        getParameter(CCopasiParameterGroup self, size_t const & index) -> CCopasiParameter
        """
        return _COPASI.CCopasiParameterGroup_getParameter(self, *args)

    def getGroup(self, *args):
        r"""
        getGroup(CCopasiParameterGroup self, std::string const & name) -> CCopasiParameterGroup
        getGroup(CCopasiParameterGroup self, size_t const & index) -> CCopasiParameterGroup
        """
        return _COPASI.CCopasiParameterGroup_getGroup(self, *args)

    def getType(self, *args):
        r"""
        getType(CCopasiParameterGroup self, std::string const & name) -> CCopasiParameter::Type
        getType(CCopasiParameterGroup self, size_t const & index) -> CCopasiParameter::Type
        """
        return _COPASI.CCopasiParameterGroup_getType(self, *args)

    def getKeyForParameter(self, *args):
        r"""
        getKeyForParameter(CCopasiParameterGroup self, std::string const & name) -> std::string
        getKeyForParameter(CCopasiParameterGroup self, size_t const & index) -> std::string
        """
        return _COPASI.CCopasiParameterGroup_getKeyForParameter(self, *args)

    def getName(self, index):
        r"""getName(CCopasiParameterGroup self, size_t const & index) -> std::string const &"""
        return _COPASI.CCopasiParameterGroup_getName(self, index)

    def size(self, *args):
        r"""size(CCopasiParameterGroup self, CCopasiParameter::UserInterfaceFlag const & require=UserInterfaceFlag::None, CCopasiParameter::UserInterfaceFlag const & exclude=UserInterfaceFlag::None) -> size_t"""
        return _COPASI.CCopasiParameterGroup_size(self, *args)

    def clear(self):
        r"""clear(CCopasiParameterGroup self)"""
        return _COPASI.CCopasiParameterGroup_clear(self)

    def getIndex(self, *args):
        r"""
        getIndex(CCopasiParameterGroup self, CDataObject pObject) -> size_t
        getIndex(CCopasiParameterGroup self, std::string const & name) -> size_t
        """
        return _COPASI.CCopasiParameterGroup_getIndex(self, *args)

    def getUniqueParameterName(self, pParameter):
        r"""getUniqueParameterName(CCopasiParameterGroup self, CCopasiParameter pParameter) -> std::string"""
        return _COPASI.CCopasiParameterGroup_getUniqueParameterName(self, pParameter)

    def addParameter(self, *args):
        r"""
        addParameter(CCopasiParameterGroup self, std::string const & name, CCopasiParameter::Type const type, CCopasiParameter::UserInterfaceFlag const & flag=CCopasiParameter::UserInterfaceFlag::All) -> bool
        addParameter(CCopasiParameterGroup self, CCopasiParameter pParameter)
        """
        return _COPASI.CCopasiParameterGroup_addParameter(self, *args)

    def getElementTemplates(self):
        r"""getElementTemplates(CCopasiParameterGroup self) -> CCopasiParameterGroup"""
        return _COPASI.CCopasiParameterGroup_getElementTemplates(self)

    def haveTemplate(self):
        r"""haveTemplate(CCopasiParameterGroup self) -> bool"""
        return _COPASI.CCopasiParameterGroup_haveTemplate(self)

    def setUserInterfaceFlag(self, flag):
        r"""setUserInterfaceFlag(CCopasiParameterGroup self, CCopasiParameter::UserInterfaceFlag const & flag)"""
        return _COPASI.CCopasiParameterGroup_setUserInterfaceFlag(self, flag)

# Register CCopasiParameterGroup in _COPASI:
_COPASI.CCopasiParameterGroup_swigregister(CCopasiParameterGroup)
class CModelParameter(CUndoObjectInterface):
    r"""Proxy of C++ CModelParameter class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Type_Model = _COPASI.CModelParameter_Type_Model
    
    Type_Compartment = _COPASI.CModelParameter_Type_Compartment
    
    Type_Species = _COPASI.CModelParameter_Type_Species
    
    Type_ModelValue = _COPASI.CModelParameter_Type_ModelValue
    
    Type_ReactionParameter = _COPASI.CModelParameter_Type_ReactionParameter
    
    Type_Reaction = _COPASI.CModelParameter_Type_Reaction
    
    Type_Group = _COPASI.CModelParameter_Type_Group
    
    Type_Set = _COPASI.CModelParameter_Type_Set
    
    Type_unknown = _COPASI.CModelParameter_Type_unknown
    
    Type___SIZE = _COPASI.CModelParameter_Type___SIZE
    
    CompareResult_Obsolete = _COPASI.CModelParameter_CompareResult_Obsolete
    
    CompareResult_Missing = _COPASI.CModelParameter_CompareResult_Missing
    
    CompareResult_Modified = _COPASI.CModelParameter_CompareResult_Modified
    
    CompareResult_Conflict = _COPASI.CModelParameter_CompareResult_Conflict
    
    CompareResult_Identical = _COPASI.CModelParameter_CompareResult_Identical
    
    CompareResult___SIZE = _COPASI.CModelParameter_CompareResult___SIZE
    

    @staticmethod
    def fromData(data, pParent):
        r"""fromData(CData data, CUndoObjectInterface pParent) -> CModelParameter"""
        return _COPASI.CModelParameter_fromData(data, pParent)

    def destruct(self):
        r"""destruct(CModelParameter self)"""
        return _COPASI.CModelParameter_destruct(self)

    def createUndoData(self, *args):
        r"""createUndoData(CModelParameter self, CUndoData undoData, CUndoData::Type const & type, CData oldData=CData(), CCore::Framework const & framework=ParticleNumbers)"""
        return _COPASI.CModelParameter_createUndoData(self, *args)

    def __init__(self, *args):
        r"""
        __init__(CModelParameter self, CModelParameterGroup pParent, CModelParameter::Type const & type) -> CModelParameter
        __init__(CModelParameter self, CModelParameter src, CModelParameterGroup pParent) -> CModelParameter
        """
        _COPASI.CModelParameter_swiginit(self, _COPASI.new_CModelParameter(*args))
    __swig_destroy__ = _COPASI.delete_CModelParameter

    def toSet(self, *args):
        r"""
        toSet(CModelParameter self) -> CModelParameterSet
        toSet(CModelParameter self) -> CModelParameterSet
        """
        return _COPASI.CModelParameter_toSet(self, *args)

    def __lt__(self, rhs):
        r"""__lt__(CModelParameter self, CModelParameter rhs) -> bool"""
        return _COPASI.CModelParameter___lt__(self, rhs)

    def setParent(self, pParent):
        r"""setParent(CModelParameter self, CModelParameterGroup pParent)"""
        return _COPASI.CModelParameter_setParent(self, pParent)

    def getParent(self):
        r"""getParent(CModelParameter self) -> CModelParameterGroup"""
        return _COPASI.CModelParameter_getParent(self)

    def getType(self):
        r"""getType(CModelParameter self) -> CModelParameter::Type const &"""
        return _COPASI.CModelParameter_getType(self)

    def getUnit(self, framework):
        r"""getUnit(CModelParameter self, CCore::Framework const & framework) -> CValidatedUnit"""
        return _COPASI.CModelParameter_getUnit(self, framework)

    def setCN(self, cn):
        r"""setCN(CModelParameter self, CCommonName cn)"""
        return _COPASI.CModelParameter_setCN(self, cn)

    def getCN(self):
        r"""getCN(CModelParameter self) -> CCommonName"""
        return _COPASI.CModelParameter_getCN(self)

    def setSimulationType(self, simulationType):
        r"""setSimulationType(CModelParameter self, CModelEntity::Status const & simulationType) -> bool"""
        return _COPASI.CModelParameter_setSimulationType(self, simulationType)

    def getSimulationType(self):
        r"""getSimulationType(CModelParameter self) -> CModelEntity::Status const &"""
        return _COPASI.CModelParameter_getSimulationType(self)

    def setInitialExpression(self, initialExpression):
        r"""setInitialExpression(CModelParameter self, std::string const & initialExpression)"""
        return _COPASI.CModelParameter_setInitialExpression(self, initialExpression)

    def getInitialExpression(self):
        r"""getInitialExpression(CModelParameter self) -> std::string"""
        return _COPASI.CModelParameter_getInitialExpression(self)

    def getInitialExpressionPtr(self):
        r"""getInitialExpressionPtr(CModelParameter self) -> CExpression"""
        return _COPASI.CModelParameter_getInitialExpressionPtr(self)

    def setCompareResult(self, compareResult):
        r"""setCompareResult(CModelParameter self, CModelParameter::CompareResult const & compareResult)"""
        return _COPASI.CModelParameter_setCompareResult(self, compareResult)

    def getCompareResult(self):
        r"""getCompareResult(CModelParameter self) -> CModelParameter::CompareResult const &"""
        return _COPASI.CModelParameter_getCompareResult(self)

    def getIndex(self):
        r"""getIndex(CModelParameter self) -> size_t"""
        return _COPASI.CModelParameter_getIndex(self)

    def isReadOnly(self):
        r"""isReadOnly(CModelParameter self) -> bool"""
        return _COPASI.CModelParameter_isReadOnly(self)

    def getObject(self):
        r"""getObject(CModelParameter self) -> CDataObject"""
        return _COPASI.CModelParameter_getObject(self)

    def getSet(self):
        r"""getSet(CModelParameter self) -> CModelParameterSet"""
        return _COPASI.CModelParameter_getSet(self)

    def getModel(self):
        r"""getModel(CModelParameter self) -> CModel"""
        return _COPASI.CModelParameter_getModel(self)

    def isInitialExpressionValid(self):
        r"""isInitialExpressionValid(CModelParameter self) -> bool"""
        return _COPASI.CModelParameter_isInitialExpressionValid(self)

    def getName(self):
        r"""getName(CModelParameter self) -> std::string"""
        return _COPASI.CModelParameter_getName(self)

    def compile(self):
        r"""compile(CModelParameter self)"""
        return _COPASI.CModelParameter_compile(self)

    def updateModel(self):
        r"""updateModel(CModelParameter self) -> bool"""
        return _COPASI.CModelParameter_updateModel(self)

    def refreshFromModel(self, modifyExistence):
        r"""refreshFromModel(CModelParameter self, bool const & modifyExistence) -> bool"""
        return _COPASI.CModelParameter_refreshFromModel(self, modifyExistence)

    def getNumChildren(self):
        r"""getNumChildren(CModelParameter self) -> size_t"""
        return _COPASI.CModelParameter_getNumChildren(self)

    def getChild(self, index):
        r"""getChild(CModelParameter self, size_t const & index) -> CModelParameter"""
        return _COPASI.CModelParameter_getChild(self, index)

    def asGroup(self):
        r"""asGroup(CModelParameter self) -> CModelParameterGroup"""
        return _COPASI.CModelParameter_asGroup(self)

    def asSpecies(self):
        r"""asSpecies(CModelParameter self) -> CModelParameterSpecies"""
        return _COPASI.CModelParameter_asSpecies(self)

    def asCompartment(self):
        r"""asCompartment(CModelParameter self) -> CModelParameterCompartment"""
        return _COPASI.CModelParameter_asCompartment(self)

    def asSet(self):
        r"""asSet(CModelParameter self) -> CModelParameterSet"""
        return _COPASI.CModelParameter_asSet(self)

    def asReactionParameter(self):
        r"""asReactionParameter(CModelParameter self) -> CModelParameterReactionParameter"""
        return _COPASI.CModelParameter_asReactionParameter(self)

    def setValue(self, *args):
        r"""
        setValue(CModelParameter self, double value, int framework)
        setValue(CModelParameter self, double value)
        """
        return _COPASI.CModelParameter_setValue(self, *args)

    def getValue(self, *args):
        r"""
        getValue(CModelParameter self, int framework) -> double
        getValue(CModelParameter self) -> double
        """
        return _COPASI.CModelParameter_getValue(self, *args)

    def hasValue(self, *args):
        r"""
        hasValue(CModelParameter self, int framework) -> bool
        hasValue(CModelParameter self) -> bool
        """
        return _COPASI.CModelParameter_hasValue(self, *args)

# Register CModelParameter in _COPASI:
_COPASI.CModelParameter_swigregister(CModelParameter)
CModelParameter.CompareResultNames = _COPASI.cvar.CModelParameter_CompareResultNames

class CModelParameterCompartment(CModelParameter):
    r"""Proxy of C++ CModelParameterCompartment class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CModelParameterCompartment self, CModelParameterGroup pParent, CModelParameter::Type const & type=Compartment) -> CModelParameterCompartment
        __init__(CModelParameterCompartment self, CModelParameterCompartment src, CModelParameterGroup pParent) -> CModelParameterCompartment
        """
        _COPASI.CModelParameterCompartment_swiginit(self, _COPASI.new_CModelParameterCompartment(*args))
    __swig_destroy__ = _COPASI.delete_CModelParameterCompartment

    def setValue(self, value, framework, updateModelIfActive=True):
        r"""setValue(CModelParameterCompartment self, double const & value, CCore::Framework const & framework, bool updateModelIfActive=True)"""
        return _COPASI.CModelParameterCompartment_setValue(self, value, framework, updateModelIfActive)

    def addSpecies(self, pSpecies):
        r"""addSpecies(CModelParameterCompartment self, CModelParameterSpecies pSpecies)"""
        return _COPASI.CModelParameterCompartment_addSpecies(self, pSpecies)

    def removeSpecies(self, pSpecies):
        r"""removeSpecies(CModelParameterCompartment self, CModelParameterSpecies pSpecies)"""
        return _COPASI.CModelParameterCompartment_removeSpecies(self, pSpecies)

# Register CModelParameterCompartment in _COPASI:
_COPASI.CModelParameterCompartment_swigregister(CModelParameterCompartment)
class CModelParameterSpecies(CModelParameter):
    r"""Proxy of C++ CModelParameterSpecies class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def createUndoData(self, *args):
        r"""createUndoData(CModelParameterSpecies self, CUndoData undoData, CUndoData::Type const & type, CData oldData=CData(), CCore::Framework const & framework=ParticleNumbers)"""
        return _COPASI.CModelParameterSpecies_createUndoData(self, *args)

    def __init__(self, *args):
        r"""
        __init__(CModelParameterSpecies self, CModelParameterGroup pParent, CModelParameter::Type const & type=Species) -> CModelParameterSpecies
        __init__(CModelParameterSpecies self, CModelParameterSpecies src, CModelParameterGroup pParent) -> CModelParameterSpecies
        """
        _COPASI.CModelParameterSpecies_swiginit(self, _COPASI.new_CModelParameterSpecies(*args))
    __swig_destroy__ = _COPASI.delete_CModelParameterSpecies

    def getName(self):
        r"""getName(CModelParameterSpecies self) -> std::string"""
        return _COPASI.CModelParameterSpecies_getName(self)

    def compile(self):
        r"""compile(CModelParameterSpecies self)"""
        return _COPASI.CModelParameterSpecies_compile(self)

    def setCN(self, cn):
        r"""setCN(CModelParameterSpecies self, CCommonName cn)"""
        return _COPASI.CModelParameterSpecies_setCN(self, cn)

    def setValue(self, value, framework, updateModelIfActive=True):
        r"""setValue(CModelParameterSpecies self, double const & value, CCore::Framework const & framework, bool updateModelIfActive=True)"""
        return _COPASI.CModelParameterSpecies_setValue(self, value, framework, updateModelIfActive)

    def getValue(self, framework):
        r"""getValue(CModelParameterSpecies self, CCore::Framework const & framework) -> double const &"""
        return _COPASI.CModelParameterSpecies_getValue(self, framework)

    def updateModel(self):
        r"""updateModel(CModelParameterSpecies self) -> bool"""
        return _COPASI.CModelParameterSpecies_updateModel(self)

# Register CModelParameterSpecies in _COPASI:
_COPASI.CModelParameterSpecies_swigregister(CModelParameterSpecies)
class CModelParameterReactionParameter(CModelParameter):
    r"""Proxy of C++ CModelParameterReactionParameter class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getReactionCN(reactionParameterCN):
        r"""getReactionCN(CCommonName reactionParameterCN) -> CCommonName"""
        return _COPASI.CModelParameterReactionParameter_getReactionCN(reactionParameterCN)

    def __init__(self, *args):
        r"""
        __init__(CModelParameterReactionParameter self, CModelParameterGroup pParent, CModelParameter::Type const & type=ReactionParameter) -> CModelParameterReactionParameter
        __init__(CModelParameterReactionParameter self, CModelParameterReactionParameter src, CModelParameterGroup pParent) -> CModelParameterReactionParameter
        """
        _COPASI.CModelParameterReactionParameter_swiginit(self, _COPASI.new_CModelParameterReactionParameter(*args))
    __swig_destroy__ = _COPASI.delete_CModelParameterReactionParameter

    def compile(self):
        r"""compile(CModelParameterReactionParameter self)"""
        return _COPASI.CModelParameterReactionParameter_compile(self)

    def getReaction(self):
        r"""getReaction(CModelParameterReactionParameter self) -> CReaction"""
        return _COPASI.CModelParameterReactionParameter_getReaction(self)

    def setGlobalQuantityCN(self, globalQuantityCN):
        r"""setGlobalQuantityCN(CModelParameterReactionParameter self, std::string const & globalQuantityCN)"""
        return _COPASI.CModelParameterReactionParameter_setGlobalQuantityCN(self, globalQuantityCN)

    def getGlobalQuantityCN(self):
        r"""getGlobalQuantityCN(CModelParameterReactionParameter self) -> CRegisteredCommonName"""
        return _COPASI.CModelParameterReactionParameter_getGlobalQuantityCN(self)

# Register CModelParameterReactionParameter in _COPASI:
_COPASI.CModelParameterReactionParameter_swigregister(CModelParameterReactionParameter)
class CModelParameterGroup(CModelParameter):
    r"""Proxy of C++ CModelParameterGroup class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def insert(self, data):
        r"""insert(CModelParameterGroup self, CData data) -> CUndoObjectInterface"""
        return _COPASI.CModelParameterGroup_insert(self, data)

    def updateIndex(self, index, pUndoObject):
        r"""updateIndex(CModelParameterGroup self, size_t const & index, CUndoObjectInterface pUndoObject)"""
        return _COPASI.CModelParameterGroup_updateIndex(self, index, pUndoObject)

    def createUndoData(self, *args):
        r"""createUndoData(CModelParameterGroup self, CUndoData undoData, CUndoData::Type const & type, CData oldData=CData(), CCore::Framework const & framework=ParticleNumbers)"""
        return _COPASI.CModelParameterGroup_createUndoData(self, *args)

    def __init__(self, *args):
        r"""
        __init__(CModelParameterGroup self, CModelParameterGroup pParent, CModelParameter::Type const & type=Group) -> CModelParameterGroup
        __init__(CModelParameterGroup self, CModelParameterGroup src, CModelParameterGroup pParent, bool const & createMissing) -> CModelParameterGroup
        """
        _COPASI.CModelParameterGroup_swiginit(self, _COPASI.new_CModelParameterGroup(*args))
    __swig_destroy__ = _COPASI.delete_CModelParameterGroup

    def add(self, *args):
        r"""
        add(CModelParameterGroup self, CModelParameter::Type const & type) -> CModelParameter
        add(CModelParameterGroup self, CModelParameter pModelParameter)
        """
        return _COPASI.CModelParameterGroup_add(self, *args)

    def remove(self, *args):
        r"""
        remove(CModelParameterGroup self, CModelParameter pModelParameter)
        remove(CModelParameterGroup self, size_t const & index)
        """
        return _COPASI.CModelParameterGroup_remove(self, *args)

    def size(self):
        r"""size(CModelParameterGroup self) -> size_t"""
        return _COPASI.CModelParameterGroup_size(self)

    def compile(self):
        r"""compile(CModelParameterGroup self)"""
        return _COPASI.CModelParameterGroup_compile(self)

    def clear(self):
        r"""clear(CModelParameterGroup self)"""
        return _COPASI.CModelParameterGroup_clear(self)

    def updateModel(self):
        r"""updateModel(CModelParameterGroup self) -> bool"""
        return _COPASI.CModelParameterGroup_updateModel(self)

    def refreshFromModel(self, modifyExistence):
        r"""refreshFromModel(CModelParameterGroup self, bool const & modifyExistence) -> bool"""
        return _COPASI.CModelParameterGroup_refreshFromModel(self, modifyExistence)

    def getModelParameter(self, *args):
        r"""
        getModelParameter(CModelParameterGroup self, std::string const & cn) -> CModelParameter
        getModelParameter(CModelParameterGroup self, std::string const & name, CModelParameter::Type const & type) -> CModelParameter
        """
        return _COPASI.CModelParameterGroup_getModelParameter(self, *args)

    def getNumChildren(self):
        r"""getNumChildren(CModelParameterGroup self) -> size_t"""
        return _COPASI.CModelParameterGroup_getNumChildren(self)

    def getChild(self, index):
        r"""getChild(CModelParameterGroup self, size_t const & index) -> CModelParameter"""
        return _COPASI.CModelParameterGroup_getChild(self, index)

    def getObjectUnit(self, pModelParameter):
        r"""getObjectUnit(CModelParameterGroup self, CModelParameter pModelParameter) -> CValidatedUnit"""
        return _COPASI.CModelParameterGroup_getObjectUnit(self, pModelParameter)

    def assignGroupContent(self, src, createMissing):
        r"""assignGroupContent(CModelParameterGroup self, CModelParameterGroup src, bool const & createMissing)"""
        return _COPASI.CModelParameterGroup_assignGroupContent(self, src, createMissing)

# Register CModelParameterGroup in _COPASI:
_COPASI.CModelParameterGroup_swigregister(CModelParameterGroup)
class CModelParameterSet(CDataContainer, CModelParameterGroup, CAnnotation):
    r"""Proxy of C++ CModelParameterSet class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def fromData(data, pParent):
        r"""fromData(CData data, CUndoObjectInterface pParent) -> CModelParameterSet"""
        return _COPASI.CModelParameterSet_fromData(data, pParent)

    def __init__(self, *args):
        r"""
        __init__(CModelParameterSet self, std::string const & name, CDataContainer pParent=static_cast< CDataContainer * >((void *) 0)) -> CModelParameterSet
        __init__(CModelParameterSet self, CModelParameterSet src, CDataContainer pParent, bool const & createMissing=False) -> CModelParameterSet
        """
        _COPASI.CModelParameterSet_swiginit(self, _COPASI.new_CModelParameterSet(*args))
    __swig_destroy__ = _COPASI.delete_CModelParameterSet

    def getCN(self):
        r"""getCN(CModelParameterSet self) -> CCommonName"""
        return _COPASI.CModelParameterSet_getCN(self)

    def toGroup(self, *args):
        r"""
        toGroup(CModelParameterSet self) -> CModelParameterGroup
        toGroup(CModelParameterSet self) -> CModelParameterGroup
        """
        return _COPASI.CModelParameterSet_toGroup(self, *args)

    def toSet(self, *args):
        r"""
        toSet(CModelParameterSet self) -> CModelParameterSet
        toSet(CModelParameterSet self) -> CModelParameterSet
        """
        return _COPASI.CModelParameterSet_toSet(self, *args)

    def getKey(self):
        r"""getKey(CModelParameterSet self) -> std::string const &"""
        return _COPASI.CModelParameterSet_getKey(self)

    def setObjectParent(self, pParent):
        r"""setObjectParent(CModelParameterSet self, CDataContainer pParent) -> bool"""
        return _COPASI.CModelParameterSet_setObjectParent(self, pParent)

    def getIndex(self):
        r"""getIndex(CModelParameterSet self) -> size_t"""
        return _COPASI.CModelParameterSet_getIndex(self)

    def getModel(self):
        r"""getModel(CModelParameterSet self) -> CModel"""
        return _COPASI.CModelParameterSet_getModel(self)

    def createFromModel(self):
        r"""createFromModel(CModelParameterSet self)"""
        return _COPASI.CModelParameterSet_createFromModel(self)

    def compareWithModel(self, framework):
        r"""compareWithModel(CModelParameterSet self, CCore::Framework const & framework) -> bool"""
        return _COPASI.CModelParameterSet_compareWithModel(self, framework)

    def getName(self):
        r"""getName(CModelParameterSet self) -> std::string"""
        return _COPASI.CModelParameterSet_getName(self)

    def updateModel(self):
        r"""updateModel(CModelParameterSet self) -> bool"""
        return _COPASI.CModelParameterSet_updateModel(self)

    def diff(self, other, framework, createMissing=False):
        r"""diff(CModelParameterSet self, CModelParameterSet other, CCore::Framework const & framework, bool const & createMissing=False) -> CModelParameter::CompareResult const"""
        return _COPASI.CModelParameterSet_diff(self, other, framework, createMissing)

    def isActive(self):
        r"""isActive(CModelParameterSet self) -> bool"""
        return _COPASI.CModelParameterSet_isActive(self)

    def assignSetContent(self, src, createMissing):
        r"""assignSetContent(CModelParameterSet self, CModelParameterSet src, bool const & createMissing)"""
        return _COPASI.CModelParameterSet_assignSetContent(self, src, createMissing)

    def add(self, *args):
        r"""
        add(CModelParameterSet self, int type) -> CModelParameter
        add(CModelParameterSet self, CModelParameter pModelParameter)
        """
        return _COPASI.CModelParameterSet_add(self, *args)

    def remove(self, *args):
        r"""
        remove(CModelParameterSet self, CModelParameter pModelParameter)
        remove(CModelParameterSet self, int index)
        """
        return _COPASI.CModelParameterSet_remove(self, *args)

    def size(self):
        r"""size(CModelParameterSet self) -> int"""
        return _COPASI.CModelParameterSet_size(self)

    def compile(self):
        r"""compile(CModelParameterSet self)"""
        return _COPASI.CModelParameterSet_compile(self)

    def clear(self):
        r"""clear(CModelParameterSet self)"""
        return _COPASI.CModelParameterSet_clear(self)

    def refreshFromModel(self, modifyExistence):
        r"""refreshFromModel(CModelParameterSet self, bool modifyExistence) -> bool"""
        return _COPASI.CModelParameterSet_refreshFromModel(self, modifyExistence)

    def getModelParameter(self, *args):
        r"""
        getModelParameter(CModelParameterSet self, std::string const & cn) -> CModelParameter
        getModelParameter(CModelParameterSet self, std::string const & name, int type) -> CModelParameter
        getModelParameter(CModelParameterSet self, int index) -> CModelParameter
        """
        return _COPASI.CModelParameterSet_getModelParameter(self, *args)

# Register CModelParameterSet in _COPASI:
_COPASI.CModelParameterSet_swigregister(CModelParameterSet)
class EventStdVector(object):
    r"""Proxy of C++ std::vector< CEvent * > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(EventStdVector self) -> SwigPyIterator"""
        return _COPASI.EventStdVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(EventStdVector self) -> bool"""
        return _COPASI.EventStdVector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(EventStdVector self) -> bool"""
        return _COPASI.EventStdVector___bool__(self)

    def __len__(self):
        r"""__len__(EventStdVector self) -> std::vector< CEvent * >::size_type"""
        return _COPASI.EventStdVector___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(EventStdVector self, std::vector< CEvent * >::difference_type i, std::vector< CEvent * >::difference_type j) -> EventStdVector"""
        return _COPASI.EventStdVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(EventStdVector self, std::vector< CEvent * >::difference_type i, std::vector< CEvent * >::difference_type j)
        __setslice__(EventStdVector self, std::vector< CEvent * >::difference_type i, std::vector< CEvent * >::difference_type j, EventStdVector v)
        """
        return _COPASI.EventStdVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(EventStdVector self, std::vector< CEvent * >::difference_type i, std::vector< CEvent * >::difference_type j)"""
        return _COPASI.EventStdVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(EventStdVector self, std::vector< CEvent * >::difference_type i)
        __delitem__(EventStdVector self, SWIGPY_SLICEOBJECT * slice)
        """
        return _COPASI.EventStdVector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(EventStdVector self, SWIGPY_SLICEOBJECT * slice) -> EventStdVector
        __getitem__(EventStdVector self, std::vector< CEvent * >::difference_type i) -> CEvent
        """
        return _COPASI.EventStdVector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(EventStdVector self, SWIGPY_SLICEOBJECT * slice, EventStdVector v)
        __setitem__(EventStdVector self, SWIGPY_SLICEOBJECT * slice)
        __setitem__(EventStdVector self, std::vector< CEvent * >::difference_type i, CEvent x)
        """
        return _COPASI.EventStdVector___setitem__(self, *args)

    def pop(self):
        r"""pop(EventStdVector self) -> CEvent"""
        return _COPASI.EventStdVector_pop(self)

    def append(self, x):
        r"""append(EventStdVector self, CEvent x)"""
        return _COPASI.EventStdVector_append(self, x)

    def empty(self):
        r"""empty(EventStdVector self) -> bool"""
        return _COPASI.EventStdVector_empty(self)

    def size(self):
        r"""size(EventStdVector self) -> std::vector< CEvent * >::size_type"""
        return _COPASI.EventStdVector_size(self)

    def swap(self, v):
        r"""swap(EventStdVector self, EventStdVector v)"""
        return _COPASI.EventStdVector_swap(self, v)

    def rbegin(self):
        r"""rbegin(EventStdVector self) -> std::vector< CEvent * >::reverse_iterator"""
        return _COPASI.EventStdVector_rbegin(self)

    def rend(self):
        r"""rend(EventStdVector self) -> std::vector< CEvent * >::reverse_iterator"""
        return _COPASI.EventStdVector_rend(self)

    def clear(self):
        r"""clear(EventStdVector self)"""
        return _COPASI.EventStdVector_clear(self)

    def get_allocator(self):
        r"""get_allocator(EventStdVector self) -> std::vector< CEvent * >::allocator_type"""
        return _COPASI.EventStdVector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(EventStdVector self)"""
        return _COPASI.EventStdVector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(EventStdVector self, std::vector< CEvent * >::iterator pos) -> std::vector< CEvent * >::iterator
        erase(EventStdVector self, std::vector< CEvent * >::iterator first, std::vector< CEvent * >::iterator last) -> std::vector< CEvent * >::iterator
        """
        return _COPASI.EventStdVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(EventStdVector self) -> EventStdVector
        __init__(EventStdVector self, EventStdVector other) -> EventStdVector
        __init__(EventStdVector self, std::vector< CEvent * >::size_type size) -> EventStdVector
        __init__(EventStdVector self, std::vector< CEvent * >::size_type size, CEvent value) -> EventStdVector
        """
        _COPASI.EventStdVector_swiginit(self, _COPASI.new_EventStdVector(*args))

    def push_back(self, x):
        r"""push_back(EventStdVector self, CEvent x)"""
        return _COPASI.EventStdVector_push_back(self, x)

    def front(self):
        r"""front(EventStdVector self) -> CEvent"""
        return _COPASI.EventStdVector_front(self)

    def back(self):
        r"""back(EventStdVector self) -> CEvent"""
        return _COPASI.EventStdVector_back(self)

    def assign(self, n, x):
        r"""assign(EventStdVector self, std::vector< CEvent * >::size_type n, CEvent x)"""
        return _COPASI.EventStdVector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(EventStdVector self, std::vector< CEvent * >::size_type new_size)
        resize(EventStdVector self, std::vector< CEvent * >::size_type new_size, CEvent x)
        """
        return _COPASI.EventStdVector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(EventStdVector self, std::vector< CEvent * >::iterator pos, CEvent x) -> std::vector< CEvent * >::iterator
        insert(EventStdVector self, std::vector< CEvent * >::iterator pos, std::vector< CEvent * >::size_type n, CEvent x)
        """
        return _COPASI.EventStdVector_insert(self, *args)

    def reserve(self, n):
        r"""reserve(EventStdVector self, std::vector< CEvent * >::size_type n)"""
        return _COPASI.EventStdVector_reserve(self, n)

    def capacity(self):
        r"""capacity(EventStdVector self) -> std::vector< CEvent * >::size_type"""
        return _COPASI.EventStdVector_capacity(self)
    __swig_destroy__ = _COPASI.delete_EventStdVector

# Register EventStdVector in _COPASI:
_COPASI.EventStdVector_swigregister(EventStdVector)
class EventVector(CDataContainer):
    r"""Proxy of C++ CDataVector< CEvent > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _COPASI.delete_EventVector

    def cleanup(self):
        r"""cleanup(EventVector self)"""
        return _COPASI.EventVector_cleanup(self)

    def addCopy(self, src):
        r"""addCopy(EventVector self, CEvent src) -> bool"""
        return _COPASI.EventVector_addCopy(self, src)

    def swap(self, indexFrom, indexTo):
        r"""swap(EventVector self, size_t const & indexFrom, size_t const & indexTo)"""
        return _COPASI.EventVector_swap(self, indexFrom, indexTo)

    def add(self, pObject, adopt=True):
        
        return _COPASI.EventVector_add(self, pObject, adopt)

    def getObject(self, name):
        r"""getObject(EventVector self, CCommonName name) -> CObjectInterface"""
        return _COPASI.EventVector_getObject(self, name)

    def size(self):
        r"""size(EventVector self) -> size_t"""
        return _COPASI.EventVector_size(self)

    def empty(self):
        r"""empty(EventVector self) -> bool"""
        return _COPASI.EventVector_empty(self)

    def clear(self):
        r"""clear(EventVector self)"""
        return _COPASI.EventVector_clear(self)

    def getIndex(self, pObject):
        r"""getIndex(EventVector self, CDataObject pObject) -> size_t"""
        return _COPASI.EventVector_getIndex(self, pObject)

    def remove(self, index):
        r"""remove(EventVector self, unsigned int index)"""
        return _COPASI.EventVector_remove(self, index)

    def get(self, index):
        r"""get(EventVector self, unsigned int index) -> CDataObject"""
        return _COPASI.EventVector_get(self, index)

    def addAndOwn(self, DISOWN):
        r"""addAndOwn(EventVector self, CEvent DISOWN) -> bool"""
        return _COPASI.EventVector_addAndOwn(self, DISOWN)

    def removeObject(self, pObject):
        r"""removeObject(EventVector self, CDataObject pObject) -> bool"""
        return _COPASI.EventVector_removeObject(self, pObject)

    def __len__(self):
        r"""__len__(EventVector self) -> size_t"""
        return _COPASI.EventVector___len__(self)

    def __getitem__(self, index):
        r"""__getitem__(EventVector self, unsigned int index) -> CDataObject"""
        return _COPASI.EventVector___getitem__(self, index)

# Register EventVector in _COPASI:
_COPASI.EventVector_swigregister(EventVector)
class EventVectorN(EventVector):
    r"""Proxy of C++ CDataVectorN< CEvent > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(EventVectorN self, std::string const & name="NoName", CDataContainer pParent=static_cast< CDataContainer * >((void *) 0)) -> EventVectorN
        __init__(EventVectorN self, EventVectorN src, CDataContainer pParent) -> EventVectorN
        """
        _COPASI.EventVectorN_swiginit(self, _COPASI.new_EventVectorN(*args))
    __swig_destroy__ = _COPASI.delete_EventVectorN

    def addCopy(self, src):
        r"""addCopy(EventVectorN self, CEvent src) -> bool"""
        return _COPASI.EventVectorN_addCopy(self, src)

    def add(self, pObject, adopt=True):
        
        return _COPASI.EventVectorN_add(self, pObject, adopt)

    def removeByName(self, name):
        r"""removeByName(EventVectorN self, std::string const & name)"""
        return _COPASI.EventVectorN_removeByName(self, name)

    def getObject(self, name):
        r"""getObject(EventVectorN self, CCommonName name) -> CObjectInterface"""
        return _COPASI.EventVectorN_getObject(self, name)

    def getIndexByName(self, name):
        r"""getIndexByName(EventVectorN self, std::string const & name) -> size_t"""
        return _COPASI.EventVectorN_getIndexByName(self, name)

    def createUniqueName(self, name):
        r"""createUniqueName(EventVectorN self, std::string & name)"""
        return _COPASI.EventVectorN_createUniqueName(self, name)

    def getByName(self, name):
        r"""getByName(EventVectorN self, std::string const & name) -> CDataObject"""
        return _COPASI.EventVectorN_getByName(self, name)

    def __getitem__(self, *args):
        r"""
        __getitem__(EventVectorN self, std::string const & name) -> CDataObject
        __getitem__(EventVectorN self, unsigned int index) -> CDataObject
        """
        return _COPASI.EventVectorN___getitem__(self, *args)

# Register EventVectorN in _COPASI:
_COPASI.EventVectorN_swigregister(EventVectorN)
class EventAssignmentStdVector(object):
    r"""Proxy of C++ std::vector< CEventAssignment * > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(EventAssignmentStdVector self) -> SwigPyIterator"""
        return _COPASI.EventAssignmentStdVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(EventAssignmentStdVector self) -> bool"""
        return _COPASI.EventAssignmentStdVector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(EventAssignmentStdVector self) -> bool"""
        return _COPASI.EventAssignmentStdVector___bool__(self)

    def __len__(self):
        r"""__len__(EventAssignmentStdVector self) -> std::vector< CEventAssignment * >::size_type"""
        return _COPASI.EventAssignmentStdVector___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(EventAssignmentStdVector self, std::vector< CEventAssignment * >::difference_type i, std::vector< CEventAssignment * >::difference_type j) -> EventAssignmentStdVector"""
        return _COPASI.EventAssignmentStdVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(EventAssignmentStdVector self, std::vector< CEventAssignment * >::difference_type i, std::vector< CEventAssignment * >::difference_type j)
        __setslice__(EventAssignmentStdVector self, std::vector< CEventAssignment * >::difference_type i, std::vector< CEventAssignment * >::difference_type j, EventAssignmentStdVector v)
        """
        return _COPASI.EventAssignmentStdVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(EventAssignmentStdVector self, std::vector< CEventAssignment * >::difference_type i, std::vector< CEventAssignment * >::difference_type j)"""
        return _COPASI.EventAssignmentStdVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(EventAssignmentStdVector self, std::vector< CEventAssignment * >::difference_type i)
        __delitem__(EventAssignmentStdVector self, SWIGPY_SLICEOBJECT * slice)
        """
        return _COPASI.EventAssignmentStdVector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(EventAssignmentStdVector self, SWIGPY_SLICEOBJECT * slice) -> EventAssignmentStdVector
        __getitem__(EventAssignmentStdVector self, std::vector< CEventAssignment * >::difference_type i) -> CEventAssignment
        """
        return _COPASI.EventAssignmentStdVector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(EventAssignmentStdVector self, SWIGPY_SLICEOBJECT * slice, EventAssignmentStdVector v)
        __setitem__(EventAssignmentStdVector self, SWIGPY_SLICEOBJECT * slice)
        __setitem__(EventAssignmentStdVector self, std::vector< CEventAssignment * >::difference_type i, CEventAssignment x)
        """
        return _COPASI.EventAssignmentStdVector___setitem__(self, *args)

    def pop(self):
        r"""pop(EventAssignmentStdVector self) -> CEventAssignment"""
        return _COPASI.EventAssignmentStdVector_pop(self)

    def append(self, x):
        r"""append(EventAssignmentStdVector self, CEventAssignment x)"""
        return _COPASI.EventAssignmentStdVector_append(self, x)

    def empty(self):
        r"""empty(EventAssignmentStdVector self) -> bool"""
        return _COPASI.EventAssignmentStdVector_empty(self)

    def size(self):
        r"""size(EventAssignmentStdVector self) -> std::vector< CEventAssignment * >::size_type"""
        return _COPASI.EventAssignmentStdVector_size(self)

    def swap(self, v):
        r"""swap(EventAssignmentStdVector self, EventAssignmentStdVector v)"""
        return _COPASI.EventAssignmentStdVector_swap(self, v)

    def rbegin(self):
        r"""rbegin(EventAssignmentStdVector self) -> std::vector< CEventAssignment * >::reverse_iterator"""
        return _COPASI.EventAssignmentStdVector_rbegin(self)

    def rend(self):
        r"""rend(EventAssignmentStdVector self) -> std::vector< CEventAssignment * >::reverse_iterator"""
        return _COPASI.EventAssignmentStdVector_rend(self)

    def clear(self):
        r"""clear(EventAssignmentStdVector self)"""
        return _COPASI.EventAssignmentStdVector_clear(self)

    def get_allocator(self):
        r"""get_allocator(EventAssignmentStdVector self) -> std::vector< CEventAssignment * >::allocator_type"""
        return _COPASI.EventAssignmentStdVector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(EventAssignmentStdVector self)"""
        return _COPASI.EventAssignmentStdVector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(EventAssignmentStdVector self, std::vector< CEventAssignment * >::iterator pos) -> std::vector< CEventAssignment * >::iterator
        erase(EventAssignmentStdVector self, std::vector< CEventAssignment * >::iterator first, std::vector< CEventAssignment * >::iterator last) -> std::vector< CEventAssignment * >::iterator
        """
        return _COPASI.EventAssignmentStdVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(EventAssignmentStdVector self) -> EventAssignmentStdVector
        __init__(EventAssignmentStdVector self, EventAssignmentStdVector other) -> EventAssignmentStdVector
        __init__(EventAssignmentStdVector self, std::vector< CEventAssignment * >::size_type size) -> EventAssignmentStdVector
        __init__(EventAssignmentStdVector self, std::vector< CEventAssignment * >::size_type size, CEventAssignment value) -> EventAssignmentStdVector
        """
        _COPASI.EventAssignmentStdVector_swiginit(self, _COPASI.new_EventAssignmentStdVector(*args))

    def push_back(self, x):
        r"""push_back(EventAssignmentStdVector self, CEventAssignment x)"""
        return _COPASI.EventAssignmentStdVector_push_back(self, x)

    def front(self):
        r"""front(EventAssignmentStdVector self) -> CEventAssignment"""
        return _COPASI.EventAssignmentStdVector_front(self)

    def back(self):
        r"""back(EventAssignmentStdVector self) -> CEventAssignment"""
        return _COPASI.EventAssignmentStdVector_back(self)

    def assign(self, n, x):
        r"""assign(EventAssignmentStdVector self, std::vector< CEventAssignment * >::size_type n, CEventAssignment x)"""
        return _COPASI.EventAssignmentStdVector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(EventAssignmentStdVector self, std::vector< CEventAssignment * >::size_type new_size)
        resize(EventAssignmentStdVector self, std::vector< CEventAssignment * >::size_type new_size, CEventAssignment x)
        """
        return _COPASI.EventAssignmentStdVector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(EventAssignmentStdVector self, std::vector< CEventAssignment * >::iterator pos, CEventAssignment x) -> std::vector< CEventAssignment * >::iterator
        insert(EventAssignmentStdVector self, std::vector< CEventAssignment * >::iterator pos, std::vector< CEventAssignment * >::size_type n, CEventAssignment x)
        """
        return _COPASI.EventAssignmentStdVector_insert(self, *args)

    def reserve(self, n):
        r"""reserve(EventAssignmentStdVector self, std::vector< CEventAssignment * >::size_type n)"""
        return _COPASI.EventAssignmentStdVector_reserve(self, n)

    def capacity(self):
        r"""capacity(EventAssignmentStdVector self) -> std::vector< CEventAssignment * >::size_type"""
        return _COPASI.EventAssignmentStdVector_capacity(self)
    __swig_destroy__ = _COPASI.delete_EventAssignmentStdVector

# Register EventAssignmentStdVector in _COPASI:
_COPASI.EventAssignmentStdVector_swigregister(EventAssignmentStdVector)
class EventAssignmentVector(CDataContainer):
    r"""Proxy of C++ CDataVector< CEventAssignment > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _COPASI.delete_EventAssignmentVector

    def cleanup(self):
        r"""cleanup(EventAssignmentVector self)"""
        return _COPASI.EventAssignmentVector_cleanup(self)

    def addCopy(self, src):
        r"""addCopy(EventAssignmentVector self, CEventAssignment src) -> bool"""
        return _COPASI.EventAssignmentVector_addCopy(self, src)

    def swap(self, indexFrom, indexTo):
        r"""swap(EventAssignmentVector self, size_t const & indexFrom, size_t const & indexTo)"""
        return _COPASI.EventAssignmentVector_swap(self, indexFrom, indexTo)

    def add(self, pObject, adopt=True):
        
        return _COPASI.EventAssignmentVector_add(self, pObject, adopt)

    def getObject(self, name):
        r"""getObject(EventAssignmentVector self, CCommonName name) -> CObjectInterface"""
        return _COPASI.EventAssignmentVector_getObject(self, name)

    def size(self):
        r"""size(EventAssignmentVector self) -> size_t"""
        return _COPASI.EventAssignmentVector_size(self)

    def empty(self):
        r"""empty(EventAssignmentVector self) -> bool"""
        return _COPASI.EventAssignmentVector_empty(self)

    def clear(self):
        r"""clear(EventAssignmentVector self)"""
        return _COPASI.EventAssignmentVector_clear(self)

    def getIndex(self, pObject):
        r"""getIndex(EventAssignmentVector self, CDataObject pObject) -> size_t"""
        return _COPASI.EventAssignmentVector_getIndex(self, pObject)

    def remove(self, index):
        r"""remove(EventAssignmentVector self, unsigned int index)"""
        return _COPASI.EventAssignmentVector_remove(self, index)

    def get(self, index):
        r"""get(EventAssignmentVector self, unsigned int index) -> CDataObject"""
        return _COPASI.EventAssignmentVector_get(self, index)

    def addAndOwn(self, DISOWN):
        r"""addAndOwn(EventAssignmentVector self, CEventAssignment DISOWN) -> bool"""
        return _COPASI.EventAssignmentVector_addAndOwn(self, DISOWN)

    def removeObject(self, pObject):
        r"""removeObject(EventAssignmentVector self, CDataObject pObject) -> bool"""
        return _COPASI.EventAssignmentVector_removeObject(self, pObject)

    def __len__(self):
        r"""__len__(EventAssignmentVector self) -> size_t"""
        return _COPASI.EventAssignmentVector___len__(self)

    def __getitem__(self, index):
        r"""__getitem__(EventAssignmentVector self, unsigned int index) -> CDataObject"""
        return _COPASI.EventAssignmentVector___getitem__(self, index)

# Register EventAssignmentVector in _COPASI:
_COPASI.EventAssignmentVector_swigregister(EventAssignmentVector)
class EventAssignmentVectorN(EventAssignmentVector):
    r"""Proxy of C++ CDataVectorN< CEventAssignment > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(EventAssignmentVectorN self, std::string const & name="NoName", CDataContainer pParent=static_cast< CDataContainer * >((void *) 0)) -> EventAssignmentVectorN
        __init__(EventAssignmentVectorN self, EventAssignmentVectorN src, CDataContainer pParent) -> EventAssignmentVectorN
        """
        _COPASI.EventAssignmentVectorN_swiginit(self, _COPASI.new_EventAssignmentVectorN(*args))
    __swig_destroy__ = _COPASI.delete_EventAssignmentVectorN

    def addCopy(self, src):
        r"""addCopy(EventAssignmentVectorN self, CEventAssignment src) -> bool"""
        return _COPASI.EventAssignmentVectorN_addCopy(self, src)

    def add(self, pObject, adopt=True):
        
        return _COPASI.EventAssignmentVectorN_add(self, pObject, adopt)

    def removeByName(self, name):
        r"""removeByName(EventAssignmentVectorN self, std::string const & name)"""
        return _COPASI.EventAssignmentVectorN_removeByName(self, name)

    def getObject(self, name):
        r"""getObject(EventAssignmentVectorN self, CCommonName name) -> CObjectInterface"""
        return _COPASI.EventAssignmentVectorN_getObject(self, name)

    def getIndexByName(self, name):
        r"""getIndexByName(EventAssignmentVectorN self, std::string const & name) -> size_t"""
        return _COPASI.EventAssignmentVectorN_getIndexByName(self, name)

    def createUniqueName(self, name):
        r"""createUniqueName(EventAssignmentVectorN self, std::string & name)"""
        return _COPASI.EventAssignmentVectorN_createUniqueName(self, name)

    def getByName(self, name):
        r"""getByName(EventAssignmentVectorN self, std::string const & name) -> CDataObject"""
        return _COPASI.EventAssignmentVectorN_getByName(self, name)

    def __getitem__(self, *args):
        r"""
        __getitem__(EventAssignmentVectorN self, std::string const & name) -> CDataObject
        __getitem__(EventAssignmentVectorN self, unsigned int index) -> CDataObject
        """
        return _COPASI.EventAssignmentVectorN___getitem__(self, *args)

# Register EventAssignmentVectorN in _COPASI:
_COPASI.EventAssignmentVectorN_swigregister(EventAssignmentVectorN)
class TaskStdVector(object):
    r"""Proxy of C++ std::vector< CCopasiTask * > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(TaskStdVector self) -> SwigPyIterator"""
        return _COPASI.TaskStdVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(TaskStdVector self) -> bool"""
        return _COPASI.TaskStdVector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(TaskStdVector self) -> bool"""
        return _COPASI.TaskStdVector___bool__(self)

    def __len__(self):
        r"""__len__(TaskStdVector self) -> std::vector< CCopasiTask * >::size_type"""
        return _COPASI.TaskStdVector___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(TaskStdVector self, std::vector< CCopasiTask * >::difference_type i, std::vector< CCopasiTask * >::difference_type j) -> TaskStdVector"""
        return _COPASI.TaskStdVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(TaskStdVector self, std::vector< CCopasiTask * >::difference_type i, std::vector< CCopasiTask * >::difference_type j)
        __setslice__(TaskStdVector self, std::vector< CCopasiTask * >::difference_type i, std::vector< CCopasiTask * >::difference_type j, TaskStdVector v)
        """
        return _COPASI.TaskStdVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(TaskStdVector self, std::vector< CCopasiTask * >::difference_type i, std::vector< CCopasiTask * >::difference_type j)"""
        return _COPASI.TaskStdVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(TaskStdVector self, std::vector< CCopasiTask * >::difference_type i)
        __delitem__(TaskStdVector self, SWIGPY_SLICEOBJECT * slice)
        """
        return _COPASI.TaskStdVector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(TaskStdVector self, SWIGPY_SLICEOBJECT * slice) -> TaskStdVector
        __getitem__(TaskStdVector self, std::vector< CCopasiTask * >::difference_type i) -> CCopasiTask
        """
        return _COPASI.TaskStdVector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(TaskStdVector self, SWIGPY_SLICEOBJECT * slice, TaskStdVector v)
        __setitem__(TaskStdVector self, SWIGPY_SLICEOBJECT * slice)
        __setitem__(TaskStdVector self, std::vector< CCopasiTask * >::difference_type i, CCopasiTask x)
        """
        return _COPASI.TaskStdVector___setitem__(self, *args)

    def pop(self):
        r"""pop(TaskStdVector self) -> CCopasiTask"""
        return _COPASI.TaskStdVector_pop(self)

    def append(self, x):
        r"""append(TaskStdVector self, CCopasiTask x)"""
        return _COPASI.TaskStdVector_append(self, x)

    def empty(self):
        r"""empty(TaskStdVector self) -> bool"""
        return _COPASI.TaskStdVector_empty(self)

    def size(self):
        r"""size(TaskStdVector self) -> std::vector< CCopasiTask * >::size_type"""
        return _COPASI.TaskStdVector_size(self)

    def swap(self, v):
        r"""swap(TaskStdVector self, TaskStdVector v)"""
        return _COPASI.TaskStdVector_swap(self, v)

    def rbegin(self):
        r"""rbegin(TaskStdVector self) -> std::vector< CCopasiTask * >::reverse_iterator"""
        return _COPASI.TaskStdVector_rbegin(self)

    def rend(self):
        r"""rend(TaskStdVector self) -> std::vector< CCopasiTask * >::reverse_iterator"""
        return _COPASI.TaskStdVector_rend(self)

    def clear(self):
        r"""clear(TaskStdVector self)"""
        return _COPASI.TaskStdVector_clear(self)

    def get_allocator(self):
        r"""get_allocator(TaskStdVector self) -> std::vector< CCopasiTask * >::allocator_type"""
        return _COPASI.TaskStdVector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(TaskStdVector self)"""
        return _COPASI.TaskStdVector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(TaskStdVector self, std::vector< CCopasiTask * >::iterator pos) -> std::vector< CCopasiTask * >::iterator
        erase(TaskStdVector self, std::vector< CCopasiTask * >::iterator first, std::vector< CCopasiTask * >::iterator last) -> std::vector< CCopasiTask * >::iterator
        """
        return _COPASI.TaskStdVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(TaskStdVector self) -> TaskStdVector
        __init__(TaskStdVector self, TaskStdVector other) -> TaskStdVector
        __init__(TaskStdVector self, std::vector< CCopasiTask * >::size_type size) -> TaskStdVector
        __init__(TaskStdVector self, std::vector< CCopasiTask * >::size_type size, CCopasiTask value) -> TaskStdVector
        """
        _COPASI.TaskStdVector_swiginit(self, _COPASI.new_TaskStdVector(*args))

    def push_back(self, x):
        r"""push_back(TaskStdVector self, CCopasiTask x)"""
        return _COPASI.TaskStdVector_push_back(self, x)

    def front(self):
        r"""front(TaskStdVector self) -> CCopasiTask"""
        return _COPASI.TaskStdVector_front(self)

    def back(self):
        r"""back(TaskStdVector self) -> CCopasiTask"""
        return _COPASI.TaskStdVector_back(self)

    def assign(self, n, x):
        r"""assign(TaskStdVector self, std::vector< CCopasiTask * >::size_type n, CCopasiTask x)"""
        return _COPASI.TaskStdVector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(TaskStdVector self, std::vector< CCopasiTask * >::size_type new_size)
        resize(TaskStdVector self, std::vector< CCopasiTask * >::size_type new_size, CCopasiTask x)
        """
        return _COPASI.TaskStdVector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(TaskStdVector self, std::vector< CCopasiTask * >::iterator pos, CCopasiTask x) -> std::vector< CCopasiTask * >::iterator
        insert(TaskStdVector self, std::vector< CCopasiTask * >::iterator pos, std::vector< CCopasiTask * >::size_type n, CCopasiTask x)
        """
        return _COPASI.TaskStdVector_insert(self, *args)

    def reserve(self, n):
        r"""reserve(TaskStdVector self, std::vector< CCopasiTask * >::size_type n)"""
        return _COPASI.TaskStdVector_reserve(self, n)

    def capacity(self):
        r"""capacity(TaskStdVector self) -> std::vector< CCopasiTask * >::size_type"""
        return _COPASI.TaskStdVector_capacity(self)
    __swig_destroy__ = _COPASI.delete_TaskStdVector

# Register TaskStdVector in _COPASI:
_COPASI.TaskStdVector_swigregister(TaskStdVector)
class TaskVector(CDataContainer):
    r"""Proxy of C++ CDataVector< CCopasiTask > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _COPASI.delete_TaskVector

    def cleanup(self):
        r"""cleanup(TaskVector self)"""
        return _COPASI.TaskVector_cleanup(self)

    def addCopy(self, src):
        r"""addCopy(TaskVector self, CCopasiTask src) -> bool"""
        return _COPASI.TaskVector_addCopy(self, src)

    def swap(self, indexFrom, indexTo):
        r"""swap(TaskVector self, size_t const & indexFrom, size_t const & indexTo)"""
        return _COPASI.TaskVector_swap(self, indexFrom, indexTo)

    def add(self, pObject, adopt=True):
        
        return _COPASI.TaskVector_add(self, pObject, adopt)

    def getObject(self, name):
        r"""getObject(TaskVector self, CCommonName name) -> CObjectInterface"""
        return _COPASI.TaskVector_getObject(self, name)

    def size(self):
        r"""size(TaskVector self) -> size_t"""
        return _COPASI.TaskVector_size(self)

    def empty(self):
        r"""empty(TaskVector self) -> bool"""
        return _COPASI.TaskVector_empty(self)

    def clear(self):
        r"""clear(TaskVector self)"""
        return _COPASI.TaskVector_clear(self)

    def getIndex(self, pObject):
        r"""getIndex(TaskVector self, CDataObject pObject) -> size_t"""
        return _COPASI.TaskVector_getIndex(self, pObject)

    def remove(self, index):
        r"""remove(TaskVector self, unsigned int index)"""
        return _COPASI.TaskVector_remove(self, index)

    def get(self, index):
        r"""get(TaskVector self, unsigned int index) -> CDataObject"""
        return _COPASI.TaskVector_get(self, index)

    def addAndOwn(self, DISOWN):
        r"""addAndOwn(TaskVector self, CCopasiTask DISOWN) -> bool"""
        return _COPASI.TaskVector_addAndOwn(self, DISOWN)

    def removeObject(self, pObject):
        r"""removeObject(TaskVector self, CDataObject pObject) -> bool"""
        return _COPASI.TaskVector_removeObject(self, pObject)

    def __len__(self):
        r"""__len__(TaskVector self) -> size_t"""
        return _COPASI.TaskVector___len__(self)

    def __getitem__(self, index):
        r"""__getitem__(TaskVector self, unsigned int index) -> CDataObject"""
        return _COPASI.TaskVector___getitem__(self, index)

# Register TaskVector in _COPASI:
_COPASI.TaskVector_swigregister(TaskVector)
class TaskVectorN(TaskVector):
    r"""Proxy of C++ CDataVectorN< CCopasiTask > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TaskVectorN self, std::string const & name="NoName", CDataContainer pParent=static_cast< CDataContainer * >((void *) 0)) -> TaskVectorN
        __init__(TaskVectorN self, TaskVectorN src, CDataContainer pParent) -> TaskVectorN
        """
        _COPASI.TaskVectorN_swiginit(self, _COPASI.new_TaskVectorN(*args))
    __swig_destroy__ = _COPASI.delete_TaskVectorN

    def addCopy(self, src):
        r"""addCopy(TaskVectorN self, CCopasiTask src) -> bool"""
        return _COPASI.TaskVectorN_addCopy(self, src)

    def add(self, pObject, adopt=True):
        
        return _COPASI.TaskVectorN_add(self, pObject, adopt)

    def removeByName(self, name):
        r"""removeByName(TaskVectorN self, std::string const & name)"""
        return _COPASI.TaskVectorN_removeByName(self, name)

    def getObject(self, name):
        r"""getObject(TaskVectorN self, CCommonName name) -> CObjectInterface"""
        return _COPASI.TaskVectorN_getObject(self, name)

    def getIndexByName(self, name):
        r"""getIndexByName(TaskVectorN self, std::string const & name) -> size_t"""
        return _COPASI.TaskVectorN_getIndexByName(self, name)

    def createUniqueName(self, name):
        r"""createUniqueName(TaskVectorN self, std::string & name)"""
        return _COPASI.TaskVectorN_createUniqueName(self, name)

    def getByName(self, name):
        r"""getByName(TaskVectorN self, std::string const & name) -> CDataObject"""
        return _COPASI.TaskVectorN_getByName(self, name)

    def __getitem__(self, *args):
        r"""
        __getitem__(TaskVectorN self, std::string const & name) -> CDataObject
        __getitem__(TaskVectorN self, unsigned int index) -> CDataObject
        """
        return _COPASI.TaskVectorN___getitem__(self, *args)

# Register TaskVectorN in _COPASI:
_COPASI.TaskVectorN_swigregister(TaskVectorN)
class FluxModeStdVector(object):
    r"""Proxy of C++ std::vector< CFluxMode * > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(FluxModeStdVector self) -> SwigPyIterator"""
        return _COPASI.FluxModeStdVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(FluxModeStdVector self) -> bool"""
        return _COPASI.FluxModeStdVector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(FluxModeStdVector self) -> bool"""
        return _COPASI.FluxModeStdVector___bool__(self)

    def __len__(self):
        r"""__len__(FluxModeStdVector self) -> std::vector< CFluxMode * >::size_type"""
        return _COPASI.FluxModeStdVector___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(FluxModeStdVector self, std::vector< CFluxMode * >::difference_type i, std::vector< CFluxMode * >::difference_type j) -> FluxModeStdVector"""
        return _COPASI.FluxModeStdVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(FluxModeStdVector self, std::vector< CFluxMode * >::difference_type i, std::vector< CFluxMode * >::difference_type j)
        __setslice__(FluxModeStdVector self, std::vector< CFluxMode * >::difference_type i, std::vector< CFluxMode * >::difference_type j, FluxModeStdVector v)
        """
        return _COPASI.FluxModeStdVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(FluxModeStdVector self, std::vector< CFluxMode * >::difference_type i, std::vector< CFluxMode * >::difference_type j)"""
        return _COPASI.FluxModeStdVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(FluxModeStdVector self, std::vector< CFluxMode * >::difference_type i)
        __delitem__(FluxModeStdVector self, SWIGPY_SLICEOBJECT * slice)
        """
        return _COPASI.FluxModeStdVector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(FluxModeStdVector self, SWIGPY_SLICEOBJECT * slice) -> FluxModeStdVector
        __getitem__(FluxModeStdVector self, std::vector< CFluxMode * >::difference_type i) -> CFluxMode
        """
        return _COPASI.FluxModeStdVector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(FluxModeStdVector self, SWIGPY_SLICEOBJECT * slice, FluxModeStdVector v)
        __setitem__(FluxModeStdVector self, SWIGPY_SLICEOBJECT * slice)
        __setitem__(FluxModeStdVector self, std::vector< CFluxMode * >::difference_type i, CFluxMode x)
        """
        return _COPASI.FluxModeStdVector___setitem__(self, *args)

    def pop(self):
        r"""pop(FluxModeStdVector self) -> CFluxMode"""
        return _COPASI.FluxModeStdVector_pop(self)

    def append(self, x):
        r"""append(FluxModeStdVector self, CFluxMode x)"""
        return _COPASI.FluxModeStdVector_append(self, x)

    def empty(self):
        r"""empty(FluxModeStdVector self) -> bool"""
        return _COPASI.FluxModeStdVector_empty(self)

    def size(self):
        r"""size(FluxModeStdVector self) -> std::vector< CFluxMode * >::size_type"""
        return _COPASI.FluxModeStdVector_size(self)

    def swap(self, v):
        r"""swap(FluxModeStdVector self, FluxModeStdVector v)"""
        return _COPASI.FluxModeStdVector_swap(self, v)

    def rbegin(self):
        r"""rbegin(FluxModeStdVector self) -> std::vector< CFluxMode * >::reverse_iterator"""
        return _COPASI.FluxModeStdVector_rbegin(self)

    def rend(self):
        r"""rend(FluxModeStdVector self) -> std::vector< CFluxMode * >::reverse_iterator"""
        return _COPASI.FluxModeStdVector_rend(self)

    def clear(self):
        r"""clear(FluxModeStdVector self)"""
        return _COPASI.FluxModeStdVector_clear(self)

    def get_allocator(self):
        r"""get_allocator(FluxModeStdVector self) -> std::vector< CFluxMode * >::allocator_type"""
        return _COPASI.FluxModeStdVector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(FluxModeStdVector self)"""
        return _COPASI.FluxModeStdVector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(FluxModeStdVector self, std::vector< CFluxMode * >::iterator pos) -> std::vector< CFluxMode * >::iterator
        erase(FluxModeStdVector self, std::vector< CFluxMode * >::iterator first, std::vector< CFluxMode * >::iterator last) -> std::vector< CFluxMode * >::iterator
        """
        return _COPASI.FluxModeStdVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(FluxModeStdVector self) -> FluxModeStdVector
        __init__(FluxModeStdVector self, FluxModeStdVector other) -> FluxModeStdVector
        __init__(FluxModeStdVector self, std::vector< CFluxMode * >::size_type size) -> FluxModeStdVector
        __init__(FluxModeStdVector self, std::vector< CFluxMode * >::size_type size, CFluxMode value) -> FluxModeStdVector
        """
        _COPASI.FluxModeStdVector_swiginit(self, _COPASI.new_FluxModeStdVector(*args))

    def push_back(self, x):
        r"""push_back(FluxModeStdVector self, CFluxMode x)"""
        return _COPASI.FluxModeStdVector_push_back(self, x)

    def front(self):
        r"""front(FluxModeStdVector self) -> CFluxMode"""
        return _COPASI.FluxModeStdVector_front(self)

    def back(self):
        r"""back(FluxModeStdVector self) -> CFluxMode"""
        return _COPASI.FluxModeStdVector_back(self)

    def assign(self, n, x):
        r"""assign(FluxModeStdVector self, std::vector< CFluxMode * >::size_type n, CFluxMode x)"""
        return _COPASI.FluxModeStdVector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(FluxModeStdVector self, std::vector< CFluxMode * >::size_type new_size)
        resize(FluxModeStdVector self, std::vector< CFluxMode * >::size_type new_size, CFluxMode x)
        """
        return _COPASI.FluxModeStdVector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(FluxModeStdVector self, std::vector< CFluxMode * >::iterator pos, CFluxMode x) -> std::vector< CFluxMode * >::iterator
        insert(FluxModeStdVector self, std::vector< CFluxMode * >::iterator pos, std::vector< CFluxMode * >::size_type n, CFluxMode x)
        """
        return _COPASI.FluxModeStdVector_insert(self, *args)

    def reserve(self, n):
        r"""reserve(FluxModeStdVector self, std::vector< CFluxMode * >::size_type n)"""
        return _COPASI.FluxModeStdVector_reserve(self, n)

    def capacity(self):
        r"""capacity(FluxModeStdVector self) -> std::vector< CFluxMode * >::size_type"""
        return _COPASI.FluxModeStdVector_capacity(self)
    __swig_destroy__ = _COPASI.delete_FluxModeStdVector

# Register FluxModeStdVector in _COPASI:
_COPASI.FluxModeStdVector_swigregister(FluxModeStdVector)
class ModelValueStdVector(object):
    r"""Proxy of C++ std::vector< CModelValue * > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(ModelValueStdVector self) -> SwigPyIterator"""
        return _COPASI.ModelValueStdVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(ModelValueStdVector self) -> bool"""
        return _COPASI.ModelValueStdVector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(ModelValueStdVector self) -> bool"""
        return _COPASI.ModelValueStdVector___bool__(self)

    def __len__(self):
        r"""__len__(ModelValueStdVector self) -> std::vector< CModelValue * >::size_type"""
        return _COPASI.ModelValueStdVector___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(ModelValueStdVector self, std::vector< CModelValue * >::difference_type i, std::vector< CModelValue * >::difference_type j) -> ModelValueStdVector"""
        return _COPASI.ModelValueStdVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(ModelValueStdVector self, std::vector< CModelValue * >::difference_type i, std::vector< CModelValue * >::difference_type j)
        __setslice__(ModelValueStdVector self, std::vector< CModelValue * >::difference_type i, std::vector< CModelValue * >::difference_type j, ModelValueStdVector v)
        """
        return _COPASI.ModelValueStdVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(ModelValueStdVector self, std::vector< CModelValue * >::difference_type i, std::vector< CModelValue * >::difference_type j)"""
        return _COPASI.ModelValueStdVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(ModelValueStdVector self, std::vector< CModelValue * >::difference_type i)
        __delitem__(ModelValueStdVector self, SWIGPY_SLICEOBJECT * slice)
        """
        return _COPASI.ModelValueStdVector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(ModelValueStdVector self, SWIGPY_SLICEOBJECT * slice) -> ModelValueStdVector
        __getitem__(ModelValueStdVector self, std::vector< CModelValue * >::difference_type i) -> CModelValue
        """
        return _COPASI.ModelValueStdVector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(ModelValueStdVector self, SWIGPY_SLICEOBJECT * slice, ModelValueStdVector v)
        __setitem__(ModelValueStdVector self, SWIGPY_SLICEOBJECT * slice)
        __setitem__(ModelValueStdVector self, std::vector< CModelValue * >::difference_type i, CModelValue x)
        """
        return _COPASI.ModelValueStdVector___setitem__(self, *args)

    def pop(self):
        r"""pop(ModelValueStdVector self) -> CModelValue"""
        return _COPASI.ModelValueStdVector_pop(self)

    def append(self, x):
        r"""append(ModelValueStdVector self, CModelValue x)"""
        return _COPASI.ModelValueStdVector_append(self, x)

    def empty(self):
        r"""empty(ModelValueStdVector self) -> bool"""
        return _COPASI.ModelValueStdVector_empty(self)

    def size(self):
        r"""size(ModelValueStdVector self) -> std::vector< CModelValue * >::size_type"""
        return _COPASI.ModelValueStdVector_size(self)

    def swap(self, v):
        r"""swap(ModelValueStdVector self, ModelValueStdVector v)"""
        return _COPASI.ModelValueStdVector_swap(self, v)

    def rbegin(self):
        r"""rbegin(ModelValueStdVector self) -> std::vector< CModelValue * >::reverse_iterator"""
        return _COPASI.ModelValueStdVector_rbegin(self)

    def rend(self):
        r"""rend(ModelValueStdVector self) -> std::vector< CModelValue * >::reverse_iterator"""
        return _COPASI.ModelValueStdVector_rend(self)

    def clear(self):
        r"""clear(ModelValueStdVector self)"""
        return _COPASI.ModelValueStdVector_clear(self)

    def get_allocator(self):
        r"""get_allocator(ModelValueStdVector self) -> std::vector< CModelValue * >::allocator_type"""
        return _COPASI.ModelValueStdVector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(ModelValueStdVector self)"""
        return _COPASI.ModelValueStdVector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(ModelValueStdVector self, std::vector< CModelValue * >::iterator pos) -> std::vector< CModelValue * >::iterator
        erase(ModelValueStdVector self, std::vector< CModelValue * >::iterator first, std::vector< CModelValue * >::iterator last) -> std::vector< CModelValue * >::iterator
        """
        return _COPASI.ModelValueStdVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(ModelValueStdVector self) -> ModelValueStdVector
        __init__(ModelValueStdVector self, ModelValueStdVector other) -> ModelValueStdVector
        __init__(ModelValueStdVector self, std::vector< CModelValue * >::size_type size) -> ModelValueStdVector
        __init__(ModelValueStdVector self, std::vector< CModelValue * >::size_type size, CModelValue value) -> ModelValueStdVector
        """
        _COPASI.ModelValueStdVector_swiginit(self, _COPASI.new_ModelValueStdVector(*args))

    def push_back(self, x):
        r"""push_back(ModelValueStdVector self, CModelValue x)"""
        return _COPASI.ModelValueStdVector_push_back(self, x)

    def front(self):
        r"""front(ModelValueStdVector self) -> CModelValue"""
        return _COPASI.ModelValueStdVector_front(self)

    def back(self):
        r"""back(ModelValueStdVector self) -> CModelValue"""
        return _COPASI.ModelValueStdVector_back(self)

    def assign(self, n, x):
        r"""assign(ModelValueStdVector self, std::vector< CModelValue * >::size_type n, CModelValue x)"""
        return _COPASI.ModelValueStdVector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(ModelValueStdVector self, std::vector< CModelValue * >::size_type new_size)
        resize(ModelValueStdVector self, std::vector< CModelValue * >::size_type new_size, CModelValue x)
        """
        return _COPASI.ModelValueStdVector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(ModelValueStdVector self, std::vector< CModelValue * >::iterator pos, CModelValue x) -> std::vector< CModelValue * >::iterator
        insert(ModelValueStdVector self, std::vector< CModelValue * >::iterator pos, std::vector< CModelValue * >::size_type n, CModelValue x)
        """
        return _COPASI.ModelValueStdVector_insert(self, *args)

    def reserve(self, n):
        r"""reserve(ModelValueStdVector self, std::vector< CModelValue * >::size_type n)"""
        return _COPASI.ModelValueStdVector_reserve(self, n)

    def capacity(self):
        r"""capacity(ModelValueStdVector self) -> std::vector< CModelValue * >::size_type"""
        return _COPASI.ModelValueStdVector_capacity(self)
    __swig_destroy__ = _COPASI.delete_ModelValueStdVector

# Register ModelValueStdVector in _COPASI:
_COPASI.ModelValueStdVector_swigregister(ModelValueStdVector)
class ModelValueVector(CDataContainer):
    r"""Proxy of C++ CDataVector< CModelValue > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _COPASI.delete_ModelValueVector

    def cleanup(self):
        r"""cleanup(ModelValueVector self)"""
        return _COPASI.ModelValueVector_cleanup(self)

    def addCopy(self, src):
        r"""addCopy(ModelValueVector self, CModelValue src) -> bool"""
        return _COPASI.ModelValueVector_addCopy(self, src)

    def swap(self, indexFrom, indexTo):
        r"""swap(ModelValueVector self, size_t const & indexFrom, size_t const & indexTo)"""
        return _COPASI.ModelValueVector_swap(self, indexFrom, indexTo)

    def add(self, pObject, adopt=True):
        
        return _COPASI.ModelValueVector_add(self, pObject, adopt)

    def getObject(self, name):
        r"""getObject(ModelValueVector self, CCommonName name) -> CObjectInterface"""
        return _COPASI.ModelValueVector_getObject(self, name)

    def size(self):
        r"""size(ModelValueVector self) -> size_t"""
        return _COPASI.ModelValueVector_size(self)

    def empty(self):
        r"""empty(ModelValueVector self) -> bool"""
        return _COPASI.ModelValueVector_empty(self)

    def clear(self):
        r"""clear(ModelValueVector self)"""
        return _COPASI.ModelValueVector_clear(self)

    def getIndex(self, pObject):
        r"""getIndex(ModelValueVector self, CDataObject pObject) -> size_t"""
        return _COPASI.ModelValueVector_getIndex(self, pObject)

    def remove(self, index):
        r"""remove(ModelValueVector self, unsigned int index)"""
        return _COPASI.ModelValueVector_remove(self, index)

    def get(self, index):
        r"""get(ModelValueVector self, unsigned int index) -> CDataObject"""
        return _COPASI.ModelValueVector_get(self, index)

    def addAndOwn(self, DISOWN):
        r"""addAndOwn(ModelValueVector self, CModelValue DISOWN) -> bool"""
        return _COPASI.ModelValueVector_addAndOwn(self, DISOWN)

    def removeObject(self, pObject):
        r"""removeObject(ModelValueVector self, CDataObject pObject) -> bool"""
        return _COPASI.ModelValueVector_removeObject(self, pObject)

    def __len__(self):
        r"""__len__(ModelValueVector self) -> size_t"""
        return _COPASI.ModelValueVector___len__(self)

    def __getitem__(self, index):
        r"""__getitem__(ModelValueVector self, unsigned int index) -> CDataObject"""
        return _COPASI.ModelValueVector___getitem__(self, index)

# Register ModelValueVector in _COPASI:
_COPASI.ModelValueVector_swigregister(ModelValueVector)
class ModelValueVectorN(ModelValueVector):
    r"""Proxy of C++ CDataVectorN< CModelValue > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ModelValueVectorN self, std::string const & name="NoName", CDataContainer pParent=static_cast< CDataContainer * >((void *) 0)) -> ModelValueVectorN
        __init__(ModelValueVectorN self, ModelValueVectorN src, CDataContainer pParent) -> ModelValueVectorN
        """
        _COPASI.ModelValueVectorN_swiginit(self, _COPASI.new_ModelValueVectorN(*args))
    __swig_destroy__ = _COPASI.delete_ModelValueVectorN

    def addCopy(self, src):
        r"""addCopy(ModelValueVectorN self, CModelValue src) -> bool"""
        return _COPASI.ModelValueVectorN_addCopy(self, src)

    def add(self, pObject, adopt=True):
        
        return _COPASI.ModelValueVectorN_add(self, pObject, adopt)

    def removeByName(self, name):
        r"""removeByName(ModelValueVectorN self, std::string const & name)"""
        return _COPASI.ModelValueVectorN_removeByName(self, name)

    def getObject(self, name):
        r"""getObject(ModelValueVectorN self, CCommonName name) -> CObjectInterface"""
        return _COPASI.ModelValueVectorN_getObject(self, name)

    def getIndexByName(self, name):
        r"""getIndexByName(ModelValueVectorN self, std::string const & name) -> size_t"""
        return _COPASI.ModelValueVectorN_getIndexByName(self, name)

    def createUniqueName(self, name):
        r"""createUniqueName(ModelValueVectorN self, std::string & name)"""
        return _COPASI.ModelValueVectorN_createUniqueName(self, name)

    def getByName(self, name):
        r"""getByName(ModelValueVectorN self, std::string const & name) -> CDataObject"""
        return _COPASI.ModelValueVectorN_getByName(self, name)

    def __getitem__(self, *args):
        r"""
        __getitem__(ModelValueVectorN self, std::string const & name) -> CDataObject
        __getitem__(ModelValueVectorN self, unsigned int index) -> CDataObject
        """
        return _COPASI.ModelValueVectorN___getitem__(self, *args)

# Register ModelValueVectorN in _COPASI:
_COPASI.ModelValueVectorN_swigregister(ModelValueVectorN)
class ReportDefinitionStdVector(object):
    r"""Proxy of C++ std::vector< CReportDefinition * > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(ReportDefinitionStdVector self) -> SwigPyIterator"""
        return _COPASI.ReportDefinitionStdVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(ReportDefinitionStdVector self) -> bool"""
        return _COPASI.ReportDefinitionStdVector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(ReportDefinitionStdVector self) -> bool"""
        return _COPASI.ReportDefinitionStdVector___bool__(self)

    def __len__(self):
        r"""__len__(ReportDefinitionStdVector self) -> std::vector< CReportDefinition * >::size_type"""
        return _COPASI.ReportDefinitionStdVector___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(ReportDefinitionStdVector self, std::vector< CReportDefinition * >::difference_type i, std::vector< CReportDefinition * >::difference_type j) -> ReportDefinitionStdVector"""
        return _COPASI.ReportDefinitionStdVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(ReportDefinitionStdVector self, std::vector< CReportDefinition * >::difference_type i, std::vector< CReportDefinition * >::difference_type j)
        __setslice__(ReportDefinitionStdVector self, std::vector< CReportDefinition * >::difference_type i, std::vector< CReportDefinition * >::difference_type j, ReportDefinitionStdVector v)
        """
        return _COPASI.ReportDefinitionStdVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(ReportDefinitionStdVector self, std::vector< CReportDefinition * >::difference_type i, std::vector< CReportDefinition * >::difference_type j)"""
        return _COPASI.ReportDefinitionStdVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(ReportDefinitionStdVector self, std::vector< CReportDefinition * >::difference_type i)
        __delitem__(ReportDefinitionStdVector self, SWIGPY_SLICEOBJECT * slice)
        """
        return _COPASI.ReportDefinitionStdVector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(ReportDefinitionStdVector self, SWIGPY_SLICEOBJECT * slice) -> ReportDefinitionStdVector
        __getitem__(ReportDefinitionStdVector self, std::vector< CReportDefinition * >::difference_type i) -> CReportDefinition
        """
        return _COPASI.ReportDefinitionStdVector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(ReportDefinitionStdVector self, SWIGPY_SLICEOBJECT * slice, ReportDefinitionStdVector v)
        __setitem__(ReportDefinitionStdVector self, SWIGPY_SLICEOBJECT * slice)
        __setitem__(ReportDefinitionStdVector self, std::vector< CReportDefinition * >::difference_type i, CReportDefinition x)
        """
        return _COPASI.ReportDefinitionStdVector___setitem__(self, *args)

    def pop(self):
        r"""pop(ReportDefinitionStdVector self) -> CReportDefinition"""
        return _COPASI.ReportDefinitionStdVector_pop(self)

    def append(self, x):
        r"""append(ReportDefinitionStdVector self, CReportDefinition x)"""
        return _COPASI.ReportDefinitionStdVector_append(self, x)

    def empty(self):
        r"""empty(ReportDefinitionStdVector self) -> bool"""
        return _COPASI.ReportDefinitionStdVector_empty(self)

    def size(self):
        r"""size(ReportDefinitionStdVector self) -> std::vector< CReportDefinition * >::size_type"""
        return _COPASI.ReportDefinitionStdVector_size(self)

    def swap(self, v):
        r"""swap(ReportDefinitionStdVector self, ReportDefinitionStdVector v)"""
        return _COPASI.ReportDefinitionStdVector_swap(self, v)

    def rbegin(self):
        r"""rbegin(ReportDefinitionStdVector self) -> std::vector< CReportDefinition * >::reverse_iterator"""
        return _COPASI.ReportDefinitionStdVector_rbegin(self)

    def rend(self):
        r"""rend(ReportDefinitionStdVector self) -> std::vector< CReportDefinition * >::reverse_iterator"""
        return _COPASI.ReportDefinitionStdVector_rend(self)

    def clear(self):
        r"""clear(ReportDefinitionStdVector self)"""
        return _COPASI.ReportDefinitionStdVector_clear(self)

    def get_allocator(self):
        r"""get_allocator(ReportDefinitionStdVector self) -> std::vector< CReportDefinition * >::allocator_type"""
        return _COPASI.ReportDefinitionStdVector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(ReportDefinitionStdVector self)"""
        return _COPASI.ReportDefinitionStdVector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(ReportDefinitionStdVector self, std::vector< CReportDefinition * >::iterator pos) -> std::vector< CReportDefinition * >::iterator
        erase(ReportDefinitionStdVector self, std::vector< CReportDefinition * >::iterator first, std::vector< CReportDefinition * >::iterator last) -> std::vector< CReportDefinition * >::iterator
        """
        return _COPASI.ReportDefinitionStdVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(ReportDefinitionStdVector self) -> ReportDefinitionStdVector
        __init__(ReportDefinitionStdVector self, ReportDefinitionStdVector other) -> ReportDefinitionStdVector
        __init__(ReportDefinitionStdVector self, std::vector< CReportDefinition * >::size_type size) -> ReportDefinitionStdVector
        __init__(ReportDefinitionStdVector self, std::vector< CReportDefinition * >::size_type size, CReportDefinition value) -> ReportDefinitionStdVector
        """
        _COPASI.ReportDefinitionStdVector_swiginit(self, _COPASI.new_ReportDefinitionStdVector(*args))

    def push_back(self, x):
        r"""push_back(ReportDefinitionStdVector self, CReportDefinition x)"""
        return _COPASI.ReportDefinitionStdVector_push_back(self, x)

    def front(self):
        r"""front(ReportDefinitionStdVector self) -> CReportDefinition"""
        return _COPASI.ReportDefinitionStdVector_front(self)

    def back(self):
        r"""back(ReportDefinitionStdVector self) -> CReportDefinition"""
        return _COPASI.ReportDefinitionStdVector_back(self)

    def assign(self, n, x):
        r"""assign(ReportDefinitionStdVector self, std::vector< CReportDefinition * >::size_type n, CReportDefinition x)"""
        return _COPASI.ReportDefinitionStdVector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(ReportDefinitionStdVector self, std::vector< CReportDefinition * >::size_type new_size)
        resize(ReportDefinitionStdVector self, std::vector< CReportDefinition * >::size_type new_size, CReportDefinition x)
        """
        return _COPASI.ReportDefinitionStdVector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(ReportDefinitionStdVector self, std::vector< CReportDefinition * >::iterator pos, CReportDefinition x) -> std::vector< CReportDefinition * >::iterator
        insert(ReportDefinitionStdVector self, std::vector< CReportDefinition * >::iterator pos, std::vector< CReportDefinition * >::size_type n, CReportDefinition x)
        """
        return _COPASI.ReportDefinitionStdVector_insert(self, *args)

    def reserve(self, n):
        r"""reserve(ReportDefinitionStdVector self, std::vector< CReportDefinition * >::size_type n)"""
        return _COPASI.ReportDefinitionStdVector_reserve(self, n)

    def capacity(self):
        r"""capacity(ReportDefinitionStdVector self) -> std::vector< CReportDefinition * >::size_type"""
        return _COPASI.ReportDefinitionStdVector_capacity(self)
    __swig_destroy__ = _COPASI.delete_ReportDefinitionStdVector

# Register ReportDefinitionStdVector in _COPASI:
_COPASI.ReportDefinitionStdVector_swigregister(ReportDefinitionStdVector)
class ReportDefinitionVector(CDataContainer):
    r"""Proxy of C++ CDataVector< CReportDefinition > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _COPASI.delete_ReportDefinitionVector

    def cleanup(self):
        r"""cleanup(ReportDefinitionVector self)"""
        return _COPASI.ReportDefinitionVector_cleanup(self)

    def addCopy(self, src):
        r"""addCopy(ReportDefinitionVector self, CReportDefinition src) -> bool"""
        return _COPASI.ReportDefinitionVector_addCopy(self, src)

    def swap(self, indexFrom, indexTo):
        r"""swap(ReportDefinitionVector self, size_t const & indexFrom, size_t const & indexTo)"""
        return _COPASI.ReportDefinitionVector_swap(self, indexFrom, indexTo)

    def add(self, pObject, adopt=True):
        
        return _COPASI.ReportDefinitionVector_add(self, pObject, adopt)

    def getObject(self, name):
        r"""getObject(ReportDefinitionVector self, CCommonName name) -> CObjectInterface"""
        return _COPASI.ReportDefinitionVector_getObject(self, name)

    def size(self):
        r"""size(ReportDefinitionVector self) -> size_t"""
        return _COPASI.ReportDefinitionVector_size(self)

    def empty(self):
        r"""empty(ReportDefinitionVector self) -> bool"""
        return _COPASI.ReportDefinitionVector_empty(self)

    def clear(self):
        r"""clear(ReportDefinitionVector self)"""
        return _COPASI.ReportDefinitionVector_clear(self)

    def getIndex(self, pObject):
        r"""getIndex(ReportDefinitionVector self, CDataObject pObject) -> size_t"""
        return _COPASI.ReportDefinitionVector_getIndex(self, pObject)

    def remove(self, index):
        r"""remove(ReportDefinitionVector self, unsigned int index)"""
        return _COPASI.ReportDefinitionVector_remove(self, index)

    def get(self, index):
        r"""get(ReportDefinitionVector self, unsigned int index) -> CDataObject"""
        return _COPASI.ReportDefinitionVector_get(self, index)

    def addAndOwn(self, DISOWN):
        r"""addAndOwn(ReportDefinitionVector self, CReportDefinition DISOWN) -> bool"""
        return _COPASI.ReportDefinitionVector_addAndOwn(self, DISOWN)

    def removeObject(self, pObject):
        r"""removeObject(ReportDefinitionVector self, CDataObject pObject) -> bool"""
        return _COPASI.ReportDefinitionVector_removeObject(self, pObject)

    def __len__(self):
        r"""__len__(ReportDefinitionVector self) -> size_t"""
        return _COPASI.ReportDefinitionVector___len__(self)

    def __getitem__(self, index):
        r"""__getitem__(ReportDefinitionVector self, unsigned int index) -> CDataObject"""
        return _COPASI.ReportDefinitionVector___getitem__(self, index)

# Register ReportDefinitionVector in _COPASI:
_COPASI.ReportDefinitionVector_swigregister(ReportDefinitionVector)
class ReportDefinitionVectorN(ReportDefinitionVector):
    r"""Proxy of C++ CDataVectorN< CReportDefinition > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ReportDefinitionVectorN self, std::string const & name="NoName", CDataContainer pParent=static_cast< CDataContainer * >((void *) 0)) -> ReportDefinitionVectorN
        __init__(ReportDefinitionVectorN self, ReportDefinitionVectorN src, CDataContainer pParent) -> ReportDefinitionVectorN
        """
        _COPASI.ReportDefinitionVectorN_swiginit(self, _COPASI.new_ReportDefinitionVectorN(*args))
    __swig_destroy__ = _COPASI.delete_ReportDefinitionVectorN

    def addCopy(self, src):
        r"""addCopy(ReportDefinitionVectorN self, CReportDefinition src) -> bool"""
        return _COPASI.ReportDefinitionVectorN_addCopy(self, src)

    def add(self, pObject, adopt=True):
        
        return _COPASI.ReportDefinitionVectorN_add(self, pObject, adopt)

    def removeByName(self, name):
        r"""removeByName(ReportDefinitionVectorN self, std::string const & name)"""
        return _COPASI.ReportDefinitionVectorN_removeByName(self, name)

    def getObject(self, name):
        r"""getObject(ReportDefinitionVectorN self, CCommonName name) -> CObjectInterface"""
        return _COPASI.ReportDefinitionVectorN_getObject(self, name)

    def getIndexByName(self, name):
        r"""getIndexByName(ReportDefinitionVectorN self, std::string const & name) -> size_t"""
        return _COPASI.ReportDefinitionVectorN_getIndexByName(self, name)

    def createUniqueName(self, name):
        r"""createUniqueName(ReportDefinitionVectorN self, std::string & name)"""
        return _COPASI.ReportDefinitionVectorN_createUniqueName(self, name)

    def getByName(self, name):
        r"""getByName(ReportDefinitionVectorN self, std::string const & name) -> CDataObject"""
        return _COPASI.ReportDefinitionVectorN_getByName(self, name)

    def __getitem__(self, *args):
        r"""
        __getitem__(ReportDefinitionVectorN self, std::string const & name) -> CDataObject
        __getitem__(ReportDefinitionVectorN self, unsigned int index) -> CDataObject
        """
        return _COPASI.ReportDefinitionVectorN___getitem__(self, *args)

# Register ReportDefinitionVectorN in _COPASI:
_COPASI.ReportDefinitionVectorN_swigregister(ReportDefinitionVectorN)
class OutputDefinitionStdVector(object):
    r"""Proxy of C++ std::vector< CPlotSpecification * > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(OutputDefinitionStdVector self) -> SwigPyIterator"""
        return _COPASI.OutputDefinitionStdVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(OutputDefinitionStdVector self) -> bool"""
        return _COPASI.OutputDefinitionStdVector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(OutputDefinitionStdVector self) -> bool"""
        return _COPASI.OutputDefinitionStdVector___bool__(self)

    def __len__(self):
        r"""__len__(OutputDefinitionStdVector self) -> std::vector< CPlotSpecification * >::size_type"""
        return _COPASI.OutputDefinitionStdVector___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(OutputDefinitionStdVector self, std::vector< CPlotSpecification * >::difference_type i, std::vector< CPlotSpecification * >::difference_type j) -> OutputDefinitionStdVector"""
        return _COPASI.OutputDefinitionStdVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(OutputDefinitionStdVector self, std::vector< CPlotSpecification * >::difference_type i, std::vector< CPlotSpecification * >::difference_type j)
        __setslice__(OutputDefinitionStdVector self, std::vector< CPlotSpecification * >::difference_type i, std::vector< CPlotSpecification * >::difference_type j, OutputDefinitionStdVector v)
        """
        return _COPASI.OutputDefinitionStdVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(OutputDefinitionStdVector self, std::vector< CPlotSpecification * >::difference_type i, std::vector< CPlotSpecification * >::difference_type j)"""
        return _COPASI.OutputDefinitionStdVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(OutputDefinitionStdVector self, std::vector< CPlotSpecification * >::difference_type i)
        __delitem__(OutputDefinitionStdVector self, SWIGPY_SLICEOBJECT * slice)
        """
        return _COPASI.OutputDefinitionStdVector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(OutputDefinitionStdVector self, SWIGPY_SLICEOBJECT * slice) -> OutputDefinitionStdVector
        __getitem__(OutputDefinitionStdVector self, std::vector< CPlotSpecification * >::difference_type i) -> CPlotSpecification
        """
        return _COPASI.OutputDefinitionStdVector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(OutputDefinitionStdVector self, SWIGPY_SLICEOBJECT * slice, OutputDefinitionStdVector v)
        __setitem__(OutputDefinitionStdVector self, SWIGPY_SLICEOBJECT * slice)
        __setitem__(OutputDefinitionStdVector self, std::vector< CPlotSpecification * >::difference_type i, CPlotSpecification x)
        """
        return _COPASI.OutputDefinitionStdVector___setitem__(self, *args)

    def pop(self):
        r"""pop(OutputDefinitionStdVector self) -> CPlotSpecification"""
        return _COPASI.OutputDefinitionStdVector_pop(self)

    def append(self, x):
        r"""append(OutputDefinitionStdVector self, CPlotSpecification x)"""
        return _COPASI.OutputDefinitionStdVector_append(self, x)

    def empty(self):
        r"""empty(OutputDefinitionStdVector self) -> bool"""
        return _COPASI.OutputDefinitionStdVector_empty(self)

    def size(self):
        r"""size(OutputDefinitionStdVector self) -> std::vector< CPlotSpecification * >::size_type"""
        return _COPASI.OutputDefinitionStdVector_size(self)

    def swap(self, v):
        r"""swap(OutputDefinitionStdVector self, OutputDefinitionStdVector v)"""
        return _COPASI.OutputDefinitionStdVector_swap(self, v)

    def rbegin(self):
        r"""rbegin(OutputDefinitionStdVector self) -> std::vector< CPlotSpecification * >::reverse_iterator"""
        return _COPASI.OutputDefinitionStdVector_rbegin(self)

    def rend(self):
        r"""rend(OutputDefinitionStdVector self) -> std::vector< CPlotSpecification * >::reverse_iterator"""
        return _COPASI.OutputDefinitionStdVector_rend(self)

    def clear(self):
        r"""clear(OutputDefinitionStdVector self)"""
        return _COPASI.OutputDefinitionStdVector_clear(self)

    def get_allocator(self):
        r"""get_allocator(OutputDefinitionStdVector self) -> std::vector< CPlotSpecification * >::allocator_type"""
        return _COPASI.OutputDefinitionStdVector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(OutputDefinitionStdVector self)"""
        return _COPASI.OutputDefinitionStdVector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(OutputDefinitionStdVector self, std::vector< CPlotSpecification * >::iterator pos) -> std::vector< CPlotSpecification * >::iterator
        erase(OutputDefinitionStdVector self, std::vector< CPlotSpecification * >::iterator first, std::vector< CPlotSpecification * >::iterator last) -> std::vector< CPlotSpecification * >::iterator
        """
        return _COPASI.OutputDefinitionStdVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(OutputDefinitionStdVector self) -> OutputDefinitionStdVector
        __init__(OutputDefinitionStdVector self, OutputDefinitionStdVector other) -> OutputDefinitionStdVector
        __init__(OutputDefinitionStdVector self, std::vector< CPlotSpecification * >::size_type size) -> OutputDefinitionStdVector
        __init__(OutputDefinitionStdVector self, std::vector< CPlotSpecification * >::size_type size, CPlotSpecification value) -> OutputDefinitionStdVector
        """
        _COPASI.OutputDefinitionStdVector_swiginit(self, _COPASI.new_OutputDefinitionStdVector(*args))

    def push_back(self, x):
        r"""push_back(OutputDefinitionStdVector self, CPlotSpecification x)"""
        return _COPASI.OutputDefinitionStdVector_push_back(self, x)

    def front(self):
        r"""front(OutputDefinitionStdVector self) -> CPlotSpecification"""
        return _COPASI.OutputDefinitionStdVector_front(self)

    def back(self):
        r"""back(OutputDefinitionStdVector self) -> CPlotSpecification"""
        return _COPASI.OutputDefinitionStdVector_back(self)

    def assign(self, n, x):
        r"""assign(OutputDefinitionStdVector self, std::vector< CPlotSpecification * >::size_type n, CPlotSpecification x)"""
        return _COPASI.OutputDefinitionStdVector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(OutputDefinitionStdVector self, std::vector< CPlotSpecification * >::size_type new_size)
        resize(OutputDefinitionStdVector self, std::vector< CPlotSpecification * >::size_type new_size, CPlotSpecification x)
        """
        return _COPASI.OutputDefinitionStdVector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(OutputDefinitionStdVector self, std::vector< CPlotSpecification * >::iterator pos, CPlotSpecification x) -> std::vector< CPlotSpecification * >::iterator
        insert(OutputDefinitionStdVector self, std::vector< CPlotSpecification * >::iterator pos, std::vector< CPlotSpecification * >::size_type n, CPlotSpecification x)
        """
        return _COPASI.OutputDefinitionStdVector_insert(self, *args)

    def reserve(self, n):
        r"""reserve(OutputDefinitionStdVector self, std::vector< CPlotSpecification * >::size_type n)"""
        return _COPASI.OutputDefinitionStdVector_reserve(self, n)

    def capacity(self):
        r"""capacity(OutputDefinitionStdVector self) -> std::vector< CPlotSpecification * >::size_type"""
        return _COPASI.OutputDefinitionStdVector_capacity(self)
    __swig_destroy__ = _COPASI.delete_OutputDefinitionStdVector

# Register OutputDefinitionStdVector in _COPASI:
_COPASI.OutputDefinitionStdVector_swigregister(OutputDefinitionStdVector)
class PlotDataChannelSpecStdVector(object):
    r"""Proxy of C++ std::vector< CPlotDataChannelSpec > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(PlotDataChannelSpecStdVector self) -> SwigPyIterator"""
        return _COPASI.PlotDataChannelSpecStdVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(PlotDataChannelSpecStdVector self) -> bool"""
        return _COPASI.PlotDataChannelSpecStdVector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(PlotDataChannelSpecStdVector self) -> bool"""
        return _COPASI.PlotDataChannelSpecStdVector___bool__(self)

    def __len__(self):
        r"""__len__(PlotDataChannelSpecStdVector self) -> std::vector< CPlotDataChannelSpec >::size_type"""
        return _COPASI.PlotDataChannelSpecStdVector___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(PlotDataChannelSpecStdVector self, std::vector< CPlotDataChannelSpec >::difference_type i, std::vector< CPlotDataChannelSpec >::difference_type j) -> PlotDataChannelSpecStdVector"""
        return _COPASI.PlotDataChannelSpecStdVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(PlotDataChannelSpecStdVector self, std::vector< CPlotDataChannelSpec >::difference_type i, std::vector< CPlotDataChannelSpec >::difference_type j)
        __setslice__(PlotDataChannelSpecStdVector self, std::vector< CPlotDataChannelSpec >::difference_type i, std::vector< CPlotDataChannelSpec >::difference_type j, PlotDataChannelSpecStdVector v)
        """
        return _COPASI.PlotDataChannelSpecStdVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(PlotDataChannelSpecStdVector self, std::vector< CPlotDataChannelSpec >::difference_type i, std::vector< CPlotDataChannelSpec >::difference_type j)"""
        return _COPASI.PlotDataChannelSpecStdVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(PlotDataChannelSpecStdVector self, std::vector< CPlotDataChannelSpec >::difference_type i)
        __delitem__(PlotDataChannelSpecStdVector self, SWIGPY_SLICEOBJECT * slice)
        """
        return _COPASI.PlotDataChannelSpecStdVector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(PlotDataChannelSpecStdVector self, SWIGPY_SLICEOBJECT * slice) -> PlotDataChannelSpecStdVector
        __getitem__(PlotDataChannelSpecStdVector self, std::vector< CPlotDataChannelSpec >::difference_type i) -> CPlotDataChannelSpec
        """
        return _COPASI.PlotDataChannelSpecStdVector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(PlotDataChannelSpecStdVector self, SWIGPY_SLICEOBJECT * slice, PlotDataChannelSpecStdVector v)
        __setitem__(PlotDataChannelSpecStdVector self, SWIGPY_SLICEOBJECT * slice)
        __setitem__(PlotDataChannelSpecStdVector self, std::vector< CPlotDataChannelSpec >::difference_type i, CPlotDataChannelSpec x)
        """
        return _COPASI.PlotDataChannelSpecStdVector___setitem__(self, *args)

    def pop(self):
        r"""pop(PlotDataChannelSpecStdVector self) -> CPlotDataChannelSpec"""
        return _COPASI.PlotDataChannelSpecStdVector_pop(self)

    def append(self, x):
        r"""append(PlotDataChannelSpecStdVector self, CPlotDataChannelSpec x)"""
        return _COPASI.PlotDataChannelSpecStdVector_append(self, x)

    def empty(self):
        r"""empty(PlotDataChannelSpecStdVector self) -> bool"""
        return _COPASI.PlotDataChannelSpecStdVector_empty(self)

    def size(self):
        r"""size(PlotDataChannelSpecStdVector self) -> std::vector< CPlotDataChannelSpec >::size_type"""
        return _COPASI.PlotDataChannelSpecStdVector_size(self)

    def swap(self, v):
        r"""swap(PlotDataChannelSpecStdVector self, PlotDataChannelSpecStdVector v)"""
        return _COPASI.PlotDataChannelSpecStdVector_swap(self, v)

    def rbegin(self):
        r"""rbegin(PlotDataChannelSpecStdVector self) -> std::vector< CPlotDataChannelSpec >::reverse_iterator"""
        return _COPASI.PlotDataChannelSpecStdVector_rbegin(self)

    def rend(self):
        r"""rend(PlotDataChannelSpecStdVector self) -> std::vector< CPlotDataChannelSpec >::reverse_iterator"""
        return _COPASI.PlotDataChannelSpecStdVector_rend(self)

    def clear(self):
        r"""clear(PlotDataChannelSpecStdVector self)"""
        return _COPASI.PlotDataChannelSpecStdVector_clear(self)

    def get_allocator(self):
        r"""get_allocator(PlotDataChannelSpecStdVector self) -> std::vector< CPlotDataChannelSpec >::allocator_type"""
        return _COPASI.PlotDataChannelSpecStdVector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(PlotDataChannelSpecStdVector self)"""
        return _COPASI.PlotDataChannelSpecStdVector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(PlotDataChannelSpecStdVector self, std::vector< CPlotDataChannelSpec >::iterator pos) -> std::vector< CPlotDataChannelSpec >::iterator
        erase(PlotDataChannelSpecStdVector self, std::vector< CPlotDataChannelSpec >::iterator first, std::vector< CPlotDataChannelSpec >::iterator last) -> std::vector< CPlotDataChannelSpec >::iterator
        """
        return _COPASI.PlotDataChannelSpecStdVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(PlotDataChannelSpecStdVector self) -> PlotDataChannelSpecStdVector
        __init__(PlotDataChannelSpecStdVector self, PlotDataChannelSpecStdVector other) -> PlotDataChannelSpecStdVector
        __init__(PlotDataChannelSpecStdVector self, std::vector< CPlotDataChannelSpec >::size_type size) -> PlotDataChannelSpecStdVector
        __init__(PlotDataChannelSpecStdVector self, std::vector< CPlotDataChannelSpec >::size_type size, CPlotDataChannelSpec value) -> PlotDataChannelSpecStdVector
        """
        _COPASI.PlotDataChannelSpecStdVector_swiginit(self, _COPASI.new_PlotDataChannelSpecStdVector(*args))

    def push_back(self, x):
        r"""push_back(PlotDataChannelSpecStdVector self, CPlotDataChannelSpec x)"""
        return _COPASI.PlotDataChannelSpecStdVector_push_back(self, x)

    def front(self):
        r"""front(PlotDataChannelSpecStdVector self) -> CPlotDataChannelSpec"""
        return _COPASI.PlotDataChannelSpecStdVector_front(self)

    def back(self):
        r"""back(PlotDataChannelSpecStdVector self) -> CPlotDataChannelSpec"""
        return _COPASI.PlotDataChannelSpecStdVector_back(self)

    def assign(self, n, x):
        r"""assign(PlotDataChannelSpecStdVector self, std::vector< CPlotDataChannelSpec >::size_type n, CPlotDataChannelSpec x)"""
        return _COPASI.PlotDataChannelSpecStdVector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(PlotDataChannelSpecStdVector self, std::vector< CPlotDataChannelSpec >::size_type new_size)
        resize(PlotDataChannelSpecStdVector self, std::vector< CPlotDataChannelSpec >::size_type new_size, CPlotDataChannelSpec x)
        """
        return _COPASI.PlotDataChannelSpecStdVector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(PlotDataChannelSpecStdVector self, std::vector< CPlotDataChannelSpec >::iterator pos, CPlotDataChannelSpec x) -> std::vector< CPlotDataChannelSpec >::iterator
        insert(PlotDataChannelSpecStdVector self, std::vector< CPlotDataChannelSpec >::iterator pos, std::vector< CPlotDataChannelSpec >::size_type n, CPlotDataChannelSpec x)
        """
        return _COPASI.PlotDataChannelSpecStdVector_insert(self, *args)

    def reserve(self, n):
        r"""reserve(PlotDataChannelSpecStdVector self, std::vector< CPlotDataChannelSpec >::size_type n)"""
        return _COPASI.PlotDataChannelSpecStdVector_reserve(self, n)

    def capacity(self):
        r"""capacity(PlotDataChannelSpecStdVector self) -> std::vector< CPlotDataChannelSpec >::size_type"""
        return _COPASI.PlotDataChannelSpecStdVector_capacity(self)
    __swig_destroy__ = _COPASI.delete_PlotDataChannelSpecStdVector

# Register PlotDataChannelSpecStdVector in _COPASI:
_COPASI.PlotDataChannelSpecStdVector_swigregister(PlotDataChannelSpecStdVector)
class OutputDefinitionVector(CDataContainer):
    r"""Proxy of C++ CDataVector< CPlotSpecification > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _COPASI.delete_OutputDefinitionVector

    def cleanup(self):
        r"""cleanup(OutputDefinitionVector self)"""
        return _COPASI.OutputDefinitionVector_cleanup(self)

    def addCopy(self, src):
        r"""addCopy(OutputDefinitionVector self, CPlotSpecification src) -> bool"""
        return _COPASI.OutputDefinitionVector_addCopy(self, src)

    def swap(self, indexFrom, indexTo):
        r"""swap(OutputDefinitionVector self, size_t const & indexFrom, size_t const & indexTo)"""
        return _COPASI.OutputDefinitionVector_swap(self, indexFrom, indexTo)

    def add(self, pObject, adopt=True):
        
        return _COPASI.OutputDefinitionVector_add(self, pObject, adopt)

    def getObject(self, name):
        r"""getObject(OutputDefinitionVector self, CCommonName name) -> CObjectInterface"""
        return _COPASI.OutputDefinitionVector_getObject(self, name)

    def size(self):
        r"""size(OutputDefinitionVector self) -> size_t"""
        return _COPASI.OutputDefinitionVector_size(self)

    def empty(self):
        r"""empty(OutputDefinitionVector self) -> bool"""
        return _COPASI.OutputDefinitionVector_empty(self)

    def clear(self):
        r"""clear(OutputDefinitionVector self)"""
        return _COPASI.OutputDefinitionVector_clear(self)

    def getIndex(self, pObject):
        r"""getIndex(OutputDefinitionVector self, CDataObject pObject) -> size_t"""
        return _COPASI.OutputDefinitionVector_getIndex(self, pObject)

    def remove(self, index):
        r"""remove(OutputDefinitionVector self, unsigned int index)"""
        return _COPASI.OutputDefinitionVector_remove(self, index)

    def get(self, index):
        r"""get(OutputDefinitionVector self, unsigned int index) -> CDataObject"""
        return _COPASI.OutputDefinitionVector_get(self, index)

    def addAndOwn(self, DISOWN):
        r"""addAndOwn(OutputDefinitionVector self, CPlotSpecification DISOWN) -> bool"""
        return _COPASI.OutputDefinitionVector_addAndOwn(self, DISOWN)

    def removeObject(self, pObject):
        r"""removeObject(OutputDefinitionVector self, CDataObject pObject) -> bool"""
        return _COPASI.OutputDefinitionVector_removeObject(self, pObject)

    def __len__(self):
        r"""__len__(OutputDefinitionVector self) -> size_t"""
        return _COPASI.OutputDefinitionVector___len__(self)

    def __getitem__(self, index):
        r"""__getitem__(OutputDefinitionVector self, unsigned int index) -> CDataObject"""
        return _COPASI.OutputDefinitionVector___getitem__(self, index)

# Register OutputDefinitionVector in _COPASI:
_COPASI.OutputDefinitionVector_swigregister(OutputDefinitionVector)
class OutputDefinitionVectorN(OutputDefinitionVector):
    r"""Proxy of C++ CDataVectorN< CPlotSpecification > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(OutputDefinitionVectorN self, std::string const & name="NoName", CDataContainer pParent=static_cast< CDataContainer * >((void *) 0)) -> OutputDefinitionVectorN
        __init__(OutputDefinitionVectorN self, OutputDefinitionVectorN src, CDataContainer pParent) -> OutputDefinitionVectorN
        """
        _COPASI.OutputDefinitionVectorN_swiginit(self, _COPASI.new_OutputDefinitionVectorN(*args))
    __swig_destroy__ = _COPASI.delete_OutputDefinitionVectorN

    def addCopy(self, src):
        r"""addCopy(OutputDefinitionVectorN self, CPlotSpecification src) -> bool"""
        return _COPASI.OutputDefinitionVectorN_addCopy(self, src)

    def add(self, pObject, adopt=True):
        
        return _COPASI.OutputDefinitionVectorN_add(self, pObject, adopt)

    def removeByName(self, name):
        r"""removeByName(OutputDefinitionVectorN self, std::string const & name)"""
        return _COPASI.OutputDefinitionVectorN_removeByName(self, name)

    def getObject(self, name):
        r"""getObject(OutputDefinitionVectorN self, CCommonName name) -> CObjectInterface"""
        return _COPASI.OutputDefinitionVectorN_getObject(self, name)

    def getIndexByName(self, name):
        r"""getIndexByName(OutputDefinitionVectorN self, std::string const & name) -> size_t"""
        return _COPASI.OutputDefinitionVectorN_getIndexByName(self, name)

    def createUniqueName(self, name):
        r"""createUniqueName(OutputDefinitionVectorN self, std::string & name)"""
        return _COPASI.OutputDefinitionVectorN_createUniqueName(self, name)

    def getByName(self, name):
        r"""getByName(OutputDefinitionVectorN self, std::string const & name) -> CDataObject"""
        return _COPASI.OutputDefinitionVectorN_getByName(self, name)

    def __getitem__(self, *args):
        r"""
        __getitem__(OutputDefinitionVectorN self, std::string const & name) -> CDataObject
        __getitem__(OutputDefinitionVectorN self, unsigned int index) -> CDataObject
        """
        return _COPASI.OutputDefinitionVectorN___getitem__(self, *args)

# Register OutputDefinitionVectorN in _COPASI:
_COPASI.OutputDefinitionVectorN_swigregister(OutputDefinitionVectorN)
class PlotItemVector(CDataContainer):
    r"""Proxy of C++ CDataVector< CPlotItem > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _COPASI.delete_PlotItemVector

    def cleanup(self):
        r"""cleanup(PlotItemVector self)"""
        return _COPASI.PlotItemVector_cleanup(self)

    def addCopy(self, src):
        r"""addCopy(PlotItemVector self, CPlotItem src) -> bool"""
        return _COPASI.PlotItemVector_addCopy(self, src)

    def swap(self, indexFrom, indexTo):
        r"""swap(PlotItemVector self, size_t const & indexFrom, size_t const & indexTo)"""
        return _COPASI.PlotItemVector_swap(self, indexFrom, indexTo)

    def add(self, pObject, adopt=True):
        
        return _COPASI.PlotItemVector_add(self, pObject, adopt)

    def getObject(self, name):
        r"""getObject(PlotItemVector self, CCommonName name) -> CObjectInterface"""
        return _COPASI.PlotItemVector_getObject(self, name)

    def size(self):
        r"""size(PlotItemVector self) -> size_t"""
        return _COPASI.PlotItemVector_size(self)

    def empty(self):
        r"""empty(PlotItemVector self) -> bool"""
        return _COPASI.PlotItemVector_empty(self)

    def clear(self):
        r"""clear(PlotItemVector self)"""
        return _COPASI.PlotItemVector_clear(self)

    def getIndex(self, pObject):
        r"""getIndex(PlotItemVector self, CDataObject pObject) -> size_t"""
        return _COPASI.PlotItemVector_getIndex(self, pObject)

    def remove(self, index):
        r"""remove(PlotItemVector self, unsigned int index)"""
        return _COPASI.PlotItemVector_remove(self, index)

    def get(self, index):
        r"""get(PlotItemVector self, unsigned int index) -> CDataObject"""
        return _COPASI.PlotItemVector_get(self, index)

    def addAndOwn(self, DISOWN):
        r"""addAndOwn(PlotItemVector self, CPlotItem DISOWN) -> bool"""
        return _COPASI.PlotItemVector_addAndOwn(self, DISOWN)

    def removeObject(self, pObject):
        r"""removeObject(PlotItemVector self, CDataObject pObject) -> bool"""
        return _COPASI.PlotItemVector_removeObject(self, pObject)

    def __len__(self):
        r"""__len__(PlotItemVector self) -> size_t"""
        return _COPASI.PlotItemVector___len__(self)

    def __getitem__(self, index):
        r"""__getitem__(PlotItemVector self, unsigned int index) -> CDataObject"""
        return _COPASI.PlotItemVector___getitem__(self, index)

# Register PlotItemVector in _COPASI:
_COPASI.PlotItemVector_swigregister(PlotItemVector)
class PlotItemVectorN(PlotItemVector):
    r"""Proxy of C++ CDataVectorN< CPlotItem > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(PlotItemVectorN self, std::string const & name="NoName", CDataContainer pParent=static_cast< CDataContainer * >((void *) 0)) -> PlotItemVectorN
        __init__(PlotItemVectorN self, PlotItemVectorN src, CDataContainer pParent) -> PlotItemVectorN
        """
        _COPASI.PlotItemVectorN_swiginit(self, _COPASI.new_PlotItemVectorN(*args))
    __swig_destroy__ = _COPASI.delete_PlotItemVectorN

    def addCopy(self, src):
        r"""addCopy(PlotItemVectorN self, CPlotItem src) -> bool"""
        return _COPASI.PlotItemVectorN_addCopy(self, src)

    def add(self, pObject, adopt=True):
        
        return _COPASI.PlotItemVectorN_add(self, pObject, adopt)

    def removeByName(self, name):
        r"""removeByName(PlotItemVectorN self, std::string const & name)"""
        return _COPASI.PlotItemVectorN_removeByName(self, name)

    def getObject(self, name):
        r"""getObject(PlotItemVectorN self, CCommonName name) -> CObjectInterface"""
        return _COPASI.PlotItemVectorN_getObject(self, name)

    def getIndexByName(self, name):
        r"""getIndexByName(PlotItemVectorN self, std::string const & name) -> size_t"""
        return _COPASI.PlotItemVectorN_getIndexByName(self, name)

    def createUniqueName(self, name):
        r"""createUniqueName(PlotItemVectorN self, std::string & name)"""
        return _COPASI.PlotItemVectorN_createUniqueName(self, name)

    def getByName(self, name):
        r"""getByName(PlotItemVectorN self, std::string const & name) -> CDataObject"""
        return _COPASI.PlotItemVectorN_getByName(self, name)

    def __getitem__(self, *args):
        r"""
        __getitem__(PlotItemVectorN self, std::string const & name) -> CDataObject
        __getitem__(PlotItemVectorN self, unsigned int index) -> CDataObject
        """
        return _COPASI.PlotItemVectorN___getitem__(self, *args)

# Register PlotItemVectorN in _COPASI:
_COPASI.PlotItemVectorN_swigregister(PlotItemVectorN)
class MoietyStdVector(object):
    r"""Proxy of C++ std::vector< CMoiety * > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(MoietyStdVector self) -> SwigPyIterator"""
        return _COPASI.MoietyStdVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(MoietyStdVector self) -> bool"""
        return _COPASI.MoietyStdVector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(MoietyStdVector self) -> bool"""
        return _COPASI.MoietyStdVector___bool__(self)

    def __len__(self):
        r"""__len__(MoietyStdVector self) -> std::vector< CMoiety * >::size_type"""
        return _COPASI.MoietyStdVector___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(MoietyStdVector self, std::vector< CMoiety * >::difference_type i, std::vector< CMoiety * >::difference_type j) -> MoietyStdVector"""
        return _COPASI.MoietyStdVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(MoietyStdVector self, std::vector< CMoiety * >::difference_type i, std::vector< CMoiety * >::difference_type j)
        __setslice__(MoietyStdVector self, std::vector< CMoiety * >::difference_type i, std::vector< CMoiety * >::difference_type j, MoietyStdVector v)
        """
        return _COPASI.MoietyStdVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(MoietyStdVector self, std::vector< CMoiety * >::difference_type i, std::vector< CMoiety * >::difference_type j)"""
        return _COPASI.MoietyStdVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(MoietyStdVector self, std::vector< CMoiety * >::difference_type i)
        __delitem__(MoietyStdVector self, SWIGPY_SLICEOBJECT * slice)
        """
        return _COPASI.MoietyStdVector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(MoietyStdVector self, SWIGPY_SLICEOBJECT * slice) -> MoietyStdVector
        __getitem__(MoietyStdVector self, std::vector< CMoiety * >::difference_type i) -> CMoiety
        """
        return _COPASI.MoietyStdVector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(MoietyStdVector self, SWIGPY_SLICEOBJECT * slice, MoietyStdVector v)
        __setitem__(MoietyStdVector self, SWIGPY_SLICEOBJECT * slice)
        __setitem__(MoietyStdVector self, std::vector< CMoiety * >::difference_type i, CMoiety x)
        """
        return _COPASI.MoietyStdVector___setitem__(self, *args)

    def pop(self):
        r"""pop(MoietyStdVector self) -> CMoiety"""
        return _COPASI.MoietyStdVector_pop(self)

    def append(self, x):
        r"""append(MoietyStdVector self, CMoiety x)"""
        return _COPASI.MoietyStdVector_append(self, x)

    def empty(self):
        r"""empty(MoietyStdVector self) -> bool"""
        return _COPASI.MoietyStdVector_empty(self)

    def size(self):
        r"""size(MoietyStdVector self) -> std::vector< CMoiety * >::size_type"""
        return _COPASI.MoietyStdVector_size(self)

    def swap(self, v):
        r"""swap(MoietyStdVector self, MoietyStdVector v)"""
        return _COPASI.MoietyStdVector_swap(self, v)

    def rbegin(self):
        r"""rbegin(MoietyStdVector self) -> std::vector< CMoiety * >::reverse_iterator"""
        return _COPASI.MoietyStdVector_rbegin(self)

    def rend(self):
        r"""rend(MoietyStdVector self) -> std::vector< CMoiety * >::reverse_iterator"""
        return _COPASI.MoietyStdVector_rend(self)

    def clear(self):
        r"""clear(MoietyStdVector self)"""
        return _COPASI.MoietyStdVector_clear(self)

    def get_allocator(self):
        r"""get_allocator(MoietyStdVector self) -> std::vector< CMoiety * >::allocator_type"""
        return _COPASI.MoietyStdVector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(MoietyStdVector self)"""
        return _COPASI.MoietyStdVector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(MoietyStdVector self, std::vector< CMoiety * >::iterator pos) -> std::vector< CMoiety * >::iterator
        erase(MoietyStdVector self, std::vector< CMoiety * >::iterator first, std::vector< CMoiety * >::iterator last) -> std::vector< CMoiety * >::iterator
        """
        return _COPASI.MoietyStdVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(MoietyStdVector self) -> MoietyStdVector
        __init__(MoietyStdVector self, MoietyStdVector other) -> MoietyStdVector
        __init__(MoietyStdVector self, std::vector< CMoiety * >::size_type size) -> MoietyStdVector
        __init__(MoietyStdVector self, std::vector< CMoiety * >::size_type size, CMoiety value) -> MoietyStdVector
        """
        _COPASI.MoietyStdVector_swiginit(self, _COPASI.new_MoietyStdVector(*args))

    def push_back(self, x):
        r"""push_back(MoietyStdVector self, CMoiety x)"""
        return _COPASI.MoietyStdVector_push_back(self, x)

    def front(self):
        r"""front(MoietyStdVector self) -> CMoiety"""
        return _COPASI.MoietyStdVector_front(self)

    def back(self):
        r"""back(MoietyStdVector self) -> CMoiety"""
        return _COPASI.MoietyStdVector_back(self)

    def assign(self, n, x):
        r"""assign(MoietyStdVector self, std::vector< CMoiety * >::size_type n, CMoiety x)"""
        return _COPASI.MoietyStdVector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(MoietyStdVector self, std::vector< CMoiety * >::size_type new_size)
        resize(MoietyStdVector self, std::vector< CMoiety * >::size_type new_size, CMoiety x)
        """
        return _COPASI.MoietyStdVector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(MoietyStdVector self, std::vector< CMoiety * >::iterator pos, CMoiety x) -> std::vector< CMoiety * >::iterator
        insert(MoietyStdVector self, std::vector< CMoiety * >::iterator pos, std::vector< CMoiety * >::size_type n, CMoiety x)
        """
        return _COPASI.MoietyStdVector_insert(self, *args)

    def reserve(self, n):
        r"""reserve(MoietyStdVector self, std::vector< CMoiety * >::size_type n)"""
        return _COPASI.MoietyStdVector_reserve(self, n)

    def capacity(self):
        r"""capacity(MoietyStdVector self) -> std::vector< CMoiety * >::size_type"""
        return _COPASI.MoietyStdVector_capacity(self)
    __swig_destroy__ = _COPASI.delete_MoietyStdVector

# Register MoietyStdVector in _COPASI:
_COPASI.MoietyStdVector_swigregister(MoietyStdVector)
class MoietyVector(CDataContainer):
    r"""Proxy of C++ CDataVector< CMoiety > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _COPASI.delete_MoietyVector

    def cleanup(self):
        r"""cleanup(MoietyVector self)"""
        return _COPASI.MoietyVector_cleanup(self)

    def addCopy(self, src):
        r"""addCopy(MoietyVector self, CMoiety src) -> bool"""
        return _COPASI.MoietyVector_addCopy(self, src)

    def swap(self, indexFrom, indexTo):
        r"""swap(MoietyVector self, size_t const & indexFrom, size_t const & indexTo)"""
        return _COPASI.MoietyVector_swap(self, indexFrom, indexTo)

    def add(self, pObject, adopt=True):
        
        return _COPASI.MoietyVector_add(self, pObject, adopt)

    def getObject(self, name):
        r"""getObject(MoietyVector self, CCommonName name) -> CObjectInterface"""
        return _COPASI.MoietyVector_getObject(self, name)

    def size(self):
        r"""size(MoietyVector self) -> size_t"""
        return _COPASI.MoietyVector_size(self)

    def empty(self):
        r"""empty(MoietyVector self) -> bool"""
        return _COPASI.MoietyVector_empty(self)

    def clear(self):
        r"""clear(MoietyVector self)"""
        return _COPASI.MoietyVector_clear(self)

    def getIndex(self, pObject):
        r"""getIndex(MoietyVector self, CDataObject pObject) -> size_t"""
        return _COPASI.MoietyVector_getIndex(self, pObject)

    def remove(self, index):
        r"""remove(MoietyVector self, unsigned int index)"""
        return _COPASI.MoietyVector_remove(self, index)

    def get(self, index):
        r"""get(MoietyVector self, unsigned int index) -> CDataObject"""
        return _COPASI.MoietyVector_get(self, index)

    def addAndOwn(self, DISOWN):
        r"""addAndOwn(MoietyVector self, CMoiety DISOWN) -> bool"""
        return _COPASI.MoietyVector_addAndOwn(self, DISOWN)

    def removeObject(self, pObject):
        r"""removeObject(MoietyVector self, CDataObject pObject) -> bool"""
        return _COPASI.MoietyVector_removeObject(self, pObject)

    def __len__(self):
        r"""__len__(MoietyVector self) -> size_t"""
        return _COPASI.MoietyVector___len__(self)

    def __getitem__(self, index):
        r"""__getitem__(MoietyVector self, unsigned int index) -> CDataObject"""
        return _COPASI.MoietyVector___getitem__(self, index)

# Register MoietyVector in _COPASI:
_COPASI.MoietyVector_swigregister(MoietyVector)
class MetabStdVector(object):
    r"""Proxy of C++ std::vector< CMetab * > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(MetabStdVector self) -> SwigPyIterator"""
        return _COPASI.MetabStdVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(MetabStdVector self) -> bool"""
        return _COPASI.MetabStdVector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(MetabStdVector self) -> bool"""
        return _COPASI.MetabStdVector___bool__(self)

    def __len__(self):
        r"""__len__(MetabStdVector self) -> std::vector< CMetab * >::size_type"""
        return _COPASI.MetabStdVector___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(MetabStdVector self, std::vector< CMetab * >::difference_type i, std::vector< CMetab * >::difference_type j) -> MetabStdVector"""
        return _COPASI.MetabStdVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(MetabStdVector self, std::vector< CMetab * >::difference_type i, std::vector< CMetab * >::difference_type j)
        __setslice__(MetabStdVector self, std::vector< CMetab * >::difference_type i, std::vector< CMetab * >::difference_type j, MetabStdVector v)
        """
        return _COPASI.MetabStdVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(MetabStdVector self, std::vector< CMetab * >::difference_type i, std::vector< CMetab * >::difference_type j)"""
        return _COPASI.MetabStdVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(MetabStdVector self, std::vector< CMetab * >::difference_type i)
        __delitem__(MetabStdVector self, SWIGPY_SLICEOBJECT * slice)
        """
        return _COPASI.MetabStdVector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(MetabStdVector self, SWIGPY_SLICEOBJECT * slice) -> MetabStdVector
        __getitem__(MetabStdVector self, std::vector< CMetab * >::difference_type i) -> CMetab
        """
        return _COPASI.MetabStdVector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(MetabStdVector self, SWIGPY_SLICEOBJECT * slice, MetabStdVector v)
        __setitem__(MetabStdVector self, SWIGPY_SLICEOBJECT * slice)
        __setitem__(MetabStdVector self, std::vector< CMetab * >::difference_type i, CMetab x)
        """
        return _COPASI.MetabStdVector___setitem__(self, *args)

    def pop(self):
        r"""pop(MetabStdVector self) -> CMetab"""
        return _COPASI.MetabStdVector_pop(self)

    def append(self, x):
        r"""append(MetabStdVector self, CMetab x)"""
        return _COPASI.MetabStdVector_append(self, x)

    def empty(self):
        r"""empty(MetabStdVector self) -> bool"""
        return _COPASI.MetabStdVector_empty(self)

    def size(self):
        r"""size(MetabStdVector self) -> std::vector< CMetab * >::size_type"""
        return _COPASI.MetabStdVector_size(self)

    def swap(self, v):
        r"""swap(MetabStdVector self, MetabStdVector v)"""
        return _COPASI.MetabStdVector_swap(self, v)

    def rbegin(self):
        r"""rbegin(MetabStdVector self) -> std::vector< CMetab * >::reverse_iterator"""
        return _COPASI.MetabStdVector_rbegin(self)

    def rend(self):
        r"""rend(MetabStdVector self) -> std::vector< CMetab * >::reverse_iterator"""
        return _COPASI.MetabStdVector_rend(self)

    def clear(self):
        r"""clear(MetabStdVector self)"""
        return _COPASI.MetabStdVector_clear(self)

    def get_allocator(self):
        r"""get_allocator(MetabStdVector self) -> std::vector< CMetab * >::allocator_type"""
        return _COPASI.MetabStdVector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(MetabStdVector self)"""
        return _COPASI.MetabStdVector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(MetabStdVector self, std::vector< CMetab * >::iterator pos) -> std::vector< CMetab * >::iterator
        erase(MetabStdVector self, std::vector< CMetab * >::iterator first, std::vector< CMetab * >::iterator last) -> std::vector< CMetab * >::iterator
        """
        return _COPASI.MetabStdVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(MetabStdVector self) -> MetabStdVector
        __init__(MetabStdVector self, MetabStdVector other) -> MetabStdVector
        __init__(MetabStdVector self, std::vector< CMetab * >::size_type size) -> MetabStdVector
        __init__(MetabStdVector self, std::vector< CMetab * >::size_type size, CMetab value) -> MetabStdVector
        """
        _COPASI.MetabStdVector_swiginit(self, _COPASI.new_MetabStdVector(*args))

    def push_back(self, x):
        r"""push_back(MetabStdVector self, CMetab x)"""
        return _COPASI.MetabStdVector_push_back(self, x)

    def front(self):
        r"""front(MetabStdVector self) -> CMetab"""
        return _COPASI.MetabStdVector_front(self)

    def back(self):
        r"""back(MetabStdVector self) -> CMetab"""
        return _COPASI.MetabStdVector_back(self)

    def assign(self, n, x):
        r"""assign(MetabStdVector self, std::vector< CMetab * >::size_type n, CMetab x)"""
        return _COPASI.MetabStdVector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(MetabStdVector self, std::vector< CMetab * >::size_type new_size)
        resize(MetabStdVector self, std::vector< CMetab * >::size_type new_size, CMetab x)
        """
        return _COPASI.MetabStdVector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(MetabStdVector self, std::vector< CMetab * >::iterator pos, CMetab x) -> std::vector< CMetab * >::iterator
        insert(MetabStdVector self, std::vector< CMetab * >::iterator pos, std::vector< CMetab * >::size_type n, CMetab x)
        """
        return _COPASI.MetabStdVector_insert(self, *args)

    def reserve(self, n):
        r"""reserve(MetabStdVector self, std::vector< CMetab * >::size_type n)"""
        return _COPASI.MetabStdVector_reserve(self, n)

    def capacity(self):
        r"""capacity(MetabStdVector self) -> std::vector< CMetab * >::size_type"""
        return _COPASI.MetabStdVector_capacity(self)
    __swig_destroy__ = _COPASI.delete_MetabStdVector

# Register MetabStdVector in _COPASI:
_COPASI.MetabStdVector_swigregister(MetabStdVector)
class MetabVector(CDataContainer):
    r"""Proxy of C++ CDataVector< CMetab > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _COPASI.delete_MetabVector

    def cleanup(self):
        r"""cleanup(MetabVector self)"""
        return _COPASI.MetabVector_cleanup(self)

    def addCopy(self, src):
        r"""addCopy(MetabVector self, CMetab src) -> bool"""
        return _COPASI.MetabVector_addCopy(self, src)

    def swap(self, indexFrom, indexTo):
        r"""swap(MetabVector self, size_t const & indexFrom, size_t const & indexTo)"""
        return _COPASI.MetabVector_swap(self, indexFrom, indexTo)

    def add(self, pObject, adopt=True):
        
        return _COPASI.MetabVector_add(self, pObject, adopt)

    def getObject(self, name):
        r"""getObject(MetabVector self, CCommonName name) -> CObjectInterface"""
        return _COPASI.MetabVector_getObject(self, name)

    def size(self):
        r"""size(MetabVector self) -> size_t"""
        return _COPASI.MetabVector_size(self)

    def empty(self):
        r"""empty(MetabVector self) -> bool"""
        return _COPASI.MetabVector_empty(self)

    def clear(self):
        r"""clear(MetabVector self)"""
        return _COPASI.MetabVector_clear(self)

    def getIndex(self, pObject):
        r"""getIndex(MetabVector self, CDataObject pObject) -> size_t"""
        return _COPASI.MetabVector_getIndex(self, pObject)

    def remove(self, index):
        r"""remove(MetabVector self, unsigned int index)"""
        return _COPASI.MetabVector_remove(self, index)

    def get(self, index):
        r"""get(MetabVector self, unsigned int index) -> CDataObject"""
        return _COPASI.MetabVector_get(self, index)

    def addAndOwn(self, DISOWN):
        r"""addAndOwn(MetabVector self, CMetab DISOWN) -> bool"""
        return _COPASI.MetabVector_addAndOwn(self, DISOWN)

    def removeObject(self, pObject):
        r"""removeObject(MetabVector self, CDataObject pObject) -> bool"""
        return _COPASI.MetabVector_removeObject(self, pObject)

    def __len__(self):
        r"""__len__(MetabVector self) -> size_t"""
        return _COPASI.MetabVector___len__(self)

    def __getitem__(self, index):
        r"""__getitem__(MetabVector self, unsigned int index) -> CDataObject"""
        return _COPASI.MetabVector___getitem__(self, index)

# Register MetabVector in _COPASI:
_COPASI.MetabVector_swigregister(MetabVector)
class MetabVectorN(MetabVector):
    r"""Proxy of C++ CDataVectorN< CMetab > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(MetabVectorN self, std::string const & name="NoName", CDataContainer pParent=static_cast< CDataContainer * >((void *) 0)) -> MetabVectorN
        __init__(MetabVectorN self, MetabVectorN src, CDataContainer pParent) -> MetabVectorN
        """
        _COPASI.MetabVectorN_swiginit(self, _COPASI.new_MetabVectorN(*args))
    __swig_destroy__ = _COPASI.delete_MetabVectorN

    def addCopy(self, src):
        r"""addCopy(MetabVectorN self, CMetab src) -> bool"""
        return _COPASI.MetabVectorN_addCopy(self, src)

    def add(self, pObject, adopt=True):
        
        return _COPASI.MetabVectorN_add(self, pObject, adopt)

    def removeByName(self, name):
        r"""removeByName(MetabVectorN self, std::string const & name)"""
        return _COPASI.MetabVectorN_removeByName(self, name)

    def getObject(self, name):
        r"""getObject(MetabVectorN self, CCommonName name) -> CObjectInterface"""
        return _COPASI.MetabVectorN_getObject(self, name)

    def getIndexByName(self, name):
        r"""getIndexByName(MetabVectorN self, std::string const & name) -> size_t"""
        return _COPASI.MetabVectorN_getIndexByName(self, name)

    def createUniqueName(self, name):
        r"""createUniqueName(MetabVectorN self, std::string & name)"""
        return _COPASI.MetabVectorN_createUniqueName(self, name)

    def getByName(self, name):
        r"""getByName(MetabVectorN self, std::string const & name) -> CDataObject"""
        return _COPASI.MetabVectorN_getByName(self, name)

    def __getitem__(self, *args):
        r"""
        __getitem__(MetabVectorN self, std::string const & name) -> CDataObject
        __getitem__(MetabVectorN self, unsigned int index) -> CDataObject
        """
        return _COPASI.MetabVectorN___getitem__(self, *args)

# Register MetabVectorN in _COPASI:
_COPASI.MetabVectorN_swigregister(MetabVectorN)
class MetabVectorNS(MetabVectorN):
    r"""Proxy of C++ CDataVectorNS< CMetab > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(MetabVectorNS self, std::string const & name="NoName", CDataContainer pParent=static_cast< CDataContainer * >((void *) 0)) -> MetabVectorNS
        __init__(MetabVectorNS self, MetabVectorNS src, CDataContainer pParent) -> MetabVectorNS
        """
        _COPASI.MetabVectorNS_swiginit(self, _COPASI.new_MetabVectorNS(*args))
    __swig_destroy__ = _COPASI.delete_MetabVectorNS

# Register MetabVectorNS in _COPASI:
_COPASI.MetabVectorNS_swigregister(MetabVectorNS)
class CompartmentStdVector(object):
    r"""Proxy of C++ std::vector< CCompartment * > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(CompartmentStdVector self) -> SwigPyIterator"""
        return _COPASI.CompartmentStdVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(CompartmentStdVector self) -> bool"""
        return _COPASI.CompartmentStdVector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(CompartmentStdVector self) -> bool"""
        return _COPASI.CompartmentStdVector___bool__(self)

    def __len__(self):
        r"""__len__(CompartmentStdVector self) -> std::vector< CCompartment * >::size_type"""
        return _COPASI.CompartmentStdVector___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(CompartmentStdVector self, std::vector< CCompartment * >::difference_type i, std::vector< CCompartment * >::difference_type j) -> CompartmentStdVector"""
        return _COPASI.CompartmentStdVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(CompartmentStdVector self, std::vector< CCompartment * >::difference_type i, std::vector< CCompartment * >::difference_type j)
        __setslice__(CompartmentStdVector self, std::vector< CCompartment * >::difference_type i, std::vector< CCompartment * >::difference_type j, CompartmentStdVector v)
        """
        return _COPASI.CompartmentStdVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(CompartmentStdVector self, std::vector< CCompartment * >::difference_type i, std::vector< CCompartment * >::difference_type j)"""
        return _COPASI.CompartmentStdVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(CompartmentStdVector self, std::vector< CCompartment * >::difference_type i)
        __delitem__(CompartmentStdVector self, SWIGPY_SLICEOBJECT * slice)
        """
        return _COPASI.CompartmentStdVector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(CompartmentStdVector self, SWIGPY_SLICEOBJECT * slice) -> CompartmentStdVector
        __getitem__(CompartmentStdVector self, std::vector< CCompartment * >::difference_type i) -> CCompartment
        """
        return _COPASI.CompartmentStdVector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(CompartmentStdVector self, SWIGPY_SLICEOBJECT * slice, CompartmentStdVector v)
        __setitem__(CompartmentStdVector self, SWIGPY_SLICEOBJECT * slice)
        __setitem__(CompartmentStdVector self, std::vector< CCompartment * >::difference_type i, CCompartment x)
        """
        return _COPASI.CompartmentStdVector___setitem__(self, *args)

    def pop(self):
        r"""pop(CompartmentStdVector self) -> CCompartment"""
        return _COPASI.CompartmentStdVector_pop(self)

    def append(self, x):
        r"""append(CompartmentStdVector self, CCompartment x)"""
        return _COPASI.CompartmentStdVector_append(self, x)

    def empty(self):
        r"""empty(CompartmentStdVector self) -> bool"""
        return _COPASI.CompartmentStdVector_empty(self)

    def size(self):
        r"""size(CompartmentStdVector self) -> std::vector< CCompartment * >::size_type"""
        return _COPASI.CompartmentStdVector_size(self)

    def swap(self, v):
        r"""swap(CompartmentStdVector self, CompartmentStdVector v)"""
        return _COPASI.CompartmentStdVector_swap(self, v)

    def rbegin(self):
        r"""rbegin(CompartmentStdVector self) -> std::vector< CCompartment * >::reverse_iterator"""
        return _COPASI.CompartmentStdVector_rbegin(self)

    def rend(self):
        r"""rend(CompartmentStdVector self) -> std::vector< CCompartment * >::reverse_iterator"""
        return _COPASI.CompartmentStdVector_rend(self)

    def clear(self):
        r"""clear(CompartmentStdVector self)"""
        return _COPASI.CompartmentStdVector_clear(self)

    def get_allocator(self):
        r"""get_allocator(CompartmentStdVector self) -> std::vector< CCompartment * >::allocator_type"""
        return _COPASI.CompartmentStdVector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(CompartmentStdVector self)"""
        return _COPASI.CompartmentStdVector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(CompartmentStdVector self, std::vector< CCompartment * >::iterator pos) -> std::vector< CCompartment * >::iterator
        erase(CompartmentStdVector self, std::vector< CCompartment * >::iterator first, std::vector< CCompartment * >::iterator last) -> std::vector< CCompartment * >::iterator
        """
        return _COPASI.CompartmentStdVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(CompartmentStdVector self) -> CompartmentStdVector
        __init__(CompartmentStdVector self, CompartmentStdVector other) -> CompartmentStdVector
        __init__(CompartmentStdVector self, std::vector< CCompartment * >::size_type size) -> CompartmentStdVector
        __init__(CompartmentStdVector self, std::vector< CCompartment * >::size_type size, CCompartment value) -> CompartmentStdVector
        """
        _COPASI.CompartmentStdVector_swiginit(self, _COPASI.new_CompartmentStdVector(*args))

    def push_back(self, x):
        r"""push_back(CompartmentStdVector self, CCompartment x)"""
        return _COPASI.CompartmentStdVector_push_back(self, x)

    def front(self):
        r"""front(CompartmentStdVector self) -> CCompartment"""
        return _COPASI.CompartmentStdVector_front(self)

    def back(self):
        r"""back(CompartmentStdVector self) -> CCompartment"""
        return _COPASI.CompartmentStdVector_back(self)

    def assign(self, n, x):
        r"""assign(CompartmentStdVector self, std::vector< CCompartment * >::size_type n, CCompartment x)"""
        return _COPASI.CompartmentStdVector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(CompartmentStdVector self, std::vector< CCompartment * >::size_type new_size)
        resize(CompartmentStdVector self, std::vector< CCompartment * >::size_type new_size, CCompartment x)
        """
        return _COPASI.CompartmentStdVector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(CompartmentStdVector self, std::vector< CCompartment * >::iterator pos, CCompartment x) -> std::vector< CCompartment * >::iterator
        insert(CompartmentStdVector self, std::vector< CCompartment * >::iterator pos, std::vector< CCompartment * >::size_type n, CCompartment x)
        """
        return _COPASI.CompartmentStdVector_insert(self, *args)

    def reserve(self, n):
        r"""reserve(CompartmentStdVector self, std::vector< CCompartment * >::size_type n)"""
        return _COPASI.CompartmentStdVector_reserve(self, n)

    def capacity(self):
        r"""capacity(CompartmentStdVector self) -> std::vector< CCompartment * >::size_type"""
        return _COPASI.CompartmentStdVector_capacity(self)
    __swig_destroy__ = _COPASI.delete_CompartmentStdVector

# Register CompartmentStdVector in _COPASI:
_COPASI.CompartmentStdVector_swigregister(CompartmentStdVector)
class CompartmentVector(CDataContainer):
    r"""Proxy of C++ CDataVector< CCompartment > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _COPASI.delete_CompartmentVector

    def cleanup(self):
        r"""cleanup(CompartmentVector self)"""
        return _COPASI.CompartmentVector_cleanup(self)

    def addCopy(self, src):
        r"""addCopy(CompartmentVector self, CCompartment src) -> bool"""
        return _COPASI.CompartmentVector_addCopy(self, src)

    def swap(self, indexFrom, indexTo):
        r"""swap(CompartmentVector self, size_t const & indexFrom, size_t const & indexTo)"""
        return _COPASI.CompartmentVector_swap(self, indexFrom, indexTo)

    def add(self, pObject, adopt=True):
        
        return _COPASI.CompartmentVector_add(self, pObject, adopt)

    def getObject(self, name):
        r"""getObject(CompartmentVector self, CCommonName name) -> CObjectInterface"""
        return _COPASI.CompartmentVector_getObject(self, name)

    def size(self):
        r"""size(CompartmentVector self) -> size_t"""
        return _COPASI.CompartmentVector_size(self)

    def empty(self):
        r"""empty(CompartmentVector self) -> bool"""
        return _COPASI.CompartmentVector_empty(self)

    def clear(self):
        r"""clear(CompartmentVector self)"""
        return _COPASI.CompartmentVector_clear(self)

    def getIndex(self, pObject):
        r"""getIndex(CompartmentVector self, CDataObject pObject) -> size_t"""
        return _COPASI.CompartmentVector_getIndex(self, pObject)

    def remove(self, index):
        r"""remove(CompartmentVector self, unsigned int index)"""
        return _COPASI.CompartmentVector_remove(self, index)

    def get(self, index):
        r"""get(CompartmentVector self, unsigned int index) -> CDataObject"""
        return _COPASI.CompartmentVector_get(self, index)

    def addAndOwn(self, DISOWN):
        r"""addAndOwn(CompartmentVector self, CCompartment DISOWN) -> bool"""
        return _COPASI.CompartmentVector_addAndOwn(self, DISOWN)

    def removeObject(self, pObject):
        r"""removeObject(CompartmentVector self, CDataObject pObject) -> bool"""
        return _COPASI.CompartmentVector_removeObject(self, pObject)

    def __len__(self):
        r"""__len__(CompartmentVector self) -> size_t"""
        return _COPASI.CompartmentVector___len__(self)

    def __getitem__(self, index):
        r"""__getitem__(CompartmentVector self, unsigned int index) -> CDataObject"""
        return _COPASI.CompartmentVector___getitem__(self, index)

# Register CompartmentVector in _COPASI:
_COPASI.CompartmentVector_swigregister(CompartmentVector)
class CompartmentVectorN(CompartmentVector):
    r"""Proxy of C++ CDataVectorN< CCompartment > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CompartmentVectorN self, std::string const & name="NoName", CDataContainer pParent=static_cast< CDataContainer * >((void *) 0)) -> CompartmentVectorN
        __init__(CompartmentVectorN self, CompartmentVectorN src, CDataContainer pParent) -> CompartmentVectorN
        """
        _COPASI.CompartmentVectorN_swiginit(self, _COPASI.new_CompartmentVectorN(*args))
    __swig_destroy__ = _COPASI.delete_CompartmentVectorN

    def addCopy(self, src):
        r"""addCopy(CompartmentVectorN self, CCompartment src) -> bool"""
        return _COPASI.CompartmentVectorN_addCopy(self, src)

    def add(self, pObject, adopt=True):
        
        return _COPASI.CompartmentVectorN_add(self, pObject, adopt)

    def removeByName(self, name):
        r"""removeByName(CompartmentVectorN self, std::string const & name)"""
        return _COPASI.CompartmentVectorN_removeByName(self, name)

    def getObject(self, name):
        r"""getObject(CompartmentVectorN self, CCommonName name) -> CObjectInterface"""
        return _COPASI.CompartmentVectorN_getObject(self, name)

    def getIndexByName(self, name):
        r"""getIndexByName(CompartmentVectorN self, std::string const & name) -> size_t"""
        return _COPASI.CompartmentVectorN_getIndexByName(self, name)

    def createUniqueName(self, name):
        r"""createUniqueName(CompartmentVectorN self, std::string & name)"""
        return _COPASI.CompartmentVectorN_createUniqueName(self, name)

    def getByName(self, name):
        r"""getByName(CompartmentVectorN self, std::string const & name) -> CDataObject"""
        return _COPASI.CompartmentVectorN_getByName(self, name)

    def __getitem__(self, *args):
        r"""
        __getitem__(CompartmentVectorN self, std::string const & name) -> CDataObject
        __getitem__(CompartmentVectorN self, unsigned int index) -> CDataObject
        """
        return _COPASI.CompartmentVectorN___getitem__(self, *args)

# Register CompartmentVectorN in _COPASI:
_COPASI.CompartmentVectorN_swigregister(CompartmentVectorN)
class CompartmentVectorNS(CompartmentVectorN):
    r"""Proxy of C++ CDataVectorNS< CCompartment > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CompartmentVectorNS self, std::string const & name="NoName", CDataContainer pParent=static_cast< CDataContainer * >((void *) 0)) -> CompartmentVectorNS
        __init__(CompartmentVectorNS self, CompartmentVectorNS src, CDataContainer pParent) -> CompartmentVectorNS
        """
        _COPASI.CompartmentVectorNS_swiginit(self, _COPASI.new_CompartmentVectorNS(*args))
    __swig_destroy__ = _COPASI.delete_CompartmentVectorNS

# Register CompartmentVectorNS in _COPASI:
_COPASI.CompartmentVectorNS_swigregister(CompartmentVectorNS)
class ModelParameterSetVector(CDataContainer):
    r"""Proxy of C++ CDataVector< CModelParameterSet > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _COPASI.delete_ModelParameterSetVector

    def cleanup(self):
        r"""cleanup(ModelParameterSetVector self)"""
        return _COPASI.ModelParameterSetVector_cleanup(self)

    def addCopy(self, src):
        r"""addCopy(ModelParameterSetVector self, CModelParameterSet src) -> bool"""
        return _COPASI.ModelParameterSetVector_addCopy(self, src)

    def swap(self, indexFrom, indexTo):
        r"""swap(ModelParameterSetVector self, size_t const & indexFrom, size_t const & indexTo)"""
        return _COPASI.ModelParameterSetVector_swap(self, indexFrom, indexTo)

    def add(self, pObject, adopt=True):
        
        return _COPASI.ModelParameterSetVector_add(self, pObject, adopt)

    def getObject(self, name):
        r"""getObject(ModelParameterSetVector self, CCommonName name) -> CObjectInterface"""
        return _COPASI.ModelParameterSetVector_getObject(self, name)

    def size(self):
        r"""size(ModelParameterSetVector self) -> size_t"""
        return _COPASI.ModelParameterSetVector_size(self)

    def empty(self):
        r"""empty(ModelParameterSetVector self) -> bool"""
        return _COPASI.ModelParameterSetVector_empty(self)

    def clear(self):
        r"""clear(ModelParameterSetVector self)"""
        return _COPASI.ModelParameterSetVector_clear(self)

    def getIndex(self, pObject):
        r"""getIndex(ModelParameterSetVector self, CDataObject pObject) -> size_t"""
        return _COPASI.ModelParameterSetVector_getIndex(self, pObject)

    def remove(self, index):
        r"""remove(ModelParameterSetVector self, unsigned int index)"""
        return _COPASI.ModelParameterSetVector_remove(self, index)

    def get(self, index):
        r"""get(ModelParameterSetVector self, unsigned int index) -> CDataObject"""
        return _COPASI.ModelParameterSetVector_get(self, index)

    def addAndOwn(self, DISOWN):
        r"""addAndOwn(ModelParameterSetVector self, CModelParameterSet DISOWN) -> bool"""
        return _COPASI.ModelParameterSetVector_addAndOwn(self, DISOWN)

    def removeObject(self, pObject):
        r"""removeObject(ModelParameterSetVector self, CDataObject pObject) -> bool"""
        return _COPASI.ModelParameterSetVector_removeObject(self, pObject)

    def __len__(self):
        r"""__len__(ModelParameterSetVector self) -> size_t"""
        return _COPASI.ModelParameterSetVector___len__(self)

    def __getitem__(self, index):
        r"""__getitem__(ModelParameterSetVector self, unsigned int index) -> CDataObject"""
        return _COPASI.ModelParameterSetVector___getitem__(self, index)

# Register ModelParameterSetVector in _COPASI:
_COPASI.ModelParameterSetVector_swigregister(ModelParameterSetVector)
class ModelParameterSetVectorN(ModelParameterSetVector):
    r"""Proxy of C++ CDataVectorN< CModelParameterSet > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ModelParameterSetVectorN self, std::string const & name="NoName", CDataContainer pParent=static_cast< CDataContainer * >((void *) 0)) -> ModelParameterSetVectorN
        __init__(ModelParameterSetVectorN self, ModelParameterSetVectorN src, CDataContainer pParent) -> ModelParameterSetVectorN
        """
        _COPASI.ModelParameterSetVectorN_swiginit(self, _COPASI.new_ModelParameterSetVectorN(*args))
    __swig_destroy__ = _COPASI.delete_ModelParameterSetVectorN

    def addCopy(self, src):
        r"""addCopy(ModelParameterSetVectorN self, CModelParameterSet src) -> bool"""
        return _COPASI.ModelParameterSetVectorN_addCopy(self, src)

    def add(self, pObject, adopt=True):
        
        return _COPASI.ModelParameterSetVectorN_add(self, pObject, adopt)

    def removeByName(self, name):
        r"""removeByName(ModelParameterSetVectorN self, std::string const & name)"""
        return _COPASI.ModelParameterSetVectorN_removeByName(self, name)

    def getObject(self, name):
        r"""getObject(ModelParameterSetVectorN self, CCommonName name) -> CObjectInterface"""
        return _COPASI.ModelParameterSetVectorN_getObject(self, name)

    def getIndexByName(self, name):
        r"""getIndexByName(ModelParameterSetVectorN self, std::string const & name) -> size_t"""
        return _COPASI.ModelParameterSetVectorN_getIndexByName(self, name)

    def createUniqueName(self, name):
        r"""createUniqueName(ModelParameterSetVectorN self, std::string & name)"""
        return _COPASI.ModelParameterSetVectorN_createUniqueName(self, name)

    def getByName(self, name):
        r"""getByName(ModelParameterSetVectorN self, std::string const & name) -> CDataObject"""
        return _COPASI.ModelParameterSetVectorN_getByName(self, name)

    def __getitem__(self, *args):
        r"""
        __getitem__(ModelParameterSetVectorN self, std::string const & name) -> CDataObject
        __getitem__(ModelParameterSetVectorN self, unsigned int index) -> CDataObject
        """
        return _COPASI.ModelParameterSetVectorN___getitem__(self, *args)

# Register ModelParameterSetVectorN in _COPASI:
_COPASI.ModelParameterSetVectorN_swigregister(ModelParameterSetVectorN)
class ReactionStdVector(object):
    r"""Proxy of C++ std::vector< CReaction * > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(ReactionStdVector self) -> SwigPyIterator"""
        return _COPASI.ReactionStdVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(ReactionStdVector self) -> bool"""
        return _COPASI.ReactionStdVector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(ReactionStdVector self) -> bool"""
        return _COPASI.ReactionStdVector___bool__(self)

    def __len__(self):
        r"""__len__(ReactionStdVector self) -> std::vector< CReaction * >::size_type"""
        return _COPASI.ReactionStdVector___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(ReactionStdVector self, std::vector< CReaction * >::difference_type i, std::vector< CReaction * >::difference_type j) -> ReactionStdVector"""
        return _COPASI.ReactionStdVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(ReactionStdVector self, std::vector< CReaction * >::difference_type i, std::vector< CReaction * >::difference_type j)
        __setslice__(ReactionStdVector self, std::vector< CReaction * >::difference_type i, std::vector< CReaction * >::difference_type j, ReactionStdVector v)
        """
        return _COPASI.ReactionStdVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(ReactionStdVector self, std::vector< CReaction * >::difference_type i, std::vector< CReaction * >::difference_type j)"""
        return _COPASI.ReactionStdVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(ReactionStdVector self, std::vector< CReaction * >::difference_type i)
        __delitem__(ReactionStdVector self, SWIGPY_SLICEOBJECT * slice)
        """
        return _COPASI.ReactionStdVector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(ReactionStdVector self, SWIGPY_SLICEOBJECT * slice) -> ReactionStdVector
        __getitem__(ReactionStdVector self, std::vector< CReaction * >::difference_type i) -> CReaction
        """
        return _COPASI.ReactionStdVector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(ReactionStdVector self, SWIGPY_SLICEOBJECT * slice, ReactionStdVector v)
        __setitem__(ReactionStdVector self, SWIGPY_SLICEOBJECT * slice)
        __setitem__(ReactionStdVector self, std::vector< CReaction * >::difference_type i, CReaction x)
        """
        return _COPASI.ReactionStdVector___setitem__(self, *args)

    def pop(self):
        r"""pop(ReactionStdVector self) -> CReaction"""
        return _COPASI.ReactionStdVector_pop(self)

    def append(self, x):
        r"""append(ReactionStdVector self, CReaction x)"""
        return _COPASI.ReactionStdVector_append(self, x)

    def empty(self):
        r"""empty(ReactionStdVector self) -> bool"""
        return _COPASI.ReactionStdVector_empty(self)

    def size(self):
        r"""size(ReactionStdVector self) -> std::vector< CReaction * >::size_type"""
        return _COPASI.ReactionStdVector_size(self)

    def swap(self, v):
        r"""swap(ReactionStdVector self, ReactionStdVector v)"""
        return _COPASI.ReactionStdVector_swap(self, v)

    def rbegin(self):
        r"""rbegin(ReactionStdVector self) -> std::vector< CReaction * >::reverse_iterator"""
        return _COPASI.ReactionStdVector_rbegin(self)

    def rend(self):
        r"""rend(ReactionStdVector self) -> std::vector< CReaction * >::reverse_iterator"""
        return _COPASI.ReactionStdVector_rend(self)

    def clear(self):
        r"""clear(ReactionStdVector self)"""
        return _COPASI.ReactionStdVector_clear(self)

    def get_allocator(self):
        r"""get_allocator(ReactionStdVector self) -> std::vector< CReaction * >::allocator_type"""
        return _COPASI.ReactionStdVector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(ReactionStdVector self)"""
        return _COPASI.ReactionStdVector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(ReactionStdVector self, std::vector< CReaction * >::iterator pos) -> std::vector< CReaction * >::iterator
        erase(ReactionStdVector self, std::vector< CReaction * >::iterator first, std::vector< CReaction * >::iterator last) -> std::vector< CReaction * >::iterator
        """
        return _COPASI.ReactionStdVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(ReactionStdVector self) -> ReactionStdVector
        __init__(ReactionStdVector self, ReactionStdVector other) -> ReactionStdVector
        __init__(ReactionStdVector self, std::vector< CReaction * >::size_type size) -> ReactionStdVector
        __init__(ReactionStdVector self, std::vector< CReaction * >::size_type size, CReaction value) -> ReactionStdVector
        """
        _COPASI.ReactionStdVector_swiginit(self, _COPASI.new_ReactionStdVector(*args))

    def push_back(self, x):
        r"""push_back(ReactionStdVector self, CReaction x)"""
        return _COPASI.ReactionStdVector_push_back(self, x)

    def front(self):
        r"""front(ReactionStdVector self) -> CReaction"""
        return _COPASI.ReactionStdVector_front(self)

    def back(self):
        r"""back(ReactionStdVector self) -> CReaction"""
        return _COPASI.ReactionStdVector_back(self)

    def assign(self, n, x):
        r"""assign(ReactionStdVector self, std::vector< CReaction * >::size_type n, CReaction x)"""
        return _COPASI.ReactionStdVector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(ReactionStdVector self, std::vector< CReaction * >::size_type new_size)
        resize(ReactionStdVector self, std::vector< CReaction * >::size_type new_size, CReaction x)
        """
        return _COPASI.ReactionStdVector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(ReactionStdVector self, std::vector< CReaction * >::iterator pos, CReaction x) -> std::vector< CReaction * >::iterator
        insert(ReactionStdVector self, std::vector< CReaction * >::iterator pos, std::vector< CReaction * >::size_type n, CReaction x)
        """
        return _COPASI.ReactionStdVector_insert(self, *args)

    def reserve(self, n):
        r"""reserve(ReactionStdVector self, std::vector< CReaction * >::size_type n)"""
        return _COPASI.ReactionStdVector_reserve(self, n)

    def capacity(self):
        r"""capacity(ReactionStdVector self) -> std::vector< CReaction * >::size_type"""
        return _COPASI.ReactionStdVector_capacity(self)
    __swig_destroy__ = _COPASI.delete_ReactionStdVector

# Register ReactionStdVector in _COPASI:
_COPASI.ReactionStdVector_swigregister(ReactionStdVector)
class ReactionVector(CDataContainer):
    r"""Proxy of C++ CDataVector< CReaction > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _COPASI.delete_ReactionVector

    def cleanup(self):
        r"""cleanup(ReactionVector self)"""
        return _COPASI.ReactionVector_cleanup(self)

    def addCopy(self, src):
        r"""addCopy(ReactionVector self, CReaction src) -> bool"""
        return _COPASI.ReactionVector_addCopy(self, src)

    def swap(self, indexFrom, indexTo):
        r"""swap(ReactionVector self, size_t const & indexFrom, size_t const & indexTo)"""
        return _COPASI.ReactionVector_swap(self, indexFrom, indexTo)

    def add(self, pObject, adopt=True):
        
        return _COPASI.ReactionVector_add(self, pObject, adopt)

    def getObject(self, name):
        r"""getObject(ReactionVector self, CCommonName name) -> CObjectInterface"""
        return _COPASI.ReactionVector_getObject(self, name)

    def size(self):
        r"""size(ReactionVector self) -> size_t"""
        return _COPASI.ReactionVector_size(self)

    def empty(self):
        r"""empty(ReactionVector self) -> bool"""
        return _COPASI.ReactionVector_empty(self)

    def clear(self):
        r"""clear(ReactionVector self)"""
        return _COPASI.ReactionVector_clear(self)

    def getIndex(self, pObject):
        r"""getIndex(ReactionVector self, CDataObject pObject) -> size_t"""
        return _COPASI.ReactionVector_getIndex(self, pObject)

    def remove(self, index):
        r"""remove(ReactionVector self, unsigned int index)"""
        return _COPASI.ReactionVector_remove(self, index)

    def get(self, index):
        r"""get(ReactionVector self, unsigned int index) -> CDataObject"""
        return _COPASI.ReactionVector_get(self, index)

    def addAndOwn(self, DISOWN):
        r"""addAndOwn(ReactionVector self, CReaction DISOWN) -> bool"""
        return _COPASI.ReactionVector_addAndOwn(self, DISOWN)

    def removeObject(self, pObject):
        r"""removeObject(ReactionVector self, CDataObject pObject) -> bool"""
        return _COPASI.ReactionVector_removeObject(self, pObject)

    def __len__(self):
        r"""__len__(ReactionVector self) -> size_t"""
        return _COPASI.ReactionVector___len__(self)

    def __getitem__(self, index):
        r"""__getitem__(ReactionVector self, unsigned int index) -> CDataObject"""
        return _COPASI.ReactionVector___getitem__(self, index)

# Register ReactionVector in _COPASI:
_COPASI.ReactionVector_swigregister(ReactionVector)
class ReactionVectorN(ReactionVector):
    r"""Proxy of C++ CDataVectorN< CReaction > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ReactionVectorN self, std::string const & name="NoName", CDataContainer pParent=static_cast< CDataContainer * >((void *) 0)) -> ReactionVectorN
        __init__(ReactionVectorN self, ReactionVectorN src, CDataContainer pParent) -> ReactionVectorN
        """
        _COPASI.ReactionVectorN_swiginit(self, _COPASI.new_ReactionVectorN(*args))
    __swig_destroy__ = _COPASI.delete_ReactionVectorN

    def addCopy(self, src):
        r"""addCopy(ReactionVectorN self, CReaction src) -> bool"""
        return _COPASI.ReactionVectorN_addCopy(self, src)

    def add(self, pObject, adopt=True):
        
        return _COPASI.ReactionVectorN_add(self, pObject, adopt)

    def removeByName(self, name):
        r"""removeByName(ReactionVectorN self, std::string const & name)"""
        return _COPASI.ReactionVectorN_removeByName(self, name)

    def getObject(self, name):
        r"""getObject(ReactionVectorN self, CCommonName name) -> CObjectInterface"""
        return _COPASI.ReactionVectorN_getObject(self, name)

    def getIndexByName(self, name):
        r"""getIndexByName(ReactionVectorN self, std::string const & name) -> size_t"""
        return _COPASI.ReactionVectorN_getIndexByName(self, name)

    def createUniqueName(self, name):
        r"""createUniqueName(ReactionVectorN self, std::string & name)"""
        return _COPASI.ReactionVectorN_createUniqueName(self, name)

    def getByName(self, name):
        r"""getByName(ReactionVectorN self, std::string const & name) -> CDataObject"""
        return _COPASI.ReactionVectorN_getByName(self, name)

    def __getitem__(self, *args):
        r"""
        __getitem__(ReactionVectorN self, std::string const & name) -> CDataObject
        __getitem__(ReactionVectorN self, unsigned int index) -> CDataObject
        """
        return _COPASI.ReactionVectorN___getitem__(self, *args)

# Register ReactionVectorN in _COPASI:
_COPASI.ReactionVectorN_swigregister(ReactionVectorN)
class ReactionVectorNS(ReactionVectorN):
    r"""Proxy of C++ CDataVectorNS< CReaction > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ReactionVectorNS self, std::string const & name="NoName", CDataContainer pParent=static_cast< CDataContainer * >((void *) 0)) -> ReactionVectorNS
        __init__(ReactionVectorNS self, ReactionVectorNS src, CDataContainer pParent) -> ReactionVectorNS
        """
        _COPASI.ReactionVectorNS_swiginit(self, _COPASI.new_ReactionVectorNS(*args))
    __swig_destroy__ = _COPASI.delete_ReactionVectorNS

# Register ReactionVectorNS in _COPASI:
_COPASI.ReactionVectorNS_swigregister(ReactionVectorNS)
class CFunctionStdVector(object):
    r"""Proxy of C++ std::vector< CFunction * > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(CFunctionStdVector self) -> SwigPyIterator"""
        return _COPASI.CFunctionStdVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(CFunctionStdVector self) -> bool"""
        return _COPASI.CFunctionStdVector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(CFunctionStdVector self) -> bool"""
        return _COPASI.CFunctionStdVector___bool__(self)

    def __len__(self):
        r"""__len__(CFunctionStdVector self) -> std::vector< CFunction * >::size_type"""
        return _COPASI.CFunctionStdVector___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(CFunctionStdVector self, std::vector< CFunction * >::difference_type i, std::vector< CFunction * >::difference_type j) -> CFunctionStdVector"""
        return _COPASI.CFunctionStdVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(CFunctionStdVector self, std::vector< CFunction * >::difference_type i, std::vector< CFunction * >::difference_type j)
        __setslice__(CFunctionStdVector self, std::vector< CFunction * >::difference_type i, std::vector< CFunction * >::difference_type j, CFunctionStdVector v)
        """
        return _COPASI.CFunctionStdVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(CFunctionStdVector self, std::vector< CFunction * >::difference_type i, std::vector< CFunction * >::difference_type j)"""
        return _COPASI.CFunctionStdVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(CFunctionStdVector self, std::vector< CFunction * >::difference_type i)
        __delitem__(CFunctionStdVector self, SWIGPY_SLICEOBJECT * slice)
        """
        return _COPASI.CFunctionStdVector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(CFunctionStdVector self, SWIGPY_SLICEOBJECT * slice) -> CFunctionStdVector
        __getitem__(CFunctionStdVector self, std::vector< CFunction * >::difference_type i) -> CFunction
        """
        return _COPASI.CFunctionStdVector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(CFunctionStdVector self, SWIGPY_SLICEOBJECT * slice, CFunctionStdVector v)
        __setitem__(CFunctionStdVector self, SWIGPY_SLICEOBJECT * slice)
        __setitem__(CFunctionStdVector self, std::vector< CFunction * >::difference_type i, CFunction x)
        """
        return _COPASI.CFunctionStdVector___setitem__(self, *args)

    def pop(self):
        r"""pop(CFunctionStdVector self) -> CFunction"""
        return _COPASI.CFunctionStdVector_pop(self)

    def append(self, x):
        r"""append(CFunctionStdVector self, CFunction x)"""
        return _COPASI.CFunctionStdVector_append(self, x)

    def empty(self):
        r"""empty(CFunctionStdVector self) -> bool"""
        return _COPASI.CFunctionStdVector_empty(self)

    def size(self):
        r"""size(CFunctionStdVector self) -> std::vector< CFunction * >::size_type"""
        return _COPASI.CFunctionStdVector_size(self)

    def swap(self, v):
        r"""swap(CFunctionStdVector self, CFunctionStdVector v)"""
        return _COPASI.CFunctionStdVector_swap(self, v)

    def rbegin(self):
        r"""rbegin(CFunctionStdVector self) -> std::vector< CFunction * >::reverse_iterator"""
        return _COPASI.CFunctionStdVector_rbegin(self)

    def rend(self):
        r"""rend(CFunctionStdVector self) -> std::vector< CFunction * >::reverse_iterator"""
        return _COPASI.CFunctionStdVector_rend(self)

    def clear(self):
        r"""clear(CFunctionStdVector self)"""
        return _COPASI.CFunctionStdVector_clear(self)

    def get_allocator(self):
        r"""get_allocator(CFunctionStdVector self) -> std::vector< CFunction * >::allocator_type"""
        return _COPASI.CFunctionStdVector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(CFunctionStdVector self)"""
        return _COPASI.CFunctionStdVector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(CFunctionStdVector self, std::vector< CFunction * >::iterator pos) -> std::vector< CFunction * >::iterator
        erase(CFunctionStdVector self, std::vector< CFunction * >::iterator first, std::vector< CFunction * >::iterator last) -> std::vector< CFunction * >::iterator
        """
        return _COPASI.CFunctionStdVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(CFunctionStdVector self) -> CFunctionStdVector
        __init__(CFunctionStdVector self, CFunctionStdVector other) -> CFunctionStdVector
        __init__(CFunctionStdVector self, std::vector< CFunction * >::size_type size) -> CFunctionStdVector
        __init__(CFunctionStdVector self, std::vector< CFunction * >::size_type size, CFunction value) -> CFunctionStdVector
        """
        _COPASI.CFunctionStdVector_swiginit(self, _COPASI.new_CFunctionStdVector(*args))

    def push_back(self, x):
        r"""push_back(CFunctionStdVector self, CFunction x)"""
        return _COPASI.CFunctionStdVector_push_back(self, x)

    def front(self):
        r"""front(CFunctionStdVector self) -> CFunction"""
        return _COPASI.CFunctionStdVector_front(self)

    def back(self):
        r"""back(CFunctionStdVector self) -> CFunction"""
        return _COPASI.CFunctionStdVector_back(self)

    def assign(self, n, x):
        r"""assign(CFunctionStdVector self, std::vector< CFunction * >::size_type n, CFunction x)"""
        return _COPASI.CFunctionStdVector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(CFunctionStdVector self, std::vector< CFunction * >::size_type new_size)
        resize(CFunctionStdVector self, std::vector< CFunction * >::size_type new_size, CFunction x)
        """
        return _COPASI.CFunctionStdVector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(CFunctionStdVector self, std::vector< CFunction * >::iterator pos, CFunction x) -> std::vector< CFunction * >::iterator
        insert(CFunctionStdVector self, std::vector< CFunction * >::iterator pos, std::vector< CFunction * >::size_type n, CFunction x)
        """
        return _COPASI.CFunctionStdVector_insert(self, *args)

    def reserve(self, n):
        r"""reserve(CFunctionStdVector self, std::vector< CFunction * >::size_type n)"""
        return _COPASI.CFunctionStdVector_reserve(self, n)

    def capacity(self):
        r"""capacity(CFunctionStdVector self) -> std::vector< CFunction * >::size_type"""
        return _COPASI.CFunctionStdVector_capacity(self)
    __swig_destroy__ = _COPASI.delete_CFunctionStdVector

# Register CFunctionStdVector in _COPASI:
_COPASI.CFunctionStdVector_swigregister(CFunctionStdVector)
class CFunctionVector(CDataContainer):
    r"""Proxy of C++ CDataVector< CFunction > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _COPASI.delete_CFunctionVector

    def cleanup(self):
        r"""cleanup(CFunctionVector self)"""
        return _COPASI.CFunctionVector_cleanup(self)

    def addCopy(self, src):
        r"""addCopy(CFunctionVector self, CFunction src) -> bool"""
        return _COPASI.CFunctionVector_addCopy(self, src)

    def swap(self, indexFrom, indexTo):
        r"""swap(CFunctionVector self, size_t const & indexFrom, size_t const & indexTo)"""
        return _COPASI.CFunctionVector_swap(self, indexFrom, indexTo)

    def add(self, pObject, adopt=True):
        
        return _COPASI.CFunctionVector_add(self, pObject, adopt)

    def getObject(self, name):
        r"""getObject(CFunctionVector self, CCommonName name) -> CObjectInterface"""
        return _COPASI.CFunctionVector_getObject(self, name)

    def size(self):
        r"""size(CFunctionVector self) -> size_t"""
        return _COPASI.CFunctionVector_size(self)

    def empty(self):
        r"""empty(CFunctionVector self) -> bool"""
        return _COPASI.CFunctionVector_empty(self)

    def clear(self):
        r"""clear(CFunctionVector self)"""
        return _COPASI.CFunctionVector_clear(self)

    def getIndex(self, pObject):
        r"""getIndex(CFunctionVector self, CDataObject pObject) -> size_t"""
        return _COPASI.CFunctionVector_getIndex(self, pObject)

    def remove(self, index):
        r"""remove(CFunctionVector self, unsigned int index)"""
        return _COPASI.CFunctionVector_remove(self, index)

    def get(self, index):
        r"""get(CFunctionVector self, unsigned int index) -> CDataObject"""
        return _COPASI.CFunctionVector_get(self, index)

    def addAndOwn(self, DISOWN):
        r"""addAndOwn(CFunctionVector self, CFunction DISOWN) -> bool"""
        return _COPASI.CFunctionVector_addAndOwn(self, DISOWN)

    def removeObject(self, pObject):
        r"""removeObject(CFunctionVector self, CDataObject pObject) -> bool"""
        return _COPASI.CFunctionVector_removeObject(self, pObject)

    def __len__(self):
        r"""__len__(CFunctionVector self) -> size_t"""
        return _COPASI.CFunctionVector___len__(self)

    def __getitem__(self, index):
        r"""__getitem__(CFunctionVector self, unsigned int index) -> CDataObject"""
        return _COPASI.CFunctionVector___getitem__(self, index)

# Register CFunctionVector in _COPASI:
_COPASI.CFunctionVector_swigregister(CFunctionVector)
class CFunctionVectorN(CFunctionVector):
    r"""Proxy of C++ CDataVectorN< CFunction > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CFunctionVectorN self, std::string const & name="NoName", CDataContainer pParent=static_cast< CDataContainer * >((void *) 0)) -> CFunctionVectorN
        __init__(CFunctionVectorN self, CFunctionVectorN src, CDataContainer pParent) -> CFunctionVectorN
        """
        _COPASI.CFunctionVectorN_swiginit(self, _COPASI.new_CFunctionVectorN(*args))
    __swig_destroy__ = _COPASI.delete_CFunctionVectorN

    def addCopy(self, src):
        r"""addCopy(CFunctionVectorN self, CFunction src) -> bool"""
        return _COPASI.CFunctionVectorN_addCopy(self, src)

    def add(self, pObject, adopt=True):
        
        return _COPASI.CFunctionVectorN_add(self, pObject, adopt)

    def remove(self, name):
        r"""remove(CFunctionVectorN self, std::string const & name)"""
        return _COPASI.CFunctionVectorN_remove(self, name)

    def getObject(self, name):
        r"""getObject(CFunctionVectorN self, CCommonName name) -> CObjectInterface"""
        return _COPASI.CFunctionVectorN_getObject(self, name)

    def getIndex(self, name):
        r"""getIndex(CFunctionVectorN self, std::string const & name) -> size_t"""
        return _COPASI.CFunctionVectorN_getIndex(self, name)

    def createUniqueName(self, name):
        r"""createUniqueName(CFunctionVectorN self, std::string & name)"""
        return _COPASI.CFunctionVectorN_createUniqueName(self, name)

    def getByName(self, name):
        r"""getByName(CFunctionVectorN self, std::string const & name) -> CDataObject"""
        return _COPASI.CFunctionVectorN_getByName(self, name)

    def removeByName(self, name):
        r"""removeByName(CFunctionVectorN self, std::string const & name) -> bool"""
        return _COPASI.CFunctionVectorN_removeByName(self, name)

    def getIndexByName(self, name):
        r"""getIndexByName(CFunctionVectorN self, std::string const & name) -> size_t"""
        return _COPASI.CFunctionVectorN_getIndexByName(self, name)

    def __getitem__(self, *args):
        r"""
        __getitem__(CFunctionVectorN self, std::string const & name) -> CDataObject
        __getitem__(CFunctionVectorN self, unsigned int index) -> CDataObject
        """
        return _COPASI.CFunctionVectorN___getitem__(self, *args)

# Register CFunctionVectorN in _COPASI:
_COPASI.CFunctionVectorN_swigregister(CFunctionVectorN)
class CFunctionVectorNS(CFunctionVectorN):
    r"""Proxy of C++ CDataVectorNS< CFunction > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CFunctionVectorNS self, std::string const & name="NoName", CDataContainer pParent=static_cast< CDataContainer * >((void *) 0)) -> CFunctionVectorNS
        __init__(CFunctionVectorNS self, CFunctionVectorNS src, CDataContainer pParent) -> CFunctionVectorNS
        """
        _COPASI.CFunctionVectorNS_swiginit(self, _COPASI.new_CFunctionVectorNS(*args))
    __swig_destroy__ = _COPASI.delete_CFunctionVectorNS

# Register CFunctionVectorNS in _COPASI:
_COPASI.CFunctionVectorNS_swigregister(CFunctionVectorNS)
class CEvaluationTreeStdVector(object):
    r"""Proxy of C++ std::vector< CEvaluationTree * > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(CEvaluationTreeStdVector self) -> SwigPyIterator"""
        return _COPASI.CEvaluationTreeStdVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(CEvaluationTreeStdVector self) -> bool"""
        return _COPASI.CEvaluationTreeStdVector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(CEvaluationTreeStdVector self) -> bool"""
        return _COPASI.CEvaluationTreeStdVector___bool__(self)

    def __len__(self):
        r"""__len__(CEvaluationTreeStdVector self) -> std::vector< CEvaluationTree * >::size_type"""
        return _COPASI.CEvaluationTreeStdVector___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(CEvaluationTreeStdVector self, std::vector< CEvaluationTree * >::difference_type i, std::vector< CEvaluationTree * >::difference_type j) -> CEvaluationTreeStdVector"""
        return _COPASI.CEvaluationTreeStdVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(CEvaluationTreeStdVector self, std::vector< CEvaluationTree * >::difference_type i, std::vector< CEvaluationTree * >::difference_type j)
        __setslice__(CEvaluationTreeStdVector self, std::vector< CEvaluationTree * >::difference_type i, std::vector< CEvaluationTree * >::difference_type j, CEvaluationTreeStdVector v)
        """
        return _COPASI.CEvaluationTreeStdVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(CEvaluationTreeStdVector self, std::vector< CEvaluationTree * >::difference_type i, std::vector< CEvaluationTree * >::difference_type j)"""
        return _COPASI.CEvaluationTreeStdVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(CEvaluationTreeStdVector self, std::vector< CEvaluationTree * >::difference_type i)
        __delitem__(CEvaluationTreeStdVector self, SWIGPY_SLICEOBJECT * slice)
        """
        return _COPASI.CEvaluationTreeStdVector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(CEvaluationTreeStdVector self, SWIGPY_SLICEOBJECT * slice) -> CEvaluationTreeStdVector
        __getitem__(CEvaluationTreeStdVector self, std::vector< CEvaluationTree * >::difference_type i) -> CEvaluationTree
        """
        return _COPASI.CEvaluationTreeStdVector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(CEvaluationTreeStdVector self, SWIGPY_SLICEOBJECT * slice, CEvaluationTreeStdVector v)
        __setitem__(CEvaluationTreeStdVector self, SWIGPY_SLICEOBJECT * slice)
        __setitem__(CEvaluationTreeStdVector self, std::vector< CEvaluationTree * >::difference_type i, CEvaluationTree x)
        """
        return _COPASI.CEvaluationTreeStdVector___setitem__(self, *args)

    def pop(self):
        r"""pop(CEvaluationTreeStdVector self) -> CEvaluationTree"""
        return _COPASI.CEvaluationTreeStdVector_pop(self)

    def append(self, x):
        r"""append(CEvaluationTreeStdVector self, CEvaluationTree x)"""
        return _COPASI.CEvaluationTreeStdVector_append(self, x)

    def empty(self):
        r"""empty(CEvaluationTreeStdVector self) -> bool"""
        return _COPASI.CEvaluationTreeStdVector_empty(self)

    def size(self):
        r"""size(CEvaluationTreeStdVector self) -> std::vector< CEvaluationTree * >::size_type"""
        return _COPASI.CEvaluationTreeStdVector_size(self)

    def swap(self, v):
        r"""swap(CEvaluationTreeStdVector self, CEvaluationTreeStdVector v)"""
        return _COPASI.CEvaluationTreeStdVector_swap(self, v)

    def rbegin(self):
        r"""rbegin(CEvaluationTreeStdVector self) -> std::vector< CEvaluationTree * >::reverse_iterator"""
        return _COPASI.CEvaluationTreeStdVector_rbegin(self)

    def rend(self):
        r"""rend(CEvaluationTreeStdVector self) -> std::vector< CEvaluationTree * >::reverse_iterator"""
        return _COPASI.CEvaluationTreeStdVector_rend(self)

    def clear(self):
        r"""clear(CEvaluationTreeStdVector self)"""
        return _COPASI.CEvaluationTreeStdVector_clear(self)

    def get_allocator(self):
        r"""get_allocator(CEvaluationTreeStdVector self) -> std::vector< CEvaluationTree * >::allocator_type"""
        return _COPASI.CEvaluationTreeStdVector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(CEvaluationTreeStdVector self)"""
        return _COPASI.CEvaluationTreeStdVector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(CEvaluationTreeStdVector self, std::vector< CEvaluationTree * >::iterator pos) -> std::vector< CEvaluationTree * >::iterator
        erase(CEvaluationTreeStdVector self, std::vector< CEvaluationTree * >::iterator first, std::vector< CEvaluationTree * >::iterator last) -> std::vector< CEvaluationTree * >::iterator
        """
        return _COPASI.CEvaluationTreeStdVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(CEvaluationTreeStdVector self) -> CEvaluationTreeStdVector
        __init__(CEvaluationTreeStdVector self, CEvaluationTreeStdVector other) -> CEvaluationTreeStdVector
        __init__(CEvaluationTreeStdVector self, std::vector< CEvaluationTree * >::size_type size) -> CEvaluationTreeStdVector
        __init__(CEvaluationTreeStdVector self, std::vector< CEvaluationTree * >::size_type size, CEvaluationTree value) -> CEvaluationTreeStdVector
        """
        _COPASI.CEvaluationTreeStdVector_swiginit(self, _COPASI.new_CEvaluationTreeStdVector(*args))

    def push_back(self, x):
        r"""push_back(CEvaluationTreeStdVector self, CEvaluationTree x)"""
        return _COPASI.CEvaluationTreeStdVector_push_back(self, x)

    def front(self):
        r"""front(CEvaluationTreeStdVector self) -> CEvaluationTree"""
        return _COPASI.CEvaluationTreeStdVector_front(self)

    def back(self):
        r"""back(CEvaluationTreeStdVector self) -> CEvaluationTree"""
        return _COPASI.CEvaluationTreeStdVector_back(self)

    def assign(self, n, x):
        r"""assign(CEvaluationTreeStdVector self, std::vector< CEvaluationTree * >::size_type n, CEvaluationTree x)"""
        return _COPASI.CEvaluationTreeStdVector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(CEvaluationTreeStdVector self, std::vector< CEvaluationTree * >::size_type new_size)
        resize(CEvaluationTreeStdVector self, std::vector< CEvaluationTree * >::size_type new_size, CEvaluationTree x)
        """
        return _COPASI.CEvaluationTreeStdVector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(CEvaluationTreeStdVector self, std::vector< CEvaluationTree * >::iterator pos, CEvaluationTree x) -> std::vector< CEvaluationTree * >::iterator
        insert(CEvaluationTreeStdVector self, std::vector< CEvaluationTree * >::iterator pos, std::vector< CEvaluationTree * >::size_type n, CEvaluationTree x)
        """
        return _COPASI.CEvaluationTreeStdVector_insert(self, *args)

    def reserve(self, n):
        r"""reserve(CEvaluationTreeStdVector self, std::vector< CEvaluationTree * >::size_type n)"""
        return _COPASI.CEvaluationTreeStdVector_reserve(self, n)

    def capacity(self):
        r"""capacity(CEvaluationTreeStdVector self) -> std::vector< CEvaluationTree * >::size_type"""
        return _COPASI.CEvaluationTreeStdVector_capacity(self)
    __swig_destroy__ = _COPASI.delete_CEvaluationTreeStdVector

# Register CEvaluationTreeStdVector in _COPASI:
_COPASI.CEvaluationTreeStdVector_swigregister(CEvaluationTreeStdVector)
class CEvaluationTreeVector(CDataContainer):
    r"""Proxy of C++ CDataVector< CEvaluationTree > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _COPASI.delete_CEvaluationTreeVector

    def cleanup(self):
        r"""cleanup(CEvaluationTreeVector self)"""
        return _COPASI.CEvaluationTreeVector_cleanup(self)

    def addCopy(self, src):
        r"""addCopy(CEvaluationTreeVector self, CEvaluationTree src) -> bool"""
        return _COPASI.CEvaluationTreeVector_addCopy(self, src)

    def swap(self, indexFrom, indexTo):
        r"""swap(CEvaluationTreeVector self, size_t const & indexFrom, size_t const & indexTo)"""
        return _COPASI.CEvaluationTreeVector_swap(self, indexFrom, indexTo)

    def add(self, pObject, adopt=True):
        
        return _COPASI.CEvaluationTreeVector_add(self, pObject, adopt)

    def getObject(self, name):
        r"""getObject(CEvaluationTreeVector self, CCommonName name) -> CObjectInterface"""
        return _COPASI.CEvaluationTreeVector_getObject(self, name)

    def size(self):
        r"""size(CEvaluationTreeVector self) -> size_t"""
        return _COPASI.CEvaluationTreeVector_size(self)

    def empty(self):
        r"""empty(CEvaluationTreeVector self) -> bool"""
        return _COPASI.CEvaluationTreeVector_empty(self)

    def clear(self):
        r"""clear(CEvaluationTreeVector self)"""
        return _COPASI.CEvaluationTreeVector_clear(self)

    def getIndex(self, pObject):
        r"""getIndex(CEvaluationTreeVector self, CDataObject pObject) -> size_t"""
        return _COPASI.CEvaluationTreeVector_getIndex(self, pObject)

    def remove(self, index):
        r"""remove(CEvaluationTreeVector self, unsigned int index)"""
        return _COPASI.CEvaluationTreeVector_remove(self, index)

    def get(self, index):
        r"""get(CEvaluationTreeVector self, unsigned int index) -> CDataObject"""
        return _COPASI.CEvaluationTreeVector_get(self, index)

    def addAndOwn(self, DISOWN):
        r"""addAndOwn(CEvaluationTreeVector self, CEvaluationTree DISOWN) -> bool"""
        return _COPASI.CEvaluationTreeVector_addAndOwn(self, DISOWN)

    def removeObject(self, pObject):
        r"""removeObject(CEvaluationTreeVector self, CDataObject pObject) -> bool"""
        return _COPASI.CEvaluationTreeVector_removeObject(self, pObject)

    def __len__(self):
        r"""__len__(CEvaluationTreeVector self) -> size_t"""
        return _COPASI.CEvaluationTreeVector___len__(self)

    def __getitem__(self, index):
        r"""__getitem__(CEvaluationTreeVector self, unsigned int index) -> CDataObject"""
        return _COPASI.CEvaluationTreeVector___getitem__(self, index)

# Register CEvaluationTreeVector in _COPASI:
_COPASI.CEvaluationTreeVector_swigregister(CEvaluationTreeVector)
class CEvaluationTreeVectorN(CEvaluationTreeVector):
    r"""Proxy of C++ CDataVectorN< CEvaluationTree > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CEvaluationTreeVectorN self, std::string const & name="NoName", CDataContainer pParent=static_cast< CDataContainer * >((void *) 0)) -> CEvaluationTreeVectorN
        __init__(CEvaluationTreeVectorN self, CEvaluationTreeVectorN src, CDataContainer pParent) -> CEvaluationTreeVectorN
        """
        _COPASI.CEvaluationTreeVectorN_swiginit(self, _COPASI.new_CEvaluationTreeVectorN(*args))
    __swig_destroy__ = _COPASI.delete_CEvaluationTreeVectorN

    def addCopy(self, src):
        r"""addCopy(CEvaluationTreeVectorN self, CEvaluationTree src) -> bool"""
        return _COPASI.CEvaluationTreeVectorN_addCopy(self, src)

    def add(self, pObject, adopt=True):
        
        return _COPASI.CEvaluationTreeVectorN_add(self, pObject, adopt)

    def removeByName(self, name):
        r"""removeByName(CEvaluationTreeVectorN self, std::string const & name)"""
        return _COPASI.CEvaluationTreeVectorN_removeByName(self, name)

    def getObject(self, name):
        r"""getObject(CEvaluationTreeVectorN self, CCommonName name) -> CObjectInterface"""
        return _COPASI.CEvaluationTreeVectorN_getObject(self, name)

    def getIndexByName(self, name):
        r"""getIndexByName(CEvaluationTreeVectorN self, std::string const & name) -> size_t"""
        return _COPASI.CEvaluationTreeVectorN_getIndexByName(self, name)

    def createUniqueName(self, name):
        r"""createUniqueName(CEvaluationTreeVectorN self, std::string & name)"""
        return _COPASI.CEvaluationTreeVectorN_createUniqueName(self, name)

    def getByName(self, name):
        r"""getByName(CEvaluationTreeVectorN self, std::string const & name) -> CDataObject"""
        return _COPASI.CEvaluationTreeVectorN_getByName(self, name)

    def __getitem__(self, *args):
        r"""
        __getitem__(CEvaluationTreeVectorN self, std::string const & name) -> CDataObject
        __getitem__(CEvaluationTreeVectorN self, unsigned int index) -> CDataObject
        """
        return _COPASI.CEvaluationTreeVectorN___getitem__(self, *args)

# Register CEvaluationTreeVectorN in _COPASI:
_COPASI.CEvaluationTreeVectorN_swigregister(CEvaluationTreeVectorN)
class CChemEqElementStdVector(object):
    r"""Proxy of C++ std::vector< CChemEqElement * > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(CChemEqElementStdVector self) -> SwigPyIterator"""
        return _COPASI.CChemEqElementStdVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(CChemEqElementStdVector self) -> bool"""
        return _COPASI.CChemEqElementStdVector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(CChemEqElementStdVector self) -> bool"""
        return _COPASI.CChemEqElementStdVector___bool__(self)

    def __len__(self):
        r"""__len__(CChemEqElementStdVector self) -> std::vector< CChemEqElement * >::size_type"""
        return _COPASI.CChemEqElementStdVector___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(CChemEqElementStdVector self, std::vector< CChemEqElement * >::difference_type i, std::vector< CChemEqElement * >::difference_type j) -> CChemEqElementStdVector"""
        return _COPASI.CChemEqElementStdVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(CChemEqElementStdVector self, std::vector< CChemEqElement * >::difference_type i, std::vector< CChemEqElement * >::difference_type j)
        __setslice__(CChemEqElementStdVector self, std::vector< CChemEqElement * >::difference_type i, std::vector< CChemEqElement * >::difference_type j, CChemEqElementStdVector v)
        """
        return _COPASI.CChemEqElementStdVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(CChemEqElementStdVector self, std::vector< CChemEqElement * >::difference_type i, std::vector< CChemEqElement * >::difference_type j)"""
        return _COPASI.CChemEqElementStdVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(CChemEqElementStdVector self, std::vector< CChemEqElement * >::difference_type i)
        __delitem__(CChemEqElementStdVector self, SWIGPY_SLICEOBJECT * slice)
        """
        return _COPASI.CChemEqElementStdVector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(CChemEqElementStdVector self, SWIGPY_SLICEOBJECT * slice) -> CChemEqElementStdVector
        __getitem__(CChemEqElementStdVector self, std::vector< CChemEqElement * >::difference_type i) -> CChemEqElement
        """
        return _COPASI.CChemEqElementStdVector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(CChemEqElementStdVector self, SWIGPY_SLICEOBJECT * slice, CChemEqElementStdVector v)
        __setitem__(CChemEqElementStdVector self, SWIGPY_SLICEOBJECT * slice)
        __setitem__(CChemEqElementStdVector self, std::vector< CChemEqElement * >::difference_type i, CChemEqElement x)
        """
        return _COPASI.CChemEqElementStdVector___setitem__(self, *args)

    def pop(self):
        r"""pop(CChemEqElementStdVector self) -> CChemEqElement"""
        return _COPASI.CChemEqElementStdVector_pop(self)

    def append(self, x):
        r"""append(CChemEqElementStdVector self, CChemEqElement x)"""
        return _COPASI.CChemEqElementStdVector_append(self, x)

    def empty(self):
        r"""empty(CChemEqElementStdVector self) -> bool"""
        return _COPASI.CChemEqElementStdVector_empty(self)

    def size(self):
        r"""size(CChemEqElementStdVector self) -> std::vector< CChemEqElement * >::size_type"""
        return _COPASI.CChemEqElementStdVector_size(self)

    def swap(self, v):
        r"""swap(CChemEqElementStdVector self, CChemEqElementStdVector v)"""
        return _COPASI.CChemEqElementStdVector_swap(self, v)

    def rbegin(self):
        r"""rbegin(CChemEqElementStdVector self) -> std::vector< CChemEqElement * >::reverse_iterator"""
        return _COPASI.CChemEqElementStdVector_rbegin(self)

    def rend(self):
        r"""rend(CChemEqElementStdVector self) -> std::vector< CChemEqElement * >::reverse_iterator"""
        return _COPASI.CChemEqElementStdVector_rend(self)

    def clear(self):
        r"""clear(CChemEqElementStdVector self)"""
        return _COPASI.CChemEqElementStdVector_clear(self)

    def get_allocator(self):
        r"""get_allocator(CChemEqElementStdVector self) -> std::vector< CChemEqElement * >::allocator_type"""
        return _COPASI.CChemEqElementStdVector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(CChemEqElementStdVector self)"""
        return _COPASI.CChemEqElementStdVector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(CChemEqElementStdVector self, std::vector< CChemEqElement * >::iterator pos) -> std::vector< CChemEqElement * >::iterator
        erase(CChemEqElementStdVector self, std::vector< CChemEqElement * >::iterator first, std::vector< CChemEqElement * >::iterator last) -> std::vector< CChemEqElement * >::iterator
        """
        return _COPASI.CChemEqElementStdVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(CChemEqElementStdVector self) -> CChemEqElementStdVector
        __init__(CChemEqElementStdVector self, CChemEqElementStdVector other) -> CChemEqElementStdVector
        __init__(CChemEqElementStdVector self, std::vector< CChemEqElement * >::size_type size) -> CChemEqElementStdVector
        __init__(CChemEqElementStdVector self, std::vector< CChemEqElement * >::size_type size, CChemEqElement value) -> CChemEqElementStdVector
        """
        _COPASI.CChemEqElementStdVector_swiginit(self, _COPASI.new_CChemEqElementStdVector(*args))

    def push_back(self, x):
        r"""push_back(CChemEqElementStdVector self, CChemEqElement x)"""
        return _COPASI.CChemEqElementStdVector_push_back(self, x)

    def front(self):
        r"""front(CChemEqElementStdVector self) -> CChemEqElement"""
        return _COPASI.CChemEqElementStdVector_front(self)

    def back(self):
        r"""back(CChemEqElementStdVector self) -> CChemEqElement"""
        return _COPASI.CChemEqElementStdVector_back(self)

    def assign(self, n, x):
        r"""assign(CChemEqElementStdVector self, std::vector< CChemEqElement * >::size_type n, CChemEqElement x)"""
        return _COPASI.CChemEqElementStdVector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(CChemEqElementStdVector self, std::vector< CChemEqElement * >::size_type new_size)
        resize(CChemEqElementStdVector self, std::vector< CChemEqElement * >::size_type new_size, CChemEqElement x)
        """
        return _COPASI.CChemEqElementStdVector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(CChemEqElementStdVector self, std::vector< CChemEqElement * >::iterator pos, CChemEqElement x) -> std::vector< CChemEqElement * >::iterator
        insert(CChemEqElementStdVector self, std::vector< CChemEqElement * >::iterator pos, std::vector< CChemEqElement * >::size_type n, CChemEqElement x)
        """
        return _COPASI.CChemEqElementStdVector_insert(self, *args)

    def reserve(self, n):
        r"""reserve(CChemEqElementStdVector self, std::vector< CChemEqElement * >::size_type n)"""
        return _COPASI.CChemEqElementStdVector_reserve(self, n)

    def capacity(self):
        r"""capacity(CChemEqElementStdVector self) -> std::vector< CChemEqElement * >::size_type"""
        return _COPASI.CChemEqElementStdVector_capacity(self)
    __swig_destroy__ = _COPASI.delete_CChemEqElementStdVector

# Register CChemEqElementStdVector in _COPASI:
_COPASI.CChemEqElementStdVector_swigregister(CChemEqElementStdVector)
class CChemEqElementVector(CDataContainer):
    r"""Proxy of C++ CDataVector< CChemEqElement > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _COPASI.delete_CChemEqElementVector

    def cleanup(self):
        r"""cleanup(CChemEqElementVector self)"""
        return _COPASI.CChemEqElementVector_cleanup(self)

    def addCopy(self, src):
        r"""addCopy(CChemEqElementVector self, CChemEqElement src) -> bool"""
        return _COPASI.CChemEqElementVector_addCopy(self, src)

    def swap(self, indexFrom, indexTo):
        r"""swap(CChemEqElementVector self, size_t const & indexFrom, size_t const & indexTo)"""
        return _COPASI.CChemEqElementVector_swap(self, indexFrom, indexTo)

    def add(self, pObject, adopt=True):
        
        return _COPASI.CChemEqElementVector_add(self, pObject, adopt)

    def getObject(self, name):
        r"""getObject(CChemEqElementVector self, CCommonName name) -> CObjectInterface"""
        return _COPASI.CChemEqElementVector_getObject(self, name)

    def size(self):
        r"""size(CChemEqElementVector self) -> size_t"""
        return _COPASI.CChemEqElementVector_size(self)

    def empty(self):
        r"""empty(CChemEqElementVector self) -> bool"""
        return _COPASI.CChemEqElementVector_empty(self)

    def clear(self):
        r"""clear(CChemEqElementVector self)"""
        return _COPASI.CChemEqElementVector_clear(self)

    def getIndex(self, pObject):
        r"""getIndex(CChemEqElementVector self, CDataObject pObject) -> size_t"""
        return _COPASI.CChemEqElementVector_getIndex(self, pObject)

    def remove(self, index):
        r"""remove(CChemEqElementVector self, unsigned int index)"""
        return _COPASI.CChemEqElementVector_remove(self, index)

    def get(self, index):
        r"""get(CChemEqElementVector self, unsigned int index) -> CDataObject"""
        return _COPASI.CChemEqElementVector_get(self, index)

    def addAndOwn(self, DISOWN):
        r"""addAndOwn(CChemEqElementVector self, CChemEqElement DISOWN) -> bool"""
        return _COPASI.CChemEqElementVector_addAndOwn(self, DISOWN)

    def removeObject(self, pObject):
        r"""removeObject(CChemEqElementVector self, CDataObject pObject) -> bool"""
        return _COPASI.CChemEqElementVector_removeObject(self, pObject)

    def __len__(self):
        r"""__len__(CChemEqElementVector self) -> size_t"""
        return _COPASI.CChemEqElementVector___len__(self)

    def __getitem__(self, index):
        r"""__getitem__(CChemEqElementVector self, unsigned int index) -> CDataObject"""
        return _COPASI.CChemEqElementVector___getitem__(self, index)

# Register CChemEqElementVector in _COPASI:
_COPASI.CChemEqElementVector_swigregister(CChemEqElementVector)
class DataModelVector(CDataContainer):
    r"""Proxy of C++ CDataVector< CDataModel > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _COPASI.delete_DataModelVector

    def cleanup(self):
        r"""cleanup(DataModelVector self)"""
        return _COPASI.DataModelVector_cleanup(self)

    def addCopy(self, src):
        r"""addCopy(DataModelVector self, CDataModel src) -> bool"""
        return _COPASI.DataModelVector_addCopy(self, src)

    def swap(self, indexFrom, indexTo):
        r"""swap(DataModelVector self, size_t const & indexFrom, size_t const & indexTo)"""
        return _COPASI.DataModelVector_swap(self, indexFrom, indexTo)

    def add(self, pObject, adopt=True):
        
        return _COPASI.DataModelVector_add(self, pObject, adopt)

    def getObject(self, name):
        r"""getObject(DataModelVector self, CCommonName name) -> CObjectInterface"""
        return _COPASI.DataModelVector_getObject(self, name)

    def size(self):
        r"""size(DataModelVector self) -> size_t"""
        return _COPASI.DataModelVector_size(self)

    def empty(self):
        r"""empty(DataModelVector self) -> bool"""
        return _COPASI.DataModelVector_empty(self)

    def clear(self):
        r"""clear(DataModelVector self)"""
        return _COPASI.DataModelVector_clear(self)

    def getIndex(self, pObject):
        r"""getIndex(DataModelVector self, CDataObject pObject) -> size_t"""
        return _COPASI.DataModelVector_getIndex(self, pObject)

    def remove(self, index):
        r"""remove(DataModelVector self, unsigned int index)"""
        return _COPASI.DataModelVector_remove(self, index)

    def get(self, index):
        r"""get(DataModelVector self, unsigned int index) -> CDataObject"""
        return _COPASI.DataModelVector_get(self, index)

    def addAndOwn(self, DISOWN):
        r"""addAndOwn(DataModelVector self, CDataModel DISOWN) -> bool"""
        return _COPASI.DataModelVector_addAndOwn(self, DISOWN)

    def removeObject(self, pObject):
        r"""removeObject(DataModelVector self, CDataObject pObject) -> bool"""
        return _COPASI.DataModelVector_removeObject(self, pObject)

    def __len__(self):
        r"""__len__(DataModelVector self) -> size_t"""
        return _COPASI.DataModelVector___len__(self)

    def __getitem__(self, index):
        r"""__getitem__(DataModelVector self, unsigned int index) -> CDataObject"""
        return _COPASI.DataModelVector___getitem__(self, index)

# Register DataModelVector in _COPASI:
_COPASI.DataModelVector_swigregister(DataModelVector)
class ParameterVector(object):
    r"""Proxy of C++ std::vector< CCopasiParameter * > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(ParameterVector self) -> SwigPyIterator"""
        return _COPASI.ParameterVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(ParameterVector self) -> bool"""
        return _COPASI.ParameterVector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(ParameterVector self) -> bool"""
        return _COPASI.ParameterVector___bool__(self)

    def __len__(self):
        r"""__len__(ParameterVector self) -> std::vector< CCopasiParameter * >::size_type"""
        return _COPASI.ParameterVector___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(ParameterVector self, std::vector< CCopasiParameter * >::difference_type i, std::vector< CCopasiParameter * >::difference_type j) -> ParameterVector"""
        return _COPASI.ParameterVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(ParameterVector self, std::vector< CCopasiParameter * >::difference_type i, std::vector< CCopasiParameter * >::difference_type j)
        __setslice__(ParameterVector self, std::vector< CCopasiParameter * >::difference_type i, std::vector< CCopasiParameter * >::difference_type j, ParameterVector v)
        """
        return _COPASI.ParameterVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(ParameterVector self, std::vector< CCopasiParameter * >::difference_type i, std::vector< CCopasiParameter * >::difference_type j)"""
        return _COPASI.ParameterVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(ParameterVector self, std::vector< CCopasiParameter * >::difference_type i)
        __delitem__(ParameterVector self, SWIGPY_SLICEOBJECT * slice)
        """
        return _COPASI.ParameterVector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(ParameterVector self, SWIGPY_SLICEOBJECT * slice) -> ParameterVector
        __getitem__(ParameterVector self, std::vector< CCopasiParameter * >::difference_type i) -> CCopasiParameter
        """
        return _COPASI.ParameterVector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(ParameterVector self, SWIGPY_SLICEOBJECT * slice, ParameterVector v)
        __setitem__(ParameterVector self, SWIGPY_SLICEOBJECT * slice)
        __setitem__(ParameterVector self, std::vector< CCopasiParameter * >::difference_type i, CCopasiParameter x)
        """
        return _COPASI.ParameterVector___setitem__(self, *args)

    def pop(self):
        r"""pop(ParameterVector self) -> CCopasiParameter"""
        return _COPASI.ParameterVector_pop(self)

    def append(self, x):
        r"""append(ParameterVector self, CCopasiParameter x)"""
        return _COPASI.ParameterVector_append(self, x)

    def empty(self):
        r"""empty(ParameterVector self) -> bool"""
        return _COPASI.ParameterVector_empty(self)

    def size(self):
        r"""size(ParameterVector self) -> std::vector< CCopasiParameter * >::size_type"""
        return _COPASI.ParameterVector_size(self)

    def swap(self, v):
        r"""swap(ParameterVector self, ParameterVector v)"""
        return _COPASI.ParameterVector_swap(self, v)

    def rbegin(self):
        r"""rbegin(ParameterVector self) -> std::vector< CCopasiParameter * >::reverse_iterator"""
        return _COPASI.ParameterVector_rbegin(self)

    def rend(self):
        r"""rend(ParameterVector self) -> std::vector< CCopasiParameter * >::reverse_iterator"""
        return _COPASI.ParameterVector_rend(self)

    def clear(self):
        r"""clear(ParameterVector self)"""
        return _COPASI.ParameterVector_clear(self)

    def get_allocator(self):
        r"""get_allocator(ParameterVector self) -> std::vector< CCopasiParameter * >::allocator_type"""
        return _COPASI.ParameterVector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(ParameterVector self)"""
        return _COPASI.ParameterVector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(ParameterVector self, std::vector< CCopasiParameter * >::iterator pos) -> std::vector< CCopasiParameter * >::iterator
        erase(ParameterVector self, std::vector< CCopasiParameter * >::iterator first, std::vector< CCopasiParameter * >::iterator last) -> std::vector< CCopasiParameter * >::iterator
        """
        return _COPASI.ParameterVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(ParameterVector self) -> ParameterVector
        __init__(ParameterVector self, ParameterVector other) -> ParameterVector
        __init__(ParameterVector self, std::vector< CCopasiParameter * >::size_type size) -> ParameterVector
        __init__(ParameterVector self, std::vector< CCopasiParameter * >::size_type size, CCopasiParameter value) -> ParameterVector
        """
        _COPASI.ParameterVector_swiginit(self, _COPASI.new_ParameterVector(*args))

    def push_back(self, x):
        r"""push_back(ParameterVector self, CCopasiParameter x)"""
        return _COPASI.ParameterVector_push_back(self, x)

    def front(self):
        r"""front(ParameterVector self) -> CCopasiParameter"""
        return _COPASI.ParameterVector_front(self)

    def back(self):
        r"""back(ParameterVector self) -> CCopasiParameter"""
        return _COPASI.ParameterVector_back(self)

    def assign(self, n, x):
        r"""assign(ParameterVector self, std::vector< CCopasiParameter * >::size_type n, CCopasiParameter x)"""
        return _COPASI.ParameterVector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(ParameterVector self, std::vector< CCopasiParameter * >::size_type new_size)
        resize(ParameterVector self, std::vector< CCopasiParameter * >::size_type new_size, CCopasiParameter x)
        """
        return _COPASI.ParameterVector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(ParameterVector self, std::vector< CCopasiParameter * >::iterator pos, CCopasiParameter x) -> std::vector< CCopasiParameter * >::iterator
        insert(ParameterVector self, std::vector< CCopasiParameter * >::iterator pos, std::vector< CCopasiParameter * >::size_type n, CCopasiParameter x)
        """
        return _COPASI.ParameterVector_insert(self, *args)

    def reserve(self, n):
        r"""reserve(ParameterVector self, std::vector< CCopasiParameter * >::size_type n)"""
        return _COPASI.ParameterVector_reserve(self, n)

    def capacity(self):
        r"""capacity(ParameterVector self) -> std::vector< CCopasiParameter * >::size_type"""
        return _COPASI.ParameterVector_capacity(self)
    __swig_destroy__ = _COPASI.delete_ParameterVector

# Register ParameterVector in _COPASI:
_COPASI.ParameterVector_swigregister(ParameterVector)
class IntStdVector(object):
    r"""Proxy of C++ std::vector< int > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(IntStdVector self) -> SwigPyIterator"""
        return _COPASI.IntStdVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(IntStdVector self) -> bool"""
        return _COPASI.IntStdVector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(IntStdVector self) -> bool"""
        return _COPASI.IntStdVector___bool__(self)

    def __len__(self):
        r"""__len__(IntStdVector self) -> std::vector< int >::size_type"""
        return _COPASI.IntStdVector___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(IntStdVector self, std::vector< int >::difference_type i, std::vector< int >::difference_type j) -> IntStdVector"""
        return _COPASI.IntStdVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(IntStdVector self, std::vector< int >::difference_type i, std::vector< int >::difference_type j)
        __setslice__(IntStdVector self, std::vector< int >::difference_type i, std::vector< int >::difference_type j, IntStdVector v)
        """
        return _COPASI.IntStdVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(IntStdVector self, std::vector< int >::difference_type i, std::vector< int >::difference_type j)"""
        return _COPASI.IntStdVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(IntStdVector self, std::vector< int >::difference_type i)
        __delitem__(IntStdVector self, SWIGPY_SLICEOBJECT * slice)
        """
        return _COPASI.IntStdVector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(IntStdVector self, SWIGPY_SLICEOBJECT * slice) -> IntStdVector
        __getitem__(IntStdVector self, std::vector< int >::difference_type i) -> std::vector< int >::value_type const &
        """
        return _COPASI.IntStdVector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(IntStdVector self, SWIGPY_SLICEOBJECT * slice, IntStdVector v)
        __setitem__(IntStdVector self, SWIGPY_SLICEOBJECT * slice)
        __setitem__(IntStdVector self, std::vector< int >::difference_type i, std::vector< int >::value_type const & x)
        """
        return _COPASI.IntStdVector___setitem__(self, *args)

    def pop(self):
        r"""pop(IntStdVector self) -> std::vector< int >::value_type"""
        return _COPASI.IntStdVector_pop(self)

    def append(self, x):
        r"""append(IntStdVector self, std::vector< int >::value_type const & x)"""
        return _COPASI.IntStdVector_append(self, x)

    def empty(self):
        r"""empty(IntStdVector self) -> bool"""
        return _COPASI.IntStdVector_empty(self)

    def size(self):
        r"""size(IntStdVector self) -> std::vector< int >::size_type"""
        return _COPASI.IntStdVector_size(self)

    def swap(self, v):
        r"""swap(IntStdVector self, IntStdVector v)"""
        return _COPASI.IntStdVector_swap(self, v)

    def rbegin(self):
        r"""rbegin(IntStdVector self) -> std::vector< int >::reverse_iterator"""
        return _COPASI.IntStdVector_rbegin(self)

    def rend(self):
        r"""rend(IntStdVector self) -> std::vector< int >::reverse_iterator"""
        return _COPASI.IntStdVector_rend(self)

    def clear(self):
        r"""clear(IntStdVector self)"""
        return _COPASI.IntStdVector_clear(self)

    def get_allocator(self):
        r"""get_allocator(IntStdVector self) -> std::vector< int >::allocator_type"""
        return _COPASI.IntStdVector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(IntStdVector self)"""
        return _COPASI.IntStdVector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(IntStdVector self, std::vector< int >::iterator pos) -> std::vector< int >::iterator
        erase(IntStdVector self, std::vector< int >::iterator first, std::vector< int >::iterator last) -> std::vector< int >::iterator
        """
        return _COPASI.IntStdVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(IntStdVector self) -> IntStdVector
        __init__(IntStdVector self, IntStdVector other) -> IntStdVector
        __init__(IntStdVector self, std::vector< int >::size_type size) -> IntStdVector
        __init__(IntStdVector self, std::vector< int >::size_type size, std::vector< int >::value_type const & value) -> IntStdVector
        """
        _COPASI.IntStdVector_swiginit(self, _COPASI.new_IntStdVector(*args))

    def push_back(self, x):
        r"""push_back(IntStdVector self, std::vector< int >::value_type const & x)"""
        return _COPASI.IntStdVector_push_back(self, x)

    def front(self):
        r"""front(IntStdVector self) -> std::vector< int >::value_type const &"""
        return _COPASI.IntStdVector_front(self)

    def back(self):
        r"""back(IntStdVector self) -> std::vector< int >::value_type const &"""
        return _COPASI.IntStdVector_back(self)

    def assign(self, n, x):
        r"""assign(IntStdVector self, std::vector< int >::size_type n, std::vector< int >::value_type const & x)"""
        return _COPASI.IntStdVector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(IntStdVector self, std::vector< int >::size_type new_size)
        resize(IntStdVector self, std::vector< int >::size_type new_size, std::vector< int >::value_type const & x)
        """
        return _COPASI.IntStdVector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(IntStdVector self, std::vector< int >::iterator pos, std::vector< int >::value_type const & x) -> std::vector< int >::iterator
        insert(IntStdVector self, std::vector< int >::iterator pos, std::vector< int >::size_type n, std::vector< int >::value_type const & x)
        """
        return _COPASI.IntStdVector_insert(self, *args)

    def reserve(self, n):
        r"""reserve(IntStdVector self, std::vector< int >::size_type n)"""
        return _COPASI.IntStdVector_reserve(self, n)

    def capacity(self):
        r"""capacity(IntStdVector self) -> std::vector< int >::size_type"""
        return _COPASI.IntStdVector_capacity(self)
    __swig_destroy__ = _COPASI.delete_IntStdVector

# Register IntStdVector in _COPASI:
_COPASI.IntStdVector_swigregister(IntStdVector)
class SizeTStdVector(object):
    r"""Proxy of C++ std::vector< size_t > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(SizeTStdVector self) -> SwigPyIterator"""
        return _COPASI.SizeTStdVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(SizeTStdVector self) -> bool"""
        return _COPASI.SizeTStdVector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(SizeTStdVector self) -> bool"""
        return _COPASI.SizeTStdVector___bool__(self)

    def __len__(self):
        r"""__len__(SizeTStdVector self) -> std::vector< size_t >::size_type"""
        return _COPASI.SizeTStdVector___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(SizeTStdVector self, std::vector< size_t >::difference_type i, std::vector< size_t >::difference_type j) -> SizeTStdVector"""
        return _COPASI.SizeTStdVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(SizeTStdVector self, std::vector< size_t >::difference_type i, std::vector< size_t >::difference_type j)
        __setslice__(SizeTStdVector self, std::vector< size_t >::difference_type i, std::vector< size_t >::difference_type j, SizeTStdVector v)
        """
        return _COPASI.SizeTStdVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(SizeTStdVector self, std::vector< size_t >::difference_type i, std::vector< size_t >::difference_type j)"""
        return _COPASI.SizeTStdVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(SizeTStdVector self, std::vector< size_t >::difference_type i)
        __delitem__(SizeTStdVector self, SWIGPY_SLICEOBJECT * slice)
        """
        return _COPASI.SizeTStdVector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(SizeTStdVector self, SWIGPY_SLICEOBJECT * slice) -> SizeTStdVector
        __getitem__(SizeTStdVector self, std::vector< size_t >::difference_type i) -> std::vector< size_t >::value_type const &
        """
        return _COPASI.SizeTStdVector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(SizeTStdVector self, SWIGPY_SLICEOBJECT * slice, SizeTStdVector v)
        __setitem__(SizeTStdVector self, SWIGPY_SLICEOBJECT * slice)
        __setitem__(SizeTStdVector self, std::vector< size_t >::difference_type i, std::vector< size_t >::value_type const & x)
        """
        return _COPASI.SizeTStdVector___setitem__(self, *args)

    def pop(self):
        r"""pop(SizeTStdVector self) -> std::vector< size_t >::value_type"""
        return _COPASI.SizeTStdVector_pop(self)

    def append(self, x):
        r"""append(SizeTStdVector self, std::vector< size_t >::value_type const & x)"""
        return _COPASI.SizeTStdVector_append(self, x)

    def empty(self):
        r"""empty(SizeTStdVector self) -> bool"""
        return _COPASI.SizeTStdVector_empty(self)

    def size(self):
        r"""size(SizeTStdVector self) -> std::vector< size_t >::size_type"""
        return _COPASI.SizeTStdVector_size(self)

    def swap(self, v):
        r"""swap(SizeTStdVector self, SizeTStdVector v)"""
        return _COPASI.SizeTStdVector_swap(self, v)

    def rbegin(self):
        r"""rbegin(SizeTStdVector self) -> std::vector< size_t >::reverse_iterator"""
        return _COPASI.SizeTStdVector_rbegin(self)

    def rend(self):
        r"""rend(SizeTStdVector self) -> std::vector< size_t >::reverse_iterator"""
        return _COPASI.SizeTStdVector_rend(self)

    def clear(self):
        r"""clear(SizeTStdVector self)"""
        return _COPASI.SizeTStdVector_clear(self)

    def get_allocator(self):
        r"""get_allocator(SizeTStdVector self) -> std::vector< size_t >::allocator_type"""
        return _COPASI.SizeTStdVector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(SizeTStdVector self)"""
        return _COPASI.SizeTStdVector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(SizeTStdVector self, std::vector< size_t >::iterator pos) -> std::vector< size_t >::iterator
        erase(SizeTStdVector self, std::vector< size_t >::iterator first, std::vector< size_t >::iterator last) -> std::vector< size_t >::iterator
        """
        return _COPASI.SizeTStdVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(SizeTStdVector self) -> SizeTStdVector
        __init__(SizeTStdVector self, SizeTStdVector other) -> SizeTStdVector
        __init__(SizeTStdVector self, std::vector< size_t >::size_type size) -> SizeTStdVector
        __init__(SizeTStdVector self, std::vector< size_t >::size_type size, std::vector< size_t >::value_type const & value) -> SizeTStdVector
        """
        _COPASI.SizeTStdVector_swiginit(self, _COPASI.new_SizeTStdVector(*args))

    def push_back(self, x):
        r"""push_back(SizeTStdVector self, std::vector< size_t >::value_type const & x)"""
        return _COPASI.SizeTStdVector_push_back(self, x)

    def front(self):
        r"""front(SizeTStdVector self) -> std::vector< size_t >::value_type const &"""
        return _COPASI.SizeTStdVector_front(self)

    def back(self):
        r"""back(SizeTStdVector self) -> std::vector< size_t >::value_type const &"""
        return _COPASI.SizeTStdVector_back(self)

    def assign(self, n, x):
        r"""assign(SizeTStdVector self, std::vector< size_t >::size_type n, std::vector< size_t >::value_type const & x)"""
        return _COPASI.SizeTStdVector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(SizeTStdVector self, std::vector< size_t >::size_type new_size)
        resize(SizeTStdVector self, std::vector< size_t >::size_type new_size, std::vector< size_t >::value_type const & x)
        """
        return _COPASI.SizeTStdVector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(SizeTStdVector self, std::vector< size_t >::iterator pos, std::vector< size_t >::value_type const & x) -> std::vector< size_t >::iterator
        insert(SizeTStdVector self, std::vector< size_t >::iterator pos, std::vector< size_t >::size_type n, std::vector< size_t >::value_type const & x)
        """
        return _COPASI.SizeTStdVector_insert(self, *args)

    def reserve(self, n):
        r"""reserve(SizeTStdVector self, std::vector< size_t >::size_type n)"""
        return _COPASI.SizeTStdVector_reserve(self, n)

    def capacity(self):
        r"""capacity(SizeTStdVector self) -> std::vector< size_t >::size_type"""
        return _COPASI.SizeTStdVector_capacity(self)
    __swig_destroy__ = _COPASI.delete_SizeTStdVector

# Register SizeTStdVector in _COPASI:
_COPASI.SizeTStdVector_swigregister(SizeTStdVector)
class StringStdVector(object):
    r"""Proxy of C++ std::vector< std::string > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(StringStdVector self) -> SwigPyIterator"""
        return _COPASI.StringStdVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(StringStdVector self) -> bool"""
        return _COPASI.StringStdVector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(StringStdVector self) -> bool"""
        return _COPASI.StringStdVector___bool__(self)

    def __len__(self):
        r"""__len__(StringStdVector self) -> std::vector< std::string >::size_type"""
        return _COPASI.StringStdVector___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(StringStdVector self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j) -> StringStdVector"""
        return _COPASI.StringStdVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(StringStdVector self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j)
        __setslice__(StringStdVector self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j, StringStdVector v)
        """
        return _COPASI.StringStdVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(StringStdVector self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j)"""
        return _COPASI.StringStdVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(StringStdVector self, std::vector< std::string >::difference_type i)
        __delitem__(StringStdVector self, SWIGPY_SLICEOBJECT * slice)
        """
        return _COPASI.StringStdVector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(StringStdVector self, SWIGPY_SLICEOBJECT * slice) -> StringStdVector
        __getitem__(StringStdVector self, std::vector< std::string >::difference_type i) -> std::vector< std::string >::value_type const &
        """
        return _COPASI.StringStdVector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(StringStdVector self, SWIGPY_SLICEOBJECT * slice, StringStdVector v)
        __setitem__(StringStdVector self, SWIGPY_SLICEOBJECT * slice)
        __setitem__(StringStdVector self, std::vector< std::string >::difference_type i, std::vector< std::string >::value_type const & x)
        """
        return _COPASI.StringStdVector___setitem__(self, *args)

    def pop(self):
        r"""pop(StringStdVector self) -> std::vector< std::string >::value_type"""
        return _COPASI.StringStdVector_pop(self)

    def append(self, x):
        r"""append(StringStdVector self, std::vector< std::string >::value_type const & x)"""
        return _COPASI.StringStdVector_append(self, x)

    def empty(self):
        r"""empty(StringStdVector self) -> bool"""
        return _COPASI.StringStdVector_empty(self)

    def size(self):
        r"""size(StringStdVector self) -> std::vector< std::string >::size_type"""
        return _COPASI.StringStdVector_size(self)

    def swap(self, v):
        r"""swap(StringStdVector self, StringStdVector v)"""
        return _COPASI.StringStdVector_swap(self, v)

    def rbegin(self):
        r"""rbegin(StringStdVector self) -> std::vector< std::string >::reverse_iterator"""
        return _COPASI.StringStdVector_rbegin(self)

    def rend(self):
        r"""rend(StringStdVector self) -> std::vector< std::string >::reverse_iterator"""
        return _COPASI.StringStdVector_rend(self)

    def clear(self):
        r"""clear(StringStdVector self)"""
        return _COPASI.StringStdVector_clear(self)

    def get_allocator(self):
        r"""get_allocator(StringStdVector self) -> std::vector< std::string >::allocator_type"""
        return _COPASI.StringStdVector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(StringStdVector self)"""
        return _COPASI.StringStdVector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(StringStdVector self, std::vector< std::string >::iterator pos) -> std::vector< std::string >::iterator
        erase(StringStdVector self, std::vector< std::string >::iterator first, std::vector< std::string >::iterator last) -> std::vector< std::string >::iterator
        """
        return _COPASI.StringStdVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(StringStdVector self) -> StringStdVector
        __init__(StringStdVector self, StringStdVector other) -> StringStdVector
        __init__(StringStdVector self, std::vector< std::string >::size_type size) -> StringStdVector
        __init__(StringStdVector self, std::vector< std::string >::size_type size, std::vector< std::string >::value_type const & value) -> StringStdVector
        """
        _COPASI.StringStdVector_swiginit(self, _COPASI.new_StringStdVector(*args))

    def push_back(self, x):
        r"""push_back(StringStdVector self, std::vector< std::string >::value_type const & x)"""
        return _COPASI.StringStdVector_push_back(self, x)

    def front(self):
        r"""front(StringStdVector self) -> std::vector< std::string >::value_type const &"""
        return _COPASI.StringStdVector_front(self)

    def back(self):
        r"""back(StringStdVector self) -> std::vector< std::string >::value_type const &"""
        return _COPASI.StringStdVector_back(self)

    def assign(self, n, x):
        r"""assign(StringStdVector self, std::vector< std::string >::size_type n, std::vector< std::string >::value_type const & x)"""
        return _COPASI.StringStdVector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(StringStdVector self, std::vector< std::string >::size_type new_size)
        resize(StringStdVector self, std::vector< std::string >::size_type new_size, std::vector< std::string >::value_type const & x)
        """
        return _COPASI.StringStdVector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(StringStdVector self, std::vector< std::string >::iterator pos, std::vector< std::string >::value_type const & x) -> std::vector< std::string >::iterator
        insert(StringStdVector self, std::vector< std::string >::iterator pos, std::vector< std::string >::size_type n, std::vector< std::string >::value_type const & x)
        """
        return _COPASI.StringStdVector_insert(self, *args)

    def reserve(self, n):
        r"""reserve(StringStdVector self, std::vector< std::string >::size_type n)"""
        return _COPASI.StringStdVector_reserve(self, n)

    def capacity(self):
        r"""capacity(StringStdVector self) -> std::vector< std::string >::size_type"""
        return _COPASI.StringStdVector_capacity(self)
    __swig_destroy__ = _COPASI.delete_StringStdVector

# Register StringStdVector in _COPASI:
_COPASI.StringStdVector_swigregister(StringStdVector)
class VectorOfStringVectors(object):
    r"""Proxy of C++ std::vector< std::vector< std::string > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(VectorOfStringVectors self) -> SwigPyIterator"""
        return _COPASI.VectorOfStringVectors_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(VectorOfStringVectors self) -> bool"""
        return _COPASI.VectorOfStringVectors___nonzero__(self)

    def __bool__(self):
        r"""__bool__(VectorOfStringVectors self) -> bool"""
        return _COPASI.VectorOfStringVectors___bool__(self)

    def __len__(self):
        r"""__len__(VectorOfStringVectors self) -> std::vector< std::vector< std::string > >::size_type"""
        return _COPASI.VectorOfStringVectors___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(VectorOfStringVectors self, std::vector< std::vector< std::string > >::difference_type i, std::vector< std::vector< std::string > >::difference_type j) -> VectorOfStringVectors"""
        return _COPASI.VectorOfStringVectors___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(VectorOfStringVectors self, std::vector< std::vector< std::string > >::difference_type i, std::vector< std::vector< std::string > >::difference_type j)
        __setslice__(VectorOfStringVectors self, std::vector< std::vector< std::string > >::difference_type i, std::vector< std::vector< std::string > >::difference_type j, VectorOfStringVectors v)
        """
        return _COPASI.VectorOfStringVectors___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(VectorOfStringVectors self, std::vector< std::vector< std::string > >::difference_type i, std::vector< std::vector< std::string > >::difference_type j)"""
        return _COPASI.VectorOfStringVectors___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(VectorOfStringVectors self, std::vector< std::vector< std::string > >::difference_type i)
        __delitem__(VectorOfStringVectors self, SWIGPY_SLICEOBJECT * slice)
        """
        return _COPASI.VectorOfStringVectors___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(VectorOfStringVectors self, SWIGPY_SLICEOBJECT * slice) -> VectorOfStringVectors
        __getitem__(VectorOfStringVectors self, std::vector< std::vector< std::string > >::difference_type i) -> StringStdVector
        """
        return _COPASI.VectorOfStringVectors___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(VectorOfStringVectors self, SWIGPY_SLICEOBJECT * slice, VectorOfStringVectors v)
        __setitem__(VectorOfStringVectors self, SWIGPY_SLICEOBJECT * slice)
        __setitem__(VectorOfStringVectors self, std::vector< std::vector< std::string > >::difference_type i, StringStdVector x)
        """
        return _COPASI.VectorOfStringVectors___setitem__(self, *args)

    def pop(self):
        r"""pop(VectorOfStringVectors self) -> StringStdVector"""
        return _COPASI.VectorOfStringVectors_pop(self)

    def append(self, x):
        r"""append(VectorOfStringVectors self, StringStdVector x)"""
        return _COPASI.VectorOfStringVectors_append(self, x)

    def empty(self):
        r"""empty(VectorOfStringVectors self) -> bool"""
        return _COPASI.VectorOfStringVectors_empty(self)

    def size(self):
        r"""size(VectorOfStringVectors self) -> std::vector< std::vector< std::string > >::size_type"""
        return _COPASI.VectorOfStringVectors_size(self)

    def swap(self, v):
        r"""swap(VectorOfStringVectors self, VectorOfStringVectors v)"""
        return _COPASI.VectorOfStringVectors_swap(self, v)

    def rbegin(self):
        r"""rbegin(VectorOfStringVectors self) -> std::vector< std::vector< std::string > >::reverse_iterator"""
        return _COPASI.VectorOfStringVectors_rbegin(self)

    def rend(self):
        r"""rend(VectorOfStringVectors self) -> std::vector< std::vector< std::string > >::reverse_iterator"""
        return _COPASI.VectorOfStringVectors_rend(self)

    def clear(self):
        r"""clear(VectorOfStringVectors self)"""
        return _COPASI.VectorOfStringVectors_clear(self)

    def get_allocator(self):
        r"""get_allocator(VectorOfStringVectors self) -> std::vector< std::vector< std::string > >::allocator_type"""
        return _COPASI.VectorOfStringVectors_get_allocator(self)

    def pop_back(self):
        r"""pop_back(VectorOfStringVectors self)"""
        return _COPASI.VectorOfStringVectors_pop_back(self)

    def erase(self, *args):
        r"""
        erase(VectorOfStringVectors self, std::vector< std::vector< std::string > >::iterator pos) -> std::vector< std::vector< std::string > >::iterator
        erase(VectorOfStringVectors self, std::vector< std::vector< std::string > >::iterator first, std::vector< std::vector< std::string > >::iterator last) -> std::vector< std::vector< std::string > >::iterator
        """
        return _COPASI.VectorOfStringVectors_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(VectorOfStringVectors self) -> VectorOfStringVectors
        __init__(VectorOfStringVectors self, VectorOfStringVectors other) -> VectorOfStringVectors
        __init__(VectorOfStringVectors self, std::vector< std::vector< std::string > >::size_type size) -> VectorOfStringVectors
        __init__(VectorOfStringVectors self, std::vector< std::vector< std::string > >::size_type size, StringStdVector value) -> VectorOfStringVectors
        """
        _COPASI.VectorOfStringVectors_swiginit(self, _COPASI.new_VectorOfStringVectors(*args))

    def push_back(self, x):
        r"""push_back(VectorOfStringVectors self, StringStdVector x)"""
        return _COPASI.VectorOfStringVectors_push_back(self, x)

    def front(self):
        r"""front(VectorOfStringVectors self) -> StringStdVector"""
        return _COPASI.VectorOfStringVectors_front(self)

    def back(self):
        r"""back(VectorOfStringVectors self) -> StringStdVector"""
        return _COPASI.VectorOfStringVectors_back(self)

    def assign(self, n, x):
        r"""assign(VectorOfStringVectors self, std::vector< std::vector< std::string > >::size_type n, StringStdVector x)"""
        return _COPASI.VectorOfStringVectors_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(VectorOfStringVectors self, std::vector< std::vector< std::string > >::size_type new_size)
        resize(VectorOfStringVectors self, std::vector< std::vector< std::string > >::size_type new_size, StringStdVector x)
        """
        return _COPASI.VectorOfStringVectors_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(VectorOfStringVectors self, std::vector< std::vector< std::string > >::iterator pos, StringStdVector x) -> std::vector< std::vector< std::string > >::iterator
        insert(VectorOfStringVectors self, std::vector< std::vector< std::string > >::iterator pos, std::vector< std::vector< std::string > >::size_type n, StringStdVector x)
        """
        return _COPASI.VectorOfStringVectors_insert(self, *args)

    def reserve(self, n):
        r"""reserve(VectorOfStringVectors self, std::vector< std::vector< std::string > >::size_type n)"""
        return _COPASI.VectorOfStringVectors_reserve(self, n)

    def capacity(self):
        r"""capacity(VectorOfStringVectors self) -> std::vector< std::vector< std::string > >::size_type"""
        return _COPASI.VectorOfStringVectors_capacity(self)
    __swig_destroy__ = _COPASI.delete_VectorOfStringVectors

# Register VectorOfStringVectors in _COPASI:
_COPASI.VectorOfStringVectors_swigregister(VectorOfStringVectors)
class FloatStdVector(object):
    r"""Proxy of C++ std::vector< double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(FloatStdVector self) -> SwigPyIterator"""
        return _COPASI.FloatStdVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(FloatStdVector self) -> bool"""
        return _COPASI.FloatStdVector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(FloatStdVector self) -> bool"""
        return _COPASI.FloatStdVector___bool__(self)

    def __len__(self):
        r"""__len__(FloatStdVector self) -> std::vector< double >::size_type"""
        return _COPASI.FloatStdVector___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(FloatStdVector self, std::vector< double >::difference_type i, std::vector< double >::difference_type j) -> FloatStdVector"""
        return _COPASI.FloatStdVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(FloatStdVector self, std::vector< double >::difference_type i, std::vector< double >::difference_type j)
        __setslice__(FloatStdVector self, std::vector< double >::difference_type i, std::vector< double >::difference_type j, FloatStdVector v)
        """
        return _COPASI.FloatStdVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(FloatStdVector self, std::vector< double >::difference_type i, std::vector< double >::difference_type j)"""
        return _COPASI.FloatStdVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(FloatStdVector self, std::vector< double >::difference_type i)
        __delitem__(FloatStdVector self, SWIGPY_SLICEOBJECT * slice)
        """
        return _COPASI.FloatStdVector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(FloatStdVector self, SWIGPY_SLICEOBJECT * slice) -> FloatStdVector
        __getitem__(FloatStdVector self, std::vector< double >::difference_type i) -> std::vector< double >::value_type const &
        """
        return _COPASI.FloatStdVector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(FloatStdVector self, SWIGPY_SLICEOBJECT * slice, FloatStdVector v)
        __setitem__(FloatStdVector self, SWIGPY_SLICEOBJECT * slice)
        __setitem__(FloatStdVector self, std::vector< double >::difference_type i, std::vector< double >::value_type const & x)
        """
        return _COPASI.FloatStdVector___setitem__(self, *args)

    def pop(self):
        r"""pop(FloatStdVector self) -> std::vector< double >::value_type"""
        return _COPASI.FloatStdVector_pop(self)

    def append(self, x):
        r"""append(FloatStdVector self, std::vector< double >::value_type const & x)"""
        return _COPASI.FloatStdVector_append(self, x)

    def empty(self):
        r"""empty(FloatStdVector self) -> bool"""
        return _COPASI.FloatStdVector_empty(self)

    def size(self):
        r"""size(FloatStdVector self) -> std::vector< double >::size_type"""
        return _COPASI.FloatStdVector_size(self)

    def swap(self, v):
        r"""swap(FloatStdVector self, FloatStdVector v)"""
        return _COPASI.FloatStdVector_swap(self, v)

    def rbegin(self):
        r"""rbegin(FloatStdVector self) -> std::vector< double >::reverse_iterator"""
        return _COPASI.FloatStdVector_rbegin(self)

    def rend(self):
        r"""rend(FloatStdVector self) -> std::vector< double >::reverse_iterator"""
        return _COPASI.FloatStdVector_rend(self)

    def clear(self):
        r"""clear(FloatStdVector self)"""
        return _COPASI.FloatStdVector_clear(self)

    def get_allocator(self):
        r"""get_allocator(FloatStdVector self) -> std::vector< double >::allocator_type"""
        return _COPASI.FloatStdVector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(FloatStdVector self)"""
        return _COPASI.FloatStdVector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(FloatStdVector self, std::vector< double >::iterator pos) -> std::vector< double >::iterator
        erase(FloatStdVector self, std::vector< double >::iterator first, std::vector< double >::iterator last) -> std::vector< double >::iterator
        """
        return _COPASI.FloatStdVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(FloatStdVector self) -> FloatStdVector
        __init__(FloatStdVector self, FloatStdVector other) -> FloatStdVector
        __init__(FloatStdVector self, std::vector< double >::size_type size) -> FloatStdVector
        __init__(FloatStdVector self, std::vector< double >::size_type size, std::vector< double >::value_type const & value) -> FloatStdVector
        """
        _COPASI.FloatStdVector_swiginit(self, _COPASI.new_FloatStdVector(*args))

    def push_back(self, x):
        r"""push_back(FloatStdVector self, std::vector< double >::value_type const & x)"""
        return _COPASI.FloatStdVector_push_back(self, x)

    def front(self):
        r"""front(FloatStdVector self) -> std::vector< double >::value_type const &"""
        return _COPASI.FloatStdVector_front(self)

    def back(self):
        r"""back(FloatStdVector self) -> std::vector< double >::value_type const &"""
        return _COPASI.FloatStdVector_back(self)

    def assign(self, n, x):
        r"""assign(FloatStdVector self, std::vector< double >::size_type n, std::vector< double >::value_type const & x)"""
        return _COPASI.FloatStdVector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(FloatStdVector self, std::vector< double >::size_type new_size)
        resize(FloatStdVector self, std::vector< double >::size_type new_size, std::vector< double >::value_type const & x)
        """
        return _COPASI.FloatStdVector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(FloatStdVector self, std::vector< double >::iterator pos, std::vector< double >::value_type const & x) -> std::vector< double >::iterator
        insert(FloatStdVector self, std::vector< double >::iterator pos, std::vector< double >::size_type n, std::vector< double >::value_type const & x)
        """
        return _COPASI.FloatStdVector_insert(self, *args)

    def reserve(self, n):
        r"""reserve(FloatStdVector self, std::vector< double >::size_type n)"""
        return _COPASI.FloatStdVector_reserve(self, n)

    def capacity(self):
        r"""capacity(FloatStdVector self) -> std::vector< double >::size_type"""
        return _COPASI.FloatStdVector_capacity(self)
    __swig_destroy__ = _COPASI.delete_FloatStdVector

# Register FloatStdVector in _COPASI:
_COPASI.FloatStdVector_swigregister(FloatStdVector)
class OptItemStdVector(object):
    r"""Proxy of C++ std::vector< COptItem * > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(OptItemStdVector self) -> SwigPyIterator"""
        return _COPASI.OptItemStdVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(OptItemStdVector self) -> bool"""
        return _COPASI.OptItemStdVector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(OptItemStdVector self) -> bool"""
        return _COPASI.OptItemStdVector___bool__(self)

    def __len__(self):
        r"""__len__(OptItemStdVector self) -> std::vector< COptItem * >::size_type"""
        return _COPASI.OptItemStdVector___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(OptItemStdVector self, std::vector< COptItem * >::difference_type i, std::vector< COptItem * >::difference_type j) -> OptItemStdVector"""
        return _COPASI.OptItemStdVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(OptItemStdVector self, std::vector< COptItem * >::difference_type i, std::vector< COptItem * >::difference_type j)
        __setslice__(OptItemStdVector self, std::vector< COptItem * >::difference_type i, std::vector< COptItem * >::difference_type j, OptItemStdVector v)
        """
        return _COPASI.OptItemStdVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(OptItemStdVector self, std::vector< COptItem * >::difference_type i, std::vector< COptItem * >::difference_type j)"""
        return _COPASI.OptItemStdVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(OptItemStdVector self, std::vector< COptItem * >::difference_type i)
        __delitem__(OptItemStdVector self, SWIGPY_SLICEOBJECT * slice)
        """
        return _COPASI.OptItemStdVector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(OptItemStdVector self, SWIGPY_SLICEOBJECT * slice) -> OptItemStdVector
        __getitem__(OptItemStdVector self, std::vector< COptItem * >::difference_type i) -> COptItem
        """
        return _COPASI.OptItemStdVector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(OptItemStdVector self, SWIGPY_SLICEOBJECT * slice, OptItemStdVector v)
        __setitem__(OptItemStdVector self, SWIGPY_SLICEOBJECT * slice)
        __setitem__(OptItemStdVector self, std::vector< COptItem * >::difference_type i, COptItem x)
        """
        return _COPASI.OptItemStdVector___setitem__(self, *args)

    def pop(self):
        r"""pop(OptItemStdVector self) -> COptItem"""
        return _COPASI.OptItemStdVector_pop(self)

    def append(self, x):
        r"""append(OptItemStdVector self, COptItem x)"""
        return _COPASI.OptItemStdVector_append(self, x)

    def empty(self):
        r"""empty(OptItemStdVector self) -> bool"""
        return _COPASI.OptItemStdVector_empty(self)

    def size(self):
        r"""size(OptItemStdVector self) -> std::vector< COptItem * >::size_type"""
        return _COPASI.OptItemStdVector_size(self)

    def swap(self, v):
        r"""swap(OptItemStdVector self, OptItemStdVector v)"""
        return _COPASI.OptItemStdVector_swap(self, v)

    def rbegin(self):
        r"""rbegin(OptItemStdVector self) -> std::vector< COptItem * >::reverse_iterator"""
        return _COPASI.OptItemStdVector_rbegin(self)

    def rend(self):
        r"""rend(OptItemStdVector self) -> std::vector< COptItem * >::reverse_iterator"""
        return _COPASI.OptItemStdVector_rend(self)

    def clear(self):
        r"""clear(OptItemStdVector self)"""
        return _COPASI.OptItemStdVector_clear(self)

    def get_allocator(self):
        r"""get_allocator(OptItemStdVector self) -> std::vector< COptItem * >::allocator_type"""
        return _COPASI.OptItemStdVector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(OptItemStdVector self)"""
        return _COPASI.OptItemStdVector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(OptItemStdVector self, std::vector< COptItem * >::iterator pos) -> std::vector< COptItem * >::iterator
        erase(OptItemStdVector self, std::vector< COptItem * >::iterator first, std::vector< COptItem * >::iterator last) -> std::vector< COptItem * >::iterator
        """
        return _COPASI.OptItemStdVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(OptItemStdVector self) -> OptItemStdVector
        __init__(OptItemStdVector self, OptItemStdVector other) -> OptItemStdVector
        __init__(OptItemStdVector self, std::vector< COptItem * >::size_type size) -> OptItemStdVector
        __init__(OptItemStdVector self, std::vector< COptItem * >::size_type size, COptItem value) -> OptItemStdVector
        """
        _COPASI.OptItemStdVector_swiginit(self, _COPASI.new_OptItemStdVector(*args))

    def push_back(self, x):
        r"""push_back(OptItemStdVector self, COptItem x)"""
        return _COPASI.OptItemStdVector_push_back(self, x)

    def front(self):
        r"""front(OptItemStdVector self) -> COptItem"""
        return _COPASI.OptItemStdVector_front(self)

    def back(self):
        r"""back(OptItemStdVector self) -> COptItem"""
        return _COPASI.OptItemStdVector_back(self)

    def assign(self, n, x):
        r"""assign(OptItemStdVector self, std::vector< COptItem * >::size_type n, COptItem x)"""
        return _COPASI.OptItemStdVector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(OptItemStdVector self, std::vector< COptItem * >::size_type new_size)
        resize(OptItemStdVector self, std::vector< COptItem * >::size_type new_size, COptItem x)
        """
        return _COPASI.OptItemStdVector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(OptItemStdVector self, std::vector< COptItem * >::iterator pos, COptItem x) -> std::vector< COptItem * >::iterator
        insert(OptItemStdVector self, std::vector< COptItem * >::iterator pos, std::vector< COptItem * >::size_type n, COptItem x)
        """
        return _COPASI.OptItemStdVector_insert(self, *args)

    def reserve(self, n):
        r"""reserve(OptItemStdVector self, std::vector< COptItem * >::size_type n)"""
        return _COPASI.OptItemStdVector_reserve(self, n)

    def capacity(self):
        r"""capacity(OptItemStdVector self) -> std::vector< COptItem * >::size_type"""
        return _COPASI.OptItemStdVector_capacity(self)
    __swig_destroy__ = _COPASI.delete_OptItemStdVector

# Register OptItemStdVector in _COPASI:
_COPASI.OptItemStdVector_swigregister(OptItemStdVector)
class ContainerStdVector(object):
    r"""Proxy of C++ std::vector< CDataContainer * > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(ContainerStdVector self) -> SwigPyIterator"""
        return _COPASI.ContainerStdVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(ContainerStdVector self) -> bool"""
        return _COPASI.ContainerStdVector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(ContainerStdVector self) -> bool"""
        return _COPASI.ContainerStdVector___bool__(self)

    def __len__(self):
        r"""__len__(ContainerStdVector self) -> std::vector< CDataContainer * >::size_type"""
        return _COPASI.ContainerStdVector___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(ContainerStdVector self, std::vector< CDataContainer * >::difference_type i, std::vector< CDataContainer * >::difference_type j) -> ContainerStdVector"""
        return _COPASI.ContainerStdVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(ContainerStdVector self, std::vector< CDataContainer * >::difference_type i, std::vector< CDataContainer * >::difference_type j)
        __setslice__(ContainerStdVector self, std::vector< CDataContainer * >::difference_type i, std::vector< CDataContainer * >::difference_type j, ContainerStdVector v)
        """
        return _COPASI.ContainerStdVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(ContainerStdVector self, std::vector< CDataContainer * >::difference_type i, std::vector< CDataContainer * >::difference_type j)"""
        return _COPASI.ContainerStdVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(ContainerStdVector self, std::vector< CDataContainer * >::difference_type i)
        __delitem__(ContainerStdVector self, SWIGPY_SLICEOBJECT * slice)
        """
        return _COPASI.ContainerStdVector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(ContainerStdVector self, SWIGPY_SLICEOBJECT * slice) -> ContainerStdVector
        __getitem__(ContainerStdVector self, std::vector< CDataContainer * >::difference_type i) -> CDataContainer
        """
        return _COPASI.ContainerStdVector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(ContainerStdVector self, SWIGPY_SLICEOBJECT * slice, ContainerStdVector v)
        __setitem__(ContainerStdVector self, SWIGPY_SLICEOBJECT * slice)
        __setitem__(ContainerStdVector self, std::vector< CDataContainer * >::difference_type i, CDataContainer x)
        """
        return _COPASI.ContainerStdVector___setitem__(self, *args)

    def pop(self):
        r"""pop(ContainerStdVector self) -> CDataContainer"""
        return _COPASI.ContainerStdVector_pop(self)

    def append(self, x):
        r"""append(ContainerStdVector self, CDataContainer x)"""
        return _COPASI.ContainerStdVector_append(self, x)

    def empty(self):
        r"""empty(ContainerStdVector self) -> bool"""
        return _COPASI.ContainerStdVector_empty(self)

    def size(self):
        r"""size(ContainerStdVector self) -> std::vector< CDataContainer * >::size_type"""
        return _COPASI.ContainerStdVector_size(self)

    def swap(self, v):
        r"""swap(ContainerStdVector self, ContainerStdVector v)"""
        return _COPASI.ContainerStdVector_swap(self, v)

    def rbegin(self):
        r"""rbegin(ContainerStdVector self) -> std::vector< CDataContainer * >::reverse_iterator"""
        return _COPASI.ContainerStdVector_rbegin(self)

    def rend(self):
        r"""rend(ContainerStdVector self) -> std::vector< CDataContainer * >::reverse_iterator"""
        return _COPASI.ContainerStdVector_rend(self)

    def clear(self):
        r"""clear(ContainerStdVector self)"""
        return _COPASI.ContainerStdVector_clear(self)

    def get_allocator(self):
        r"""get_allocator(ContainerStdVector self) -> std::vector< CDataContainer * >::allocator_type"""
        return _COPASI.ContainerStdVector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(ContainerStdVector self)"""
        return _COPASI.ContainerStdVector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(ContainerStdVector self, std::vector< CDataContainer * >::iterator pos) -> std::vector< CDataContainer * >::iterator
        erase(ContainerStdVector self, std::vector< CDataContainer * >::iterator first, std::vector< CDataContainer * >::iterator last) -> std::vector< CDataContainer * >::iterator
        """
        return _COPASI.ContainerStdVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(ContainerStdVector self) -> ContainerStdVector
        __init__(ContainerStdVector self, ContainerStdVector other) -> ContainerStdVector
        __init__(ContainerStdVector self, std::vector< CDataContainer * >::size_type size) -> ContainerStdVector
        __init__(ContainerStdVector self, std::vector< CDataContainer * >::size_type size, CDataContainer value) -> ContainerStdVector
        """
        _COPASI.ContainerStdVector_swiginit(self, _COPASI.new_ContainerStdVector(*args))

    def push_back(self, x):
        r"""push_back(ContainerStdVector self, CDataContainer x)"""
        return _COPASI.ContainerStdVector_push_back(self, x)

    def front(self):
        r"""front(ContainerStdVector self) -> CDataContainer"""
        return _COPASI.ContainerStdVector_front(self)

    def back(self):
        r"""back(ContainerStdVector self) -> CDataContainer"""
        return _COPASI.ContainerStdVector_back(self)

    def assign(self, n, x):
        r"""assign(ContainerStdVector self, std::vector< CDataContainer * >::size_type n, CDataContainer x)"""
        return _COPASI.ContainerStdVector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(ContainerStdVector self, std::vector< CDataContainer * >::size_type new_size)
        resize(ContainerStdVector self, std::vector< CDataContainer * >::size_type new_size, CDataContainer x)
        """
        return _COPASI.ContainerStdVector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(ContainerStdVector self, std::vector< CDataContainer * >::iterator pos, CDataContainer x) -> std::vector< CDataContainer * >::iterator
        insert(ContainerStdVector self, std::vector< CDataContainer * >::iterator pos, std::vector< CDataContainer * >::size_type n, CDataContainer x)
        """
        return _COPASI.ContainerStdVector_insert(self, *args)

    def reserve(self, n):
        r"""reserve(ContainerStdVector self, std::vector< CDataContainer * >::size_type n)"""
        return _COPASI.ContainerStdVector_reserve(self, n)

    def capacity(self):
        r"""capacity(ContainerStdVector self) -> std::vector< CDataContainer * >::size_type"""
        return _COPASI.ContainerStdVector_capacity(self)
    __swig_destroy__ = _COPASI.delete_ContainerStdVector

# Register ContainerStdVector in _COPASI:
_COPASI.ContainerStdVector_swigregister(ContainerStdVector)
class PointStdVector(object):
    r"""Proxy of C++ std::vector< CLPoint > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(PointStdVector self) -> SwigPyIterator"""
        return _COPASI.PointStdVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(PointStdVector self) -> bool"""
        return _COPASI.PointStdVector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(PointStdVector self) -> bool"""
        return _COPASI.PointStdVector___bool__(self)

    def __len__(self):
        r"""__len__(PointStdVector self) -> std::vector< CLPoint >::size_type"""
        return _COPASI.PointStdVector___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(PointStdVector self, std::vector< CLPoint >::difference_type i, std::vector< CLPoint >::difference_type j) -> PointStdVector"""
        return _COPASI.PointStdVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(PointStdVector self, std::vector< CLPoint >::difference_type i, std::vector< CLPoint >::difference_type j)
        __setslice__(PointStdVector self, std::vector< CLPoint >::difference_type i, std::vector< CLPoint >::difference_type j, PointStdVector v)
        """
        return _COPASI.PointStdVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(PointStdVector self, std::vector< CLPoint >::difference_type i, std::vector< CLPoint >::difference_type j)"""
        return _COPASI.PointStdVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(PointStdVector self, std::vector< CLPoint >::difference_type i)
        __delitem__(PointStdVector self, SWIGPY_SLICEOBJECT * slice)
        """
        return _COPASI.PointStdVector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(PointStdVector self, SWIGPY_SLICEOBJECT * slice) -> PointStdVector
        __getitem__(PointStdVector self, std::vector< CLPoint >::difference_type i) -> CLPoint
        """
        return _COPASI.PointStdVector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(PointStdVector self, SWIGPY_SLICEOBJECT * slice, PointStdVector v)
        __setitem__(PointStdVector self, SWIGPY_SLICEOBJECT * slice)
        __setitem__(PointStdVector self, std::vector< CLPoint >::difference_type i, CLPoint x)
        """
        return _COPASI.PointStdVector___setitem__(self, *args)

    def pop(self):
        r"""pop(PointStdVector self) -> CLPoint"""
        return _COPASI.PointStdVector_pop(self)

    def append(self, x):
        r"""append(PointStdVector self, CLPoint x)"""
        return _COPASI.PointStdVector_append(self, x)

    def empty(self):
        r"""empty(PointStdVector self) -> bool"""
        return _COPASI.PointStdVector_empty(self)

    def size(self):
        r"""size(PointStdVector self) -> std::vector< CLPoint >::size_type"""
        return _COPASI.PointStdVector_size(self)

    def swap(self, v):
        r"""swap(PointStdVector self, PointStdVector v)"""
        return _COPASI.PointStdVector_swap(self, v)

    def rbegin(self):
        r"""rbegin(PointStdVector self) -> std::vector< CLPoint >::reverse_iterator"""
        return _COPASI.PointStdVector_rbegin(self)

    def rend(self):
        r"""rend(PointStdVector self) -> std::vector< CLPoint >::reverse_iterator"""
        return _COPASI.PointStdVector_rend(self)

    def clear(self):
        r"""clear(PointStdVector self)"""
        return _COPASI.PointStdVector_clear(self)

    def get_allocator(self):
        r"""get_allocator(PointStdVector self) -> std::vector< CLPoint >::allocator_type"""
        return _COPASI.PointStdVector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(PointStdVector self)"""
        return _COPASI.PointStdVector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(PointStdVector self, std::vector< CLPoint >::iterator pos) -> std::vector< CLPoint >::iterator
        erase(PointStdVector self, std::vector< CLPoint >::iterator first, std::vector< CLPoint >::iterator last) -> std::vector< CLPoint >::iterator
        """
        return _COPASI.PointStdVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(PointStdVector self) -> PointStdVector
        __init__(PointStdVector self, PointStdVector other) -> PointStdVector
        __init__(PointStdVector self, std::vector< CLPoint >::size_type size) -> PointStdVector
        __init__(PointStdVector self, std::vector< CLPoint >::size_type size, CLPoint value) -> PointStdVector
        """
        _COPASI.PointStdVector_swiginit(self, _COPASI.new_PointStdVector(*args))

    def push_back(self, x):
        r"""push_back(PointStdVector self, CLPoint x)"""
        return _COPASI.PointStdVector_push_back(self, x)

    def front(self):
        r"""front(PointStdVector self) -> CLPoint"""
        return _COPASI.PointStdVector_front(self)

    def back(self):
        r"""back(PointStdVector self) -> CLPoint"""
        return _COPASI.PointStdVector_back(self)

    def assign(self, n, x):
        r"""assign(PointStdVector self, std::vector< CLPoint >::size_type n, CLPoint x)"""
        return _COPASI.PointStdVector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(PointStdVector self, std::vector< CLPoint >::size_type new_size)
        resize(PointStdVector self, std::vector< CLPoint >::size_type new_size, CLPoint x)
        """
        return _COPASI.PointStdVector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(PointStdVector self, std::vector< CLPoint >::iterator pos, CLPoint x) -> std::vector< CLPoint >::iterator
        insert(PointStdVector self, std::vector< CLPoint >::iterator pos, std::vector< CLPoint >::size_type n, CLPoint x)
        """
        return _COPASI.PointStdVector_insert(self, *args)

    def reserve(self, n):
        r"""reserve(PointStdVector self, std::vector< CLPoint >::size_type n)"""
        return _COPASI.PointStdVector_reserve(self, n)

    def capacity(self):
        r"""capacity(PointStdVector self) -> std::vector< CLPoint >::size_type"""
        return _COPASI.PointStdVector_capacity(self)
    __swig_destroy__ = _COPASI.delete_PointStdVector

# Register PointStdVector in _COPASI:
_COPASI.PointStdVector_swigregister(PointStdVector)
class LineSegmentStdVector(object):
    r"""Proxy of C++ std::vector< CLLineSegment > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(LineSegmentStdVector self) -> SwigPyIterator"""
        return _COPASI.LineSegmentStdVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(LineSegmentStdVector self) -> bool"""
        return _COPASI.LineSegmentStdVector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(LineSegmentStdVector self) -> bool"""
        return _COPASI.LineSegmentStdVector___bool__(self)

    def __len__(self):
        r"""__len__(LineSegmentStdVector self) -> std::vector< CLLineSegment >::size_type"""
        return _COPASI.LineSegmentStdVector___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(LineSegmentStdVector self, std::vector< CLLineSegment >::difference_type i, std::vector< CLLineSegment >::difference_type j) -> LineSegmentStdVector"""
        return _COPASI.LineSegmentStdVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(LineSegmentStdVector self, std::vector< CLLineSegment >::difference_type i, std::vector< CLLineSegment >::difference_type j)
        __setslice__(LineSegmentStdVector self, std::vector< CLLineSegment >::difference_type i, std::vector< CLLineSegment >::difference_type j, LineSegmentStdVector v)
        """
        return _COPASI.LineSegmentStdVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(LineSegmentStdVector self, std::vector< CLLineSegment >::difference_type i, std::vector< CLLineSegment >::difference_type j)"""
        return _COPASI.LineSegmentStdVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(LineSegmentStdVector self, std::vector< CLLineSegment >::difference_type i)
        __delitem__(LineSegmentStdVector self, SWIGPY_SLICEOBJECT * slice)
        """
        return _COPASI.LineSegmentStdVector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(LineSegmentStdVector self, SWIGPY_SLICEOBJECT * slice) -> LineSegmentStdVector
        __getitem__(LineSegmentStdVector self, std::vector< CLLineSegment >::difference_type i) -> CLLineSegment
        """
        return _COPASI.LineSegmentStdVector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(LineSegmentStdVector self, SWIGPY_SLICEOBJECT * slice, LineSegmentStdVector v)
        __setitem__(LineSegmentStdVector self, SWIGPY_SLICEOBJECT * slice)
        __setitem__(LineSegmentStdVector self, std::vector< CLLineSegment >::difference_type i, CLLineSegment x)
        """
        return _COPASI.LineSegmentStdVector___setitem__(self, *args)

    def pop(self):
        r"""pop(LineSegmentStdVector self) -> CLLineSegment"""
        return _COPASI.LineSegmentStdVector_pop(self)

    def append(self, x):
        r"""append(LineSegmentStdVector self, CLLineSegment x)"""
        return _COPASI.LineSegmentStdVector_append(self, x)

    def empty(self):
        r"""empty(LineSegmentStdVector self) -> bool"""
        return _COPASI.LineSegmentStdVector_empty(self)

    def size(self):
        r"""size(LineSegmentStdVector self) -> std::vector< CLLineSegment >::size_type"""
        return _COPASI.LineSegmentStdVector_size(self)

    def swap(self, v):
        r"""swap(LineSegmentStdVector self, LineSegmentStdVector v)"""
        return _COPASI.LineSegmentStdVector_swap(self, v)

    def rbegin(self):
        r"""rbegin(LineSegmentStdVector self) -> std::vector< CLLineSegment >::reverse_iterator"""
        return _COPASI.LineSegmentStdVector_rbegin(self)

    def rend(self):
        r"""rend(LineSegmentStdVector self) -> std::vector< CLLineSegment >::reverse_iterator"""
        return _COPASI.LineSegmentStdVector_rend(self)

    def clear(self):
        r"""clear(LineSegmentStdVector self)"""
        return _COPASI.LineSegmentStdVector_clear(self)

    def get_allocator(self):
        r"""get_allocator(LineSegmentStdVector self) -> std::vector< CLLineSegment >::allocator_type"""
        return _COPASI.LineSegmentStdVector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(LineSegmentStdVector self)"""
        return _COPASI.LineSegmentStdVector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(LineSegmentStdVector self, std::vector< CLLineSegment >::iterator pos) -> std::vector< CLLineSegment >::iterator
        erase(LineSegmentStdVector self, std::vector< CLLineSegment >::iterator first, std::vector< CLLineSegment >::iterator last) -> std::vector< CLLineSegment >::iterator
        """
        return _COPASI.LineSegmentStdVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(LineSegmentStdVector self) -> LineSegmentStdVector
        __init__(LineSegmentStdVector self, LineSegmentStdVector other) -> LineSegmentStdVector
        __init__(LineSegmentStdVector self, std::vector< CLLineSegment >::size_type size) -> LineSegmentStdVector
        __init__(LineSegmentStdVector self, std::vector< CLLineSegment >::size_type size, CLLineSegment value) -> LineSegmentStdVector
        """
        _COPASI.LineSegmentStdVector_swiginit(self, _COPASI.new_LineSegmentStdVector(*args))

    def push_back(self, x):
        r"""push_back(LineSegmentStdVector self, CLLineSegment x)"""
        return _COPASI.LineSegmentStdVector_push_back(self, x)

    def front(self):
        r"""front(LineSegmentStdVector self) -> CLLineSegment"""
        return _COPASI.LineSegmentStdVector_front(self)

    def back(self):
        r"""back(LineSegmentStdVector self) -> CLLineSegment"""
        return _COPASI.LineSegmentStdVector_back(self)

    def assign(self, n, x):
        r"""assign(LineSegmentStdVector self, std::vector< CLLineSegment >::size_type n, CLLineSegment x)"""
        return _COPASI.LineSegmentStdVector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(LineSegmentStdVector self, std::vector< CLLineSegment >::size_type new_size)
        resize(LineSegmentStdVector self, std::vector< CLLineSegment >::size_type new_size, CLLineSegment x)
        """
        return _COPASI.LineSegmentStdVector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(LineSegmentStdVector self, std::vector< CLLineSegment >::iterator pos, CLLineSegment x) -> std::vector< CLLineSegment >::iterator
        insert(LineSegmentStdVector self, std::vector< CLLineSegment >::iterator pos, std::vector< CLLineSegment >::size_type n, CLLineSegment x)
        """
        return _COPASI.LineSegmentStdVector_insert(self, *args)

    def reserve(self, n):
        r"""reserve(LineSegmentStdVector self, std::vector< CLLineSegment >::size_type n)"""
        return _COPASI.LineSegmentStdVector_reserve(self, n)

    def capacity(self):
        r"""capacity(LineSegmentStdVector self) -> std::vector< CLLineSegment >::size_type"""
        return _COPASI.LineSegmentStdVector_capacity(self)
    __swig_destroy__ = _COPASI.delete_LineSegmentStdVector

# Register LineSegmentStdVector in _COPASI:
_COPASI.LineSegmentStdVector_swigregister(LineSegmentStdVector)
class FittingPointVector(CDataContainer):
    r"""Proxy of C++ CDataVector< CFittingPoint > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _COPASI.delete_FittingPointVector

    def cleanup(self):
        r"""cleanup(FittingPointVector self)"""
        return _COPASI.FittingPointVector_cleanup(self)

    def addCopy(self, src):
        r"""addCopy(FittingPointVector self, CFittingPoint src) -> bool"""
        return _COPASI.FittingPointVector_addCopy(self, src)

    def swap(self, indexFrom, indexTo):
        r"""swap(FittingPointVector self, size_t const & indexFrom, size_t const & indexTo)"""
        return _COPASI.FittingPointVector_swap(self, indexFrom, indexTo)

    def add(self, pObject, adopt=True):
        
        return _COPASI.FittingPointVector_add(self, pObject, adopt)

    def getObject(self, name):
        r"""getObject(FittingPointVector self, CCommonName name) -> CObjectInterface"""
        return _COPASI.FittingPointVector_getObject(self, name)

    def size(self):
        r"""size(FittingPointVector self) -> size_t"""
        return _COPASI.FittingPointVector_size(self)

    def empty(self):
        r"""empty(FittingPointVector self) -> bool"""
        return _COPASI.FittingPointVector_empty(self)

    def clear(self):
        r"""clear(FittingPointVector self)"""
        return _COPASI.FittingPointVector_clear(self)

    def getIndex(self, pObject):
        r"""getIndex(FittingPointVector self, CDataObject pObject) -> size_t"""
        return _COPASI.FittingPointVector_getIndex(self, pObject)

    def remove(self, index):
        r"""remove(FittingPointVector self, unsigned int index)"""
        return _COPASI.FittingPointVector_remove(self, index)

    def get(self, index):
        r"""get(FittingPointVector self, unsigned int index) -> CDataObject"""
        return _COPASI.FittingPointVector_get(self, index)

    def addAndOwn(self, DISOWN):
        r"""addAndOwn(FittingPointVector self, CFittingPoint DISOWN) -> bool"""
        return _COPASI.FittingPointVector_addAndOwn(self, DISOWN)

    def removeObject(self, pObject):
        r"""removeObject(FittingPointVector self, CDataObject pObject) -> bool"""
        return _COPASI.FittingPointVector_removeObject(self, pObject)

    def __len__(self):
        r"""__len__(FittingPointVector self) -> size_t"""
        return _COPASI.FittingPointVector___len__(self)

    def __getitem__(self, index):
        r"""__getitem__(FittingPointVector self, unsigned int index) -> CDataObject"""
        return _COPASI.FittingPointVector___getitem__(self, index)

# Register FittingPointVector in _COPASI:
_COPASI.FittingPointVector_swigregister(FittingPointVector)
class BiologicalDescriptionVector(CDataContainer):
    r"""Proxy of C++ CDataVector< CBiologicalDescription > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _COPASI.delete_BiologicalDescriptionVector

    def cleanup(self):
        r"""cleanup(BiologicalDescriptionVector self)"""
        return _COPASI.BiologicalDescriptionVector_cleanup(self)

    def addCopy(self, src):
        r"""addCopy(BiologicalDescriptionVector self, CBiologicalDescription src) -> bool"""
        return _COPASI.BiologicalDescriptionVector_addCopy(self, src)

    def swap(self, indexFrom, indexTo):
        r"""swap(BiologicalDescriptionVector self, size_t const & indexFrom, size_t const & indexTo)"""
        return _COPASI.BiologicalDescriptionVector_swap(self, indexFrom, indexTo)

    def add(self, pObject, adopt=True):
        
        return _COPASI.BiologicalDescriptionVector_add(self, pObject, adopt)

    def getObject(self, name):
        r"""getObject(BiologicalDescriptionVector self, CCommonName name) -> CObjectInterface"""
        return _COPASI.BiologicalDescriptionVector_getObject(self, name)

    def size(self):
        r"""size(BiologicalDescriptionVector self) -> size_t"""
        return _COPASI.BiologicalDescriptionVector_size(self)

    def empty(self):
        r"""empty(BiologicalDescriptionVector self) -> bool"""
        return _COPASI.BiologicalDescriptionVector_empty(self)

    def clear(self):
        r"""clear(BiologicalDescriptionVector self)"""
        return _COPASI.BiologicalDescriptionVector_clear(self)

    def getIndex(self, pObject):
        r"""getIndex(BiologicalDescriptionVector self, CDataObject pObject) -> size_t"""
        return _COPASI.BiologicalDescriptionVector_getIndex(self, pObject)

    def remove(self, index):
        r"""remove(BiologicalDescriptionVector self, unsigned int index)"""
        return _COPASI.BiologicalDescriptionVector_remove(self, index)

    def get(self, index):
        r"""get(BiologicalDescriptionVector self, unsigned int index) -> CDataObject"""
        return _COPASI.BiologicalDescriptionVector_get(self, index)

    def addAndOwn(self, DISOWN):
        r"""addAndOwn(BiologicalDescriptionVector self, CBiologicalDescription DISOWN) -> bool"""
        return _COPASI.BiologicalDescriptionVector_addAndOwn(self, DISOWN)

    def removeObject(self, pObject):
        r"""removeObject(BiologicalDescriptionVector self, CDataObject pObject) -> bool"""
        return _COPASI.BiologicalDescriptionVector_removeObject(self, pObject)

    def __len__(self):
        r"""__len__(BiologicalDescriptionVector self) -> size_t"""
        return _COPASI.BiologicalDescriptionVector___len__(self)

    def __getitem__(self, index):
        r"""__getitem__(BiologicalDescriptionVector self, unsigned int index) -> CDataObject"""
        return _COPASI.BiologicalDescriptionVector___getitem__(self, index)

# Register BiologicalDescriptionVector in _COPASI:
_COPASI.BiologicalDescriptionVector_swigregister(BiologicalDescriptionVector)
class CreatorVector(CDataContainer):
    r"""Proxy of C++ CDataVector< CCreator > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _COPASI.delete_CreatorVector

    def cleanup(self):
        r"""cleanup(CreatorVector self)"""
        return _COPASI.CreatorVector_cleanup(self)

    def addCopy(self, src):
        r"""addCopy(CreatorVector self, CCreator src) -> bool"""
        return _COPASI.CreatorVector_addCopy(self, src)

    def swap(self, indexFrom, indexTo):
        r"""swap(CreatorVector self, size_t const & indexFrom, size_t const & indexTo)"""
        return _COPASI.CreatorVector_swap(self, indexFrom, indexTo)

    def add(self, pObject, adopt=True):
        
        return _COPASI.CreatorVector_add(self, pObject, adopt)

    def getObject(self, name):
        r"""getObject(CreatorVector self, CCommonName name) -> CObjectInterface"""
        return _COPASI.CreatorVector_getObject(self, name)

    def size(self):
        r"""size(CreatorVector self) -> size_t"""
        return _COPASI.CreatorVector_size(self)

    def empty(self):
        r"""empty(CreatorVector self) -> bool"""
        return _COPASI.CreatorVector_empty(self)

    def clear(self):
        r"""clear(CreatorVector self)"""
        return _COPASI.CreatorVector_clear(self)

    def getIndex(self, pObject):
        r"""getIndex(CreatorVector self, CDataObject pObject) -> size_t"""
        return _COPASI.CreatorVector_getIndex(self, pObject)

    def remove(self, index):
        r"""remove(CreatorVector self, unsigned int index)"""
        return _COPASI.CreatorVector_remove(self, index)

    def get(self, index):
        r"""get(CreatorVector self, unsigned int index) -> CDataObject"""
        return _COPASI.CreatorVector_get(self, index)

    def addAndOwn(self, DISOWN):
        r"""addAndOwn(CreatorVector self, CCreator DISOWN) -> bool"""
        return _COPASI.CreatorVector_addAndOwn(self, DISOWN)

    def removeObject(self, pObject):
        r"""removeObject(CreatorVector self, CDataObject pObject) -> bool"""
        return _COPASI.CreatorVector_removeObject(self, pObject)

    def __len__(self):
        r"""__len__(CreatorVector self) -> size_t"""
        return _COPASI.CreatorVector___len__(self)

    def __getitem__(self, index):
        r"""__getitem__(CreatorVector self, unsigned int index) -> CDataObject"""
        return _COPASI.CreatorVector___getitem__(self, index)

# Register CreatorVector in _COPASI:
_COPASI.CreatorVector_swigregister(CreatorVector)
class ReferenceVector(CDataContainer):
    r"""Proxy of C++ CDataVector< CReference > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _COPASI.delete_ReferenceVector

    def cleanup(self):
        r"""cleanup(ReferenceVector self)"""
        return _COPASI.ReferenceVector_cleanup(self)

    def addCopy(self, src):
        r"""addCopy(ReferenceVector self, CReference src) -> bool"""
        return _COPASI.ReferenceVector_addCopy(self, src)

    def swap(self, indexFrom, indexTo):
        r"""swap(ReferenceVector self, size_t const & indexFrom, size_t const & indexTo)"""
        return _COPASI.ReferenceVector_swap(self, indexFrom, indexTo)

    def add(self, pObject, adopt=True):
        
        return _COPASI.ReferenceVector_add(self, pObject, adopt)

    def getObject(self, name):
        r"""getObject(ReferenceVector self, CCommonName name) -> CObjectInterface"""
        return _COPASI.ReferenceVector_getObject(self, name)

    def size(self):
        r"""size(ReferenceVector self) -> size_t"""
        return _COPASI.ReferenceVector_size(self)

    def empty(self):
        r"""empty(ReferenceVector self) -> bool"""
        return _COPASI.ReferenceVector_empty(self)

    def clear(self):
        r"""clear(ReferenceVector self)"""
        return _COPASI.ReferenceVector_clear(self)

    def getIndex(self, pObject):
        r"""getIndex(ReferenceVector self, CDataObject pObject) -> size_t"""
        return _COPASI.ReferenceVector_getIndex(self, pObject)

    def remove(self, index):
        r"""remove(ReferenceVector self, unsigned int index)"""
        return _COPASI.ReferenceVector_remove(self, index)

    def get(self, index):
        r"""get(ReferenceVector self, unsigned int index) -> CDataObject"""
        return _COPASI.ReferenceVector_get(self, index)

    def addAndOwn(self, DISOWN):
        r"""addAndOwn(ReferenceVector self, CReference DISOWN) -> bool"""
        return _COPASI.ReferenceVector_addAndOwn(self, DISOWN)

    def removeObject(self, pObject):
        r"""removeObject(ReferenceVector self, CDataObject pObject) -> bool"""
        return _COPASI.ReferenceVector_removeObject(self, pObject)

    def __len__(self):
        r"""__len__(ReferenceVector self) -> size_t"""
        return _COPASI.ReferenceVector___len__(self)

    def __getitem__(self, index):
        r"""__getitem__(ReferenceVector self, unsigned int index) -> CDataObject"""
        return _COPASI.ReferenceVector___getitem__(self, index)

# Register ReferenceVector in _COPASI:
_COPASI.ReferenceVector_swigregister(ReferenceVector)
class ModificationVector(CDataContainer):
    r"""Proxy of C++ CDataVector< CModification > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _COPASI.delete_ModificationVector

    def cleanup(self):
        r"""cleanup(ModificationVector self)"""
        return _COPASI.ModificationVector_cleanup(self)

    def addCopy(self, src):
        r"""addCopy(ModificationVector self, CModification src) -> bool"""
        return _COPASI.ModificationVector_addCopy(self, src)

    def swap(self, indexFrom, indexTo):
        r"""swap(ModificationVector self, size_t const & indexFrom, size_t const & indexTo)"""
        return _COPASI.ModificationVector_swap(self, indexFrom, indexTo)

    def add(self, pObject, adopt=True):
        
        return _COPASI.ModificationVector_add(self, pObject, adopt)

    def getObject(self, name):
        r"""getObject(ModificationVector self, CCommonName name) -> CObjectInterface"""
        return _COPASI.ModificationVector_getObject(self, name)

    def size(self):
        r"""size(ModificationVector self) -> size_t"""
        return _COPASI.ModificationVector_size(self)

    def empty(self):
        r"""empty(ModificationVector self) -> bool"""
        return _COPASI.ModificationVector_empty(self)

    def clear(self):
        r"""clear(ModificationVector self)"""
        return _COPASI.ModificationVector_clear(self)

    def getIndex(self, pObject):
        r"""getIndex(ModificationVector self, CDataObject pObject) -> size_t"""
        return _COPASI.ModificationVector_getIndex(self, pObject)

    def remove(self, index):
        r"""remove(ModificationVector self, unsigned int index)"""
        return _COPASI.ModificationVector_remove(self, index)

    def get(self, index):
        r"""get(ModificationVector self, unsigned int index) -> CDataObject"""
        return _COPASI.ModificationVector_get(self, index)

    def addAndOwn(self, DISOWN):
        r"""addAndOwn(ModificationVector self, CModification DISOWN) -> bool"""
        return _COPASI.ModificationVector_addAndOwn(self, DISOWN)

    def removeObject(self, pObject):
        r"""removeObject(ModificationVector self, CDataObject pObject) -> bool"""
        return _COPASI.ModificationVector_removeObject(self, pObject)

    def __len__(self):
        r"""__len__(ModificationVector self) -> size_t"""
        return _COPASI.ModificationVector___len__(self)

    def __getitem__(self, index):
        r"""__getitem__(ModificationVector self, unsigned int index) -> CDataObject"""
        return _COPASI.ModificationVector___getitem__(self, index)

# Register ModificationVector in _COPASI:
_COPASI.ModificationVector_swigregister(ModificationVector)
class ObjectListTypeStdVector(object):
    r"""Proxy of C++ std::vector< CObjectLists::ListType > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(ObjectListTypeStdVector self) -> SwigPyIterator"""
        return _COPASI.ObjectListTypeStdVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(ObjectListTypeStdVector self) -> bool"""
        return _COPASI.ObjectListTypeStdVector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(ObjectListTypeStdVector self) -> bool"""
        return _COPASI.ObjectListTypeStdVector___bool__(self)

    def __len__(self):
        r"""__len__(ObjectListTypeStdVector self) -> std::vector< enum CObjectLists::ListType >::size_type"""
        return _COPASI.ObjectListTypeStdVector___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(ObjectListTypeStdVector self, std::vector< enum CObjectLists::ListType >::difference_type i, std::vector< enum CObjectLists::ListType >::difference_type j) -> ObjectListTypeStdVector"""
        return _COPASI.ObjectListTypeStdVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(ObjectListTypeStdVector self, std::vector< enum CObjectLists::ListType >::difference_type i, std::vector< enum CObjectLists::ListType >::difference_type j)
        __setslice__(ObjectListTypeStdVector self, std::vector< enum CObjectLists::ListType >::difference_type i, std::vector< enum CObjectLists::ListType >::difference_type j, ObjectListTypeStdVector v)
        """
        return _COPASI.ObjectListTypeStdVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(ObjectListTypeStdVector self, std::vector< enum CObjectLists::ListType >::difference_type i, std::vector< enum CObjectLists::ListType >::difference_type j)"""
        return _COPASI.ObjectListTypeStdVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(ObjectListTypeStdVector self, std::vector< enum CObjectLists::ListType >::difference_type i)
        __delitem__(ObjectListTypeStdVector self, SWIGPY_SLICEOBJECT * slice)
        """
        return _COPASI.ObjectListTypeStdVector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(ObjectListTypeStdVector self, SWIGPY_SLICEOBJECT * slice) -> ObjectListTypeStdVector
        __getitem__(ObjectListTypeStdVector self, std::vector< enum CObjectLists::ListType >::difference_type i) -> std::vector< enum CObjectLists::ListType >::value_type const &
        """
        return _COPASI.ObjectListTypeStdVector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(ObjectListTypeStdVector self, SWIGPY_SLICEOBJECT * slice, ObjectListTypeStdVector v)
        __setitem__(ObjectListTypeStdVector self, SWIGPY_SLICEOBJECT * slice)
        __setitem__(ObjectListTypeStdVector self, std::vector< enum CObjectLists::ListType >::difference_type i, std::vector< enum CObjectLists::ListType >::value_type const & x)
        """
        return _COPASI.ObjectListTypeStdVector___setitem__(self, *args)

    def pop(self):
        r"""pop(ObjectListTypeStdVector self) -> std::vector< enum CObjectLists::ListType >::value_type"""
        return _COPASI.ObjectListTypeStdVector_pop(self)

    def append(self, x):
        r"""append(ObjectListTypeStdVector self, std::vector< enum CObjectLists::ListType >::value_type const & x)"""
        return _COPASI.ObjectListTypeStdVector_append(self, x)

    def empty(self):
        r"""empty(ObjectListTypeStdVector self) -> bool"""
        return _COPASI.ObjectListTypeStdVector_empty(self)

    def size(self):
        r"""size(ObjectListTypeStdVector self) -> std::vector< enum CObjectLists::ListType >::size_type"""
        return _COPASI.ObjectListTypeStdVector_size(self)

    def swap(self, v):
        r"""swap(ObjectListTypeStdVector self, ObjectListTypeStdVector v)"""
        return _COPASI.ObjectListTypeStdVector_swap(self, v)

    def rbegin(self):
        r"""rbegin(ObjectListTypeStdVector self) -> std::vector< enum CObjectLists::ListType >::reverse_iterator"""
        return _COPASI.ObjectListTypeStdVector_rbegin(self)

    def rend(self):
        r"""rend(ObjectListTypeStdVector self) -> std::vector< enum CObjectLists::ListType >::reverse_iterator"""
        return _COPASI.ObjectListTypeStdVector_rend(self)

    def clear(self):
        r"""clear(ObjectListTypeStdVector self)"""
        return _COPASI.ObjectListTypeStdVector_clear(self)

    def get_allocator(self):
        r"""get_allocator(ObjectListTypeStdVector self) -> std::vector< enum CObjectLists::ListType >::allocator_type"""
        return _COPASI.ObjectListTypeStdVector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(ObjectListTypeStdVector self)"""
        return _COPASI.ObjectListTypeStdVector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(ObjectListTypeStdVector self, std::vector< enum CObjectLists::ListType >::iterator pos) -> std::vector< enum CObjectLists::ListType >::iterator
        erase(ObjectListTypeStdVector self, std::vector< enum CObjectLists::ListType >::iterator first, std::vector< enum CObjectLists::ListType >::iterator last) -> std::vector< enum CObjectLists::ListType >::iterator
        """
        return _COPASI.ObjectListTypeStdVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(ObjectListTypeStdVector self) -> ObjectListTypeStdVector
        __init__(ObjectListTypeStdVector self, ObjectListTypeStdVector other) -> ObjectListTypeStdVector
        __init__(ObjectListTypeStdVector self, std::vector< enum CObjectLists::ListType >::size_type size) -> ObjectListTypeStdVector
        __init__(ObjectListTypeStdVector self, std::vector< enum CObjectLists::ListType >::size_type size, std::vector< enum CObjectLists::ListType >::value_type const & value) -> ObjectListTypeStdVector
        """
        _COPASI.ObjectListTypeStdVector_swiginit(self, _COPASI.new_ObjectListTypeStdVector(*args))

    def push_back(self, x):
        r"""push_back(ObjectListTypeStdVector self, std::vector< enum CObjectLists::ListType >::value_type const & x)"""
        return _COPASI.ObjectListTypeStdVector_push_back(self, x)

    def front(self):
        r"""front(ObjectListTypeStdVector self) -> std::vector< enum CObjectLists::ListType >::value_type const &"""
        return _COPASI.ObjectListTypeStdVector_front(self)

    def back(self):
        r"""back(ObjectListTypeStdVector self) -> std::vector< enum CObjectLists::ListType >::value_type const &"""
        return _COPASI.ObjectListTypeStdVector_back(self)

    def assign(self, n, x):
        r"""assign(ObjectListTypeStdVector self, std::vector< enum CObjectLists::ListType >::size_type n, std::vector< enum CObjectLists::ListType >::value_type const & x)"""
        return _COPASI.ObjectListTypeStdVector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(ObjectListTypeStdVector self, std::vector< enum CObjectLists::ListType >::size_type new_size)
        resize(ObjectListTypeStdVector self, std::vector< enum CObjectLists::ListType >::size_type new_size, std::vector< enum CObjectLists::ListType >::value_type const & x)
        """
        return _COPASI.ObjectListTypeStdVector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(ObjectListTypeStdVector self, std::vector< enum CObjectLists::ListType >::iterator pos, std::vector< enum CObjectLists::ListType >::value_type const & x) -> std::vector< enum CObjectLists::ListType >::iterator
        insert(ObjectListTypeStdVector self, std::vector< enum CObjectLists::ListType >::iterator pos, std::vector< enum CObjectLists::ListType >::size_type n, std::vector< enum CObjectLists::ListType >::value_type const & x)
        """
        return _COPASI.ObjectListTypeStdVector_insert(self, *args)

    def reserve(self, n):
        r"""reserve(ObjectListTypeStdVector self, std::vector< enum CObjectLists::ListType >::size_type n)"""
        return _COPASI.ObjectListTypeStdVector_reserve(self, n)

    def capacity(self):
        r"""capacity(ObjectListTypeStdVector self) -> std::vector< enum CObjectLists::ListType >::size_type"""
        return _COPASI.ObjectListTypeStdVector_capacity(self)
    __swig_destroy__ = _COPASI.delete_ObjectListTypeStdVector

# Register ObjectListTypeStdVector in _COPASI:
_COPASI.ObjectListTypeStdVector_swigregister(ObjectListTypeStdVector)
class CVersion(object):
    r"""Proxy of C++ CVersion class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(CVersion self) -> CVersion"""
        _COPASI.CVersion_swiginit(self, _COPASI.new_CVersion())
    __swig_destroy__ = _COPASI.delete_CVersion

    def getVersionMajor(self):
        r"""getVersionMajor(CVersion self) -> int"""
        return _COPASI.CVersion_getVersionMajor(self)

    def getVersionMinor(self):
        r"""getVersionMinor(CVersion self) -> int"""
        return _COPASI.CVersion_getVersionMinor(self)

    def getVersionDevel(self):
        r"""getVersionDevel(CVersion self) -> int"""
        return _COPASI.CVersion_getVersionDevel(self)

    def isSourceModified(self):
        r"""isSourceModified(CVersion self) -> bool const &"""
        return _COPASI.CVersion_isSourceModified(self)

    def getVersion(self):
        r"""getVersion(CVersion self) -> std::string const &"""
        return _COPASI.CVersion_getVersion(self)

    def setVersion(self, *args):
        r"""
        setVersion(CVersion self, int const & major, int const & minor, int const & devel, bool const & sourcesModified, std::string const & comment="", std::string const & creator="")
        setVersion(CVersion self, std::string const & version) -> CVersion
        """
        return _COPASI.CVersion_setVersion(self, *args)

    def isCompatible(self, version):
        r"""isCompatible(CVersion self, CVersion version) -> bool"""
        return _COPASI.CVersion_isCompatible(self, version)

    def __gt__(self, other):
        r"""__gt__(CVersion self, CVersion other) -> bool"""
        return _COPASI.CVersion___gt__(self, other)

    def __lt__(self, other):
        r"""__lt__(CVersion self, CVersion other) -> bool"""
        return _COPASI.CVersion___lt__(self, other)

    def __ge__(self, other):
        r"""__ge__(CVersion self, CVersion other) -> bool"""
        return _COPASI.CVersion___ge__(self, other)

    def __le__(self, other):
        r"""__le__(CVersion self, CVersion other) -> bool"""
        return _COPASI.CVersion___le__(self, other)

    def __eq__(self, other):
        r"""__eq__(CVersion self, CVersion other) -> bool"""
        return _COPASI.CVersion___eq__(self, other)

    def __ne__(self, other):
        r"""__ne__(CVersion self, CVersion other) -> bool"""
        return _COPASI.CVersion___ne__(self, other)

    def mayBeUpdated(self):
        r"""mayBeUpdated(CVersion self) -> bool"""
        return _COPASI.CVersion_mayBeUpdated(self)

    __metaclass__ = AutoProperty


# Register CVersion in _COPASI:
_COPASI.CVersion_swigregister(CVersion)
CVersion.VERSION = _COPASI.cvar.CVersion_VERSION

class CCopasiMethod(CCopasiParameterGroup):
    r"""Proxy of C++ CCopasiMethod class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, src, pParent):
        r"""__init__(CCopasiMethod self, CCopasiMethod src, CDataContainer pParent) -> CCopasiMethod"""
        _COPASI.CCopasiMethod_swiginit(self, _COPASI.new_CCopasiMethod(src, pParent))
    __swig_destroy__ = _COPASI.delete_CCopasiMethod

    def setMathContainer(self, pContainer):
        r"""setMathContainer(CCopasiMethod self, CMathContainer pContainer)"""
        return _COPASI.CCopasiMethod_setMathContainer(self, pContainer)

    def getMathContainer(self):
        r"""getMathContainer(CCopasiMethod self) -> CMathContainer"""
        return _COPASI.CCopasiMethod_getMathContainer(self)

    def getCallBack(self):
        r"""getCallBack(CCopasiMethod self) -> CProcessReportLevel"""
        return _COPASI.CCopasiMethod_getCallBack(self)

    def clearCallBack(self):
        r"""clearCallBack(CCopasiMethod self)"""
        return _COPASI.CCopasiMethod_clearCallBack(self)

    def getType(self):
        r"""getType(CCopasiMethod self) -> CTaskEnum::Task const &"""
        return _COPASI.CCopasiMethod_getType(self)

    def getSubType(self):
        r"""getSubType(CCopasiMethod self) -> CTaskEnum::Method const &"""
        return _COPASI.CCopasiMethod_getSubType(self)

    def isValidProblem(self, pProblem):
        r"""isValidProblem(CCopasiMethod self, CCopasiProblem pProblem) -> bool"""
        return _COPASI.CCopasiMethod_isValidProblem(self, pProblem)

    def setCallBack(self, *args):
        r"""
        setCallBack(CCopasiMethod self, CProcessReportLevel callBack) -> bool
        setCallBack(CCopasiMethod self, CProcessReport pHandler) -> bool
        """
        return _COPASI.CCopasiMethod_setCallBack(self, *args)

    @staticmethod
    def getSubTypeName(subType):
        r"""getSubTypeName(int const & subType) -> std::string"""
        return _COPASI.CCopasiMethod_getSubTypeName(subType)

    @staticmethod
    def TypeNameToEnum(typeName):
        r"""TypeNameToEnum(std::string const & typeName) -> int"""
        return _COPASI.CCopasiMethod_TypeNameToEnum(typeName)

# Register CCopasiMethod in _COPASI:
_COPASI.CCopasiMethod_swigregister(CCopasiMethod)
class CTaskEnum(object):
    r"""Proxy of C++ CTaskEnum class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Task_steadyState = _COPASI.CTaskEnum_Task_steadyState
    
    Task_timeCourse = _COPASI.CTaskEnum_Task_timeCourse
    
    Task_scan = _COPASI.CTaskEnum_Task_scan
    
    Task_fluxMode = _COPASI.CTaskEnum_Task_fluxMode
    
    Task_optimization = _COPASI.CTaskEnum_Task_optimization
    
    Task_parameterFitting = _COPASI.CTaskEnum_Task_parameterFitting
    
    Task_mca = _COPASI.CTaskEnum_Task_mca
    
    Task_lyap = _COPASI.CTaskEnum_Task_lyap
    
    Task_tssAnalysis = _COPASI.CTaskEnum_Task_tssAnalysis
    
    Task_sens = _COPASI.CTaskEnum_Task_sens
    
    Task_moieties = _COPASI.CTaskEnum_Task_moieties
    
    Task_crosssection = _COPASI.CTaskEnum_Task_crosssection
    
    Task_lna = _COPASI.CTaskEnum_Task_lna
    
    Task_analytics = _COPASI.CTaskEnum_Task_analytics
    
    Task_timeSens = _COPASI.CTaskEnum_Task_timeSens
    
    Task_UnsetTask = _COPASI.CTaskEnum_Task_UnsetTask
    
    Task___SIZE = _COPASI.CTaskEnum_Task___SIZE
    
    Method_UnsetMethod = _COPASI.CTaskEnum_Method_UnsetMethod
    
    Method_RandomSearch = _COPASI.CTaskEnum_Method_RandomSearch
    
    Method_RandomSearchMaster = _COPASI.CTaskEnum_Method_RandomSearchMaster
    
    Method_SimulatedAnnealing = _COPASI.CTaskEnum_Method_SimulatedAnnealing
    
    Method_CoranaWalk = _COPASI.CTaskEnum_Method_CoranaWalk
    
    Method_DifferentialEvolution = _COPASI.CTaskEnum_Method_DifferentialEvolution
    
    Method_ScatterSearch = _COPASI.CTaskEnum_Method_ScatterSearch
    
    Method_GeneticAlgorithm = _COPASI.CTaskEnum_Method_GeneticAlgorithm
    
    Method_EvolutionaryProgram = _COPASI.CTaskEnum_Method_EvolutionaryProgram
    
    Method_SteepestDescent = _COPASI.CTaskEnum_Method_SteepestDescent
    
    Method_HybridGASA = _COPASI.CTaskEnum_Method_HybridGASA
    
    Method_GeneticAlgorithmSR = _COPASI.CTaskEnum_Method_GeneticAlgorithmSR
    
    Method_HookeJeeves = _COPASI.CTaskEnum_Method_HookeJeeves
    
    Method_LevenbergMarquardt = _COPASI.CTaskEnum_Method_LevenbergMarquardt
    
    Method_NL2SOL = _COPASI.CTaskEnum_Method_NL2SOL
    
    Method_NelderMead = _COPASI.CTaskEnum_Method_NelderMead
    
    Method_SRES = _COPASI.CTaskEnum_Method_SRES
    
    Method_Statistics = _COPASI.CTaskEnum_Method_Statistics
    
    Method_ParticleSwarm = _COPASI.CTaskEnum_Method_ParticleSwarm
    
    Method_Praxis = _COPASI.CTaskEnum_Method_Praxis
    
    Method_TruncatedNewton = _COPASI.CTaskEnum_Method_TruncatedNewton
    
    Method_Newton = _COPASI.CTaskEnum_Method_Newton
    
    Method_deterministic = _COPASI.CTaskEnum_Method_deterministic
    
    Method_RADAU5 = _COPASI.CTaskEnum_Method_RADAU5
    
    Method_LSODA2 = _COPASI.CTaskEnum_Method_LSODA2
    
    Method_directMethod = _COPASI.CTaskEnum_Method_directMethod
    
    Method_stochastic = _COPASI.CTaskEnum_Method_stochastic
    
    Method_tauLeap = _COPASI.CTaskEnum_Method_tauLeap
    
    Method_adaptiveSA = _COPASI.CTaskEnum_Method_adaptiveSA
    
    Method_hybrid = _COPASI.CTaskEnum_Method_hybrid
    
    Method_hybridLSODA = _COPASI.CTaskEnum_Method_hybridLSODA
    
    Method_hybridODE45 = _COPASI.CTaskEnum_Method_hybridODE45
    
    Method_DsaLsodar = _COPASI.CTaskEnum_Method_DsaLsodar
    
    Method_stochasticRunkeKuttaRI5 = _COPASI.CTaskEnum_Method_stochasticRunkeKuttaRI5
    
    Method_tssILDM = _COPASI.CTaskEnum_Method_tssILDM
    
    Method_tssILDMModified = _COPASI.CTaskEnum_Method_tssILDMModified
    
    Method_tssCSP = _COPASI.CTaskEnum_Method_tssCSP
    
    Method_mcaMethodReder = _COPASI.CTaskEnum_Method_mcaMethodReder
    
    Method_scanMethod = _COPASI.CTaskEnum_Method_scanMethod
    
    Method_lyapWolf = _COPASI.CTaskEnum_Method_lyapWolf
    
    Method_sensMethod = _COPASI.CTaskEnum_Method_sensMethod
    
    Method_EFMAlgorithm = _COPASI.CTaskEnum_Method_EFMAlgorithm
    
    Method_EFMBitPatternTreeAlgorithm = _COPASI.CTaskEnum_Method_EFMBitPatternTreeAlgorithm
    
    Method_EFMBitPatternAlgorithm = _COPASI.CTaskEnum_Method_EFMBitPatternAlgorithm
    
    Method_Householder = _COPASI.CTaskEnum_Method_Householder
    
    Method_crossSectionMethod = _COPASI.CTaskEnum_Method_crossSectionMethod
    
    Method_linearNoiseApproximation = _COPASI.CTaskEnum_Method_linearNoiseApproximation
    
    Method_analyticsMethod = _COPASI.CTaskEnum_Method_analyticsMethod
    
    Method_timeSensLsoda = _COPASI.CTaskEnum_Method_timeSensLsoda
    
    Method___SIZE = _COPASI.CTaskEnum_Method___SIZE
    

    def __init__(self):
        r"""__init__(CTaskEnum self) -> CTaskEnum"""
        _COPASI.CTaskEnum_swiginit(self, _COPASI.new_CTaskEnum())
    __swig_destroy__ = _COPASI.delete_CTaskEnum

# Register CTaskEnum in _COPASI:
_COPASI.CTaskEnum_swigregister(CTaskEnum)
CTaskEnum.TaskName = _COPASI.cvar.CTaskEnum_TaskName

class CCopasiProblem(CCopasiParameterGroup):
    r"""Proxy of C++ CCopasiProblem class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, src, pParent):
        r"""__init__(CCopasiProblem self, CCopasiProblem src, CDataContainer pParent) -> CCopasiProblem"""
        _COPASI.CCopasiProblem_swiginit(self, _COPASI.new_CCopasiProblem(src, pParent))
    __swig_destroy__ = _COPASI.delete_CCopasiProblem

    def copy(self):
        r"""copy(CCopasiProblem self) -> CCopasiProblem"""
        return _COPASI.CCopasiProblem_copy(self)

    def getType(self):
        r"""getType(CCopasiProblem self) -> CTaskEnum::Task const &"""
        return _COPASI.CCopasiProblem_getType(self)

    def setMathContainer(self, pContainer):
        r"""setMathContainer(CCopasiProblem self, CMathContainer pContainer)"""
        return _COPASI.CCopasiProblem_setMathContainer(self, pContainer)

    def getMathContainer(self):
        r"""getMathContainer(CCopasiProblem self) -> CMathContainer"""
        return _COPASI.CCopasiProblem_getMathContainer(self)

    def getCallBack(self):
        r"""getCallBack(CCopasiProblem self) -> CProcessReportLevel"""
        return _COPASI.CCopasiProblem_getCallBack(self)

    def clearCallBack(self):
        r"""clearCallBack(CCopasiProblem self)"""
        return _COPASI.CCopasiProblem_clearCallBack(self)

    def setModel(self, model):
        r"""setModel(CCopasiProblem self, CModel model) -> bool"""
        return _COPASI.CCopasiProblem_setModel(self, model)

    def getSubTask(self):
        r"""getSubTask(CCopasiProblem self) -> CCopasiTask"""
        return _COPASI.CCopasiProblem_getSubTask(self)

    def setCallBack(self, *args):
        r"""
        setCallBack(CCopasiProblem self, CProcessReportLevel callBack) -> bool
        setCallBack(CCopasiProblem self, CProcessReport pHandler) -> bool
        """
        return _COPASI.CCopasiProblem_setCallBack(self, *args)

# Register CCopasiProblem in _COPASI:
_COPASI.CCopasiProblem_swigregister(CCopasiProblem)
class COutputInterface(object, metaclass=AutoProperty):
    r"""Proxy of C++ COutputInterface class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    BEFORE = _COPASI.COutputInterface_BEFORE
    
    DURING = _COPASI.COutputInterface_DURING
    
    AFTER = _COPASI.COutputInterface_AFTER
    
    MONITORING = _COPASI.COutputInterface_MONITORING
    
    __swig_destroy__ = _COPASI.delete_COutputInterface

    def compile(self, arg2):
        r"""compile(COutputInterface self, ContainerList arg2) -> bool"""
        return _COPASI.COutputInterface_compile(self, arg2)

    def output(self, arg2):
        r"""output(COutputInterface self, COutputInterface::Activity const & arg2)"""
        return _COPASI.COutputInterface_output(self, arg2)

    def separate(self, arg2):
        r"""separate(COutputInterface self, COutputInterface::Activity const & arg2)"""
        return _COPASI.COutputInterface_separate(self, arg2)

    def finish(self):
        r"""finish(COutputInterface self)"""
        return _COPASI.COutputInterface_finish(self)

    def close(self):
        r"""close(COutputInterface self)"""
        return _COPASI.COutputInterface_close(self)

    __metaclass__ = AutoProperty


# Register COutputInterface in _COPASI:
_COPASI.COutputInterface_swigregister(COutputInterface)
class COutputHandler(COutputInterface):
    r"""Proxy of C++ COutputHandler class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(COutputHandler self) -> COutputHandler
        __init__(COutputHandler self, COutputHandler src) -> COutputHandler
        """
        _COPASI.COutputHandler_swiginit(self, _COPASI.new_COutputHandler(*args))
    __swig_destroy__ = _COPASI.delete_COutputHandler

    def compile(self, listOfContainer):
        r"""compile(COutputHandler self, ContainerList listOfContainer) -> bool"""
        return _COPASI.COutputHandler_compile(self, listOfContainer)

    def output(self, activity):
        r"""output(COutputHandler self, COutputInterface::Activity const & activity)"""
        return _COPASI.COutputHandler_output(self, activity)

    def separate(self, activity):
        r"""separate(COutputHandler self, COutputInterface::Activity const & activity)"""
        return _COPASI.COutputHandler_separate(self, activity)

    def finish(self):
        r"""finish(COutputHandler self)"""
        return _COPASI.COutputHandler_finish(self)

    def addInterface(self, pInterface):
        r"""addInterface(COutputHandler self, COutputInterface pInterface)"""
        return _COPASI.COutputHandler_addInterface(self, pInterface)

    def removeInterface(self, pInterface):
        r"""removeInterface(COutputHandler self, COutputInterface pInterface)"""
        return _COPASI.COutputHandler_removeInterface(self, pInterface)

    def setMaster(self, pMaster):
        r"""setMaster(COutputHandler self, COutputHandler pMaster)"""
        return _COPASI.COutputHandler_setMaster(self, pMaster)

    def isMaster(self):
        r"""isMaster(COutputHandler self) -> bool"""
        return _COPASI.COutputHandler_isMaster(self)

# Register COutputHandler in _COPASI:
_COPASI.COutputHandler_swigregister(COutputHandler)
class CReport(COutputInterface):
    r"""Proxy of C++ CReport class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CReport self) -> CReport
        __init__(CReport self, CReport src) -> CReport
        """
        _COPASI.CReport_swiginit(self, _COPASI.new_CReport(*args))

    def cleanup(self):
        r"""cleanup(CReport self)"""
        return _COPASI.CReport_cleanup(self)
    __swig_destroy__ = _COPASI.delete_CReport

    def compile(self, listOfContainer):
        r"""compile(CReport self, ContainerList listOfContainer) -> bool"""
        return _COPASI.CReport_compile(self, listOfContainer)

    def output(self, activity):
        r"""output(CReport self, COutputInterface::Activity const & activity)"""
        return _COPASI.CReport_output(self, activity)

    def separate(self, arg2):
        r"""separate(CReport self, COutputInterface::Activity const & arg2)"""
        return _COPASI.CReport_separate(self, arg2)

    def finish(self):
        r"""finish(CReport self)"""
        return _COPASI.CReport_finish(self)

    def close(self):
        r"""close(CReport self)"""
        return _COPASI.CReport_close(self)

    def getReportDefinition(self):
        r"""getReportDefinition(CReport self) -> CReportDefinition"""
        return _COPASI.CReport_getReportDefinition(self)

    def setReportDefinition(self, reportDef):
        r"""setReportDefinition(CReport self, CReportDefinition reportDef)"""
        return _COPASI.CReport_setReportDefinition(self, reportDef)

    def getTarget(self):
        r"""getTarget(CReport self) -> std::string const &"""
        return _COPASI.CReport_getTarget(self)

    def setTarget(self, target):
        r"""setTarget(CReport self, std::string const & target)"""
        return _COPASI.CReport_setTarget(self, target)

    def getAppend(self):
        r"""getAppend(CReport self) -> bool const &"""
        return _COPASI.CReport_getAppend(self)

    def setAppend(self, append):
        r"""setAppend(CReport self, bool const & append)"""
        return _COPASI.CReport_setAppend(self, append)

    def confirmOverwrite(self):
        r"""confirmOverwrite(CReport self) -> bool const &"""
        return _COPASI.CReport_confirmOverwrite(self)

    def setConfirmOverwrite(self, confirmOverwrite):
        r"""setConfirmOverwrite(CReport self, bool const & confirmOverwrite)"""
        return _COPASI.CReport_setConfirmOverwrite(self, confirmOverwrite)

# Register CReport in _COPASI:
_COPASI.CReport_swigregister(CReport)
class TaskSubTypeVector(object):
    r"""Proxy of C++ std::vector< CTaskEnum::Task > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(TaskSubTypeVector self) -> SwigPyIterator"""
        return _COPASI.TaskSubTypeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(TaskSubTypeVector self) -> bool"""
        return _COPASI.TaskSubTypeVector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(TaskSubTypeVector self) -> bool"""
        return _COPASI.TaskSubTypeVector___bool__(self)

    def __len__(self):
        r"""__len__(TaskSubTypeVector self) -> std::vector< enum CTaskEnum::Task >::size_type"""
        return _COPASI.TaskSubTypeVector___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(TaskSubTypeVector self, std::vector< enum CTaskEnum::Task >::difference_type i, std::vector< enum CTaskEnum::Task >::difference_type j) -> TaskSubTypeVector"""
        return _COPASI.TaskSubTypeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(TaskSubTypeVector self, std::vector< enum CTaskEnum::Task >::difference_type i, std::vector< enum CTaskEnum::Task >::difference_type j)
        __setslice__(TaskSubTypeVector self, std::vector< enum CTaskEnum::Task >::difference_type i, std::vector< enum CTaskEnum::Task >::difference_type j, TaskSubTypeVector v)
        """
        return _COPASI.TaskSubTypeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(TaskSubTypeVector self, std::vector< enum CTaskEnum::Task >::difference_type i, std::vector< enum CTaskEnum::Task >::difference_type j)"""
        return _COPASI.TaskSubTypeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(TaskSubTypeVector self, std::vector< enum CTaskEnum::Task >::difference_type i)
        __delitem__(TaskSubTypeVector self, SWIGPY_SLICEOBJECT * slice)
        """
        return _COPASI.TaskSubTypeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(TaskSubTypeVector self, SWIGPY_SLICEOBJECT * slice) -> TaskSubTypeVector
        __getitem__(TaskSubTypeVector self, std::vector< enum CTaskEnum::Task >::difference_type i) -> std::vector< enum CTaskEnum::Task >::value_type const &
        """
        return _COPASI.TaskSubTypeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(TaskSubTypeVector self, SWIGPY_SLICEOBJECT * slice, TaskSubTypeVector v)
        __setitem__(TaskSubTypeVector self, SWIGPY_SLICEOBJECT * slice)
        __setitem__(TaskSubTypeVector self, std::vector< enum CTaskEnum::Task >::difference_type i, std::vector< enum CTaskEnum::Task >::value_type const & x)
        """
        return _COPASI.TaskSubTypeVector___setitem__(self, *args)

    def pop(self):
        r"""pop(TaskSubTypeVector self) -> std::vector< enum CTaskEnum::Task >::value_type"""
        return _COPASI.TaskSubTypeVector_pop(self)

    def append(self, x):
        r"""append(TaskSubTypeVector self, std::vector< enum CTaskEnum::Task >::value_type const & x)"""
        return _COPASI.TaskSubTypeVector_append(self, x)

    def empty(self):
        r"""empty(TaskSubTypeVector self) -> bool"""
        return _COPASI.TaskSubTypeVector_empty(self)

    def size(self):
        r"""size(TaskSubTypeVector self) -> std::vector< enum CTaskEnum::Task >::size_type"""
        return _COPASI.TaskSubTypeVector_size(self)

    def swap(self, v):
        r"""swap(TaskSubTypeVector self, TaskSubTypeVector v)"""
        return _COPASI.TaskSubTypeVector_swap(self, v)

    def rbegin(self):
        r"""rbegin(TaskSubTypeVector self) -> std::vector< enum CTaskEnum::Task >::reverse_iterator"""
        return _COPASI.TaskSubTypeVector_rbegin(self)

    def rend(self):
        r"""rend(TaskSubTypeVector self) -> std::vector< enum CTaskEnum::Task >::reverse_iterator"""
        return _COPASI.TaskSubTypeVector_rend(self)

    def clear(self):
        r"""clear(TaskSubTypeVector self)"""
        return _COPASI.TaskSubTypeVector_clear(self)

    def get_allocator(self):
        r"""get_allocator(TaskSubTypeVector self) -> std::vector< enum CTaskEnum::Task >::allocator_type"""
        return _COPASI.TaskSubTypeVector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(TaskSubTypeVector self)"""
        return _COPASI.TaskSubTypeVector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(TaskSubTypeVector self, std::vector< enum CTaskEnum::Task >::iterator pos) -> std::vector< enum CTaskEnum::Task >::iterator
        erase(TaskSubTypeVector self, std::vector< enum CTaskEnum::Task >::iterator first, std::vector< enum CTaskEnum::Task >::iterator last) -> std::vector< enum CTaskEnum::Task >::iterator
        """
        return _COPASI.TaskSubTypeVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(TaskSubTypeVector self) -> TaskSubTypeVector
        __init__(TaskSubTypeVector self, TaskSubTypeVector other) -> TaskSubTypeVector
        __init__(TaskSubTypeVector self, std::vector< enum CTaskEnum::Task >::size_type size) -> TaskSubTypeVector
        __init__(TaskSubTypeVector self, std::vector< enum CTaskEnum::Task >::size_type size, std::vector< enum CTaskEnum::Task >::value_type const & value) -> TaskSubTypeVector
        """
        _COPASI.TaskSubTypeVector_swiginit(self, _COPASI.new_TaskSubTypeVector(*args))

    def push_back(self, x):
        r"""push_back(TaskSubTypeVector self, std::vector< enum CTaskEnum::Task >::value_type const & x)"""
        return _COPASI.TaskSubTypeVector_push_back(self, x)

    def front(self):
        r"""front(TaskSubTypeVector self) -> std::vector< enum CTaskEnum::Task >::value_type const &"""
        return _COPASI.TaskSubTypeVector_front(self)

    def back(self):
        r"""back(TaskSubTypeVector self) -> std::vector< enum CTaskEnum::Task >::value_type const &"""
        return _COPASI.TaskSubTypeVector_back(self)

    def assign(self, n, x):
        r"""assign(TaskSubTypeVector self, std::vector< enum CTaskEnum::Task >::size_type n, std::vector< enum CTaskEnum::Task >::value_type const & x)"""
        return _COPASI.TaskSubTypeVector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(TaskSubTypeVector self, std::vector< enum CTaskEnum::Task >::size_type new_size)
        resize(TaskSubTypeVector self, std::vector< enum CTaskEnum::Task >::size_type new_size, std::vector< enum CTaskEnum::Task >::value_type const & x)
        """
        return _COPASI.TaskSubTypeVector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(TaskSubTypeVector self, std::vector< enum CTaskEnum::Task >::iterator pos, std::vector< enum CTaskEnum::Task >::value_type const & x) -> std::vector< enum CTaskEnum::Task >::iterator
        insert(TaskSubTypeVector self, std::vector< enum CTaskEnum::Task >::iterator pos, std::vector< enum CTaskEnum::Task >::size_type n, std::vector< enum CTaskEnum::Task >::value_type const & x)
        """
        return _COPASI.TaskSubTypeVector_insert(self, *args)

    def reserve(self, n):
        r"""reserve(TaskSubTypeVector self, std::vector< enum CTaskEnum::Task >::size_type n)"""
        return _COPASI.TaskSubTypeVector_reserve(self, n)

    def capacity(self):
        r"""capacity(TaskSubTypeVector self) -> std::vector< enum CTaskEnum::Task >::size_type"""
        return _COPASI.TaskSubTypeVector_capacity(self)
    __swig_destroy__ = _COPASI.delete_TaskSubTypeVector

# Register TaskSubTypeVector in _COPASI:
_COPASI.TaskSubTypeVector_swigregister(TaskSubTypeVector)
class MethodSubTypeVector(object):
    r"""Proxy of C++ std::vector< CTaskEnum::Method > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(MethodSubTypeVector self) -> SwigPyIterator"""
        return _COPASI.MethodSubTypeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(MethodSubTypeVector self) -> bool"""
        return _COPASI.MethodSubTypeVector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(MethodSubTypeVector self) -> bool"""
        return _COPASI.MethodSubTypeVector___bool__(self)

    def __len__(self):
        r"""__len__(MethodSubTypeVector self) -> std::vector< enum CTaskEnum::Method >::size_type"""
        return _COPASI.MethodSubTypeVector___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(MethodSubTypeVector self, std::vector< enum CTaskEnum::Method >::difference_type i, std::vector< enum CTaskEnum::Method >::difference_type j) -> MethodSubTypeVector"""
        return _COPASI.MethodSubTypeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(MethodSubTypeVector self, std::vector< enum CTaskEnum::Method >::difference_type i, std::vector< enum CTaskEnum::Method >::difference_type j)
        __setslice__(MethodSubTypeVector self, std::vector< enum CTaskEnum::Method >::difference_type i, std::vector< enum CTaskEnum::Method >::difference_type j, MethodSubTypeVector v)
        """
        return _COPASI.MethodSubTypeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(MethodSubTypeVector self, std::vector< enum CTaskEnum::Method >::difference_type i, std::vector< enum CTaskEnum::Method >::difference_type j)"""
        return _COPASI.MethodSubTypeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(MethodSubTypeVector self, std::vector< enum CTaskEnum::Method >::difference_type i)
        __delitem__(MethodSubTypeVector self, SWIGPY_SLICEOBJECT * slice)
        """
        return _COPASI.MethodSubTypeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(MethodSubTypeVector self, SWIGPY_SLICEOBJECT * slice) -> MethodSubTypeVector
        __getitem__(MethodSubTypeVector self, std::vector< enum CTaskEnum::Method >::difference_type i) -> std::vector< enum CTaskEnum::Method >::value_type const &
        """
        return _COPASI.MethodSubTypeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(MethodSubTypeVector self, SWIGPY_SLICEOBJECT * slice, MethodSubTypeVector v)
        __setitem__(MethodSubTypeVector self, SWIGPY_SLICEOBJECT * slice)
        __setitem__(MethodSubTypeVector self, std::vector< enum CTaskEnum::Method >::difference_type i, std::vector< enum CTaskEnum::Method >::value_type const & x)
        """
        return _COPASI.MethodSubTypeVector___setitem__(self, *args)

    def pop(self):
        r"""pop(MethodSubTypeVector self) -> std::vector< enum CTaskEnum::Method >::value_type"""
        return _COPASI.MethodSubTypeVector_pop(self)

    def append(self, x):
        r"""append(MethodSubTypeVector self, std::vector< enum CTaskEnum::Method >::value_type const & x)"""
        return _COPASI.MethodSubTypeVector_append(self, x)

    def empty(self):
        r"""empty(MethodSubTypeVector self) -> bool"""
        return _COPASI.MethodSubTypeVector_empty(self)

    def size(self):
        r"""size(MethodSubTypeVector self) -> std::vector< enum CTaskEnum::Method >::size_type"""
        return _COPASI.MethodSubTypeVector_size(self)

    def swap(self, v):
        r"""swap(MethodSubTypeVector self, MethodSubTypeVector v)"""
        return _COPASI.MethodSubTypeVector_swap(self, v)

    def rbegin(self):
        r"""rbegin(MethodSubTypeVector self) -> std::vector< enum CTaskEnum::Method >::reverse_iterator"""
        return _COPASI.MethodSubTypeVector_rbegin(self)

    def rend(self):
        r"""rend(MethodSubTypeVector self) -> std::vector< enum CTaskEnum::Method >::reverse_iterator"""
        return _COPASI.MethodSubTypeVector_rend(self)

    def clear(self):
        r"""clear(MethodSubTypeVector self)"""
        return _COPASI.MethodSubTypeVector_clear(self)

    def get_allocator(self):
        r"""get_allocator(MethodSubTypeVector self) -> std::vector< enum CTaskEnum::Method >::allocator_type"""
        return _COPASI.MethodSubTypeVector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(MethodSubTypeVector self)"""
        return _COPASI.MethodSubTypeVector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(MethodSubTypeVector self, std::vector< enum CTaskEnum::Method >::iterator pos) -> std::vector< enum CTaskEnum::Method >::iterator
        erase(MethodSubTypeVector self, std::vector< enum CTaskEnum::Method >::iterator first, std::vector< enum CTaskEnum::Method >::iterator last) -> std::vector< enum CTaskEnum::Method >::iterator
        """
        return _COPASI.MethodSubTypeVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(MethodSubTypeVector self) -> MethodSubTypeVector
        __init__(MethodSubTypeVector self, MethodSubTypeVector other) -> MethodSubTypeVector
        __init__(MethodSubTypeVector self, std::vector< enum CTaskEnum::Method >::size_type size) -> MethodSubTypeVector
        __init__(MethodSubTypeVector self, std::vector< enum CTaskEnum::Method >::size_type size, std::vector< enum CTaskEnum::Method >::value_type const & value) -> MethodSubTypeVector
        """
        _COPASI.MethodSubTypeVector_swiginit(self, _COPASI.new_MethodSubTypeVector(*args))

    def push_back(self, x):
        r"""push_back(MethodSubTypeVector self, std::vector< enum CTaskEnum::Method >::value_type const & x)"""
        return _COPASI.MethodSubTypeVector_push_back(self, x)

    def front(self):
        r"""front(MethodSubTypeVector self) -> std::vector< enum CTaskEnum::Method >::value_type const &"""
        return _COPASI.MethodSubTypeVector_front(self)

    def back(self):
        r"""back(MethodSubTypeVector self) -> std::vector< enum CTaskEnum::Method >::value_type const &"""
        return _COPASI.MethodSubTypeVector_back(self)

    def assign(self, n, x):
        r"""assign(MethodSubTypeVector self, std::vector< enum CTaskEnum::Method >::size_type n, std::vector< enum CTaskEnum::Method >::value_type const & x)"""
        return _COPASI.MethodSubTypeVector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(MethodSubTypeVector self, std::vector< enum CTaskEnum::Method >::size_type new_size)
        resize(MethodSubTypeVector self, std::vector< enum CTaskEnum::Method >::size_type new_size, std::vector< enum CTaskEnum::Method >::value_type const & x)
        """
        return _COPASI.MethodSubTypeVector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(MethodSubTypeVector self, std::vector< enum CTaskEnum::Method >::iterator pos, std::vector< enum CTaskEnum::Method >::value_type const & x) -> std::vector< enum CTaskEnum::Method >::iterator
        insert(MethodSubTypeVector self, std::vector< enum CTaskEnum::Method >::iterator pos, std::vector< enum CTaskEnum::Method >::size_type n, std::vector< enum CTaskEnum::Method >::value_type const & x)
        """
        return _COPASI.MethodSubTypeVector_insert(self, *args)

    def reserve(self, n):
        r"""reserve(MethodSubTypeVector self, std::vector< enum CTaskEnum::Method >::size_type n)"""
        return _COPASI.MethodSubTypeVector_reserve(self, n)

    def capacity(self):
        r"""capacity(MethodSubTypeVector self) -> std::vector< enum CTaskEnum::Method >::size_type"""
        return _COPASI.MethodSubTypeVector_capacity(self)
    __swig_destroy__ = _COPASI.delete_MethodSubTypeVector

# Register MethodSubTypeVector in _COPASI:
_COPASI.MethodSubTypeVector_swigregister(MethodSubTypeVector)
class CCopasiTask(CDataContainer):
    r"""Proxy of C++ CCopasiTask class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    INITIALIZE = _COPASI.CCopasiTask_INITIALIZE
    
    STREAM = _COPASI.CCopasiTask_STREAM
    
    FINISH = _COPASI.CCopasiTask_FINISH
    
    REPORT = _COPASI.CCopasiTask_REPORT
    
    PLOT = _COPASI.CCopasiTask_PLOT
    
    TIME_SERIES = _COPASI.CCopasiTask_TIME_SERIES
    
    NO_OUTPUT = _COPASI.CCopasiTask_NO_OUTPUT
    
    OUTPUT_BEFORE = _COPASI.CCopasiTask_OUTPUT_BEFORE
    
    OUTPUT_DURING = _COPASI.CCopasiTask_OUTPUT_DURING
    
    OUTPUT_AFTER = _COPASI.CCopasiTask_OUTPUT_AFTER
    
    OUTPUT = _COPASI.CCopasiTask_OUTPUT
    
    OUTPUT_SE = _COPASI.CCopasiTask_OUTPUT_SE
    
    OUTPUT_UI = _COPASI.CCopasiTask_OUTPUT_UI
    
    ONLY_TIME_SERIES = _COPASI.CCopasiTask_ONLY_TIME_SERIES
    

    @staticmethod
    def fromData(data, pParent):
        r"""fromData(CData data, CUndoObjectInterface pParent) -> CCopasiTask"""
        return _COPASI.CCopasiTask_fromData(data, pParent)

    def __init__(self, *args):
        r"""
        __init__(CCopasiTask self, CDataContainer pParent, CTaskEnum::Task const & taskType, std::string const & type="Task") -> CCopasiTask
        __init__(CCopasiTask self, CCopasiTask src, CDataContainer pParent) -> CCopasiTask
        """
        _COPASI.CCopasiTask_swiginit(self, _COPASI.new_CCopasiTask(*args))
    __swig_destroy__ = _COPASI.delete_CCopasiTask

    def getType(self):
        r"""getType(CCopasiTask self) -> CTaskEnum::Task"""
        return _COPASI.CCopasiTask_getType(self)

    def setType(self, type):
        r"""setType(CCopasiTask self, CTaskEnum::Task const & type)"""
        return _COPASI.CCopasiTask_setType(self, type)

    def getKey(self):
        r"""getKey(CCopasiTask self) -> std::string const &"""
        return _COPASI.CCopasiTask_getKey(self)

    def setScheduled(self, scheduled):
        r"""setScheduled(CCopasiTask self, bool const & scheduled)"""
        return _COPASI.CCopasiTask_setScheduled(self, scheduled)

    def isScheduled(self):
        r"""isScheduled(CCopasiTask self) -> bool const &"""
        return _COPASI.CCopasiTask_isScheduled(self)

    def setUpdateModel(self, updateModel):
        r"""setUpdateModel(CCopasiTask self, bool const & updateModel)"""
        return _COPASI.CCopasiTask_setUpdateModel(self, updateModel)

    def isUpdateModel(self):
        r"""isUpdateModel(CCopasiTask self) -> bool const &"""
        return _COPASI.CCopasiTask_isUpdateModel(self)

    def setIgnoreProblemData(self, ignoreProblemData):
        r"""setIgnoreProblemData(CCopasiTask self, bool const & ignoreProblemData)"""
        return _COPASI.CCopasiTask_setIgnoreProblemData(self, ignoreProblemData)

    def setMathContainer(self, pContainer):
        r"""setMathContainer(CCopasiTask self, CMathContainer pContainer)"""
        return _COPASI.CCopasiTask_setMathContainer(self, pContainer)

    def getMathContainer(self):
        r"""getMathContainer(CCopasiTask self) -> CMathContainer"""
        return _COPASI.CCopasiTask_getMathContainer(self)

    def getCallBack(self):
        r"""getCallBack(CCopasiTask self) -> CProcessReportLevel"""
        return _COPASI.CCopasiTask_getCallBack(self)

    def clearCallBack(self):
        r"""clearCallBack(CCopasiTask self)"""
        return _COPASI.CCopasiTask_clearCallBack(self)

    def updateMatrices(self):
        r"""updateMatrices(CCopasiTask self) -> bool"""
        return _COPASI.CCopasiTask_updateMatrices(self)

    def restore(self, updateModel=True):
        r"""restore(CCopasiTask self, bool const & updateModel=True) -> bool"""
        return _COPASI.CCopasiTask_restore(self, updateModel)

    def getProblem(self, *args):
        r"""
        getProblem(CCopasiTask self) -> CCopasiProblem
        getProblem(CCopasiTask self) -> CCopasiProblem
        """
        return _COPASI.CCopasiTask_getProblem(self, *args)

    def setMethodType(self, type):
        r"""setMethodType(CCopasiTask self, CTaskEnum::Method const & type) -> bool"""
        return _COPASI.CCopasiTask_setMethodType(self, type)

    def getMethod(self, *args):
        r"""
        getMethod(CCopasiTask self) -> CCopasiMethod
        getMethod(CCopasiTask self) -> CCopasiMethod
        """
        return _COPASI.CCopasiTask_getMethod(self, *args)

    def getReport(self):
        r"""getReport(CCopasiTask self) -> CReport"""
        return _COPASI.CCopasiTask_getReport(self)

    def cleanup(self):
        r"""cleanup(CCopasiTask self)"""
        return _COPASI.CCopasiTask_cleanup(self)

    def getSliders(self):
        r"""getSliders(CCopasiTask self) -> CCopasiParameterGroup"""
        return _COPASI.CCopasiTask_getSliders(self)

    def output(self, activity):
        r"""output(CCopasiTask self, COutputInterface::Activity const & activity)"""
        return _COPASI.CCopasiTask_output(self, activity)

    def separate(self, activity):
        r"""separate(CCopasiTask self, COutputInterface::Activity const & activity)"""
        return _COPASI.CCopasiTask_separate(self, activity)

    def getOutputMode(self):
        r"""getOutputMode(CCopasiTask self) -> CCopasiTask::OutputFlag const &"""
        return _COPASI.CCopasiTask_getOutputMode(self)

    def getOutputHandler(self):
        r"""getOutputHandler(CCopasiTask self) -> COutputHandler"""
        return _COPASI.CCopasiTask_getOutputHandler(self)

    def setCallBack(self, *args):
        r"""
        setCallBack(CCopasiTask self, CProcessReportLevel callBack) -> bool
        setCallBack(CCopasiTask self, CProcessReport pHandler) -> bool
        """
        return _COPASI.CCopasiTask_setCallBack(self, *args)

    def getValidMethods(self):
        r"""getValidMethods(CCopasiTask self) -> IntStdVector"""
        return _COPASI.CCopasiTask_getValidMethods(self)

    def getProcessError(self):
        r"""getProcessError(CCopasiTask self) -> std::string"""
        return _COPASI.CCopasiTask_getProcessError(self)

    def getProcessWarning(self):
        r"""getProcessWarning(CCopasiTask self) -> std::string"""
        return _COPASI.CCopasiTask_getProcessWarning(self)

    def initializeRaw(self, outputFlags):
        r"""initializeRaw(CCopasiTask self, int outputFlags) -> bool"""
        return _COPASI.CCopasiTask_initializeRaw(self, outputFlags)

    def initializeRawWithOutputHandler(self, outputFlags, pHandler):
        r"""initializeRawWithOutputHandler(CCopasiTask self, int outputFlags, COutputHandler pHandler) -> bool"""
        return _COPASI.CCopasiTask_initializeRawWithOutputHandler(self, outputFlags, pHandler)

    def initialize(self, outputFlags):
        r"""initialize(CCopasiTask self, int outputFlags) -> bool"""
        return _COPASI.CCopasiTask_initialize(self, outputFlags)

    def processRaw(self, useInitialValues):
        r"""processRaw(CCopasiTask self, bool useInitialValues) -> bool"""
        return _COPASI.CCopasiTask_processRaw(self, useInitialValues)

    def processWithOutputFlags(self, useInitialValues, outputFlags):
        r"""processWithOutputFlags(CCopasiTask self, bool useInitialValues, int outputFlags) -> bool"""
        return _COPASI.CCopasiTask_processWithOutputFlags(self, useInitialValues, outputFlags)

    def process(self, useInitialValues):
        r"""process(CCopasiTask self, bool useInitialValues) -> bool"""
        return _COPASI.CCopasiTask_process(self, useInitialValues)

# Register CCopasiTask in _COPASI:
_COPASI.CCopasiTask_swigregister(CCopasiTask)
class CDataHandler(COutputHandler):
    r"""Proxy of C++ CDataHandler class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CDataHandler self, bool separate=False) -> CDataHandler
        __init__(CDataHandler self, CDataHandler src) -> CDataHandler
        """
        _COPASI.CDataHandler_swiginit(self, _COPASI.new_CDataHandler(*args))

    def cleanup(self):
        r"""cleanup(CDataHandler self)"""
        return _COPASI.CDataHandler_cleanup(self)
    __swig_destroy__ = _COPASI.delete_CDataHandler

    def addBeforeName(self, name):
        r"""addBeforeName(CDataHandler self, CRegisteredCommonName name)"""
        return _COPASI.CDataHandler_addBeforeName(self, name)

    def addDuringName(self, name):
        r"""addDuringName(CDataHandler self, CRegisteredCommonName name)"""
        return _COPASI.CDataHandler_addDuringName(self, name)

    def addAfterName(self, name):
        r"""addAfterName(CDataHandler self, CRegisteredCommonName name)"""
        return _COPASI.CDataHandler_addAfterName(self, name)

    def addName(self, name, activity):
        r"""addName(CDataHandler self, CRegisteredCommonName name, COutputInterface::Activity const & activity) -> bool"""
        return _COPASI.CDataHandler_addName(self, name, activity)

    def getNames(self, activity):
        r"""getNames(CDataHandler self, COutputInterface::Activity const & activity) -> ReportItemVector"""
        return _COPASI.CDataHandler_getNames(self, activity)

    def clearNames(self, activity):
        r"""clearNames(CDataHandler self, COutputInterface::Activity const & activity)"""
        return _COPASI.CDataHandler_clearNames(self, activity)

    def getBeforeData(self):
        r"""getBeforeData(CDataHandler self) -> FloatStdVector"""
        return _COPASI.CDataHandler_getBeforeData(self)

    def getDuringData(self):
        r"""getDuringData(CDataHandler self) -> std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > const &"""
        return _COPASI.CDataHandler_getDuringData(self)

    def getAfterData(self):
        r"""getAfterData(CDataHandler self) -> FloatStdVector"""
        return _COPASI.CDataHandler_getAfterData(self)

    def getSeparate(self):
        r"""getSeparate(CDataHandler self) -> bool"""
        return _COPASI.CDataHandler_getSeparate(self)

    def setSeparate(self, separate):
        r"""setSeparate(CDataHandler self, bool separate)"""
        return _COPASI.CDataHandler_setSeparate(self, separate)

    def compile(self, listOfContainer):
        r"""compile(CDataHandler self, ContainerList listOfContainer) -> bool"""
        return _COPASI.CDataHandler_compile(self, listOfContainer)

    def output(self, activity):
        r"""output(CDataHandler self, COutputInterface::Activity const & activity)"""
        return _COPASI.CDataHandler_output(self, activity)

    def separate(self, arg2):
        r"""separate(CDataHandler self, COutputInterface::Activity const & arg2)"""
        return _COPASI.CDataHandler_separate(self, arg2)

    def finish(self):
        r"""finish(CDataHandler self)"""
        return _COPASI.CDataHandler_finish(self)

    def getNumRowsDuring(self):
        r"""getNumRowsDuring(CDataHandler self) -> int"""
        return _COPASI.CDataHandler_getNumRowsDuring(self)

    def getNthRow(self, index):
        r"""getNthRow(CDataHandler self, int index) -> FloatStdVector"""
        return _COPASI.CDataHandler_getNthRow(self, index)

# Register CDataHandler in _COPASI:
_COPASI.CDataHandler_swigregister(CDataHandler)
class CPlotDataChannelSpec(CRegisteredCommonName):
    r"""Proxy of C++ CPlotDataChannelSpec class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    min = property(_COPASI.CPlotDataChannelSpec_min_get, _COPASI.CPlotDataChannelSpec_min_set, doc=r"""min : double""")
    max = property(_COPASI.CPlotDataChannelSpec_max_get, _COPASI.CPlotDataChannelSpec_max_set, doc=r"""max : double""")
    minAutoscale = property(_COPASI.CPlotDataChannelSpec_minAutoscale_get, _COPASI.CPlotDataChannelSpec_minAutoscale_set, doc=r"""minAutoscale : bool""")
    maxAutoscale = property(_COPASI.CPlotDataChannelSpec_maxAutoscale_get, _COPASI.CPlotDataChannelSpec_maxAutoscale_set, doc=r"""maxAutoscale : bool""")

    def __init__(self, *args):
        r"""
        __init__(CPlotDataChannelSpec self) -> CPlotDataChannelSpec
        __init__(CPlotDataChannelSpec self, CCommonName obj) -> CPlotDataChannelSpec
        __init__(CPlotDataChannelSpec self, CCommonName obj, double minimum, double maximum) -> CPlotDataChannelSpec
        """
        _COPASI.CPlotDataChannelSpec_swiginit(self, _COPASI.new_CPlotDataChannelSpec(*args))
    __swig_destroy__ = _COPASI.delete_CPlotDataChannelSpec

# Register CPlotDataChannelSpec in _COPASI:
_COPASI.CPlotDataChannelSpec_swigregister(CPlotDataChannelSpec)
class CPlotItem(CCopasiParameterGroup):
    r"""Proxy of C++ CPlotItem class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    unset = _COPASI.CPlotItem_unset
    
    curve2d = _COPASI.CPlotItem_curve2d
    
    histoItem1d = _COPASI.CPlotItem_histoItem1d
    
    bandedGraph = _COPASI.CPlotItem_bandedGraph
    
    surface = _COPASI.CPlotItem_surface
    
    plot2d = _COPASI.CPlotItem_plot2d
    
    simWiz = _COPASI.CPlotItem_simWiz
    
    spectogram = _COPASI.CPlotItem_spectogram
    
    LineType_Lines = _COPASI.CPlotItem_LineType_Lines
    
    LineType_Points = _COPASI.CPlotItem_LineType_Points
    
    LineType_Symbols = _COPASI.CPlotItem_LineType_Symbols
    
    LineType_LinesAndSymbols = _COPASI.CPlotItem_LineType_LinesAndSymbols
    
    LineType___SIZE = _COPASI.CPlotItem_LineType___SIZE
    
    LineStyle_Solid = _COPASI.CPlotItem_LineStyle_Solid
    
    LineStyle_Dotted = _COPASI.CPlotItem_LineStyle_Dotted
    
    LineStyle_Dashed = _COPASI.CPlotItem_LineStyle_Dashed
    
    LineStyle_DotDash = _COPASI.CPlotItem_LineStyle_DotDash
    
    LineStyle_DotDotDash = _COPASI.CPlotItem_LineStyle_DotDotDash
    
    LineStyle__None = _COPASI.CPlotItem_LineStyle__None
    
    LineStyle___SIZE = _COPASI.CPlotItem_LineStyle___SIZE
    
    SymbolType_SmallCross = _COPASI.CPlotItem_SymbolType_SmallCross
    
    SymbolType_LargeCross = _COPASI.CPlotItem_SymbolType_LargeCross
    
    SymbolType_Circle = _COPASI.CPlotItem_SymbolType_Circle
    
    SymbolType_Square = _COPASI.CPlotItem_SymbolType_Square
    
    SymbolType_Diamond = _COPASI.CPlotItem_SymbolType_Diamond
    
    SymbolType_xCross = _COPASI.CPlotItem_SymbolType_xCross
    
    SymbolType_Plus = _COPASI.CPlotItem_SymbolType_Plus
    
    SymbolType_Star = _COPASI.CPlotItem_SymbolType_Star
    
    SymbolType_TriangleUp = _COPASI.CPlotItem_SymbolType_TriangleUp
    
    SymbolType_TriangleDown = _COPASI.CPlotItem_SymbolType_TriangleDown
    
    SymbolType_TriangleLeft = _COPASI.CPlotItem_SymbolType_TriangleLeft
    
    SymbolType_TriangleRight = _COPASI.CPlotItem_SymbolType_TriangleRight
    
    SymbolType_hDash = _COPASI.CPlotItem_SymbolType_hDash
    
    SymbolType_vDash = _COPASI.CPlotItem_SymbolType_vDash
    
    SymbolType__None = _COPASI.CPlotItem_SymbolType__None
    
    SymbolType___SIZE = _COPASI.CPlotItem_SymbolType___SIZE
    

    @staticmethod
    def fromData(data, pParent):
        r"""fromData(CData data, CUndoObjectInterface pParent) -> CPlotItem"""
        return _COPASI.CPlotItem_fromData(data, pParent)

    def __init__(self, *args):
        r"""
        __init__(CPlotItem self, std::string const & name="NoName", CDataContainer pParent=static_cast< CDataContainer * >((void *) 0), CPlotItem::Type const & type=curve2d) -> CPlotItem
        __init__(CPlotItem self, CPlotItem src, CDataContainer pParent) -> CPlotItem
        """
        _COPASI.CPlotItem_swiginit(self, _COPASI.new_CPlotItem(*args))
    __swig_destroy__ = _COPASI.delete_CPlotItem

    def cleanup(self):
        r"""cleanup(CPlotItem self)"""
        return _COPASI.CPlotItem_cleanup(self)

    def getType(self):
        r"""getType(CPlotItem self) -> CPlotItem::Type const &"""
        return _COPASI.CPlotItem_getType(self)

    def setType(self, type):
        r"""setType(CPlotItem self, CPlotItem::Type type)"""
        return _COPASI.CPlotItem_setType(self, type)

    def setActivity(self, activity):
        r"""setActivity(CPlotItem self, COutputInterface::Activity const & activity)"""
        return _COPASI.CPlotItem_setActivity(self, activity)

    def getActivity(self):
        r"""getActivity(CPlotItem self) -> COutputInterface::Activity const &"""
        return _COPASI.CPlotItem_getActivity(self)

    def getTitle(self):
        r"""getTitle(CPlotItem self) -> std::string const &"""
        return _COPASI.CPlotItem_getTitle(self)

    def setTitle(self, title):
        r"""setTitle(CPlotItem self, std::string const & title)"""
        return _COPASI.CPlotItem_setTitle(self, title)

    def getChannels(self):
        r"""getChannels(CPlotItem self) -> PlotDataChannelSpecStdVector"""
        return _COPASI.CPlotItem_getChannels(self)

    def getNumChannels(self):
        r"""getNumChannels(CPlotItem self) -> size_t"""
        return _COPASI.CPlotItem_getNumChannels(self)

    def addChannel(self, channel):
        r"""addChannel(CPlotItem self, CPlotDataChannelSpec channel)"""
        return _COPASI.CPlotItem_addChannel(self, channel)

# Register CPlotItem in _COPASI:
_COPASI.CPlotItem_swigregister(CPlotItem)
CPlotItem.LineTypeNames = _COPASI.cvar.CPlotItem_LineTypeNames
CPlotItem.LineStyleNames = _COPASI.cvar.CPlotItem_LineStyleNames
CPlotItem.SymbolNames = _COPASI.cvar.CPlotItem_SymbolNames
CPlotItem.RecordingActivityName = _COPASI.cvar.CPlotItem_RecordingActivityName

class CPlotColors(object):
    r"""Proxy of C++ CPlotColors class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getCopasiColorStr(index):
        r"""getCopasiColorStr(size_t index) -> std::string"""
        return _COPASI.CPlotColors_getCopasiColorStr(index)

    @staticmethod
    def getNumCopasiColors():
        r"""getNumCopasiColors() -> size_t"""
        return _COPASI.CPlotColors_getNumCopasiColors()

    def __init__(self):
        r"""__init__(CPlotColors self) -> CPlotColors"""
        _COPASI.CPlotColors_swiginit(self, _COPASI.new_CPlotColors())
    __swig_destroy__ = _COPASI.delete_CPlotColors

# Register CPlotColors in _COPASI:
_COPASI.CPlotColors_swigregister(CPlotColors)
class CPlotSpecification(CPlotItem):
    r"""Proxy of C++ CPlotSpecification class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def fromData(data, pParent):
        r"""fromData(CData data, CUndoObjectInterface pParent) -> CPlotSpecification"""
        return _COPASI.CPlotSpecification_fromData(data, pParent)

    def __init__(self, *args):
        r"""
        __init__(CPlotSpecification self, std::string const & name="NoName", CDataContainer pParent=static_cast< CDataContainer * >((void *) 0), CPlotItem::Type const & type=plot2d) -> CPlotSpecification
        __init__(CPlotSpecification self, CPlotSpecification src, CDataContainer pParent) -> CPlotSpecification
        """
        _COPASI.CPlotSpecification_swiginit(self, _COPASI.new_CPlotSpecification(*args))
    __swig_destroy__ = _COPASI.delete_CPlotSpecification

    def cleanup(self):
        r"""cleanup(CPlotSpecification self)"""
        return _COPASI.CPlotSpecification_cleanup(self)

    def getItems(self):
        r"""getItems(CPlotSpecification self) -> PlotItemVector"""
        return _COPASI.CPlotSpecification_getItems(self)

    def createItem(self, name, type):
        r"""createItem(CPlotSpecification self, std::string const & name, CPlotItem::Type type) -> CPlotItem"""
        return _COPASI.CPlotSpecification_createItem(self, name, type)

    def hasItem(self, name):
        r"""hasItem(CPlotSpecification self, std::string const & name) -> bool"""
        return _COPASI.CPlotSpecification_hasItem(self, name)

    def createDefaultPlot(self, model):
        r"""createDefaultPlot(CPlotSpecification self, CModel model) -> bool"""
        return _COPASI.CPlotSpecification_createDefaultPlot(self, model)

    def setActive(self, active):
        r"""setActive(CPlotSpecification self, bool const & active)"""
        return _COPASI.CPlotSpecification_setActive(self, active)

    def isActive(self):
        r"""isActive(CPlotSpecification self) -> bool const &"""
        return _COPASI.CPlotSpecification_isActive(self)

    def appliesTo(self, *args):
        r"""
        appliesTo(CPlotSpecification self, ContainerList list) -> bool
        appliesTo(CPlotSpecification self, CCopasiTask pTask) -> bool
        """
        return _COPASI.CPlotSpecification_appliesTo(self, *args)

    def getTaskTypes(self):
        r"""getTaskTypes(CPlotSpecification self) -> std::string"""
        return _COPASI.CPlotSpecification_getTaskTypes(self)

    def setTaskTypes(self, *args):
        r"""
        setTaskTypes(CPlotSpecification self, std::string const & taskTypes)
        setTaskTypes(CPlotSpecification self, std::set< CTaskEnum::Task,std::less< CTaskEnum::Task >,std::allocator< CTaskEnum::Task > > const & taskTypes)
        """
        return _COPASI.CPlotSpecification_setTaskTypes(self, *args)

    def addTaskType(self, type):
        r"""addTaskType(CPlotSpecification self, CTaskEnum::Task const & type)"""
        return _COPASI.CPlotSpecification_addTaskType(self, type)

    def isLogX(self):
        r"""isLogX(CPlotSpecification self) -> bool"""
        return _COPASI.CPlotSpecification_isLogX(self)

    def isLogY(self):
        r"""isLogY(CPlotSpecification self) -> bool"""
        return _COPASI.CPlotSpecification_isLogY(self)

    def setLogX(self, l):
        r"""setLogX(CPlotSpecification self, bool l)"""
        return _COPASI.CPlotSpecification_setLogX(self, l)

    def setLogY(self, l):
        r"""setLogY(CPlotSpecification self, bool l)"""
        return _COPASI.CPlotSpecification_setLogY(self, l)

    def has3D(self):
        r"""has3D(CPlotSpecification self) -> bool"""
        return _COPASI.CPlotSpecification_has3D(self)

    def getChannel(self, index):
        r"""getChannel(CPlotSpecification self, int index) -> CPlotDataChannelSpec"""
        return _COPASI.CPlotSpecification_getChannel(self, index)

    def getNumPlotItems(self):
        r"""getNumPlotItems(CPlotSpecification self) -> size_t"""
        return _COPASI.CPlotSpecification_getNumPlotItems(self)

    def getItem(self, index):
        r"""getItem(CPlotSpecification self, int index) -> CPlotItem"""
        return _COPASI.CPlotSpecification_getItem(self, index)

# Register CPlotSpecification in _COPASI:
_COPASI.CPlotSpecification_swigregister(CPlotSpecification)
class COutputDefinitionVector(OutputDefinitionVectorN):
    r"""Proxy of C++ COutputDefinitionVector class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(COutputDefinitionVector self, std::string const & name="OutputDefinitions", CDataContainer pParent=None) -> COutputDefinitionVector"""
        _COPASI.COutputDefinitionVector_swiginit(self, _COPASI.new_COutputDefinitionVector(*args))
    __swig_destroy__ = _COPASI.delete_COutputDefinitionVector

    def createPlotSpec(self, *args):
        r"""createPlotSpec(COutputDefinitionVector self, std::string const & name, CPlotItem::Type type=plot2d) -> CPlotSpecification"""
        return _COPASI.COutputDefinitionVector_createPlotSpec(self, *args)

    def removePlotSpec(self, key):
        r"""removePlotSpec(COutputDefinitionVector self, std::string const & key) -> bool"""
        return _COPASI.COutputDefinitionVector_removePlotSpec(self, key)

    def cleanup(self):
        r"""cleanup(COutputDefinitionVector self)"""
        return _COPASI.COutputDefinitionVector_cleanup(self)

    def getKey(self):
        r"""getKey(COutputDefinitionVector self) -> std::string const &"""
        return _COPASI.COutputDefinitionVector_getKey(self)

# Register COutputDefinitionVector in _COPASI:
_COPASI.COutputDefinitionVector_swigregister(COutputDefinitionVector)
class CReportDefinition(CDataObject):
    r"""Proxy of C++ CReportDefinition class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def fromData(data, pParent):
        r"""fromData(CData data, CUndoObjectInterface pParent) -> CReportDefinition"""
        return _COPASI.CReportDefinition_fromData(data, pParent)

    def __init__(self, *args):
        r"""
        __init__(CReportDefinition self, std::string const & name="NoName", CDataContainer pParent=static_cast< CDataContainer * >((void *) 0)) -> CReportDefinition
        __init__(CReportDefinition self, CReportDefinition src, CDataContainer pParent) -> CReportDefinition
        """
        _COPASI.CReportDefinition_swiginit(self, _COPASI.new_CReportDefinition(*args))
    __swig_destroy__ = _COPASI.delete_CReportDefinition

    def cleanup(self):
        r"""cleanup(CReportDefinition self)"""
        return _COPASI.CReportDefinition_cleanup(self)

    def preCompileTable(self, listOfContainer):
        r"""preCompileTable(CReportDefinition self, ContainerList listOfContainer) -> bool"""
        return _COPASI.CReportDefinition_preCompileTable(self, listOfContainer)

    def getComment(self):
        r"""getComment(CReportDefinition self) -> std::string const &"""
        return _COPASI.CReportDefinition_getComment(self)

    def setComment(self, comment):
        r"""setComment(CReportDefinition self, std::string const & comment)"""
        return _COPASI.CReportDefinition_setComment(self, comment)

    def getBodyAddr(self):
        r"""getBodyAddr(CReportDefinition self) -> ReportItemVector"""
        return _COPASI.CReportDefinition_getBodyAddr(self)

    def getHeaderAddr(self):
        r"""getHeaderAddr(CReportDefinition self) -> ReportItemVector"""
        return _COPASI.CReportDefinition_getHeaderAddr(self)

    def getFooterAddr(self):
        r"""getFooterAddr(CReportDefinition self) -> ReportItemVector"""
        return _COPASI.CReportDefinition_getFooterAddr(self)

    def getTableAddr(self):
        r"""getTableAddr(CReportDefinition self) -> ReportItemVector"""
        return _COPASI.CReportDefinition_getTableAddr(self)

    def setTaskType(self, taskType):
        r"""setTaskType(CReportDefinition self, CTaskEnum::Task const & taskType) -> bool"""
        return _COPASI.CReportDefinition_setTaskType(self, taskType)

    def getTaskType(self):
        r"""getTaskType(CReportDefinition self) -> CTaskEnum::Task const &"""
        return _COPASI.CReportDefinition_getTaskType(self)

    def getSeparator(self):
        r"""getSeparator(CReportDefinition self) -> CCopasiReportSeparator"""
        return _COPASI.CReportDefinition_getSeparator(self)

    def getTitle(self):
        r"""getTitle(CReportDefinition self) -> bool"""
        return _COPASI.CReportDefinition_getTitle(self)

    def setTitle(self, title):
        r"""setTitle(CReportDefinition self, bool title)"""
        return _COPASI.CReportDefinition_setTitle(self, title)

    def isTable(self):
        r"""isTable(CReportDefinition self) -> bool"""
        return _COPASI.CReportDefinition_isTable(self)

    def setIsTable(self, table):
        r"""setIsTable(CReportDefinition self, bool table)"""
        return _COPASI.CReportDefinition_setIsTable(self, table)

    def setPrecision(self, precision):
        r"""setPrecision(CReportDefinition self, unsigned int const & precision)"""
        return _COPASI.CReportDefinition_setPrecision(self, precision)

    def getPrecision(self):
        r"""getPrecision(CReportDefinition self) -> unsigned int const &"""
        return _COPASI.CReportDefinition_getPrecision(self)

    def getKey(self):
        r"""getKey(CReportDefinition self) -> std::string const &"""
        return _COPASI.CReportDefinition_getKey(self)

    def setSeparator(self, *args):
        r"""
        setSeparator(CReportDefinition self, std::string const & separator)
        setSeparator(CReportDefinition self, CCopasiReportSeparator separator)
        """
        return _COPASI.CReportDefinition_setSeparator(self, *args)

    def getNumBodyItems(self):
        r"""getNumBodyItems(CReportDefinition self) -> int"""
        return _COPASI.CReportDefinition_getNumBodyItems(self)

    def getNthBodyItem(self, index):
        r"""getNthBodyItem(CReportDefinition self, int index) -> CRegisteredCommonName"""
        return _COPASI.CReportDefinition_getNthBodyItem(self, index)

    def removeNthBodyItem(self, index):
        r"""removeNthBodyItem(CReportDefinition self, int index)"""
        return _COPASI.CReportDefinition_removeNthBodyItem(self, index)

    def getNumHeaderItems(self):
        r"""getNumHeaderItems(CReportDefinition self) -> int"""
        return _COPASI.CReportDefinition_getNumHeaderItems(self)

    def getNthHeaderItem(self, index):
        r"""getNthHeaderItem(CReportDefinition self, int index) -> CRegisteredCommonName"""
        return _COPASI.CReportDefinition_getNthHeaderItem(self, index)

    def removeNthHeaderItem(self, index):
        r"""removeNthHeaderItem(CReportDefinition self, int index)"""
        return _COPASI.CReportDefinition_removeNthHeaderItem(self, index)

    def getNumFooterItems(self):
        r"""getNumFooterItems(CReportDefinition self) -> int"""
        return _COPASI.CReportDefinition_getNumFooterItems(self)

    def getNthFooterItem(self, index):
        r"""getNthFooterItem(CReportDefinition self, int index) -> CRegisteredCommonName"""
        return _COPASI.CReportDefinition_getNthFooterItem(self, index)

    def removeNthFooterItem(self, index):
        r"""removeNthFooterItem(CReportDefinition self, int index)"""
        return _COPASI.CReportDefinition_removeNthFooterItem(self, index)

    def getNumTableItems(self):
        r"""getNumTableItems(CReportDefinition self) -> int"""
        return _COPASI.CReportDefinition_getNumTableItems(self)

    def getNthTableItem(self, index):
        r"""getNthTableItem(CReportDefinition self, int index) -> CRegisteredCommonName"""
        return _COPASI.CReportDefinition_getNthTableItem(self, index)

    def removeNthTableItem(self, index):
        r"""removeNthTableItem(CReportDefinition self, int index)"""
        return _COPASI.CReportDefinition_removeNthTableItem(self, index)

    def addHeaderItem(self, item):
        r"""addHeaderItem(CReportDefinition self, std::string item)"""
        return _COPASI.CReportDefinition_addHeaderItem(self, item)

    def addFooterItem(self, item):
        r"""addFooterItem(CReportDefinition self, std::string item)"""
        return _COPASI.CReportDefinition_addFooterItem(self, item)

    def addBodyItem(self, item):
        r"""addBodyItem(CReportDefinition self, std::string item)"""
        return _COPASI.CReportDefinition_addBodyItem(self, item)

    def addTableItem(self, item):
        r"""addTableItem(CReportDefinition self, std::string item)"""
        return _COPASI.CReportDefinition_addTableItem(self, item)

# Register CReportDefinition in _COPASI:
_COPASI.CReportDefinition_swigregister(CReportDefinition)
class CReportDefinitionVector(ReportDefinitionVectorN):
    r"""Proxy of C++ CReportDefinitionVector class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(CReportDefinitionVector self, std::string const & name="ReportDefinitions", CDataContainer pParent=None) -> CReportDefinitionVector"""
        _COPASI.CReportDefinitionVector_swiginit(self, _COPASI.new_CReportDefinitionVector(*args))
    __swig_destroy__ = _COPASI.delete_CReportDefinitionVector

    def createReportDefinition(self, name, comment):
        r"""createReportDefinition(CReportDefinitionVector self, std::string const & name, std::string const & comment) -> CReportDefinition"""
        return _COPASI.CReportDefinitionVector_createReportDefinition(self, name, comment)

    def removeReportDefinition(self, key):
        r"""removeReportDefinition(CReportDefinitionVector self, std::string const & key) -> bool"""
        return _COPASI.CReportDefinitionVector_removeReportDefinition(self, key)

    def cleanup(self):
        r"""cleanup(CReportDefinitionVector self)"""
        return _COPASI.CReportDefinitionVector_cleanup(self)

    def getKey(self):
        r"""getKey(CReportDefinitionVector self) -> std::string const &"""
        return _COPASI.CReportDefinitionVector_getKey(self)

# Register CReportDefinitionVector in _COPASI:
_COPASI.CReportDefinitionVector_swigregister(CReportDefinitionVector)
class CDataModel(CDataContainer, COutputHandler):
    r"""Proxy of C++ CDataModel class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ContentType_COPASI = _COPASI.CDataModel_ContentType_COPASI
    
    ContentType_GEPASI = _COPASI.CDataModel_ContentType_GEPASI
    
    ContentType_SBML = _COPASI.CDataModel_ContentType_SBML
    
    ContentType_SEDML = _COPASI.CDataModel_ContentType_SEDML
    
    ContentType_OMEX = _COPASI.CDataModel_ContentType_OMEX
    
    ContentType___SIZE = _COPASI.CDataModel_ContentType___SIZE
    

    @staticmethod
    def contentType(content):
        r"""contentType(std::istream & content) -> CDataModel::ContentType"""
        return _COPASI.CDataModel_contentType(content)

    @staticmethod
    def fromData(data, pParent):
        r"""fromData(CData data, CUndoObjectInterface pParent) -> CDataModel"""
        return _COPASI.CDataModel_fromData(data, pParent)

    def __init__(self, *args):
        r"""
        __init__(CDataModel self, std::string const & name, CDataContainer pParent=static_cast< CDataContainer * >((void *) 0), std::string const & type="CN", bool withGUI=False) -> CDataModel
        __init__(CDataModel self, CDataModel src, CDataContainer pParent) -> CDataModel
        """
        _COPASI.CDataModel_swiginit(self, _COPASI.new_CDataModel(*args))
    __swig_destroy__ = _COPASI.delete_CDataModel

    def loadFromString(self, *args):
        r"""loadFromString(CDataModel self, std::string const & content, std::string referenceDir="", CProcessReport pProcessReport=None, bool const & deleteOldData=True) -> bool"""
        return _COPASI.CDataModel_loadFromString(self, *args)

    def loadFromFile(self, fileName, pProcessReport=None, deleteOldData=True):
        r"""loadFromFile(CDataModel self, std::string const & fileName, CProcessReport pProcessReport=None, bool const & deleteOldData=True) -> bool"""
        return _COPASI.CDataModel_loadFromFile(self, fileName, pProcessReport, deleteOldData)

    def addModel(self, fileName, pProcessReport=None):
        r"""addModel(CDataModel self, std::string const & fileName, CProcessReport pProcessReport=None) -> bool"""
        return _COPASI.CDataModel_addModel(self, fileName, pProcessReport)

    def loadModelParameterSets(self, fileName, pProcessReport=None):
        r"""loadModelParameterSets(CDataModel self, std::string const & fileName, CProcessReport pProcessReport=None) -> bool"""
        return _COPASI.CDataModel_loadModelParameterSets(self, fileName, pProcessReport)

    def saveModelParameterSets(self, fileName):
        r"""saveModelParameterSets(CDataModel self, std::string const & fileName) -> bool"""
        return _COPASI.CDataModel_saveModelParameterSets(self, fileName)

    def saveModelToString(self, pProcessReport=None):
        r"""saveModelToString(CDataModel self, CProcessReport pProcessReport=None) -> std::string"""
        return _COPASI.CDataModel_saveModelToString(self, pProcessReport)

    def importSBMLFromString(self, sbmlDocumentText, pProcessReport=None, deleteOldData=True):
        r"""importSBMLFromString(CDataModel self, std::string const & sbmlDocumentText, CProcessReport pProcessReport=None, bool const & deleteOldData=True) -> bool"""
        return _COPASI.CDataModel_importSBMLFromString(self, sbmlDocumentText, pProcessReport, deleteOldData)

    def importSBML(self, fileName, pProcessReport=None, deleteOldData=True):
        r"""importSBML(CDataModel self, std::string const & fileName, CProcessReport pProcessReport=None, bool const & deleteOldData=True) -> bool"""
        return _COPASI.CDataModel_importSBML(self, fileName, pProcessReport, deleteOldData)

    def exportSBML(self, fileName, overwriteFile=False, sbmlLevel=2, sbmlVersion=1, exportIncomplete=False, exportCOPASIMIRIAM=True, pProcessReport=None):
        r"""exportSBML(CDataModel self, std::string const & fileName, bool overwriteFile=False, int sbmlLevel=2, int sbmlVersion=1, bool exportIncomplete=False, bool exportCOPASIMIRIAM=True, CProcessReport pProcessReport=None) -> bool"""
        return _COPASI.CDataModel_exportSBML(self, fileName, overwriteFile, sbmlLevel, sbmlVersion, exportIncomplete, exportCOPASIMIRIAM, pProcessReport)

    def exportMathModel(self, fileName, pProcessReport, filter, overwriteFile=False):
        r"""exportMathModel(CDataModel self, std::string const & fileName, CProcessReport pProcessReport, std::string const & filter, bool overwriteFile=False) -> bool"""
        return _COPASI.CDataModel_exportMathModel(self, fileName, pProcessReport, filter, overwriteFile)

    def findObjectByDisplayName(self, displayString):
        r"""findObjectByDisplayName(CDataModel self, std::string const & displayString) -> CDataObject"""
        return _COPASI.CDataModel_findObjectByDisplayName(self, displayString)

    def copyExperimentalDataTo(self, path):
        r"""copyExperimentalDataTo(CDataModel self, std::string const & path)"""
        return _COPASI.CDataModel_copyExperimentalDataTo(self, path)

    def exportCombineArchive(self, fileName, includeCOPASI=True, includeSBML=True, includeData=True, includeSEDML=False, overwriteFile=False, pProcessReport=None, sbmlLevel=2, sbmlVersion=4, sedmlLevel=1, sedmlVersion=4):
        r"""exportCombineArchive(CDataModel self, std::string fileName, bool includeCOPASI=True, bool includeSBML=True, bool includeData=True, bool includeSEDML=False, bool overwriteFile=False, CProcessReport pProcessReport=None, int sbmlLevel=2, int sbmlVersion=4, int sedmlLevel=1, int sedmlVersion=4) -> bool"""
        return _COPASI.CDataModel_exportCombineArchive(self, fileName, includeCOPASI, includeSBML, includeData, includeSEDML, overwriteFile, pProcessReport, sbmlLevel, sbmlVersion, sedmlLevel, sedmlVersion)

    def exportShinyArchive(self, fileName, includeCOPASI=True, includeData=True, overwriteFile=False, pProcessReport=None):
        r"""exportShinyArchive(CDataModel self, std::string fileName, bool includeCOPASI=True, bool includeData=True, bool overwriteFile=False, CProcessReport pProcessReport=None) -> bool"""
        return _COPASI.CDataModel_exportShinyArchive(self, fileName, includeCOPASI, includeData, overwriteFile, pProcessReport)

    def addCopasiFileToArchive(self, *args):
        r"""addCopasiFileToArchive(CDataModel self, CombineArchive * archive, std::string const & targetName="./copasi/model.cps", CProcessReport pProcessReport=None)"""
        return _COPASI.CDataModel_addCopasiFileToArchive(self, *args)

    def openCombineArchive(self, fileName, pProcessReport=None, deleteOldData=True, pOptions=None):
        r"""openCombineArchive(CDataModel self, std::string const & fileName, CProcessReport pProcessReport=None, bool const & deleteOldData=True, SedmlImportOptions pOptions=None) -> bool"""
        return _COPASI.CDataModel_openCombineArchive(self, fileName, pProcessReport, deleteOldData, pOptions)

    def deleteOldData(self):
        r"""deleteOldData(CDataModel self)"""
        return _COPASI.CDataModel_deleteOldData(self)

    def getUndoStack(self):
        r"""getUndoStack(CDataModel self) -> CUndoStack *"""
        return _COPASI.CDataModel_getUndoStack(self)

    def getModel(self):
        r"""getModel(CDataModel self) -> CModel"""
        return _COPASI.CDataModel_getModel(self)

    def getContentType(self):
        r"""getContentType(CDataModel self) -> CDataModel::ContentType const &"""
        return _COPASI.CDataModel_getContentType(self)

    def getTaskList(self):
        r"""getTaskList(CDataModel self) -> TaskVectorN"""
        return _COPASI.CDataModel_getTaskList(self)

    def addTask(self, taskType):
        r"""addTask(CDataModel self, CTaskEnum::Task const & taskType) -> CCopasiTask"""
        return _COPASI.CDataModel_addTask(self, taskType)

    def addDefaultTasks(self):
        r"""addDefaultTasks(CDataModel self) -> bool"""
        return _COPASI.CDataModel_addDefaultTasks(self)

    def getReportDefinitionList(self):
        r"""getReportDefinitionList(CDataModel self) -> CReportDefinitionVector"""
        return _COPASI.CDataModel_getReportDefinitionList(self)

    def addReport(self, taskType):
        r"""addReport(CDataModel self, CTaskEnum::Task const & taskType) -> CReportDefinition"""
        return _COPASI.CDataModel_addReport(self, taskType)

    def addDefaultReports(self):
        r"""addDefaultReports(CDataModel self) -> bool"""
        return _COPASI.CDataModel_addDefaultReports(self)

    def getPlotDefinitionList(self):
        r"""getPlotDefinitionList(CDataModel self) -> COutputDefinitionVector"""
        return _COPASI.CDataModel_getPlotDefinitionList(self)

    def getListOfLayouts(self):
        r"""getListOfLayouts(CDataModel self) -> CListOfLayouts"""
        return _COPASI.CDataModel_getListOfLayouts(self)

    def removeLayout(self, key):
        r"""removeLayout(CDataModel self, std::string const & key) -> bool"""
        return _COPASI.CDataModel_removeLayout(self, key)

    def getFileName(self):
        r"""getFileName(CDataModel self) -> std::string const &"""
        return _COPASI.CDataModel_getFileName(self)

    def setFileName(self, fileName):
        r"""setFileName(CDataModel self, std::string const & fileName)"""
        return _COPASI.CDataModel_setFileName(self, fileName)

    def getDefaultFileName(self, suffix):
        r"""getDefaultFileName(CDataModel self, std::string const & suffix) -> std::string"""
        return _COPASI.CDataModel_getDefaultFileName(self, suffix)

    def setSBMLFileName(self, fileName):
        r"""setSBMLFileName(CDataModel self, std::string const & fileName) -> bool"""
        return _COPASI.CDataModel_setSBMLFileName(self, fileName)

    def getSBMLFileName(self):
        r"""getSBMLFileName(CDataModel self) -> std::string const &"""
        return _COPASI.CDataModel_getSBMLFileName(self)

    def getReferenceDirectory(self):
        r"""getReferenceDirectory(CDataModel self) -> std::string const &"""
        return _COPASI.CDataModel_getReferenceDirectory(self)

    def importSEDMLFromString(self, *args):
        r"""importSEDMLFromString(CDataModel self, std::string const & sedmlDocumentText, std::string referenceDir="", CProcessReport pProcessReport=None, bool const & deleteOldData=True, SedmlImportOptions pOptions=None) -> bool"""
        return _COPASI.CDataModel_importSEDMLFromString(self, *args)

    def importSEDML(self, fileName, pProcessReport=None, deleteOldData=True, pOptions=None):
        r"""importSEDML(CDataModel self, std::string const & fileName, CProcessReport pProcessReport=None, bool const & deleteOldData=True, SedmlImportOptions pOptions=None) -> bool"""
        return _COPASI.CDataModel_importSEDML(self, fileName, pProcessReport, deleteOldData, pOptions)

    def exportSEDMLToString(self, *args):
        r"""exportSEDMLToString(CDataModel self, CProcessReport pProcessReport, int sedmlLevel, int sedmlVersion, std::string const & modelLocation="model.xml", XMLNamespaces const * pAdditionalNamespaces=None) -> std::string"""
        return _COPASI.CDataModel_exportSEDMLToString(self, *args)

    def exportSEDML(self, fileName, overwriteFile=False, sedmlLevel=1, sedmlVersion=4, exportIncomplete=False, exportCOPASIMIRIAM=True, pProcessReport=None):
        r"""exportSEDML(CDataModel self, std::string const & fileName, bool overwriteFile=False, int sedmlLevel=1, int sedmlVersion=4, bool exportIncomplete=False, bool exportCOPASIMIRIAM=True, CProcessReport pProcessReport=None) -> bool"""
        return _COPASI.CDataModel_exportSEDML(self, fileName, overwriteFile, sedmlLevel, sedmlVersion, exportIncomplete, exportCOPASIMIRIAM, pProcessReport)

    def setSEDMLFileName(self, fileName):
        r"""setSEDMLFileName(CDataModel self, std::string const & fileName) -> bool"""
        return _COPASI.CDataModel_setSEDMLFileName(self, fileName)

    def getSEDMLFileName(self):
        r"""getSEDMLFileName(CDataModel self) -> std::string const &"""
        return _COPASI.CDataModel_getSEDMLFileName(self)

    def recordData(self, data):
        r"""recordData(CDataModel self, CUndoData data) -> CUndoData::CChangeSet"""
        return _COPASI.CDataModel_recordData(self, data)

    @staticmethod
    def changeModelParameter(element, value):
        r"""changeModelParameter(CDataObject element, double value) -> bool"""
        return _COPASI.CDataModel_changeModelParameter(element, value)

    def reparameterizeFromIniFile(self, fileName):
        r"""reparameterizeFromIniFile(CDataModel self, std::string const & fileName)"""
        return _COPASI.CDataModel_reparameterizeFromIniFile(self, fileName)

    def loadModelFromString(self, content, path):
        r"""loadModelFromString(CDataModel self, std::string const & content, std::string const & path) -> bool"""
        return _COPASI.CDataModel_loadModelFromString(self, content, path)

    def loadModel(self, fileName):
        r"""loadModel(CDataModel self, std::string const & fileName) -> bool"""
        return _COPASI.CDataModel_loadModel(self, fileName)

    def saveModel(self, *args):
        r"""
        saveModel(CDataModel self, std::string const & fileName, CProcessReport pProcessReport, bool overwriteFile=False, bool const & autoSave=False) -> bool
        saveModel(CDataModel self, std::string const & fileName, bool overwriteFile=False) -> bool
        """
        return _COPASI.CDataModel_saveModel(self, *args)

    def exportSBMLToString(self, *args):
        r"""
        exportSBMLToString(CDataModel self, CProcessReport pProcessReport, int sbmlLevel, int sbmlVersion) -> std::string
        exportSBMLToString(CDataModel self, int sbmlLevel, int sbmlVersion) -> std::string
        exportSBMLToString(CDataModel self) -> std::string
        """
        return _COPASI.CDataModel_exportSBMLToString(self, *args)

    def exportMathModelToString(self, filter):
        r"""exportMathModelToString(CDataModel self, std::string const & filter) -> std::string"""
        return _COPASI.CDataModel_exportMathModelToString(self, filter)

    def newModel(self, *args):
        r"""
        newModel(CDataModel self, CProcessReport pProcessReport, bool const & deleteOldData) -> bool
        newModel(CDataModel self) -> bool
        """
        return _COPASI.CDataModel_newModel(self, *args)

    def getNumReportDefinitions(self):
        r"""getNumReportDefinitions(CDataModel self) -> unsigned int"""
        return _COPASI.CDataModel_getNumReportDefinitions(self)

    def removeReportDefinition(self, index):
        r"""removeReportDefinition(CDataModel self, unsigned int index) -> bool"""
        return _COPASI.CDataModel_removeReportDefinition(self, index)

    def removePlotSpecification(self, index):
        r"""removePlotSpecification(CDataModel self, unsigned int index) -> bool"""
        return _COPASI.CDataModel_removePlotSpecification(self, index)

    def getNumPlotSpecifications(self):
        r"""getNumPlotSpecifications(CDataModel self) -> unsigned int"""
        return _COPASI.CDataModel_getNumPlotSpecifications(self)

    def getReportDefinition(self, *args):
        r"""
        getReportDefinition(CDataModel self, unsigned int index) -> CReportDefinition
        getReportDefinition(CDataModel self, std::string const & name) -> CReportDefinition
        """
        return _COPASI.CDataModel_getReportDefinition(self, *args)

    def getPlotSpecification(self, *args):
        r"""
        getPlotSpecification(CDataModel self, unsigned int index) -> CPlotSpecification
        getPlotSpecification(CDataModel self, std::string const & name) -> CPlotSpecification
        """
        return _COPASI.CDataModel_getPlotSpecification(self, *args)

    def getNumTasks(self):
        r"""getNumTasks(CDataModel self) -> unsigned int"""
        return _COPASI.CDataModel_getNumTasks(self)

    def getTask(self, *args):
        r"""
        getTask(CDataModel self, unsigned int index) -> CCopasiTask
        getTask(CDataModel self, std::string const & name) -> CCopasiTask
        """
        return _COPASI.CDataModel_getTask(self, *args)

# Register CDataModel in _COPASI:
_COPASI.CDataModel_swigregister(CDataModel)
CDataModel.ContentTypeNames = _COPASI.cvar.CDataModel_ContentTypeNames

class SBMLImporter(object):
    r"""Proxy of C++ SBMLImporter class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def areApproximatelyEqual(x, y, t=1e-9):
        r"""areApproximatelyEqual(double const & x, double const & y, double const & t=1e-9) -> bool"""
        return _COPASI.SBMLImporter_areApproximatelyEqual(x, y, t)

    @staticmethod
    def areEqualFunctions(pFun, pFun2):
        r"""areEqualFunctions(CFunction pFun, CFunction pFun2) -> bool"""
        return _COPASI.SBMLImporter_areEqualFunctions(pFun, pFun2)

    @staticmethod
    def isEmptyOrWhiteSpace(name):
        r"""isEmptyOrWhiteSpace(std::string const & name) -> bool"""
        return _COPASI.SBMLImporter_isEmptyOrWhiteSpace(name)

    @staticmethod
    def areEqualSubtrees(pNode1, pNode2):
        r"""areEqualSubtrees(CEvaluationNode const * pNode1, CEvaluationNode const * pNode2) -> bool"""
        return _COPASI.SBMLImporter_areEqualSubtrees(pNode1, pNode2)

    def __init__(self):
        r"""__init__(SBMLImporter self) -> SBMLImporter"""
        _COPASI.SBMLImporter_swiginit(self, _COPASI.new_SBMLImporter())
    __swig_destroy__ = _COPASI.delete_SBMLImporter

    def readSBML(self, filename, pSBMLDocument, copasi2sbmlmap, prLol, pDataModel):
        r"""readSBML(SBMLImporter self, std::string filename, SBMLDocument *& pSBMLDocument, std::map< CDataObject const *,SBase *,std::less< CDataObject const * >,std::allocator< std::pair< CDataObject const *const,SBase * > > > & copasi2sbmlmap, CListOfLayouts *& prLol, CDataModel pDataModel) -> CModel"""
        return _COPASI.SBMLImporter_readSBML(self, filename, pSBMLDocument, copasi2sbmlmap, prLol, pDataModel)

    def parseSBML(self, sbmlDocumentText, pSBMLDocument, copasi2sbmlmap, prLol, pDataModel):
        r"""parseSBML(SBMLImporter self, std::string const & sbmlDocumentText, SBMLDocument *& pSBMLDocument, std::map< CDataObject const *,SBase *,std::less< CDataObject const * >,std::allocator< std::pair< CDataObject const *const,SBase * > > > & copasi2sbmlmap, CListOfLayouts *& prLol, CDataModel pDataModel) -> CModel"""
        return _COPASI.SBMLImporter_parseSBML(self, sbmlDocumentText, pSBMLDocument, copasi2sbmlmap, prLol, pDataModel)

    def restoreFunctionDB(self):
        r"""restoreFunctionDB(SBMLImporter self)"""
        return _COPASI.SBMLImporter_restoreFunctionDB(self)

    def deleteCopasiModel(self):
        r"""deleteCopasiModel(SBMLImporter self)"""
        return _COPASI.SBMLImporter_deleteCopasiModel(self)

    def setImportHandler(self, pProcessReport):
        r"""setImportHandler(SBMLImporter self, CProcessReport pProcessReport)"""
        return _COPASI.SBMLImporter_setImportHandler(self, pProcessReport)

    def getProcessReport(self):
        r"""getProcessReport(SBMLImporter self) -> CProcessReport"""
        return _COPASI.SBMLImporter_getProcessReport(self)

    def clearCallBack(self):
        r"""clearCallBack(SBMLImporter self)"""
        return _COPASI.SBMLImporter_clearCallBack(self)

    def getImportCOPASIMIRIAM(self):
        r"""getImportCOPASIMIRIAM(SBMLImporter self) -> bool"""
        return _COPASI.SBMLImporter_getImportCOPASIMIRIAM(self)

    def setImportCOPASIMIRIAM(self, _import):
        r"""setImportCOPASIMIRIAM(SBMLImporter self, bool _import)"""
        return _COPASI.SBMLImporter_setImportCOPASIMIRIAM(self, _import)

    def findIdInASTTree(self, *args):
        r"""
        findIdInASTTree(SBMLImporter self, ASTNode const * pMath, StringSet reactionIds) -> std::string
        findIdInASTTree(SBMLImporter self, ASTNode const * pMath, StringDoubleMap reactionIds) -> std::string
        """
        return _COPASI.SBMLImporter_findIdInASTTree(self, *args)

    @staticmethod
    def divideByObject(pOrigNode, pObject):
        r"""divideByObject(CEvaluationNode const * pOrigNode, CDataObject pObject) -> CEvaluationNode *"""
        return _COPASI.SBMLImporter_divideByObject(pOrigNode, pObject)

    @staticmethod
    def importNotes(pAnno, pSBase):
        r"""importNotes(CAnnotation pAnno, SBase const * pSBase) -> bool"""
        return _COPASI.SBMLImporter_importNotes(pAnno, pSBase)

    @staticmethod
    def checkForUnitsOnNumbers(pNode):
        r"""checkForUnitsOnNumbers(ASTNode const * pNode) -> bool"""
        return _COPASI.SBMLImporter_checkForUnitsOnNumbers(pNode)

    def applyConversionFactors(self):
        r"""applyConversionFactors(SBMLImporter self)"""
        return _COPASI.SBMLImporter_applyConversionFactors(self)

    @staticmethod
    def updateSBMLSpeciesReferenceIds(pModel, ids):
        r"""updateSBMLSpeciesReferenceIds(Model * pModel, StringDoubleMap ids)"""
        return _COPASI.SBMLImporter_updateSBMLSpeciesReferenceIds(pModel, ids)

# Register SBMLImporter in _COPASI:
_COPASI.SBMLImporter_swigregister(SBMLImporter)
class CSBMLExporter(object):
    r"""Proxy of C++ CSBMLExporter class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def setHandler(self, pProcessReport):
        r"""setHandler(CSBMLExporter self, CProcessReport pProcessReport)"""
        return _COPASI.CSBMLExporter_setHandler(self, pProcessReport)

    def getCallBack(self):
        r"""getCallBack(CSBMLExporter self) -> CProcessReport"""
        return _COPASI.CSBMLExporter_getCallBack(self)

    def clearCallBack(self):
        r"""clearCallBack(CSBMLExporter self)"""
        return _COPASI.CSBMLExporter_clearCallBack(self)

    def createProgressStepOrStop(self, globalStep, currentTotal, title):
        r"""createProgressStepOrStop(CSBMLExporter self, unsigned int globalStep, unsigned int currentTotal, std::string const & title) -> bool"""
        return _COPASI.CSBMLExporter_createProgressStepOrStop(self, globalStep, currentTotal, title)

    def reportCurrentProgressOrStop(self):
        r"""reportCurrentProgressOrStop(CSBMLExporter self) -> bool"""
        return _COPASI.CSBMLExporter_reportCurrentProgressOrStop(self)

    def finishCurrentStep(self):
        r"""finishCurrentStep(CSBMLExporter self)"""
        return _COPASI.CSBMLExporter_finishCurrentStep(self)

    def finishExport(self):
        r"""finishExport(CSBMLExporter self)"""
        return _COPASI.CSBMLExporter_finishExport(self)

    def __init__(self):
        r"""__init__(CSBMLExporter self) -> CSBMLExporter"""
        _COPASI.CSBMLExporter_swiginit(self, _COPASI.new_CSBMLExporter())
    __swig_destroy__ = _COPASI.delete_CSBMLExporter

    def getSBMLDocument(self):
        r"""getSBMLDocument(CSBMLExporter self) -> SBMLDocument *"""
        return _COPASI.CSBMLExporter_getSBMLDocument(self)

    def exportModelToString(self, dataModel, sbmlLevel, sbmlVersion):
        r"""exportModelToString(CSBMLExporter self, CDataModel dataModel, unsigned int sbmlLevel, unsigned int sbmlVersion) -> std::string const"""
        return _COPASI.CSBMLExporter_exportModelToString(self, dataModel, sbmlLevel, sbmlVersion)

    def exportModel(self, dataModel, filename, sbmlLevel=2, sbmlVersion=1, overwrite=False):
        r"""exportModel(CSBMLExporter self, CDataModel dataModel, std::string const & filename, unsigned int sbmlLevel=2, unsigned int sbmlVersion=1, bool overwrite=False) -> bool"""
        return _COPASI.CSBMLExporter_exportModel(self, dataModel, filename, sbmlLevel, sbmlVersion, overwrite)

    @staticmethod
    def isModelSBMLCompatible(pDataModel, sbmlLevel, sbmlVersion, idMap):
        r"""isModelSBMLCompatible(CDataModel pDataModel, int sbmlLevel, int sbmlVersion, std::map< std::string,SBase const *,std::less< std::string >,std::allocator< std::pair< std::string const,SBase const * > > > & idMap) -> std::vector< SBMLIncompatibility,std::allocator< SBMLIncompatibility > > const"""
        return _COPASI.CSBMLExporter_isModelSBMLCompatible(pDataModel, sbmlLevel, sbmlVersion, idMap)

    def disownSBMLDocument(self):
        r"""disownSBMLDocument(CSBMLExporter self)"""
        return _COPASI.CSBMLExporter_disownSBMLDocument(self)

    def getCOPASI2SBMLMap(self):
        r"""getCOPASI2SBMLMap(CSBMLExporter self) -> std::map< CDataObject const *,SBase *,std::less< CDataObject const * >,std::allocator< std::pair< CDataObject const *const,SBase * > > > const &"""
        return _COPASI.CSBMLExporter_getCOPASI2SBMLMap(self)

    def isSetExportCOPASIMIRIAM(self):
        r"""isSetExportCOPASIMIRIAM(CSBMLExporter self) -> bool"""
        return _COPASI.CSBMLExporter_isSetExportCOPASIMIRIAM(self)

    def setExportCOPASIMIRIAM(self, exportMIRIAM):
        r"""setExportCOPASIMIRIAM(CSBMLExporter self, bool exportMIRIAM)"""
        return _COPASI.CSBMLExporter_setExportCOPASIMIRIAM(self, exportMIRIAM)

    @staticmethod
    def createUniqueId(*args):
        r"""createUniqueId(std::map< std::string,SBase const *,std::less< std::string >,std::allocator< std::pair< std::string const,SBase const * > > > const & idMap, std::string const & prefix, bool addIndexForFirst, std::string const & separator="_") -> std::string const"""
        return _COPASI.CSBMLExporter_createUniqueId(*args)

    @staticmethod
    def createSBMLNotes(notes_string):
        r"""createSBMLNotes(std::string const & notes_string) -> XMLNode *"""
        return _COPASI.CSBMLExporter_createSBMLNotes(notes_string)

    def exportLayout(self, sbmlLevel, dataModel):
        r"""exportLayout(CSBMLExporter self, unsigned int sbmlLevel, CDataModel dataModel) -> bool"""
        return _COPASI.CSBMLExporter_exportLayout(self, sbmlLevel, dataModel)

# Register CSBMLExporter in _COPASI:
_COPASI.CSBMLExporter_swigregister(CSBMLExporter)
class SEDMLImporter(object):
    r"""Proxy of C++ SEDMLImporter class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(SEDMLImporter self) -> SEDMLImporter"""
        _COPASI.SEDMLImporter_swiginit(self, _COPASI.new_SEDMLImporter())
    __swig_destroy__ = _COPASI.delete_SEDMLImporter

    def getArchiveFileName(self):
        r"""getArchiveFileName(SEDMLImporter self) -> std::string const"""
        return _COPASI.SEDMLImporter_getArchiveFileName(self)

    def importOutputs(self):
        r"""importOutputs(SEDMLImporter self)"""
        return _COPASI.SEDMLImporter_importOutputs(self)

    def addCurveToCopasiPlot(self, pCurve, pPlot):
        r"""addCurveToCopasiPlot(SEDMLImporter self, SedAbstractCurve * pCurve, CPlotSpecification pPlot)"""
        return _COPASI.SEDMLImporter_addCurveToCopasiPlot(self, pCurve, pPlot)

    def addSurfaceToCopasiPlot(self, pSurface, pPlot):
        r"""addSurfaceToCopasiPlot(SEDMLImporter self, SedSurface * pSurface, CPlotSpecification pPlot)"""
        return _COPASI.SEDMLImporter_addSurfaceToCopasiPlot(self, pSurface, pPlot)

    def applyStyleToCopasiItem(self, pStyle, plItem):
        r"""applyStyleToCopasiItem(SEDMLImporter self, SedStyle * pStyle, CPlotItem plItem)"""
        return _COPASI.SEDMLImporter_applyStyleToCopasiItem(self, pStyle, plItem)

    def importReport(self, report):
        r"""importReport(SEDMLImporter self, SedReport * report)"""
        return _COPASI.SEDMLImporter_importReport(self, report)

    def updateCopasiTaskForSimulation(self, sedmlsim, pTaskList=None):
        r"""updateCopasiTaskForSimulation(SEDMLImporter self, SedSimulation * sedmlsim, TaskVectorN pTaskList=None)"""
        return _COPASI.SEDMLImporter_updateCopasiTaskForSimulation(self, sedmlsim, pTaskList)

    def applyAlgorithm(self, tTask, alg):
        r"""applyAlgorithm(SEDMLImporter self, CTrajectoryTask tTask, SedAlgorithm const * alg)"""
        return _COPASI.SEDMLImporter_applyAlgorithm(self, tTask, alg)

    def importFirstSBMLModel(self):
        r"""importFirstSBMLModel(SEDMLImporter self) -> CModel"""
        return _COPASI.SEDMLImporter_importFirstSBMLModel(self)

    def importModel(self, modelId):
        r"""importModel(SEDMLImporter self, std::string const & modelId) -> CModel"""
        return _COPASI.SEDMLImporter_importModel(self, modelId)

    def resolveModelFile(self, modelSource):
        r"""resolveModelFile(SEDMLImporter self, std::string const & modelSource) -> std::string"""
        return _COPASI.SEDMLImporter_resolveModelFile(self, modelSource)

    def importTasks(self, pTaskList=None):
        r"""importTasks(SEDMLImporter self, TaskVectorN pTaskList=None)"""
        return _COPASI.SEDMLImporter_importTasks(self, pTaskList)

    def assignReportDefinitions(self, pTaskList=None):
        r"""assignReportDefinitions(SEDMLImporter self, TaskVectorN pTaskList=None)"""
        return _COPASI.SEDMLImporter_assignReportDefinitions(self, pTaskList)

    def importTask(self, task, importModel=False, pTaskList=None):
        r"""importTask(SEDMLImporter self, SedAbstractTask * task, bool importModel=False, TaskVectorN pTaskList=None)"""
        return _COPASI.SEDMLImporter_importTask(self, task, importModel, pTaskList)

    @staticmethod
    def convertSimpleFunctionalRange(frange, repeat):
        r"""convertSimpleFunctionalRange(SedFunctionalRange * frange, SedRepeatedTask * repeat) -> SedVectorRange *"""
        return _COPASI.SEDMLImporter_convertSimpleFunctionalRange(frange, repeat)

    def readSEDML(self, filename, pDataModel, pOptions=None):
        r"""readSEDML(SEDMLImporter self, std::string filename, CDataModel pDataModel, SedmlImportOptions pOptions=None) -> CModel"""
        return _COPASI.SEDMLImporter_readSEDML(self, filename, pDataModel, pOptions)

    def parseSEDML(self, sedmlDocumentText, pDataModel, pOptions=None):
        r"""parseSEDML(SEDMLImporter self, std::string const & sedmlDocumentText, CDataModel pDataModel, SedmlImportOptions pOptions=None) -> CModel"""
        return _COPASI.SEDMLImporter_parseSEDML(self, sedmlDocumentText, pDataModel, pOptions)

    def initializeContent(self):
        r"""initializeContent(SEDMLImporter self)"""
        return _COPASI.SEDMLImporter_initializeContent(self)

    def updateContent(self, data, dm):
        r"""updateContent(SEDMLImporter self, CDataModel::CContent & data, CDataModel dm)"""
        return _COPASI.SEDMLImporter_updateContent(self, data, dm)

    def deleteCopasiModel(self):
        r"""deleteCopasiModel(SEDMLImporter self)"""
        return _COPASI.SEDMLImporter_deleteCopasiModel(self)

    def setImportHandler(self, pProcessReport):
        r"""setImportHandler(SEDMLImporter self, CProcessReport pProcessReport)"""
        return _COPASI.SEDMLImporter_setImportHandler(self, pProcessReport)

    def getProcessReport(self):
        r"""getProcessReport(SEDMLImporter self) -> CProcessReport"""
        return _COPASI.SEDMLImporter_getProcessReport(self)

    def setSEDMLDocument(self, pDocument):
        r"""setSEDMLDocument(SEDMLImporter self, SedDocument * pDocument)"""
        return _COPASI.SEDMLImporter_setSEDMLDocument(self, pDocument)

    def getSEDMLDocument(self):
        r"""getSEDMLDocument(SEDMLImporter self) -> SedDocument *"""
        return _COPASI.SEDMLImporter_getSEDMLDocument(self)

    def clearDocument(self):
        r"""clearDocument(SEDMLImporter self)"""
        return _COPASI.SEDMLImporter_clearDocument(self)

    def setDataModel(self, pDataModel):
        r"""setDataModel(SEDMLImporter self, CDataModel pDataModel)"""
        return _COPASI.SEDMLImporter_setDataModel(self, pDataModel)

    def getDataModel(self):
        r"""getDataModel(SEDMLImporter self) -> CDataModel"""
        return _COPASI.SEDMLImporter_getDataModel(self)

    def setCopasiModel(self, pModel):
        r"""setCopasiModel(SEDMLImporter self, CModel pModel)"""
        return _COPASI.SEDMLImporter_setCopasiModel(self, pModel)

    def clearCallBack(self):
        r"""clearCallBack(SEDMLImporter self)"""
        return _COPASI.SEDMLImporter_clearCallBack(self)

    def restoreFunctionDB(self):
        r"""restoreFunctionDB(SEDMLImporter self)"""
        return _COPASI.SEDMLImporter_restoreFunctionDB(self)

# Register SEDMLImporter in _COPASI:
_COPASI.SEDMLImporter_swigregister(SEDMLImporter)
class CSEDMLExporter(object):
    r"""Proxy of C++ CSEDMLExporter class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(CSEDMLExporter self) -> CSEDMLExporter"""
        _COPASI.CSEDMLExporter_swiginit(self, _COPASI.new_CSEDMLExporter())
    __swig_destroy__ = _COPASI.delete_CSEDMLExporter

    def getSEDMLDocument(self):
        r"""getSEDMLDocument(CSEDMLExporter self) -> LIBSEDML_CPP_NAMESPACE::SedDocument *"""
        return _COPASI.CSEDMLExporter_getSEDMLDocument(self)

    def writeSedMLToString(self):
        r"""writeSedMLToString(CSEDMLExporter self) -> std::string"""
        return _COPASI.CSEDMLExporter_writeSedMLToString(self)

    def writeSedMLToFile(self, filename):
        r"""writeSedMLToFile(CSEDMLExporter self, std::string const & filename) -> bool"""
        return _COPASI.CSEDMLExporter_writeSedMLToFile(self, filename)

    def exportModelAndTasksToString(self, dataModel, modelLocation, sedmlLevel, sedmlVersion):
        r"""exportModelAndTasksToString(CSEDMLExporter self, CDataModel dataModel, std::string const & modelLocation, unsigned int sedmlLevel, unsigned int sedmlVersion) -> std::string"""
        return _COPASI.CSEDMLExporter_exportModelAndTasksToString(self, dataModel, modelLocation, sedmlLevel, sedmlVersion)

    def setLevelAndVersion(self, sedmlLevel, sedmlVersion):
        r"""setLevelAndVersion(CSEDMLExporter self, unsigned int sedmlLevel, unsigned int sedmlVersion)"""
        return _COPASI.CSEDMLExporter_setLevelAndVersion(self, sedmlLevel, sedmlVersion)

    def exportModelAndTasks(self, dataModel, sedmlFilename, sbmlDocument, sedmlLevel=1, sedmlVersion=1, overwrite=False):
        r"""exportModelAndTasks(CSEDMLExporter self, CDataModel dataModel, std::string const & sedmlFilename, std::string const & sbmlDocument, unsigned int sedmlLevel=1, unsigned int sedmlVersion=1, bool overwrite=False) -> bool"""
        return _COPASI.CSEDMLExporter_exportModelAndTasks(self, dataModel, sedmlFilename, sbmlDocument, sedmlLevel, sedmlVersion, overwrite)

    def createSEDMLDocument(self, dataModel, modelRef):
        r"""createSEDMLDocument(CSEDMLExporter self, CDataModel dataModel, std::string modelRef) -> LIBSEDML_CPP_NAMESPACE::SedDocument *"""
        return _COPASI.CSEDMLExporter_createSEDMLDocument(self, dataModel, modelRef)

    def clearMaps(self):
        r"""clearMaps(CSEDMLExporter self)"""
        return _COPASI.CSEDMLExporter_clearMaps(self)

    def createTimeCourseTask(self):
        r"""createTimeCourseTask(CSEDMLExporter self) -> std::string"""
        return _COPASI.CSEDMLExporter_createTimeCourseTask(self)

    def exportAlgorithm(self, alg, pMethod):
        r"""exportAlgorithm(CSEDMLExporter self, SedAlgorithm * alg, CCopasiMethod pMethod)"""
        return _COPASI.CSEDMLExporter_exportAlgorithm(self, alg, pMethod)

    def createSteadyStateTask(self):
        r"""createSteadyStateTask(CSEDMLExporter self) -> std::string"""
        return _COPASI.CSEDMLExporter_createSteadyStateTask(self)

    def createScanTask(self):
        r"""createScanTask(CSEDMLExporter self) -> std::string"""
        return _COPASI.CSEDMLExporter_createScanTask(self)

    def createModel(self, modelRef):
        r"""createModel(CSEDMLExporter self, std::string const & modelRef) -> std::string"""
        return _COPASI.CSEDMLExporter_createModel(self, modelRef)

    def createTasks(self):
        r"""createTasks(CSEDMLExporter self)"""
        return _COPASI.CSEDMLExporter_createTasks(self)

    def createDataGenerators(self, taskId, task=None):
        r"""createDataGenerators(CSEDMLExporter self, std::string & taskId, CCopasiTask task=None)"""
        return _COPASI.CSEDMLExporter_createDataGenerators(self, taskId, task)

    def exportNthPlot(self, pPlot, n):
        r"""exportNthPlot(CSEDMLExporter self, CPlotSpecification pPlot, size_t n)"""
        return _COPASI.CSEDMLExporter_exportNthPlot(self, pPlot, n)

    def exportPlotItem(self, pPlotItem, i, j):
        r"""exportPlotItem(CSEDMLExporter self, CPlotItem pPlotItem, size_t i, size_t j)"""
        return _COPASI.CSEDMLExporter_exportPlotItem(self, pPlotItem, i, j)

    def exportStyleForItem(self, pPlotItem):
        r"""exportStyleForItem(CSEDMLExporter self, CPlotItem pPlotItem) -> std::string"""
        return _COPASI.CSEDMLExporter_exportStyleForItem(self, pPlotItem)

    def exportReport(self, _def):
        r"""exportReport(CSEDMLExporter self, CReportDefinition _def)"""
        return _COPASI.CSEDMLExporter_exportReport(self, _def)

    def setCurrentTime(self, taskId):
        r"""setCurrentTime(CSEDMLExporter self, std::string & taskId)"""
        return _COPASI.CSEDMLExporter_setCurrentTime(self, taskId)

    def exportNthScanItem(self, pProblem, n, task):
        r"""exportNthScanItem(CSEDMLExporter self, CScanProblem pProblem, size_t n, SedRepeatedTask * task) -> bool"""
        return _COPASI.CSEDMLExporter_exportNthScanItem(self, pProblem, n, task)

    def getExportExecutableTasksOnly(self):
        r"""getExportExecutableTasksOnly(CSEDMLExporter self) -> bool"""
        return _COPASI.CSEDMLExporter_getExportExecutableTasksOnly(self)

    def setExportExecutableTasksOnly(self, val):
        r"""setExportExecutableTasksOnly(CSEDMLExporter self, bool val)"""
        return _COPASI.CSEDMLExporter_setExportExecutableTasksOnly(self, val)

    def getExportActivePlotsOnly(self):
        r"""getExportActivePlotsOnly(CSEDMLExporter self) -> bool"""
        return _COPASI.CSEDMLExporter_getExportActivePlotsOnly(self)

    def setExportActivePlotsOnly(self, val):
        r"""setExportActivePlotsOnly(CSEDMLExporter self, bool val)"""
        return _COPASI.CSEDMLExporter_setExportActivePlotsOnly(self, val)

    def getExportSpecificPlots(self):
        r"""getExportSpecificPlots(CSEDMLExporter self) -> bool"""
        return _COPASI.CSEDMLExporter_getExportSpecificPlots(self)

    def setExportSpecificPlots(self, val):
        r"""setExportSpecificPlots(CSEDMLExporter self, bool val)"""
        return _COPASI.CSEDMLExporter_setExportSpecificPlots(self, val)

    def getModelId(self):
        r"""getModelId(CSEDMLExporter self) -> std::string const &"""
        return _COPASI.CSEDMLExporter_getModelId(self)

    def setModelId(self, val):
        r"""setModelId(CSEDMLExporter self, std::string const & val)"""
        return _COPASI.CSEDMLExporter_setModelId(self, val)

    def freeSedMLDocument(self):
        r"""freeSedMLDocument(CSEDMLExporter self)"""
        return _COPASI.CSEDMLExporter_freeSedMLDocument(self)

    def setSBMLNamespaces(self, *args):
        r"""
        setSBMLNamespaces(CSEDMLExporter self, int level, int version, std::string const & prefix="sbml")
        setSBMLNamespaces(CSEDMLExporter self, LIBSBML_CPP_NAMESPACE::XMLNamespaces const & sbmlns)
        """
        return _COPASI.CSEDMLExporter_setSBMLNamespaces(self, *args)

    def setDataModel(self, pDataModel):
        r"""setDataModel(CSEDMLExporter self, CDataModel pDataModel)"""
        return _COPASI.CSEDMLExporter_setDataModel(self, pDataModel)

    def getDataModel(self):
        r"""getDataModel(CSEDMLExporter self) -> CDataModel"""
        return _COPASI.CSEDMLExporter_getDataModel(self)

# Register CSEDMLExporter in _COPASI:
_COPASI.CSEDMLExporter_swigregister(CSEDMLExporter)
SEDML_TIME_URN = _COPASI.SEDML_TIME_URN

SEDML_KISAO_TIME = _COPASI.SEDML_KISAO_TIME

SEDML_KISAO_STOCHASTIC = _COPASI.SEDML_KISAO_STOCHASTIC

SEDML_KISAO_CONCENTRATION = _COPASI.SEDML_KISAO_CONCENTRATION

SEDML_KISAO_AMOUNT = _COPASI.SEDML_KISAO_AMOUNT

SEDML_KISAO_PARTICLENUMBER = _COPASI.SEDML_KISAO_PARTICLENUMBER

SEDML_KISAO_RATEOFCHANGE = _COPASI.SEDML_KISAO_RATEOFCHANGE

SEDML_KISAO_PARTICLE_RATE = _COPASI.SEDML_KISAO_PARTICLE_RATE

SEDML_KISAO_CONCENTRATION_RATE = _COPASI.SEDML_KISAO_CONCENTRATION_RATE

SEDML_KISAO_RATE = _COPASI.SEDML_KISAO_RATE

SEDML_KISAO_FLUX = _COPASI.SEDML_KISAO_FLUX

class VariableInfo(object):
    r"""Proxy of C++ VariableInfo class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, pObject):
        r"""__init__(VariableInfo self, CDataObject pObject) -> VariableInfo"""
        _COPASI.VariableInfo_swiginit(self, _COPASI.new_VariableInfo(pObject))

    def addToDataGenerator(self, pGenerator):
        r"""addToDataGenerator(VariableInfo self, SedDataGenerator * pGenerator) -> SedVariable *"""
        return _COPASI.VariableInfo_addToDataGenerator(self, pGenerator)

    def getName(self):
        r"""getName(VariableInfo self) -> std::string const &"""
        return _COPASI.VariableInfo_getName(self)

    def setName(self, name):
        r"""setName(VariableInfo self, std::string const & name)"""
        return _COPASI.VariableInfo_setName(self, name)

    def getSymbol(self):
        r"""getSymbol(VariableInfo self) -> std::string const &"""
        return _COPASI.VariableInfo_getSymbol(self)

    def setSymbol(self, symbol):
        r"""setSymbol(VariableInfo self, std::string const & symbol)"""
        return _COPASI.VariableInfo_setSymbol(self, symbol)

    def getXpath(self):
        r"""getXpath(VariableInfo self) -> std::string const &"""
        return _COPASI.VariableInfo_getXpath(self)

    def setXpath(self, xpath):
        r"""setXpath(VariableInfo self, std::string const & xpath)"""
        return _COPASI.VariableInfo_setXpath(self, xpath)

    def getSbmlId(self):
        r"""getSbmlId(VariableInfo self) -> std::string const &"""
        return _COPASI.VariableInfo_getSbmlId(self)

    def getTerm(self):
        r"""getTerm(VariableInfo self) -> std::string const &"""
        return _COPASI.VariableInfo_getTerm(self)

    def setTerm(self, term):
        r"""setTerm(VariableInfo self, std::string const & term)"""
        return _COPASI.VariableInfo_setTerm(self, term)

    def isValid(self):
        r"""isValid(VariableInfo self) -> bool"""
        return _COPASI.VariableInfo_isValid(self)

    def __lt__(self, other):
        r"""__lt__(VariableInfo self, VariableInfo other) -> bool"""
        return _COPASI.VariableInfo___lt__(self, other)
    __swig_destroy__ = _COPASI.delete_VariableInfo

# Register VariableInfo in _COPASI:
_COPASI.VariableInfo_swigregister(VariableInfo)
class SedmlInfo(object):
    r"""Proxy of C++ SedmlInfo class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, pDocument, ownDocument=False):
        r"""__init__(SedmlInfo self, SedDocument * pDocument, bool ownDocument=False) -> SedmlInfo"""
        _COPASI.SedmlInfo_swiginit(self, _COPASI.new_SedmlInfo(pDocument, ownDocument))
    __swig_destroy__ = _COPASI.delete_SedmlInfo

    def isSupported(self):
        r"""isSupported(SedmlInfo self) -> bool"""
        return _COPASI.SedmlInfo_isSupported(self)

    def isComplex(self):
        r"""isComplex(SedmlInfo self) -> bool"""
        return _COPASI.SedmlInfo_isComplex(self)

    def getModelForTask(self, *args):
        r"""
        getModelForTask(SedmlInfo self, SedAbstractTask * task) -> StringSet
        getModelForTask(SedmlInfo self, std::string const & taskId) -> StringSet
        """
        return _COPASI.SedmlInfo_getModelForTask(self, *args)

    def getModelForDataGen(self, dg):
        r"""getModelForDataGen(SedmlInfo self, SedDataGenerator * dg) -> StringSet"""
        return _COPASI.SedmlInfo_getModelForDataGen(self, dg)

    def getTasks(self, *args):
        r"""
        getTasks(SedmlInfo self, std::string const & dgId) -> StringSet
        getTasks(SedmlInfo self, SedDataGenerator * dg) -> StringSet
        getTasks(SedmlInfo self, SedOutput * output) -> StringSet
        getTasks(SedmlInfo self, SedAbstractCurve * curve) -> StringSet
        getTasks(SedmlInfo self, SedSurface * surface) -> StringSet
        """
        return _COPASI.SedmlInfo_getTasks(self, *args)

    def getTaskNames(self):
        r"""getTaskNames(SedmlInfo self) -> std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > >"""
        return _COPASI.SedmlInfo_getTaskNames(self)

    def getFirstModel(self, *args):
        r"""getFirstModel(SedmlInfo self, std::string const & taskId="") -> std::string"""
        return _COPASI.SedmlInfo_getFirstModel(self, *args)

    def getFirstReport(self, taskId):
        r"""getFirstReport(SedmlInfo self, std::string const & taskId) -> std::string"""
        return _COPASI.SedmlInfo_getFirstReport(self, taskId)

    def getReportsForTask(self, taskId):
        r"""getReportsForTask(SedmlInfo self, std::string const & taskId) -> std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > >"""
        return _COPASI.SedmlInfo_getReportsForTask(self, taskId)

    def getPlotsForTask(self, taskId):
        r"""getPlotsForTask(SedmlInfo self, std::string const & taskId) -> std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > >"""
        return _COPASI.SedmlInfo_getPlotsForTask(self, taskId)

    def hasOutputs(self, taskId):
        r"""hasOutputs(SedmlInfo self, std::string const & taskId) -> bool"""
        return _COPASI.SedmlInfo_hasOutputs(self, taskId)

    def isRecursiveWithoutOutputs(self, task):
        r"""isRecursiveWithoutOutputs(SedmlInfo self, SedAbstractTask * task) -> bool"""
        return _COPASI.SedmlInfo_isRecursiveWithoutOutputs(self, task)

    def getReportFileName(self, reportId):
        r"""getReportFileName(SedmlInfo self, std::string const & reportId) -> std::string"""
        return _COPASI.SedmlInfo_getReportFileName(self, reportId)

    def setReportFileName(self, reportId, fileName):
        r"""setReportFileName(SedmlInfo self, std::string const & reportId, std::string const & fileName)"""
        return _COPASI.SedmlInfo_setReportFileName(self, reportId, fileName)

    def getFirstTaskWithOutput(self):
        r"""getFirstTaskWithOutput(SedmlInfo self) -> std::string"""
        return _COPASI.SedmlInfo_getFirstTaskWithOutput(self)

    @staticmethod
    def addSets(target, source):
        r"""addSets(StringSet target, StringSet source)"""
        return _COPASI.SedmlInfo_addSets(target, source)

    @staticmethod
    def forArchive(fileName):
        r"""forArchive(std::string const & fileName) -> SedmlInfo"""
        return _COPASI.SedmlInfo_forArchive(fileName)

    @staticmethod
    def forFile(fileName):
        r"""forFile(std::string const & fileName) -> SedmlInfo"""
        return _COPASI.SedmlInfo_forFile(fileName)

# Register SedmlInfo in _COPASI:
_COPASI.SedmlInfo_swigregister(SedmlInfo)
class SEDMLUtils(object):
    r"""Proxy of C++ SEDMLUtils class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getSedMLStringForArchive(fileName):
        r"""getSedMLStringForArchive(std::string const & fileName) -> std::string"""
        return _COPASI.SEDMLUtils_getSedMLStringForArchive(fileName)

    @staticmethod
    def resolveXPath(model, xpath, initial=False):
        r"""resolveXPath(CModel model, std::string const & xpath, bool initial=False) -> CDataObject"""
        return _COPASI.SEDMLUtils_resolveXPath(model, xpath, initial)

    @staticmethod
    def resolveVariable(model, variable):
        r"""resolveVariable(CModel model, SedVariable const * variable) -> CDataObject"""
        return _COPASI.SEDMLUtils_resolveVariable(model, variable)

    @staticmethod
    def createAmountMV(pModel, pMetab):
        r"""createAmountMV(CModel pModel, CMetab pMetab) -> CModelValue"""
        return _COPASI.SEDMLUtils_createAmountMV(pModel, pMetab)

    @staticmethod
    def resolveDatagenerator(model, dataReference):
        r"""resolveDatagenerator(CModel model, SedDataGenerator const * dataReference) -> CDataObject"""
        return _COPASI.SEDMLUtils_resolveDatagenerator(model, dataReference)

    @staticmethod
    def getObjectForSbmlId(pModel, id, SBMLType, initial=False):
        r"""getObjectForSbmlId(CModel pModel, std::string const & id, std::string const & SBMLType, bool initial=False) -> CDataObject"""
        return _COPASI.SEDMLUtils_getObjectForSbmlId(pModel, id, SBMLType, initial)

    @staticmethod
    def translateTargetXpathInSBMLId(xpath, SBMLType):
        r"""translateTargetXpathInSBMLId(std::string const & xpath, std::string & SBMLType) -> std::string"""
        return _COPASI.SEDMLUtils_translateTargetXpathInSBMLId(xpath, SBMLType)

    @staticmethod
    def getNextId(base, count):
        r"""getNextId(std::string const & base, int count) -> std::string"""
        return _COPASI.SEDMLUtils_getNextId(base, count)

    @staticmethod
    def getSbmlId(object):
        r"""getSbmlId(CDataObject object) -> std::string"""
        return _COPASI.SEDMLUtils_getSbmlId(object)

    @staticmethod
    def getXPathAndName(sbmlId, type, pModel, dataModel):
        r"""getXPathAndName(std::string & sbmlId, std::string const & type, CModel pModel, CDataModel dataModel) -> std::string"""
        return _COPASI.SEDMLUtils_getXPathAndName(sbmlId, type, pModel, dataModel)

    @staticmethod
    def getXPathForObject(object):
        r"""getXPathForObject(CDataObject object) -> std::string"""
        return _COPASI.SEDMLUtils_getXPathForObject(object)

    @staticmethod
    def getXPathForSbmlIdAndType(type, sbmlId):
        r"""getXPathForSbmlIdAndType(std::string const & type, std::string const & sbmlId) -> std::string"""
        return _COPASI.SEDMLUtils_getXPathForSbmlIdAndType(type, sbmlId)

    @staticmethod
    def getXPathForObjectAndType(object, sbmlId):
        r"""getXPathForObjectAndType(CDataObject object, std::string const & sbmlId) -> std::string"""
        return _COPASI.SEDMLUtils_getXPathForObjectAndType(object, sbmlId)

    @staticmethod
    def removeCharactersFromString(str, characters):
        r"""removeCharactersFromString(std::string & str, std::string const & characters) -> std::string &"""
        return _COPASI.SEDMLUtils_removeCharactersFromString(str, characters)

    @staticmethod
    def findIdByNameAndType(map, typeCode, name):
        r"""findIdByNameAndType(std::map< CDataObject const *,SBase *,std::less< CDataObject const * >,std::allocator< std::pair< CDataObject const *const,SBase * > > > const & map, int typeCode, std::string const & name) -> std::string"""
        return _COPASI.SEDMLUtils_findIdByNameAndType(map, typeCode, name)

    @staticmethod
    def splitStrings(xpath, delim, stringsContainer):
        r"""splitStrings(std::string const & xpath, char delim, StringStdVector stringsContainer)"""
        return _COPASI.SEDMLUtils_splitStrings(xpath, delim, stringsContainer)

    @staticmethod
    def lineTypeToSed(linetype):
        r"""lineTypeToSed(int linetype) -> int"""
        return _COPASI.SEDMLUtils_lineTypeToSed(linetype)

    @staticmethod
    def lineTypeFromSed(linetype):
        r"""lineTypeFromSed(int linetype) -> int"""
        return _COPASI.SEDMLUtils_lineTypeFromSed(linetype)

    @staticmethod
    def symbolToSed(symbol):
        r"""symbolToSed(int symbol) -> int"""
        return _COPASI.SEDMLUtils_symbolToSed(symbol)

    @staticmethod
    def symbolFromSed(symbol):
        r"""symbolFromSed(int symbol) -> int"""
        return _COPASI.SEDMLUtils_symbolFromSed(symbol)

    @staticmethod
    def argbToRgba(argb, includeHash=True):
        r"""argbToRgba(std::string const & argb, bool includeHash=True) -> std::string"""
        return _COPASI.SEDMLUtils_argbToRgba(argb, includeHash)

    @staticmethod
    def rgbaToArgb(rgba, includeHash=True):
        r"""rgbaToArgb(std::string const & rgba, bool includeHash=True) -> std::string"""
        return _COPASI.SEDMLUtils_rgbaToArgb(rgba, includeHash)

    @staticmethod
    def getAlphaFromArgb(argb):
        r"""getAlphaFromArgb(std::string const & argb) -> int"""
        return _COPASI.SEDMLUtils_getAlphaFromArgb(argb)

    @staticmethod
    def getAlphaFromRgba(rgba):
        r"""getAlphaFromRgba(std::string const & rgba) -> int"""
        return _COPASI.SEDMLUtils_getAlphaFromRgba(rgba)

    @staticmethod
    def setLibCombineTempDir():
        r"""setLibCombineTempDir()"""
        return _COPASI.SEDMLUtils_setLibCombineTempDir()

    def __init__(self):
        r"""__init__(SEDMLUtils self) -> SEDMLUtils"""
        _COPASI.SEDMLUtils_swiginit(self, _COPASI.new_SEDMLUtils())
    __swig_destroy__ = _COPASI.delete_SEDMLUtils

# Register SEDMLUtils in _COPASI:
_COPASI.SEDMLUtils_swigregister(SEDMLUtils)
class SedmlImportOptions(object):
    r"""Proxy of C++ SedmlImportOptions class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(SedmlImportOptions self, std::string const & taskId="", std::string const & modelId="", StringStdVector plots=std::vector< std::string >(), std::string const & reportId="", std::string const & reportFilename="") -> SedmlImportOptions"""
        _COPASI.SedmlImportOptions_swiginit(self, _COPASI.new_SedmlImportOptions(*args))

    def setSkipModelImport(self, skipModelLoading):
        r"""setSkipModelImport(SedmlImportOptions self, bool skipModelLoading)"""
        return _COPASI.SedmlImportOptions_setSkipModelImport(self, skipModelLoading)

    def skipModelImport(self):
        r"""skipModelImport(SedmlImportOptions self) -> bool"""
        return _COPASI.SedmlImportOptions_skipModelImport(self)

    def getTaskId(self):
        r"""getTaskId(SedmlImportOptions self) -> std::string const &"""
        return _COPASI.SedmlImportOptions_getTaskId(self)

    def getModelId(self):
        r"""getModelId(SedmlImportOptions self) -> std::string const &"""
        return _COPASI.SedmlImportOptions_getModelId(self)

    def getReportId(self):
        r"""getReportId(SedmlImportOptions self) -> std::string const &"""
        return _COPASI.SedmlImportOptions_getReportId(self)

    def getReportFile(self):
        r"""getReportFile(SedmlImportOptions self) -> std::string const &"""
        return _COPASI.SedmlImportOptions_getReportFile(self)

    def getPlots(self):
        r"""getPlots(SedmlImportOptions self) -> StringStdVector"""
        return _COPASI.SedmlImportOptions_getPlots(self)

    def ignoreOutput(self, outputId):
        r"""ignoreOutput(SedmlImportOptions self, std::string const & outputId) -> bool"""
        return _COPASI.SedmlImportOptions_ignoreOutput(self, outputId)

    def isValid(self):
        r"""isValid(SedmlImportOptions self) -> bool"""
        return _COPASI.SedmlImportOptions_isValid(self)
    __swig_destroy__ = _COPASI.delete_SedmlImportOptions

# Register SedmlImportOptions in _COPASI:
_COPASI.SedmlImportOptions_swigregister(SedmlImportOptions)
class CTimeSeries(COutputInterface):
    r"""Proxy of C++ CTimeSeries class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CTimeSeries self) -> CTimeSeries
        __init__(CTimeSeries self, CTimeSeries src) -> CTimeSeries
        """
        _COPASI.CTimeSeries_swiginit(self, _COPASI.new_CTimeSeries(*args))
    __swig_destroy__ = _COPASI.delete_CTimeSeries

    def compile(self, listOfContainer):
        r"""compile(CTimeSeries self, ContainerList listOfContainer) -> bool"""
        return _COPASI.CTimeSeries_compile(self, listOfContainer)

    def output(self, activity):
        r"""output(CTimeSeries self, COutputInterface::Activity const & activity)"""
        return _COPASI.CTimeSeries_output(self, activity)

    def separate(self, activity):
        r"""separate(CTimeSeries self, COutputInterface::Activity const & activity)"""
        return _COPASI.CTimeSeries_separate(self, activity)

    def finish(self):
        r"""finish(CTimeSeries self)"""
        return _COPASI.CTimeSeries_finish(self)

    def allocate(self, steps):
        r"""allocate(CTimeSeries self, size_t const & steps)"""
        return _COPASI.CTimeSeries_allocate(self, steps)

    def increaseAllocation(self):
        r"""increaseAllocation(CTimeSeries self)"""
        return _COPASI.CTimeSeries_increaseAllocation(self)

    def clear(self):
        r"""clear(CTimeSeries self)"""
        return _COPASI.CTimeSeries_clear(self)

    def save(self, *args):
        r"""
        save(CTimeSeries self, std::string const & fileName, bool writeParticleNumbers=False, std::string const & separator="\t") -> int
        save(CTimeSeries self, std::ostream & str, bool writeParticleNumbers=False, std::string const & separator="\t") -> int
        """
        return _COPASI.CTimeSeries_save(self, *args)

    def getRecordedSteps(self):
        r"""getRecordedSteps(CTimeSeries self) -> size_t const &"""
        return _COPASI.CTimeSeries_getRecordedSteps(self)

    def getNumVariables(self):
        r"""getNumVariables(CTimeSeries self) -> size_t const &"""
        return _COPASI.CTimeSeries_getNumVariables(self)

    def getData(self, step, variable):
        r"""getData(CTimeSeries self, size_t const & step, size_t const & variable) -> double const &"""
        return _COPASI.CTimeSeries_getData(self, step, variable)

    def getConcentrationData(self, step, variable):
        r"""getConcentrationData(CTimeSeries self, size_t const & step, size_t const & variable) -> double"""
        return _COPASI.CTimeSeries_getConcentrationData(self, step, variable)

    def getTitle(self, variable):
        r"""getTitle(CTimeSeries self, size_t const & variable) -> std::string const &"""
        return _COPASI.CTimeSeries_getTitle(self, variable)

    def getKey(self, variable):
        r"""getKey(CTimeSeries self, size_t const & variable) -> std::string const &"""
        return _COPASI.CTimeSeries_getKey(self, variable)

    def getSBMLId(self, variable, pDataModel):
        r"""getSBMLId(CTimeSeries self, size_t const & variable, CDataModel pDataModel) -> std::string"""
        return _COPASI.CTimeSeries_getSBMLId(self, variable, pDataModel)


    def getTitles(self):
      """Returns the titles of the variables in the time series
      as a python list.
      If the time series contains no variables, an empty list is returned.
      """
      result=[]
      x=self.getNumVariables()
      for index in range(0,x):
          result.append(self.getTitle(index))
      return result

    def getDataForIndex(self,index):
      """Returns the complete time course particle number data for the variable with the given index.
      The index has to be an integer type, otherwise an AttributeError is raised.

      If the given index is invalid, None is returned.
      """
      if type(index) != types.IntType:
          raise AttributeError("index argument to getConcentrationDataForIndex must be an int")
      result=None
      x=self.getNumVariables()
      if (index >= 0) and (index < x):
        result=[]
        y=self.getRecordedSteps()
        for step in range(0,y):
          result.append(self.getData(step,index))
      return result

    def getConcentrationDataForIndex(self,index):
      """Returns the complete time course concentration data for the variable with the given index.
      The index has to be an integer type, otherwise an AttributeError is raised.

      If the given index is invalid, None is returned.
      """
      if type(index) != types.IntType:
          raise AttributeError("index argument to getConcentrationDataForIndex must be an int")
      result=None
      x=self.getNumVariables()
      if (index >= 0) and (index < x):
        result=[]
        y=self.getRecordedSteps()
        for step in range(0,y):
          result.append(self.getConcentrationData(step,index))
      return result

    def getDataForObject(self,object):
      """Returns the complete time course particle number data for the variable corresponding to the given object.
      The key of the object must match the key of one of the variables of the time course as returned by the getKey method.

      If no fitting key is found, None is returned.

      The object argument must be an instance of CDataObject, otherwise an AttributeError is raised. 
      """
      if not isinstance(object,CDataObject):
          raise AttributeError("object argument to getConcentrationDataForObject must be an instance of CDataObject")
      result=None
      x=self.getNumVariables()
      for v in range(0,x):
          if self.getKey(v) == object.getKey():
              break
      if v != x:
          result=self.getDataForIndex(v)
      return result

    def getConcentrationDataForObject(self,object):
      """Returns the complete time course concentration data for the variable corresponding to the given object.
      The key of the object must match the key of one of the variables of the time course as returned by the getKey method.

      If no fitting key is found, None is returned.

      The object argument must be an instance of CDataObject, otherwise an AttributeError is raised. 
      """
      if not isinstance(object,CDataObject):
          raise AttributeError("object argument to getConcentrationDataForObject must be an instance of CDataObject")
      result=None
      x=self.getNumVariables()
      for v in range(0,x):
          if self.getKey(v) == object.getKey():
              break
      if v != x:
          result=self.getConcentrationDataForIndex(v)
      return result



# Register CTimeSeries in _COPASI:
_COPASI.CTimeSeries_swigregister(CTimeSeries)
class CTrajectoryProblem(CCopasiProblem):
    r"""Proxy of C++ CTrajectoryProblem class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CTrajectoryProblem self, CDataContainer pParent=static_cast< CDataContainer * >((void *) 0)) -> CTrajectoryProblem
        __init__(CTrajectoryProblem self, CTrajectoryProblem src, CDataContainer pParent) -> CTrajectoryProblem
        """
        _COPASI.CTrajectoryProblem_swiginit(self, _COPASI.new_CTrajectoryProblem(*args))
    __swig_destroy__ = _COPASI.delete_CTrajectoryProblem

    def elevateChildren(self):
        r"""elevateChildren(CTrajectoryProblem self) -> bool"""
        return _COPASI.CTrajectoryProblem_elevateChildren(self)

    def setStepNumber(self, stepNumber):
        r"""setStepNumber(CTrajectoryProblem self, unsigned int const & stepNumber)"""
        return _COPASI.CTrajectoryProblem_setStepNumber(self, stepNumber)

    def getStepNumber(self):
        r"""getStepNumber(CTrajectoryProblem self) -> unsigned int const &"""
        return _COPASI.CTrajectoryProblem_getStepNumber(self)

    def setStepSize(self, stepSize):
        r"""setStepSize(CTrajectoryProblem self, double const & stepSize)"""
        return _COPASI.CTrajectoryProblem_setStepSize(self, stepSize)

    def getAutomaticStepSize(self):
        r"""getAutomaticStepSize(CTrajectoryProblem self) -> bool"""
        return _COPASI.CTrajectoryProblem_getAutomaticStepSize(self)

    def setAutomaticStepSize(self, automaticStepSize):
        r"""setAutomaticStepSize(CTrajectoryProblem self, bool const & automaticStepSize)"""
        return _COPASI.CTrajectoryProblem_setAutomaticStepSize(self, automaticStepSize)

    def getStepSize(self):
        r"""getStepSize(CTrajectoryProblem self) -> double const &"""
        return _COPASI.CTrajectoryProblem_getStepSize(self)

    def setDuration(self, duration):
        r"""setDuration(CTrajectoryProblem self, double const & duration)"""
        return _COPASI.CTrajectoryProblem_setDuration(self, duration)

    def getDuration(self):
        r"""getDuration(CTrajectoryProblem self) -> double const &"""
        return _COPASI.CTrajectoryProblem_getDuration(self)

    def setOutputStartTime(self, endTime):
        r"""setOutputStartTime(CTrajectoryProblem self, double const & endTime)"""
        return _COPASI.CTrajectoryProblem_setOutputStartTime(self, endTime)

    def getOutputStartTime(self):
        r"""getOutputStartTime(CTrajectoryProblem self) -> double const &"""
        return _COPASI.CTrajectoryProblem_getOutputStartTime(self)

    def setTimeSeriesRequested(self, flag):
        r"""setTimeSeriesRequested(CTrajectoryProblem self, bool flag)"""
        return _COPASI.CTrajectoryProblem_setTimeSeriesRequested(self, flag)

    def timeSeriesRequested(self):
        r"""timeSeriesRequested(CTrajectoryProblem self) -> bool"""
        return _COPASI.CTrajectoryProblem_timeSeriesRequested(self)

    def setOutputEvent(self, outputEvent):
        r"""setOutputEvent(CTrajectoryProblem self, bool const & outputEvent)"""
        return _COPASI.CTrajectoryProblem_setOutputEvent(self, outputEvent)

    def getOutputEvent(self):
        r"""getOutputEvent(CTrajectoryProblem self) -> bool const &"""
        return _COPASI.CTrajectoryProblem_getOutputEvent(self)

    def setStartInSteadyState(self, flag):
        r"""setStartInSteadyState(CTrajectoryProblem self, bool flag)"""
        return _COPASI.CTrajectoryProblem_setStartInSteadyState(self, flag)

    def getStartInSteadyState(self):
        r"""getStartInSteadyState(CTrajectoryProblem self) -> bool"""
        return _COPASI.CTrajectoryProblem_getStartInSteadyState(self)

    def setValues(self, *args):
        r"""
        setValues(CTrajectoryProblem self, std::string const & values)
        setValues(CTrajectoryProblem self, FloatStdVector values)
        """
        return _COPASI.CTrajectoryProblem_setValues(self, *args)

    def getValues(self):
        r"""getValues(CTrajectoryProblem self) -> std::set< double,std::less< double >,std::allocator< double > >"""
        return _COPASI.CTrajectoryProblem_getValues(self)

    def getValueString(self):
        r"""getValueString(CTrajectoryProblem self) -> std::string const &"""
        return _COPASI.CTrajectoryProblem_getValueString(self)

    def setUseValues(self, flag):
        r"""setUseValues(CTrajectoryProblem self, bool flag)"""
        return _COPASI.CTrajectoryProblem_setUseValues(self, flag)

    def getUseValues(self):
        r"""getUseValues(CTrajectoryProblem self) -> bool"""
        return _COPASI.CTrajectoryProblem_getUseValues(self)

# Register CTrajectoryProblem in _COPASI:
_COPASI.CTrajectoryProblem_swigregister(CTrajectoryProblem)
class CTrajectoryMethod(CCopasiMethod):
    r"""Proxy of C++ CTrajectoryMethod class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    FAILURE = _COPASI.CTrajectoryMethod_FAILURE
    
    NORMAL = _COPASI.CTrajectoryMethod_NORMAL
    
    ROOT = _COPASI.CTrajectoryMethod_ROOT
    

    def __init__(self, *args):
        r"""
        __init__(CTrajectoryMethod self, CDataContainer pParent, CTaskEnum::Method const & methodType, CTaskEnum::Task const & taskType=timeCourse) -> CTrajectoryMethod
        __init__(CTrajectoryMethod self, CTrajectoryMethod src, CDataContainer pParent) -> CTrajectoryMethod
        """
        _COPASI.CTrajectoryMethod_swiginit(self, _COPASI.new_CTrajectoryMethod(*args))
    __swig_destroy__ = _COPASI.delete_CTrajectoryMethod

    def setProblem(self, problem):
        r"""setProblem(CTrajectoryMethod self, CTrajectoryProblem problem)"""
        return _COPASI.CTrajectoryMethod_setProblem(self, problem)

    def stateChange(self, change):
        r"""stateChange(CTrajectoryMethod self, CMath::StateChange const & change)"""
        return _COPASI.CTrajectoryMethod_stateChange(self, change)

    def step(self, deltaT, final=False):
        r"""step(CTrajectoryMethod self, double const & deltaT, bool const & final=False) -> CTrajectoryMethod::Status"""
        return _COPASI.CTrajectoryMethod_step(self, deltaT, final)

    def start(self):
        r"""start(CTrajectoryMethod self)"""
        return _COPASI.CTrajectoryMethod_start(self)

    def isValidProblem(self, pProblem):
        r"""isValidProblem(CTrajectoryMethod self, CCopasiProblem pProblem) -> bool"""
        return _COPASI.CTrajectoryMethod_isValidProblem(self, pProblem)

    def integrateReducedModel(self):
        r"""integrateReducedModel(CTrajectoryMethod self) -> bool const &"""
        return _COPASI.CTrajectoryMethod_integrateReducedModel(self)

# Register CTrajectoryMethod in _COPASI:
_COPASI.CTrajectoryMethod_swigregister(CTrajectoryMethod)
class CTrajectoryTask(CCopasiTask):
    r"""Proxy of C++ CTrajectoryTask class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CTrajectoryTask self, CDataContainer pParent, CTaskEnum::Task const & type=timeCourse) -> CTrajectoryTask
        __init__(CTrajectoryTask self, CTrajectoryTask src, CDataContainer pParent) -> CTrajectoryTask
        """
        _COPASI.CTrajectoryTask_swiginit(self, _COPASI.new_CTrajectoryTask(*args))
    __swig_destroy__ = _COPASI.delete_CTrajectoryTask

    def processTrajectory(self, useInitialValues):
        r"""processTrajectory(CTrajectoryTask self, bool const & useInitialValues) -> bool"""
        return _COPASI.CTrajectoryTask_processTrajectory(self, useInitialValues)

    def processValues(self, useInitialValues):
        r"""processValues(CTrajectoryTask self, bool const & useInitialValues) -> bool"""
        return _COPASI.CTrajectoryTask_processValues(self, useInitialValues)

    def processStart(self, useInitialValues):
        r"""processStart(CTrajectoryTask self, bool const & useInitialValues) -> bool"""
        return _COPASI.CTrajectoryTask_processStart(self, useInitialValues)

    def processStep(self, nextTime, final=False):
        r"""processStep(CTrajectoryTask self, double const & nextTime, bool const & final=False) -> bool"""
        return _COPASI.CTrajectoryTask_processStep(self, nextTime, final)

    def getTimeSeries(self):
        r"""getTimeSeries(CTrajectoryTask self) -> CTimeSeries"""
        return _COPASI.CTrajectoryTask_getTimeSeries(self)

    def getValidMethods(self):
        r"""getValidMethods(CTrajectoryTask self) -> IntStdVector"""
        return _COPASI.CTrajectoryTask_getValidMethods(self)

# Register CTrajectoryTask in _COPASI:
_COPASI.CTrajectoryTask_swigregister(CTrajectoryTask)
class COutputOption(object):
    r"""Proxy of C++ COutputOption class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    name = property(_COPASI.COutputOption_name_get, _COPASI.COutputOption_name_set, doc=r"""name : std::string""")
    enabled = property(_COPASI.COutputOption_enabled_get, _COPASI.COutputOption_enabled_set, doc=r"""enabled : bool""")
    description = property(_COPASI.COutputOption_description_get, _COPASI.COutputOption_description_set, doc=r"""description : std::string""")

    def __init__(self):
        r"""__init__(COutputOption self) -> COutputOption"""
        _COPASI.COutputOption_swiginit(self, _COPASI.new_COutputOption())
    __swig_destroy__ = _COPASI.delete_COutputOption

# Register COutputOption in _COPASI:
_COPASI.COutputOption_swigregister(COutputOption)
class CDefaultOutputDescription(object):
    r"""Proxy of C++ CDefaultOutputDescription class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(CDefaultOutputDescription self) -> CDefaultOutputDescription"""
        _COPASI.CDefaultOutputDescription_swiginit(self, _COPASI.new_CDefaultOutputDescription())
    name = property(_COPASI.CDefaultOutputDescription_name_get, _COPASI.CDefaultOutputDescription_name_set, doc=r"""name : std::string""")
    description = property(_COPASI.CDefaultOutputDescription_description_get, _COPASI.CDefaultOutputDescription_description_set, doc=r"""description : std::string""")
    isPlot = property(_COPASI.CDefaultOutputDescription_isPlot_get, _COPASI.CDefaultOutputDescription_isPlot_set, doc=r"""isPlot : bool""")
    mTaskType = property(_COPASI.CDefaultOutputDescription_mTaskType_get, _COPASI.CDefaultOutputDescription_mTaskType_set, doc=r"""mTaskType : CTaskEnum::Task""")
    mSecondaryTask = property(_COPASI.CDefaultOutputDescription_mSecondaryTask_get, _COPASI.CDefaultOutputDescription_mSecondaryTask_set, doc=r"""mSecondaryTask : CTaskEnum::Task""")
    options = property(_COPASI.CDefaultOutputDescription_options_get, _COPASI.CDefaultOutputDescription_options_set, doc=r"""options : std::vector<(COutputOption,std::allocator<(COutputOption)>)>""")
    __swig_destroy__ = _COPASI.delete_CDefaultOutputDescription

# Register CDefaultOutputDescription in _COPASI:
_COPASI.CDefaultOutputDescription_swigregister(CDefaultOutputDescription)
class COutputAssistant(object):
    r"""Proxy of C++ COutputAssistant class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getListOfDefaultOutputDescriptions(task=None):
        r"""getListOfDefaultOutputDescriptions(CCopasiTask task=None) -> IntStdVector"""
        return _COPASI.COutputAssistant_getListOfDefaultOutputDescriptions(task)

    @staticmethod
    def getDefaultReportIndex(problem):
        r"""getDefaultReportIndex(CCopasiProblem problem) -> int"""
        return _COPASI.COutputAssistant_getDefaultReportIndex(problem)

    @staticmethod
    def getItemName(id):
        r"""getItemName(int id) -> std::string const &"""
        return _COPASI.COutputAssistant_getItemName(id)

    @staticmethod
    def getItem(id):
        r"""getItem(int id) -> CDefaultOutputDescription"""
        return _COPASI.COutputAssistant_getItem(id)

    @staticmethod
    def findItemByName(name, isPlot=True):
        r"""findItemByName(std::string const & name, bool isPlot=True) -> int"""
        return _COPASI.COutputAssistant_findItemByName(name, isPlot)

    @staticmethod
    def createDefaultOutput(id, task, pDataModel, activate=True, pOptions=None):
        r"""createDefaultOutput(int id, CCopasiTask task, CDataModel pDataModel, bool activate=True, std::vector< COutputOption,std::allocator< COutputOption > > const * pOptions=None) -> CDataObject"""
        return _COPASI.COutputAssistant_createDefaultOutput(id, task, pDataModel, activate, pOptions)

    def __init__(self):
        r"""__init__(COutputAssistant self) -> COutputAssistant"""
        _COPASI.COutputAssistant_swiginit(self, _COPASI.new_COutputAssistant())
    __swig_destroy__ = _COPASI.delete_COutputAssistant

# Register COutputAssistant in _COPASI:
_COPASI.COutputAssistant_swigregister(COutputAssistant)
class CSteadyStateProblem(CCopasiProblem):
    r"""Proxy of C++ CSteadyStateProblem class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CSteadyStateProblem self, CDataContainer pParent=static_cast< CDataContainer * >((void *) 0)) -> CSteadyStateProblem
        __init__(CSteadyStateProblem self, CSteadyStateProblem src, CDataContainer pParent) -> CSteadyStateProblem
        """
        _COPASI.CSteadyStateProblem_swiginit(self, _COPASI.new_CSteadyStateProblem(*args))
    __swig_destroy__ = _COPASI.delete_CSteadyStateProblem

    def isJacobianRequested(self):
        r"""isJacobianRequested(CSteadyStateProblem self) -> bool"""
        return _COPASI.CSteadyStateProblem_isJacobianRequested(self)

    def isStabilityAnalysisRequested(self):
        r"""isStabilityAnalysisRequested(CSteadyStateProblem self) -> bool"""
        return _COPASI.CSteadyStateProblem_isStabilityAnalysisRequested(self)

    def setJacobianRequested(self, jacobianRequested):
        r"""setJacobianRequested(CSteadyStateProblem self, bool jacobianRequested)"""
        return _COPASI.CSteadyStateProblem_setJacobianRequested(self, jacobianRequested)

    def setStabilityAnalysisRequested(self, stabilityAnalysisRequested):
        r"""setStabilityAnalysisRequested(CSteadyStateProblem self, bool stabilityAnalysisRequested)"""
        return _COPASI.CSteadyStateProblem_setStabilityAnalysisRequested(self, stabilityAnalysisRequested)

# Register CSteadyStateProblem in _COPASI:
_COPASI.CSteadyStateProblem_swigregister(CSteadyStateProblem)
class CSteadyStateMethod(CCopasiMethod):
    r"""Proxy of C++ CSteadyStateMethod class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    notFound = _COPASI.CSteadyStateMethod_notFound
    
    found = _COPASI.CSteadyStateMethod_found
    
    foundEquilibrium = _COPASI.CSteadyStateMethod_foundEquilibrium
    
    foundNegative = _COPASI.CSteadyStateMethod_foundNegative
    

    def __init__(self, src, pParent):
        r"""__init__(CSteadyStateMethod self, CSteadyStateMethod src, CDataContainer pParent) -> CSteadyStateMethod"""
        _COPASI.CSteadyStateMethod_swiginit(self, _COPASI.new_CSteadyStateMethod(src, pParent))
    __swig_destroy__ = _COPASI.delete_CSteadyStateMethod

    def elevateChildren(self):
        r"""elevateChildren(CSteadyStateMethod self) -> bool"""
        return _COPASI.CSteadyStateMethod_elevateChildren(self)

    def isValidProblem(self, pProblem):
        r"""isValidProblem(CSteadyStateMethod self, CCopasiProblem pProblem) -> bool"""
        return _COPASI.CSteadyStateMethod_isValidProblem(self, pProblem)

    def initialize(self, pProblem):
        r"""initialize(CSteadyStateMethod self, CSteadyStateProblem pProblem) -> bool"""
        return _COPASI.CSteadyStateMethod_initialize(self, pProblem)

    def doJacobian(self, jacobian, jacobianX):
        r"""doJacobian(CSteadyStateMethod self, FloatMatrix jacobian, FloatMatrix jacobianX)"""
        return _COPASI.CSteadyStateMethod_doJacobian(self, jacobian, jacobianX)

    def getStabilityResolution(self):
        r"""getStabilityResolution(CSteadyStateMethod self) -> double"""
        return _COPASI.CSteadyStateMethod_getStabilityResolution(self)

    def getMethodLog(self):
        r"""getMethodLog(CSteadyStateMethod self) -> std::string"""
        return _COPASI.CSteadyStateMethod_getMethodLog(self)

# Register CSteadyStateMethod in _COPASI:
_COPASI.CSteadyStateMethod_swigregister(CSteadyStateMethod)
class CSteadyStateTask(CCopasiTask):
    r"""Proxy of C++ CSteadyStateTask class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CSteadyStateTask self, CDataContainer pParent, CTaskEnum::Task const & type=steadyState) -> CSteadyStateTask
        __init__(CSteadyStateTask self, CSteadyStateTask src, CDataContainer pParent) -> CSteadyStateTask
        """
        _COPASI.CSteadyStateTask_swiginit(self, _COPASI.new_CSteadyStateTask(*args))
    __swig_destroy__ = _COPASI.delete_CSteadyStateTask

    def updateMatrices(self):
        r"""updateMatrices(CSteadyStateTask self) -> bool"""
        return _COPASI.CSteadyStateTask_updateMatrices(self)

    def restore(self, updateModel=True):
        r"""restore(CSteadyStateTask self, bool const & updateModel=True) -> bool"""
        return _COPASI.CSteadyStateTask_restore(self, updateModel)

    def getState(self):
        r"""getState(CSteadyStateTask self) -> FloatVectorCore"""
        return _COPASI.CSteadyStateTask_getState(self)

    def getJacobian(self):
        r"""getJacobian(CSteadyStateTask self) -> FloatMatrix"""
        return _COPASI.CSteadyStateTask_getJacobian(self)

    def getJacobianAnnotated(self):
        r"""getJacobianAnnotated(CSteadyStateTask self) -> CDataArray"""
        return _COPASI.CSteadyStateTask_getJacobianAnnotated(self)

    def getJacobianReduced(self):
        r"""getJacobianReduced(CSteadyStateTask self) -> FloatMatrix"""
        return _COPASI.CSteadyStateTask_getJacobianReduced(self)

    def getJacobianXAnnotated(self):
        r"""getJacobianXAnnotated(CSteadyStateTask self) -> CDataArray"""
        return _COPASI.CSteadyStateTask_getJacobianXAnnotated(self)

    def getEigenValues(self):
        r"""getEigenValues(CSteadyStateTask self) -> CEigen"""
        return _COPASI.CSteadyStateTask_getEigenValues(self)

    def getEigenValuesReduced(self):
        r"""getEigenValuesReduced(CSteadyStateTask self) -> CEigen"""
        return _COPASI.CSteadyStateTask_getEigenValuesReduced(self)

    def getResult(self):
        r"""getResult(CSteadyStateTask self) -> CSteadyStateMethod::ReturnCode const &"""
        return _COPASI.CSteadyStateTask_getResult(self)

# Register CSteadyStateTask in _COPASI:
_COPASI.CSteadyStateTask_swigregister(CSteadyStateTask)
class CNewtonMethod(CSteadyStateMethod):
    r"""Proxy of C++ CNewtonMethod class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    eTargetCriterion_DistanceAndRate = _COPASI.CNewtonMethod_eTargetCriterion_DistanceAndRate
    
    eTargetCriterion_Distance = _COPASI.CNewtonMethod_eTargetCriterion_Distance
    
    eTargetCriterion_Rate = _COPASI.CNewtonMethod_eTargetCriterion_Rate
    
    eTargetCriterion___SIZE = _COPASI.CNewtonMethod_eTargetCriterion___SIZE
    

    def __init__(self, *args):
        r"""
        __init__(CNewtonMethod self, CDataContainer pParent, CTaskEnum::Method const & methodType=Newton, CTaskEnum::Task const & taskType=steadyState) -> CNewtonMethod
        __init__(CNewtonMethod self, CNewtonMethod src, CDataContainer pParent) -> CNewtonMethod
        """
        _COPASI.CNewtonMethod_swiginit(self, _COPASI.new_CNewtonMethod(*args))
    __swig_destroy__ = _COPASI.delete_CNewtonMethod

    def elevateChildren(self):
        r"""elevateChildren(CNewtonMethod self) -> bool"""
        return _COPASI.CNewtonMethod_elevateChildren(self)

    def processInternal(self):
        r"""processInternal(CNewtonMethod self) -> CSteadyStateMethod::ReturnCode"""
        return _COPASI.CNewtonMethod_processInternal(self)

    def isSteadyState(self, value):
        r"""isSteadyState(CNewtonMethod self, double const & value) -> bool"""
        return _COPASI.CNewtonMethod_isSteadyState(self, value)

    def targetFunction(self):
        r"""targetFunction(CNewtonMethod self) -> double"""
        return _COPASI.CNewtonMethod_targetFunction(self)

    def isValidProblem(self, pProblem):
        r"""isValidProblem(CNewtonMethod self, CCopasiProblem pProblem) -> bool"""
        return _COPASI.CNewtonMethod_isValidProblem(self, pProblem)

    def initialize(self, pProblem):
        r"""initialize(CNewtonMethod self, CSteadyStateProblem pProblem) -> bool"""
        return _COPASI.CNewtonMethod_initialize(self, pProblem)

# Register CNewtonMethod in _COPASI:
_COPASI.CNewtonMethod_swigregister(CNewtonMethod)
CNewtonMethod.TargetCriterion = _COPASI.cvar.CNewtonMethod_TargetCriterion

class CScanItem(object, metaclass=AutoProperty):
    r"""Proxy of C++ CScanItem class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def createScanItemFromParameterGroup(si, rg):
        r"""createScanItemFromParameterGroup(CCopasiParameterGroup si, CRandom rg) -> CScanItem"""
        return _COPASI.CScanItem_createScanItemFromParameterGroup(si, rg)

    def getNumSteps(self):
        r"""getNumSteps(CScanItem self) -> size_t"""
        return _COPASI.CScanItem_getNumSteps(self)

    def restoreValue(self):
        r"""restoreValue(CScanItem self)"""
        return _COPASI.CScanItem_restoreValue(self)

    def storeValue(self):
        r"""storeValue(CScanItem self)"""
        return _COPASI.CScanItem_storeValue(self)

    def reset(self):
        r"""reset(CScanItem self)"""
        return _COPASI.CScanItem_reset(self)

    def isFinished(self):
        r"""isFinished(CScanItem self) -> bool"""
        return _COPASI.CScanItem_isFinished(self)

    def step(self):
        r"""step(CScanItem self)"""
        return _COPASI.CScanItem_step(self)

    def isNesting(self):
        r"""isNesting(CScanItem self) -> bool"""
        return _COPASI.CScanItem_isNesting(self)
    __swig_destroy__ = _COPASI.delete_CScanItem

    def isValidScanItem(self, continueFromCurrentState):
        r"""isValidScanItem(CScanItem self, bool const & continueFromCurrentState) -> bool"""
        return _COPASI.CScanItem_isValidScanItem(self, continueFromCurrentState)

    def getObject(self):
        r"""getObject(CScanItem self) -> CObjectInterface"""
        return _COPASI.CScanItem_getObject(self)

    __metaclass__ = AutoProperty


# Register CScanItem in _COPASI:
_COPASI.CScanItem_swigregister(CScanItem)
class CScanItemRepeat(CScanItem):
    r"""Proxy of C++ CScanItemRepeat class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, si):
        r"""__init__(CScanItemRepeat self, CCopasiParameterGroup si) -> CScanItemRepeat"""
        _COPASI.CScanItemRepeat_swiginit(self, _COPASI.new_CScanItemRepeat(si))

    def step(self):
        r"""step(CScanItemRepeat self)"""
        return _COPASI.CScanItemRepeat_step(self)
    __swig_destroy__ = _COPASI.delete_CScanItemRepeat

    def isValidScanItem(self, continueFromCurrentState):
        r"""isValidScanItem(CScanItemRepeat self, bool const & continueFromCurrentState) -> bool"""
        return _COPASI.CScanItemRepeat_isValidScanItem(self, continueFromCurrentState)

# Register CScanItemRepeat in _COPASI:
_COPASI.CScanItemRepeat_swigregister(CScanItemRepeat)
class CScanItemParameterSet(CScanItem):
    r"""Proxy of C++ CScanItemParameterSet class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, si):
        r"""__init__(CScanItemParameterSet self, CCopasiParameterGroup si) -> CScanItemParameterSet"""
        _COPASI.CScanItemParameterSet_swiginit(self, _COPASI.new_CScanItemParameterSet(si))

    def step(self):
        r"""step(CScanItemParameterSet self)"""
        return _COPASI.CScanItemParameterSet_step(self)
    __swig_destroy__ = _COPASI.delete_CScanItemParameterSet

    def isValidScanItem(self, continueFromCurrentState):
        r"""isValidScanItem(CScanItemParameterSet self, bool const & continueFromCurrentState) -> bool"""
        return _COPASI.CScanItemParameterSet_isValidScanItem(self, continueFromCurrentState)

# Register CScanItemParameterSet in _COPASI:
_COPASI.CScanItemParameterSet_swigregister(CScanItemParameterSet)
class CScanItemLinear(CScanItem):
    r"""Proxy of C++ CScanItemLinear class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, si):
        r"""__init__(CScanItemLinear self, CCopasiParameterGroup si) -> CScanItemLinear"""
        _COPASI.CScanItemLinear_swiginit(self, _COPASI.new_CScanItemLinear(si))

    def step(self):
        r"""step(CScanItemLinear self)"""
        return _COPASI.CScanItemLinear_step(self)
    __swig_destroy__ = _COPASI.delete_CScanItemLinear

    def isValidScanItem(self, continueFromCurrentState):
        r"""isValidScanItem(CScanItemLinear self, bool const & continueFromCurrentState) -> bool"""
        return _COPASI.CScanItemLinear_isValidScanItem(self, continueFromCurrentState)

# Register CScanItemLinear in _COPASI:
_COPASI.CScanItemLinear_swigregister(CScanItemLinear)
class CScanItemRandom(CScanItem):
    r"""Proxy of C++ CScanItemRandom class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, si, rg):
        r"""__init__(CScanItemRandom self, CCopasiParameterGroup si, CRandom rg) -> CScanItemRandom"""
        _COPASI.CScanItemRandom_swiginit(self, _COPASI.new_CScanItemRandom(si, rg))
    __swig_destroy__ = _COPASI.delete_CScanItemRandom

    def step(self):
        r"""step(CScanItemRandom self)"""
        return _COPASI.CScanItemRandom_step(self)

    def isNesting(self):
        r"""isNesting(CScanItemRandom self) -> bool"""
        return _COPASI.CScanItemRandom_isNesting(self)

# Register CScanItemRandom in _COPASI:
_COPASI.CScanItemRandom_swigregister(CScanItemRandom)
class CScanMethod(CCopasiMethod):
    r"""Proxy of C++ CScanMethod class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CScanMethod self, CDataContainer pParent, CTaskEnum::Method const & methodType=scanMethod, CTaskEnum::Task const & taskType=scan) -> CScanMethod
        __init__(CScanMethod self, CScanMethod src, CDataContainer pParent) -> CScanMethod
        """
        _COPASI.CScanMethod_swiginit(self, _COPASI.new_CScanMethod(*args))
    __swig_destroy__ = _COPASI.delete_CScanMethod

    def setProblem(self, problem):
        r"""setProblem(CScanMethod self, CScanProblem problem)"""
        return _COPASI.CScanMethod_setProblem(self, problem)

    def scan(self):
        r"""scan(CScanMethod self) -> bool"""
        return _COPASI.CScanMethod_scan(self)

    def getTotalNumberOfSteps(self):
        r"""getTotalNumberOfSteps(CScanMethod self) -> size_t"""
        return _COPASI.CScanMethod_getTotalNumberOfSteps(self)

    def isValidProblem(self, pProblem):
        r"""isValidProblem(CScanMethod self, CCopasiProblem pProblem) -> bool"""
        return _COPASI.CScanMethod_isValidProblem(self, pProblem)

# Register CScanMethod in _COPASI:
_COPASI.CScanMethod_swigregister(CScanMethod)
class CScanProblem(CCopasiProblem):
    r"""Proxy of C++ CScanProblem class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    SCAN_REPEAT = _COPASI.CScanProblem_SCAN_REPEAT
    
    SCAN_LINEAR = _COPASI.CScanProblem_SCAN_LINEAR
    
    SCAN_RANDOM = _COPASI.CScanProblem_SCAN_RANDOM
    
    SCAN_BREAK = _COPASI.CScanProblem_SCAN_BREAK
    
    SCAN_PARAMETER_SET = _COPASI.CScanProblem_SCAN_PARAMETER_SET
    

    def __init__(self, *args):
        r"""
        __init__(CScanProblem self, CDataContainer pParent=static_cast< CDataContainer * >((void *) 0)) -> CScanProblem
        __init__(CScanProblem self, CScanProblem src, CDataContainer pParent) -> CScanProblem
        """
        _COPASI.CScanProblem_swiginit(self, _COPASI.new_CScanProblem(*args))
    __swig_destroy__ = _COPASI.delete_CScanProblem

    def getSubTask(self):
        r"""getSubTask(CScanProblem self) -> CCopasiTask"""
        return _COPASI.CScanProblem_getSubTask(self)

    def setSubtask(self, type):
        r"""setSubtask(CScanProblem self, CTaskEnum::Task type)"""
        return _COPASI.CScanProblem_setSubtask(self, type)

    def getSubtask(self):
        r"""getSubtask(CScanProblem self) -> CTaskEnum::Task"""
        return _COPASI.CScanProblem_getSubtask(self)

    def setOutputInSubtask(self, ois):
        r"""setOutputInSubtask(CScanProblem self, bool ois)"""
        return _COPASI.CScanProblem_setOutputInSubtask(self, ois)

    def getOutputInSubtask(self):
        r"""getOutputInSubtask(CScanProblem self) -> bool const &"""
        return _COPASI.CScanProblem_getOutputInSubtask(self)

    def setContinueFromCurrentState(self, aic):
        r"""setContinueFromCurrentState(CScanProblem self, bool aic)"""
        return _COPASI.CScanProblem_setContinueFromCurrentState(self, aic)

    def getContinueFromCurrentState(self):
        r"""getContinueFromCurrentState(CScanProblem self) -> bool"""
        return _COPASI.CScanProblem_getContinueFromCurrentState(self)

    def getContinueOnError(self):
        r"""getContinueOnError(CScanProblem self) -> bool"""
        return _COPASI.CScanProblem_getContinueOnError(self)

    def setContinueOnError(self, coe):
        r"""setContinueOnError(CScanProblem self, bool coe)"""
        return _COPASI.CScanProblem_setContinueOnError(self, coe)

    def getNumberOfScanItems(self):
        r"""getNumberOfScanItems(CScanProblem self) -> size_t"""
        return _COPASI.CScanProblem_getNumberOfScanItems(self)

    def getScanItem(self, index):
        r"""getScanItem(CScanProblem self, size_t index) -> CCopasiParameterGroup"""
        return _COPASI.CScanProblem_getScanItem(self, index)

    def addScanItem(self, type, steps=5, obj=None):
        r"""addScanItem(CScanProblem self, CScanProblem::Type type, size_t steps=5, CDataObject obj=None) -> CCopasiParameterGroup"""
        return _COPASI.CScanProblem_addScanItem(self, type, steps, obj)

    def removeScanItem(self, index):
        r"""removeScanItem(CScanProblem self, size_t const & index) -> bool"""
        return _COPASI.CScanProblem_removeScanItem(self, index)

    @staticmethod
    def createScanItem(type, steps=5, obj=None):
        r"""createScanItem(CScanProblem::Type type, size_t steps=5, CDataObject obj=None) -> CCopasiParameterGroup"""
        return _COPASI.CScanProblem_createScanItem(type, steps, obj)

    def clearScanItems(self):
        r"""clearScanItems(CScanProblem self)"""
        return _COPASI.CScanProblem_clearScanItems(self)

    def fixBuild81(self):
        r"""fixBuild81(CScanProblem self)"""
        return _COPASI.CScanProblem_fixBuild81(self)

# Register CScanProblem in _COPASI:
_COPASI.CScanProblem_swigregister(CScanProblem)
class CScanTask(CCopasiTask):
    r"""Proxy of C++ CScanTask class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CScanTask self, CDataContainer pParent, CTaskEnum::Task const & type=scan) -> CScanTask
        __init__(CScanTask self, CScanTask src, CDataContainer pParent) -> CScanTask
        """
        _COPASI.CScanTask_swiginit(self, _COPASI.new_CScanTask(*args))
    __swig_destroy__ = _COPASI.delete_CScanTask

    def cleanup(self):
        r"""cleanup(CScanTask self)"""
        return _COPASI.CScanTask_cleanup(self)

    def processCallback(self):
        r"""processCallback(CScanTask self) -> bool"""
        return _COPASI.CScanTask_processCallback(self)

    def outputSeparatorCallback(self, isLast=False):
        r"""outputSeparatorCallback(CScanTask self, bool isLast=False) -> bool"""
        return _COPASI.CScanTask_outputSeparatorCallback(self, isLast)

    def fixBuild81(self):
        r"""fixBuild81(CScanTask self)"""
        return _COPASI.CScanTask_fixBuild81(self)

# Register CScanTask in _COPASI:
_COPASI.CScanTask_swigregister(CScanTask)
class CLyapMethod(CCopasiMethod):
    r"""Proxy of C++ CLyapMethod class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def isValidSubType(subType):
        r"""isValidSubType(CTaskEnum::Method const & subType) -> bool"""
        return _COPASI.CLyapMethod_isValidSubType(subType)
    __swig_destroy__ = _COPASI.delete_CLyapMethod

    def setProblem(self, problem):
        r"""setProblem(CLyapMethod self, CLyapProblem problem)"""
        return _COPASI.CLyapMethod_setProblem(self, problem)

    def step(self, deltaT):
        r"""step(CLyapMethod self, double const & deltaT) -> double"""
        return _COPASI.CLyapMethod_step(self, deltaT)

    def calculate(self):
        r"""calculate(CLyapMethod self) -> bool"""
        return _COPASI.CLyapMethod_calculate(self)

    def start(self, initialState):
        r"""start(CLyapMethod self, FloatVectorCore initialState)"""
        return _COPASI.CLyapMethod_start(self, initialState)

    def isValidProblem(self, pProblem):
        r"""isValidProblem(CLyapMethod self, CCopasiProblem pProblem) -> bool"""
        return _COPASI.CLyapMethod_isValidProblem(self, pProblem)

# Register CLyapMethod in _COPASI:
_COPASI.CLyapMethod_swigregister(CLyapMethod)
class CLyapProblem(CCopasiProblem):
    r"""Proxy of C++ CLyapProblem class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CLyapProblem self, CDataContainer pParent=static_cast< CDataContainer * >((void *) 0)) -> CLyapProblem
        __init__(CLyapProblem self, CLyapProblem src, CDataContainer pParent) -> CLyapProblem
        """
        _COPASI.CLyapProblem_swiginit(self, _COPASI.new_CLyapProblem(*args))
    __swig_destroy__ = _COPASI.delete_CLyapProblem

    def elevateChildren(self):
        r"""elevateChildren(CLyapProblem self) -> bool"""
        return _COPASI.CLyapProblem_elevateChildren(self)

    def setExponentNumber(self, number):
        r"""setExponentNumber(CLyapProblem self, unsigned int const & number)"""
        return _COPASI.CLyapProblem_setExponentNumber(self, number)

    def getExponentNumber(self):
        r"""getExponentNumber(CLyapProblem self) -> unsigned int const &"""
        return _COPASI.CLyapProblem_getExponentNumber(self)

    def setTransientTime(self, endTime):
        r"""setTransientTime(CLyapProblem self, double const & endTime)"""
        return _COPASI.CLyapProblem_setTransientTime(self, endTime)

    def getTransientTime(self):
        r"""getTransientTime(CLyapProblem self) -> double const &"""
        return _COPASI.CLyapProblem_getTransientTime(self)

    def setDivergenceRequested(self, flag):
        r"""setDivergenceRequested(CLyapProblem self, bool flag)"""
        return _COPASI.CLyapProblem_setDivergenceRequested(self, flag)

    def divergenceRequested(self):
        r"""divergenceRequested(CLyapProblem self) -> bool"""
        return _COPASI.CLyapProblem_divergenceRequested(self)

# Register CLyapProblem in _COPASI:
_COPASI.CLyapProblem_swigregister(CLyapProblem)
class CLyapTask(CCopasiTask):
    r"""Proxy of C++ CLyapTask class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CLyapTask self, CDataContainer pParent, CTaskEnum::Task const & type=lyap) -> CLyapTask
        __init__(CLyapTask self, CLyapTask src, CDataContainer pParent) -> CLyapTask
        """
        _COPASI.CLyapTask_swiginit(self, _COPASI.new_CLyapTask(*args))
    __swig_destroy__ = _COPASI.delete_CLyapTask

    def exponents(self):
        r"""exponents(CLyapTask self) -> FloatVector"""
        return _COPASI.CLyapTask_exponents(self)

    def sumOfExponents(self):
        r"""sumOfExponents(CLyapTask self) -> double const &"""
        return _COPASI.CLyapTask_sumOfExponents(self)

    def averageDivergence(self):
        r"""averageDivergence(CLyapTask self) -> double const &"""
        return _COPASI.CLyapTask_averageDivergence(self)

    def resultAvailable(self):
        r"""resultAvailable(CLyapTask self) -> bool"""
        return _COPASI.CLyapTask_resultAvailable(self)

    def resultHasDivergence(self):
        r"""resultHasDivergence(CLyapTask self) -> bool"""
        return _COPASI.CLyapTask_resultHasDivergence(self)

    def modelVariablesInResult(self):
        r"""modelVariablesInResult(CLyapTask self) -> size_t"""
        return _COPASI.CLyapTask_modelVariablesInResult(self)

    def numberOfExponentsCalculated(self):
        r"""numberOfExponentsCalculated(CLyapTask self) -> size_t"""
        return _COPASI.CLyapTask_numberOfExponentsCalculated(self)

    def methodCallback(self, percentage, onlyProgress):
        r"""methodCallback(CLyapTask self, double const & percentage, bool onlyProgress) -> bool"""
        return _COPASI.CLyapTask_methodCallback(self, percentage, onlyProgress)

# Register CLyapTask in _COPASI:
_COPASI.CLyapTask_swigregister(CLyapTask)
class COptItem(CCopasiParameterGroup):
    r"""Proxy of C++ COptItem class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(COptItem self, CDataContainer pParent, std::string const & name="OptimizationItem") -> COptItem
        __init__(COptItem self, COptItem src, CDataContainer pParent) -> COptItem
        __init__(COptItem self, CCopasiParameterGroup group, CDataContainer pParent) -> COptItem
        """
        _COPASI.COptItem_swiginit(self, _COPASI.new_COptItem(*args))
    __swig_destroy__ = _COPASI.delete_COptItem

    def calculateValue(self):
        r"""calculateValue(COptItem self)"""
        return _COPASI.COptItem_calculateValue(self)

    def setObjectCN(self, objectCN):
        r"""setObjectCN(COptItem self, CCommonName objectCN) -> bool"""
        return _COPASI.COptItem_setObjectCN(self, objectCN)

    def getObjectCN(self):
        r"""getObjectCN(COptItem self) -> CCommonName"""
        return _COPASI.COptItem_getObjectCN(self)

    def getObject(self):
        r"""getObject(COptItem self) -> CObjectInterface"""
        return _COPASI.COptItem_getObject(self)

    def getObjectDisplayName(self):
        r"""getObjectDisplayName(COptItem self) -> std::string"""
        return _COPASI.COptItem_getObjectDisplayName(self)

    def setLowerBound(self, lowerBound):
        r"""setLowerBound(COptItem self, CCommonName lowerBound) -> bool"""
        return _COPASI.COptItem_setLowerBound(self, lowerBound)

    def getLowerBound(self):
        r"""getLowerBound(COptItem self) -> std::string const"""
        return _COPASI.COptItem_getLowerBound(self)

    def setUpperBound(self, upperBound):
        r"""setUpperBound(COptItem self, CCommonName upperBound) -> bool"""
        return _COPASI.COptItem_setUpperBound(self, upperBound)

    def getUpperBound(self):
        r"""getUpperBound(COptItem self) -> std::string const"""
        return _COPASI.COptItem_getUpperBound(self)

    @staticmethod
    def isValid(*args):
        r"""
        isValid() -> bool
        isValid(CCopasiParameterGroup group) -> bool
        """
        return _COPASI.COptItem_isValid(*args)

    def compile(self, *args):
        r"""compile(COptItem self, ContainerList listOfContainer=EmptyList) -> bool"""
        return _COPASI.COptItem_compile(self, *args)

    def getConstraintViolation(self):
        r"""getConstraintViolation(COptItem self) -> double"""
        return _COPASI.COptItem_getConstraintViolation(self)

    def checkConstraint(self, *args):
        r"""
        checkConstraint(COptItem self) -> int
        checkConstraint(COptItem self, double const & value) -> int
        """
        return _COPASI.COptItem_checkConstraint(self, *args)

    def checkLowerBound(self, value):
        r"""checkLowerBound(COptItem self, double const & value) -> bool"""
        return _COPASI.COptItem_checkLowerBound(self, value)

    def checkUpperBound(self, value):
        r"""checkUpperBound(COptItem self, double const & value) -> bool"""
        return _COPASI.COptItem_checkUpperBound(self, value)

    def checkInterval(self):
        r"""checkInterval(COptItem self) -> bool"""
        return _COPASI.COptItem_checkInterval(self)

    def checkIsInitialValue(self):
        r"""checkIsInitialValue(COptItem self) -> bool"""
        return _COPASI.COptItem_checkIsInitialValue(self)

    def updatePrerequisites(self, influencingIntervals):
        r"""updatePrerequisites(COptItem self, OptItemStdVector influencingIntervals)"""
        return _COPASI.COptItem_updatePrerequisites(self, influencingIntervals)

    def setStartValue(self, value):
        r"""setStartValue(COptItem self, double const & value) -> bool"""
        return _COPASI.COptItem_setStartValue(self, value)

    def getStartValue(self):
        r"""getStartValue(COptItem self) -> double const &"""
        return _COPASI.COptItem_getStartValue(self)

    def getLastStartValue(self):
        r"""getLastStartValue(COptItem self) -> double const &"""
        return _COPASI.COptItem_getLastStartValue(self)

    def rememberStartValue(self):
        r"""rememberStartValue(COptItem self)"""
        return _COPASI.COptItem_rememberStartValue(self)

    def getRandomValue(self, Random):
        r"""getRandomValue(COptItem self, CRandom Random) -> double"""
        return _COPASI.COptItem_getRandomValue(self, Random)

    def influencesIntervals(self):
        r"""influencesIntervals(COptItem self) -> bool"""
        return _COPASI.COptItem_influencesIntervals(self)

    def setIntervalUpdateSequence(self, updateSequence):
        r"""setIntervalUpdateSequence(COptItem self, CCore::CUpdateSequence const & updateSequence)"""
        return _COPASI.COptItem_setIntervalUpdateSequence(self, updateSequence)

    def getIntervalUpdateSequence(self):
        r"""getIntervalUpdateSequence(COptItem self) -> CCore::CUpdateSequence const &"""
        return _COPASI.COptItem_getIntervalUpdateSequence(self)

    def addDependentItem(self, pDependentItem):
        r"""addDependentItem(COptItem self, COptItem pDependentItem)"""
        return _COPASI.COptItem_addDependentItem(self, pDependentItem)

    def getDependentItems(self):
        r"""getDependentItems(COptItem self) -> std::set< COptItem *,std::less< COptItem * >,std::allocator< COptItem * > > const &"""
        return _COPASI.COptItem_getDependentItems(self)

    def getObjectValue(self):
        r"""getObjectValue(COptItem self) -> double"""
        return _COPASI.COptItem_getObjectValue(self)

    def getLowerBoundValue(self):
        r"""getLowerBoundValue(COptItem self) -> double"""
        return _COPASI.COptItem_getLowerBoundValue(self)

    def getUpperBoundValue(self):
        r"""getUpperBoundValue(COptItem self) -> double"""
        return _COPASI.COptItem_getUpperBoundValue(self)

    def asFitItem(self):
        r"""asFitItem(COptItem self) -> CFitItem"""
        return _COPASI.COptItem_asFitItem(self)

    def asFitConstraint(self):
        r"""asFitConstraint(COptItem self) -> CFitConstraint"""
        return _COPASI.COptItem_asFitConstraint(self)

# Register COptItem in _COPASI:
_COPASI.COptItem_swigregister(COptItem)
class COptLogItem(object):
    r"""Proxy of C++ COptLogItem class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    STD_start = _COPASI.COptLogItem_STD_start
    
    STD_start_nodoc = _COPASI.COptLogItem_STD_start_nodoc
    
    STD_early_stop = _COPASI.COptLogItem_STD_early_stop
    
    STD_finish = _COPASI.COptLogItem_STD_finish
    
    STD_finish_x_of_max_iter = _COPASI.COptLogItem_STD_finish_x_of_max_iter
    
    STD_finish_x_of_max_gener = _COPASI.COptLogItem_STD_finish_x_of_max_gener
    
    STD_finish_temp_info = _COPASI.COptLogItem_STD_finish_temp_info
    
    STD_initial_point_out_of_domain = _COPASI.COptLogItem_STD_initial_point_out_of_domain
    
    PS_usrdef_error_swarm_size = _COPASI.COptLogItem_PS_usrdef_error_swarm_size
    
    PS_info_informants = _COPASI.COptLogItem_PS_info_informants
    
    PS_no_particle_improved = _COPASI.COptLogItem_PS_no_particle_improved
    
    PS_stddev_lower_than_tol_termination = _COPASI.COptLogItem_PS_stddev_lower_than_tol_termination
    
    SA_steps_per_temp = _COPASI.COptLogItem_SA_steps_per_temp
    
    SA_fval_progress_lower_than_tol = _COPASI.COptLogItem_SA_fval_progress_lower_than_tol
    
    SA_fval_tol_termination = _COPASI.COptLogItem_SA_fval_tol_termination
    
    DE_usrdef_error_pop_size = _COPASI.COptLogItem_DE_usrdef_error_pop_size
    
    DE_fittest_not_changed_x_random_generated = _COPASI.COptLogItem_DE_fittest_not_changed_x_random_generated
    
    GA_fittest_not_changed_x_random_generated = _COPASI.COptLogItem_GA_fittest_not_changed_x_random_generated
    
    GASR_usrdef_error_pf = _COPASI.COptLogItem_GASR_usrdef_error_pf
    
    GASR_fittest_not_changed_x_random_generated = _COPASI.COptLogItem_GASR_fittest_not_changed_x_random_generated
    
    HJ_steplength_lower_than_tol = _COPASI.COptLogItem_HJ_steplength_lower_than_tol
    
    LM_hess_pos_def = _COPASI.COptLogItem_LM_hess_pos_def
    
    LM_hess_not_pos_def = _COPASI.COptLogItem_LM_hess_not_pos_def
    
    LM_fval_and_param_change_lower_than_tol = _COPASI.COptLogItem_LM_fval_and_param_change_lower_than_tol
    
    LM_fval_and_param_change_lower_than_tol_termination = _COPASI.COptLogItem_LM_fval_and_param_change_lower_than_tol_termination
    
    LM_lambda_max_termination = _COPASI.COptLogItem_LM_lambda_max_termination
    
    LM_inc_lambda = _COPASI.COptLogItem_LM_inc_lambda
    
    LM_count_edge_of_param_domain = _COPASI.COptLogItem_LM_count_edge_of_param_domain
    
    CW_min_step_size = _COPASI.COptLogItem_CW_min_step_size
    
    NM_fval_change_lower_than_tol = _COPASI.COptLogItem_NM_fval_change_lower_than_tol
    
    NM_local_min_termination = _COPASI.COptLogItem_NM_local_min_termination
    
    NM_no_local_min_reducing_simplex = _COPASI.COptLogItem_NM_no_local_min_reducing_simplex
    
    SRES_usrdef_error_pf = _COPASI.COptLogItem_SRES_usrdef_error_pf
    
    SRES_fittest_not_changed_x_random_generated = _COPASI.COptLogItem_SRES_fittest_not_changed_x_random_generated
    
    TN_next_repeat = _COPASI.COptLogItem_TN_next_repeat
    

    def __init__(self, *args):
        r"""__init__(COptLogItem self, COptLogItem::MsgID id, std::string const & statusDump="") -> COptLogItem"""
        _COPASI.COptLogItem_swiginit(self, _COPASI.new_COptLogItem(*args))
    __swig_destroy__ = _COPASI.delete_COptLogItem

    def iter(self, val):
        r"""iter(COptLogItem self, size_t val) -> COptLogItem"""
        return _COPASI.COptLogItem_iter(self, val)

    def getMsgId(self):
        r"""getMsgId(COptLogItem self) -> COptLogItem::MsgID"""
        return _COPASI.COptLogItem_getMsgId(self)

    def getHeader(self):
        r"""getHeader(COptLogItem self) -> std::string"""
        return _COPASI.COptLogItem_getHeader(self)

    def getSubtext(self):
        r"""getSubtext(COptLogItem self) -> std::string"""
        return _COPASI.COptLogItem_getSubtext(self)

    def getStatusDetails(self):
        r"""getStatusDetails(COptLogItem self) -> std::string"""
        return _COPASI.COptLogItem_getStatusDetails(self)

# Register COptLogItem in _COPASI:
_COPASI.COptLogItem_swigregister(COptLogItem)
class COptLog(object):
    r"""Proxy of C++ COptLog class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(COptLog self) -> COptLog"""
        _COPASI.COptLog_swiginit(self, _COPASI.new_COptLog())
    __swig_destroy__ = _COPASI.delete_COptLog

    def enterLogEntry(self, entry):
        r"""enterLogEntry(COptLog self, COptLogEntry entry)"""
        return _COPASI.COptLog_enterLogEntry(self, entry)

    def getElementCount(self):
        r"""getElementCount(COptLog self) -> size_t"""
        return _COPASI.COptLog_getElementCount(self)

    def getPlainLog(self):
        r"""getPlainLog(COptLog self) -> std::string"""
        return _COPASI.COptLog_getPlainLog(self)

    def getRichLog(self):
        r"""getRichLog(COptLog self) -> std::string"""
        return _COPASI.COptLog_getRichLog(self)

# Register COptLog in _COPASI:
_COPASI.COptLog_swigregister(COptLog)
class COptMethod(CCopasiMethod):
    r"""Proxy of C++ COptMethod class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(COptMethod self, CDataContainer pParent, CTaskEnum::Method const & methodType, CTaskEnum::Task const & taskType, bool const & parallel) -> COptMethod
        __init__(COptMethod self, COptMethod src, CDataContainer pParent) -> COptMethod
        """
        _COPASI.COptMethod_swiginit(self, _COPASI.new_COptMethod(*args))
    __swig_destroy__ = _COPASI.delete_COptMethod

    def optimise(self):
        r"""optimise(COptMethod self) -> bool"""
        return _COPASI.COptMethod_optimise(self)

    def setProblem(self, problem):
        r"""setProblem(COptMethod self, COptProblem problem)"""
        return _COPASI.COptMethod_setProblem(self, problem)

    def initialize(self):
        r"""initialize(COptMethod self) -> bool"""
        return _COPASI.COptMethod_initialize(self)

    def isValidProblem(self, pProblem):
        r"""isValidProblem(COptMethod self, CCopasiProblem pProblem) -> bool"""
        return _COPASI.COptMethod_isValidProblem(self, pProblem)

    def getMaxLogVerbosity(self):
        r"""getMaxLogVerbosity(COptMethod self) -> unsigned int"""
        return _COPASI.COptMethod_getMaxLogVerbosity(self)

    def getMethodLog(self):
        r"""getMethodLog(COptMethod self) -> COptLog"""
        return _COPASI.COptMethod_getMethodLog(self)

    def getBestValue(self):
        r"""getBestValue(COptMethod self) -> double"""
        return _COPASI.COptMethod_getBestValue(self)

    def getCurrentValue(self):
        r"""getCurrentValue(COptMethod self) -> double"""
        return _COPASI.COptMethod_getCurrentValue(self)

    def getBestParameters(self):
        r"""getBestParameters(COptMethod self) -> FloatVector"""
        return _COPASI.COptMethod_getBestParameters(self)

    def getCurrentParameters(self):
        r"""getCurrentParameters(COptMethod self) -> FloatVector"""
        return _COPASI.COptMethod_getCurrentParameters(self)

# Register COptMethod in _COPASI:
_COPASI.COptMethod_swigregister(COptMethod)
class COptPopulationMethod(COptMethod):
    r"""Proxy of C++ COptPopulationMethod class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(COptPopulationMethod self, CDataContainer pParent, CTaskEnum::Method const & methodType, CTaskEnum::Task const & taskType, bool const & parallel) -> COptPopulationMethod
        __init__(COptPopulationMethod self, COptPopulationMethod src, CDataContainer pParent) -> COptPopulationMethod
        """
        _COPASI.COptPopulationMethod_swiginit(self, _COPASI.new_COptPopulationMethod(*args))
    __swig_destroy__ = _COPASI.delete_COptPopulationMethod

    def initObjects(self):
        r"""initObjects(COptPopulationMethod self)"""
        return _COPASI.COptPopulationMethod_initObjects(self)

    def initialize(self):
        r"""initialize(COptPopulationMethod self) -> bool"""
        return _COPASI.COptPopulationMethod_initialize(self)

    def cleanup(self):
        r"""cleanup(COptPopulationMethod self) -> bool"""
        return _COPASI.COptPopulationMethod_cleanup(self)

    def getPopulationSize(self):
        r"""getPopulationSize(COptPopulationMethod self) -> int"""
        return _COPASI.COptPopulationMethod_getPopulationSize(self)

    def getNumGenerations(self):
        r"""getNumGenerations(COptPopulationMethod self) -> int"""
        return _COPASI.COptPopulationMethod_getNumGenerations(self)

    def getCurrentGeneration(self):
        r"""getCurrentGeneration(COptPopulationMethod self) -> int"""
        return _COPASI.COptPopulationMethod_getCurrentGeneration(self)

    def getPopulation(self):
        r"""getPopulation(COptPopulationMethod self) -> std::vector< CVector< double > *,std::allocator< CVector< double > * > > const &"""
        return _COPASI.COptPopulationMethod_getPopulation(self)

    def getObjectiveValues(self):
        r"""getObjectiveValues(COptPopulationMethod self) -> FloatVector"""
        return _COPASI.COptPopulationMethod_getObjectiveValues(self)

# Register COptPopulationMethod in _COPASI:
_COPASI.COptPopulationMethod_swigregister(COptPopulationMethod)
class FloatCVector(FloatVectorCore):
    r"""Proxy of C++ CVector< double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(FloatCVector self, size_t size=0) -> FloatCVector
        __init__(FloatCVector self, FloatVectorCore src) -> FloatCVector
        __init__(FloatCVector self, FloatVector src) -> FloatCVector
        """
        _COPASI.FloatCVector_swiginit(self, _COPASI.new_FloatCVector(*args))
    __swig_destroy__ = _COPASI.delete_FloatCVector

# Register FloatCVector in _COPASI:
_COPASI.FloatCVector_swigregister(FloatCVector)
SteadyState = _COPASI.SteadyState

Trajectory = _COPASI.Trajectory

class COptProblem(CCopasiProblem):
    r"""Proxy of C++ COptProblem class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(COptProblem self, CTaskEnum::Task const & type=optimization, CDataContainer pParent=static_cast< CDataContainer * >((void *) 0)) -> COptProblem
        __init__(COptProblem self, COptProblem src, CDataContainer pParent) -> COptProblem
        """
        _COPASI.COptProblem_swiginit(self, _COPASI.new_COptProblem(*args))
    __swig_destroy__ = _COPASI.delete_COptProblem

    def calculateValue(self):
        r"""calculateValue(COptProblem self)"""
        return _COPASI.COptProblem_calculateValue(self)

    def elevateChildren(self):
        r"""elevateChildren(COptProblem self) -> bool"""
        return _COPASI.COptProblem_elevateChildren(self)

    def setCallBack(self, callBack):
        r"""setCallBack(COptProblem self, CProcessReportLevel callBack) -> bool"""
        return _COPASI.COptProblem_setCallBack(self, callBack)

    def initializeSubtaskBeforeOutput(self):
        r"""initializeSubtaskBeforeOutput(COptProblem self) -> bool"""
        return _COPASI.COptProblem_initializeSubtaskBeforeOutput(self)

    def reset(self):
        r"""reset(COptProblem self)"""
        return _COPASI.COptProblem_reset(self)

    def getSubTask(self):
        r"""getSubTask(COptProblem self) -> CCopasiTask"""
        return _COPASI.COptProblem_getSubTask(self)

    def checkIntervals(self):
        r"""checkIntervals(COptProblem self) -> bool"""
        return _COPASI.COptProblem_checkIntervals(self)

    def adjustStartValuesForIntervals(self):
        r"""adjustStartValuesForIntervals(COptProblem self) -> bool"""
        return _COPASI.COptProblem_adjustStartValuesForIntervals(self)

    def adjustStartValue(self, optItem):
        r"""adjustStartValue(COptProblem self, COptItem optItem) -> bool"""
        return _COPASI.COptProblem_adjustStartValue(self, optItem)

    def adjustForIntervals(self, pValue, min, max):
        r"""adjustForIntervals(COptProblem self, double * pValue, double const & min, double const & max) -> double"""
        return _COPASI.COptProblem_adjustForIntervals(self, pValue, min, max)

    def evalMinimizeIntervals(self, value):
        r"""evalMinimizeIntervals(COptProblem self, double const & value) -> double"""
        return _COPASI.COptProblem_evalMinimizeIntervals(self, value)

    def calculateStatistics(self, factor=1.0e-003, resolution=1.0e-009):
        r"""calculateStatistics(COptProblem self, double const & factor=1.0e-003, double const & resolution=1.0e-009) -> bool"""
        return _COPASI.COptProblem_calculateStatistics(self, factor, resolution)

    def getOptItemList(self, algorithmOrder=False):
        r"""getOptItemList(COptProblem self, bool const & algorithmOrder=False) -> OptItemStdVector"""
        return _COPASI.COptProblem_getOptItemList(self, algorithmOrder)

    def getConstraintList(self):
        r"""getConstraintList(COptProblem self) -> OptItemStdVector"""
        return _COPASI.COptProblem_getConstraintList(self)

    def setParameters(self, parameters):
        r"""setParameters(COptProblem self, FloatVectorCore parameters)"""
        return _COPASI.COptProblem_setParameters(self, parameters)

    def getContainerVariables(self, algorithmOrder=False):
        r"""getContainerVariables(COptProblem self, bool const & algorithmOrder=False) -> CVectorCore< double * >"""
        return _COPASI.COptProblem_getContainerVariables(self, algorithmOrder)

    def getCalculateValue(self):
        r"""getCalculateValue(COptProblem self) -> double const &"""
        return _COPASI.COptProblem_getCalculateValue(self)

    def getSolutionVariables(self, algorithmOrder=False):
        r"""getSolutionVariables(COptProblem self, bool const & algorithmOrder=False) -> FloatVector"""
        return _COPASI.COptProblem_getSolutionVariables(self, algorithmOrder)

    def getVariableGradients(self):
        r"""getVariableGradients(COptProblem self) -> FloatVector"""
        return _COPASI.COptProblem_getVariableGradients(self)

    def setSolution(self, value, variables, algorithmOrder=False):
        r"""setSolution(COptProblem self, double const & value, FloatVector variables, bool const & algorithmOrder=False) -> bool"""
        return _COPASI.COptProblem_setSolution(self, value, variables, algorithmOrder)

    def getSolutionValue(self):
        r"""getSolutionValue(COptProblem self) -> double const &"""
        return _COPASI.COptProblem_getSolutionValue(self)

    def getOptConstraint(self, index):
        r"""getOptConstraint(COptProblem self, size_t const & index) -> COptItem"""
        return _COPASI.COptProblem_getOptConstraint(self, index)

    def getOptConstraintSize(self):
        r"""getOptConstraintSize(COptProblem self) -> size_t"""
        return _COPASI.COptProblem_getOptConstraintSize(self)

    def addOptConstraint(self, objectCN):
        r"""addOptConstraint(COptProblem self, CCommonName objectCN) -> COptItem"""
        return _COPASI.COptProblem_addOptConstraint(self, objectCN)

    def removeOptConstraint(self, index):
        r"""removeOptConstraint(COptProblem self, size_t const & index) -> bool"""
        return _COPASI.COptProblem_removeOptConstraint(self, index)

    def getOptItem(self, index):
        r"""getOptItem(COptProblem self, size_t const & index) -> COptItem"""
        return _COPASI.COptProblem_getOptItem(self, index)

    def getOptItemSize(self):
        r"""getOptItemSize(COptProblem self) -> size_t"""
        return _COPASI.COptProblem_getOptItemSize(self)

    def addOptItem(self, objectCN):
        r"""addOptItem(COptProblem self, CCommonName objectCN) -> COptItem"""
        return _COPASI.COptProblem_addOptItem(self, objectCN)

    def removeOptItem(self, index):
        r"""removeOptItem(COptProblem self, size_t const & index) -> bool"""
        return _COPASI.COptProblem_removeOptItem(self, index)

    def swapOptItem(self, iFrom, iTo):
        r"""swapOptItem(COptProblem self, size_t const & iFrom, size_t const & iTo) -> bool"""
        return _COPASI.COptProblem_swapOptItem(self, iFrom, iTo)

    def setObjectiveFunction(self, infix):
        r"""setObjectiveFunction(COptProblem self, std::string const & infix) -> bool"""
        return _COPASI.COptProblem_setObjectiveFunction(self, infix)

    def getObjectiveFunction(self):
        r"""getObjectiveFunction(COptProblem self) -> std::string const"""
        return _COPASI.COptProblem_getObjectiveFunction(self)

    def setSubtaskType(self, subtaskType):
        r"""setSubtaskType(COptProblem self, CTaskEnum::Task const & subtaskType) -> CCommonName"""
        return _COPASI.COptProblem_setSubtaskType(self, subtaskType)

    def getSubtaskType(self):
        r"""getSubtaskType(COptProblem self) -> CTaskEnum::Task"""
        return _COPASI.COptProblem_getSubtaskType(self)

    def setMaximize(self, maximize):
        r"""setMaximize(COptProblem self, bool const & maximize)"""
        return _COPASI.COptProblem_setMaximize(self, maximize)

    def maximize(self):
        r"""maximize(COptProblem self) -> bool const &"""
        return _COPASI.COptProblem_maximize(self)

    def setRandomizeStartValues(self, randomize):
        r"""setRandomizeStartValues(COptProblem self, bool const & randomize)"""
        return _COPASI.COptProblem_setRandomizeStartValues(self, randomize)

    def getRandomizeStartValues(self):
        r"""getRandomizeStartValues(COptProblem self) -> bool const &"""
        return _COPASI.COptProblem_getRandomizeStartValues(self)

    def randomizeStartValues(self):
        r"""randomizeStartValues(COptProblem self)"""
        return _COPASI.COptProblem_randomizeStartValues(self)

    def rememberStartValues(self):
        r"""rememberStartValues(COptProblem self)"""
        return _COPASI.COptProblem_rememberStartValues(self)

    def setCalculateStatistics(self, calculate):
        r"""setCalculateStatistics(COptProblem self, bool const & calculate)"""
        return _COPASI.COptProblem_setCalculateStatistics(self, calculate)

    def getCalculateStatistics(self):
        r"""getCalculateStatistics(COptProblem self) -> bool const &"""
        return _COPASI.COptProblem_getCalculateStatistics(self)

    def getFunctionEvaluations(self):
        r"""getFunctionEvaluations(COptProblem self) -> unsigned int const &"""
        return _COPASI.COptProblem_getFunctionEvaluations(self)

    def getConstraintEvaluations(self):
        r"""getConstraintEvaluations(COptProblem self) -> unsigned int const &"""
        return _COPASI.COptProblem_getConstraintEvaluations(self)

    def incrementCounters(self, increment):
        r"""incrementCounters(COptProblem self, COptProblem::sCounter const & increment)"""
        return _COPASI.COptProblem_incrementCounters(self, increment)

    def getCounters(self):
        r"""getCounters(COptProblem self) -> COptProblem::sCounter const &"""
        return _COPASI.COptProblem_getCounters(self)

    def resetCounters(self):
        r"""resetCounters(COptProblem self)"""
        return _COPASI.COptProblem_resetCounters(self)

    def getFailedEvaluationsExc(self):
        r"""getFailedEvaluationsExc(COptProblem self) -> unsigned int const &"""
        return _COPASI.COptProblem_getFailedEvaluationsExc(self)

    def getFailedEvaluationsNaN(self):
        r"""getFailedEvaluationsNaN(COptProblem self) -> unsigned int const &"""
        return _COPASI.COptProblem_getFailedEvaluationsNaN(self)

    def geFailedConstraintCounter(self):
        r"""geFailedConstraintCounter(COptProblem self) -> unsigned int const &"""
        return _COPASI.COptProblem_geFailedConstraintCounter(self)

    def getExecutionTime(self):
        r"""getExecutionTime(COptProblem self) -> double const &"""
        return _COPASI.COptProblem_getExecutionTime(self)

# Register COptProblem in _COPASI:
_COPASI.COptProblem_swigregister(COptProblem)
COptProblem.ValidSubtasks = _COPASI.cvar.COptProblem_ValidSubtasks

class COptTask(CCopasiTask):
    r"""Proxy of C++ COptTask class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(COptTask self, CDataContainer pParent, CTaskEnum::Task const & type=optimization) -> COptTask
        __init__(COptTask self, COptTask src, CDataContainer pParent) -> COptTask
        """
        _COPASI.COptTask_swiginit(self, _COPASI.new_COptTask(*args))
    __swig_destroy__ = _COPASI.delete_COptTask

    def cleanup(self):
        r"""cleanup(COptTask self)"""
        return _COPASI.COptTask_cleanup(self)

    def setCallBack(self, *args):
        r"""
        setCallBack(COptTask self, CProcessReportLevel callBack) -> bool
        setCallBack(COptTask self, CProcessReport pHandler) -> bool
        """
        return _COPASI.COptTask_setCallBack(self, *args)

    def getValidMethods(self):
        r"""getValidMethods(COptTask self) -> IntStdVector"""
        return _COPASI.COptTask_getValidMethods(self)

# Register COptTask in _COPASI:
_COPASI.COptTask_swigregister(COptTask)
class CExperimentFileInfo(object):
    r"""Proxy of C++ CExperimentFileInfo class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, set):
        r"""__init__(CExperimentFileInfo self, CExperimentSet set) -> CExperimentFileInfo"""
        _COPASI.CExperimentFileInfo_swiginit(self, _COPASI.new_CExperimentFileInfo(set))
    __swig_destroy__ = _COPASI.delete_CExperimentFileInfo

    def setFileName(self, fileName):
        r"""setFileName(CExperimentFileInfo self, std::string const & fileName) -> bool"""
        return _COPASI.CExperimentFileInfo_setFileName(self, fileName)

    def countLines(self):
        r"""countLines(CExperimentFileInfo self) -> size_t"""
        return _COPASI.CExperimentFileInfo_countLines(self)

    def getFileName(self):
        r"""getFileName(CExperimentFileInfo self) -> std::string const &"""
        return _COPASI.CExperimentFileInfo_getFileName(self)

    def sync(self):
        r"""sync(CExperimentFileInfo self) -> bool"""
        return _COPASI.CExperimentFileInfo_sync(self)

    def validate(self):
        r"""validate(CExperimentFileInfo self) -> bool"""
        return _COPASI.CExperimentFileInfo_validate(self)

    def removeInvalidExperiments(self):
        r"""removeInvalidExperiments(CExperimentFileInfo self)"""
        return _COPASI.CExperimentFileInfo_removeInvalidExperiments(self)

    def removeLastExperiments(self, start):
        r"""removeLastExperiments(CExperimentFileInfo self, size_t start)"""
        return _COPASI.CExperimentFileInfo_removeLastExperiments(self, start)

    def validateFirst(self, index, value):
        r"""validateFirst(CExperimentFileInfo self, size_t const & index, size_t const & value) -> bool"""
        return _COPASI.CExperimentFileInfo_validateFirst(self, index, value)

    def validateLast(self, index, value):
        r"""validateLast(CExperimentFileInfo self, size_t const & index, size_t const & value) -> bool"""
        return _COPASI.CExperimentFileInfo_validateLast(self, index, value)

    def validateHeader(self, index, value):
        r"""validateHeader(CExperimentFileInfo self, size_t const & index, size_t const & value) -> bool"""
        return _COPASI.CExperimentFileInfo_validateHeader(self, index, value)

    def getExperimentNames(self):
        r"""getExperimentNames(CExperimentFileInfo self) -> StringStdVector"""
        return _COPASI.CExperimentFileInfo_getExperimentNames(self)

    def getExperiment(self, name):
        r"""getExperiment(CExperimentFileInfo self, std::string const & name) -> CExperiment"""
        return _COPASI.CExperimentFileInfo_getExperiment(self, name)

    def getInterruption(self, first, last):
        r"""getInterruption(CExperimentFileInfo self, size_t first, size_t last) -> size_t"""
        return _COPASI.CExperimentFileInfo_getInterruption(self, first, last)

# Register CExperimentFileInfo in _COPASI:
_COPASI.CExperimentFileInfo_swigregister(CExperimentFileInfo)
class CFittingPoint(CDataContainer):
    r"""Proxy of C++ CFittingPoint class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def fromData(data, pParent):
        r"""fromData(CData data, CUndoObjectInterface pParent) -> CFittingPoint"""
        return _COPASI.CFittingPoint_fromData(data, pParent)

    def __init__(self, *args):
        r"""
        __init__(CFittingPoint self, std::string const & name="unknown", CDataContainer pParent=static_cast< CDataContainer * >((void *) 0)) -> CFittingPoint
        __init__(CFittingPoint self, CFittingPoint src, CDataContainer pParent) -> CFittingPoint
        """
        _COPASI.CFittingPoint_swiginit(self, _COPASI.new_CFittingPoint(*args))
    __swig_destroy__ = _COPASI.delete_CFittingPoint

    def getObjectDisplayName(self):
        r"""getObjectDisplayName(CFittingPoint self) -> std::string"""
        return _COPASI.CFittingPoint_getObjectDisplayName(self)

    def getModelObjectCN(self):
        r"""getModelObjectCN(CFittingPoint self) -> std::string const &"""
        return _COPASI.CFittingPoint_getModelObjectCN(self)

    def setValues(self, independent, measured, fitted, weightedError):
        r"""setValues(CFittingPoint self, double const & independent, double const & measured, double const & fitted, double const & weightedError)"""
        return _COPASI.CFittingPoint_setValues(self, independent, measured, fitted, weightedError)

# Register CFittingPoint in _COPASI:
_COPASI.CFittingPoint_swigregister(CFittingPoint)
class CExperiment(CCopasiParameterGroup):
    r"""Proxy of C++ CExperiment class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ignore = _COPASI.CExperiment_ignore
    
    independent = _COPASI.CExperiment_independent
    
    dependent = _COPASI.CExperiment_dependent
    
    time = _COPASI.CExperiment_time
    
    MEAN = _COPASI.CExperiment_MEAN
    
    MEAN_SQUARE = _COPASI.CExperiment_MEAN_SQUARE
    
    SD = _COPASI.CExperiment_SD
    
    VALUE_SCALING = _COPASI.CExperiment_VALUE_SCALING
    

    def __init__(self, *args):
        r"""
        __init__(CExperiment self, CDataContainer pParent, std::string const & name="Experiment") -> CExperiment
        __init__(CExperiment self, CExperiment src, CDataContainer pParent) -> CExperiment
        __init__(CExperiment self, CCopasiParameterGroup group, CDataContainer pParent) -> CExperiment
        """
        _COPASI.CExperiment_swiginit(self, _COPASI.new_CExperiment(*args))
    __swig_destroy__ = _COPASI.delete_CExperiment

    def elevateChildren(self):
        r"""elevateChildren(CExperiment self) -> bool"""
        return _COPASI.CExperiment_elevateChildren(self)

    def compile(self, pMathContainer):
        r"""compile(CExperiment self, CMathContainer pMathContainer) -> bool"""
        return _COPASI.CExperiment_compile(self, pMathContainer)

    def calculateWeights(self):
        r"""calculateWeights(CExperiment self) -> bool"""
        return _COPASI.CExperiment_calculateWeights(self)

    def getDependentObjectsMap(self):
        r"""getDependentObjectsMap(CExperiment self) -> std::map< CObjectInterface const *,size_t,std::less< CObjectInterface const * >,std::allocator< std::pair< CObjectInterface const *const,size_t > > > const &"""
        return _COPASI.CExperiment_getDependentObjectsMap(self)

    def initExtendedTimeSeries(self, s):
        r"""initExtendedTimeSeries(CExperiment self, size_t s)"""
        return _COPASI.CExperiment_initExtendedTimeSeries(self, s)

    def storeExtendedTimeSeriesData(self, time):
        r"""storeExtendedTimeSeriesData(CExperiment self, double time)"""
        return _COPASI.CExperiment_storeExtendedTimeSeriesData(self, time)

    def extendedTimeSeriesSize(self):
        r"""extendedTimeSeriesSize(CExperiment self) -> size_t"""
        return _COPASI.CExperiment_extendedTimeSeriesSize(self)

    def calculateStatistics(self):
        r"""calculateStatistics(CExperiment self) -> bool"""
        return _COPASI.CExperiment_calculateStatistics(self)

    def readColumnNames(self):
        r"""readColumnNames(CExperiment self) -> bool"""
        return _COPASI.CExperiment_readColumnNames(self)

    def guessColumnNumber(self):
        r"""guessColumnNumber(CExperiment self) -> size_t"""
        return _COPASI.CExperiment_guessColumnNumber(self)

    def getColumnNames(self):
        r"""getColumnNames(CExperiment self) -> StringStdVector"""
        return _COPASI.CExperiment_getColumnNames(self)

    def updateModelWithIndependentData(self, index):
        r"""updateModelWithIndependentData(CExperiment self, size_t const & index) -> bool"""
        return _COPASI.CExperiment_updateModelWithIndependentData(self, index)

    def setExperimentType(self, type):
        r"""setExperimentType(CExperiment self, CTaskEnum::Task const & type) -> bool"""
        return _COPASI.CExperiment_setExperimentType(self, type)

    def getExperimentType(self):
        r"""getExperimentType(CExperiment self) -> CTaskEnum::Task const &"""
        return _COPASI.CExperiment_getExperimentType(self)

    def setNormalizeWeightsPerExperiment(self, flag):
        r"""setNormalizeWeightsPerExperiment(CExperiment self, bool flag)"""
        return _COPASI.CExperiment_setNormalizeWeightsPerExperiment(self, flag)

    def getNormalizeWeightsPerExperiment(self):
        r"""getNormalizeWeightsPerExperiment(CExperiment self) -> bool"""
        return _COPASI.CExperiment_getNormalizeWeightsPerExperiment(self)

    def getTimeData(self):
        r"""getTimeData(CExperiment self) -> FloatVector"""
        return _COPASI.CExperiment_getTimeData(self)

    def getIndependentData(self):
        r"""getIndependentData(CExperiment self) -> FloatMatrix"""
        return _COPASI.CExperiment_getIndependentData(self)

    def getDependentData(self):
        r"""getDependentData(CExperiment self) -> FloatMatrix"""
        return _COPASI.CExperiment_getDependentData(self)

    def getFileName(self):
        r"""getFileName(CExperiment self) -> std::string const &"""
        return _COPASI.CExperiment_getFileName(self)

    def getFileNameOnly(self):
        r"""getFileNameOnly(CExperiment self) -> std::string const &"""
        return _COPASI.CExperiment_getFileNameOnly(self)

    def setFileName(self, fileName):
        r"""setFileName(CExperiment self, std::string const & fileName) -> bool"""
        return _COPASI.CExperiment_setFileName(self, fileName)

    def getObjectMap(self, *args):
        r"""
        getObjectMap(CExperiment self) -> CExperimentObjectMap
        getObjectMap(CExperiment self) -> CExperimentObjectMap
        """
        return _COPASI.CExperiment_getObjectMap(self, *args)

    def getFittingPoints(self):
        r"""getFittingPoints(CExperiment self) -> FittingPointVector"""
        return _COPASI.CExperiment_getFittingPoints(self)

    def updateFittedPoints(self):
        r"""updateFittedPoints(CExperiment self)"""
        return _COPASI.CExperiment_updateFittedPoints(self)

    def updateFittedPointValues(self, index):
        r"""updateFittedPointValues(CExperiment self, size_t const & index)"""
        return _COPASI.CExperiment_updateFittedPointValues(self, index)

    def updateFittedPointValuesFromExtendedTimeSeries(self, index):
        r"""updateFittedPointValuesFromExtendedTimeSeries(CExperiment self, size_t const & index)"""
        return _COPASI.CExperiment_updateFittedPointValuesFromExtendedTimeSeries(self, index)

    def getNumColumns(self):
        r"""getNumColumns(CExperiment self) -> unsigned int const &"""
        return _COPASI.CExperiment_getNumColumns(self)

    def setNumColumns(self, cols):
        r"""setNumColumns(CExperiment self, unsigned int const & cols) -> bool"""
        return _COPASI.CExperiment_setNumColumns(self, cols)

    def getFirstRow(self):
        r"""getFirstRow(CExperiment self) -> unsigned int const &"""
        return _COPASI.CExperiment_getFirstRow(self)

    def setFirstRow(self, firstRow):
        r"""setFirstRow(CExperiment self, unsigned int const & firstRow) -> bool"""
        return _COPASI.CExperiment_setFirstRow(self, firstRow)

    def getLastRow(self):
        r"""getLastRow(CExperiment self) -> unsigned int const &"""
        return _COPASI.CExperiment_getLastRow(self)

    def setLastRow(self, lastRow):
        r"""setLastRow(CExperiment self, unsigned int const & lastRow) -> bool"""
        return _COPASI.CExperiment_setLastRow(self, lastRow)

    def getHeaderRow(self):
        r"""getHeaderRow(CExperiment self) -> unsigned int const &"""
        return _COPASI.CExperiment_getHeaderRow(self)

    def setHeaderRow(self, headerRow):
        r"""setHeaderRow(CExperiment self, unsigned int const & headerRow) -> bool"""
        return _COPASI.CExperiment_setHeaderRow(self, headerRow)

    def getNumDataRows(self):
        r"""getNumDataRows(CExperiment self) -> size_t"""
        return _COPASI.CExperiment_getNumDataRows(self)

    def getSeparator(self):
        r"""getSeparator(CExperiment self) -> std::string const &"""
        return _COPASI.CExperiment_getSeparator(self)

    def setSeparator(self, seperator):
        r"""setSeparator(CExperiment self, std::string const & seperator) -> bool"""
        return _COPASI.CExperiment_setSeparator(self, seperator)

    def getWeightMethod(self):
        r"""getWeightMethod(CExperiment self) -> CExperiment::WeightMethod const &"""
        return _COPASI.CExperiment_getWeightMethod(self)

    def setWeightMethod(self, weightMethod):
        r"""setWeightMethod(CExperiment self, CExperiment::WeightMethod const & weightMethod) -> bool"""
        return _COPASI.CExperiment_setWeightMethod(self, weightMethod)

    def isRowOriented(self):
        r"""isRowOriented(CExperiment self) -> bool const &"""
        return _COPASI.CExperiment_isRowOriented(self)

    def setIsRowOriented(self, isRowOriented):
        r"""setIsRowOriented(CExperiment self, bool const & isRowOriented) -> bool"""
        return _COPASI.CExperiment_setIsRowOriented(self, isRowOriented)

    @staticmethod
    def compare(lhs, rhs):
        r"""compare(CExperiment lhs, CExperiment rhs) -> bool"""
        return _COPASI.CExperiment_compare(lhs, rhs)

    def getErrorMean(self):
        r"""getErrorMean(CExperiment self) -> double const &"""
        return _COPASI.CExperiment_getErrorMean(self)

    def getObjectiveValue(self, *args):
        r"""
        getObjectiveValue(CExperiment self) -> double const
        getObjectiveValue(CExperiment self, CObjectInterface pObject) -> double
        """
        return _COPASI.CExperiment_getObjectiveValue(self, *args)

    def getDefaultScale(self, pObject):
        r"""getDefaultScale(CExperiment self, CObjectInterface pObject) -> double"""
        return _COPASI.CExperiment_getDefaultScale(self, pObject)

    def getScale(self, pObject):
        r"""getScale(CExperiment self, CObjectInterface pObject) -> double const *"""
        return _COPASI.CExperiment_getScale(self, pObject)

    def getScalingMatrix(self):
        r"""getScalingMatrix(CExperiment self) -> FloatMatrix"""
        return _COPASI.CExperiment_getScalingMatrix(self)

    def getRMS(self, *args):
        r"""
        getRMS(CExperiment self) -> double const
        getRMS(CExperiment self, CObjectInterface pObject) -> double
        """
        return _COPASI.CExperiment_getRMS(self, *args)

    def getErrorSum(self, pObject):
        r"""getErrorSum(CExperiment self, CObjectInterface pObject) -> double"""
        return _COPASI.CExperiment_getErrorSum(self, pObject)

    def getErrorMeanSD(self, *args):
        r"""
        getErrorMeanSD(CExperiment self) -> double const
        getErrorMeanSD(CExperiment self, CObjectInterface pObject, double const & errorMean) -> double
        """
        return _COPASI.CExperiment_getErrorMeanSD(self, *args)

    def getColumnValidValueCount(self, pObject):
        r"""getColumnValidValueCount(CExperiment self, CObjectInterface pObject) -> size_t"""
        return _COPASI.CExperiment_getColumnValidValueCount(self, pObject)

    def getValidValueCount(self):
        r"""getValidValueCount(CExperiment self) -> size_t"""
        return _COPASI.CExperiment_getValidValueCount(self)

    def getTotalValueCount(self):
        r"""getTotalValueCount(CExperiment self) -> size_t"""
        return _COPASI.CExperiment_getTotalValueCount(self)

    def getIndependentObjects(self):
        r"""getIndependentObjects(CExperiment self) -> CObjectInterface::ObjectSet const &"""
        return _COPASI.CExperiment_getIndependentObjects(self)

    def fixBuild55(self):
        r"""fixBuild55(CExperiment self)"""
        return _COPASI.CExperiment_fixBuild55(self)

    def read(self, *args):
        r"""
        read(CExperiment self, std::istream & _in, size_t & currentLine) -> bool
        read(CExperiment self, std::string const & s, int startLine=0, bool isFilename=True) -> int
        """
        return _COPASI.CExperiment_read(self, *args)

# Register CExperiment in _COPASI:
_COPASI.CExperiment_swigregister(CExperiment)
class CExperimentSet(CCopasiParameterGroup):
    r"""Proxy of C++ CExperimentSet class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CExperimentSet self, CDataContainer pParent, std::string const & name="Experiment Set") -> CExperimentSet
        __init__(CExperimentSet self, CExperimentSet src, CDataContainer pParent) -> CExperimentSet
        __init__(CExperimentSet self, CCopasiParameterGroup group, CDataContainer pParent) -> CExperimentSet
        """
        _COPASI.CExperimentSet_swiginit(self, _COPASI.new_CExperimentSet(*args))
    __swig_destroy__ = _COPASI.delete_CExperimentSet

    def elevateChildren(self):
        r"""elevateChildren(CExperimentSet self) -> bool"""
        return _COPASI.CExperimentSet_elevateChildren(self)

    def compile(self, pMathContainer):
        r"""compile(CExperimentSet self, CMathContainer pMathContainer) -> bool"""
        return _COPASI.CExperimentSet_compile(self, pMathContainer)

    def calculateStatistics(self):
        r"""calculateStatistics(CExperimentSet self) -> bool"""
        return _COPASI.CExperimentSet_calculateStatistics(self)

    def getExperimentCount(self):
        r"""getExperimentCount(CExperimentSet self) -> size_t"""
        return _COPASI.CExperimentSet_getExperimentCount(self)

    def addExperiment(self, experiment):
        r"""addExperiment(CExperimentSet self, CExperiment experiment) -> CExperiment"""
        return _COPASI.CExperimentSet_addExperiment(self, experiment)

    def removeExperiment(self, index):
        r"""removeExperiment(CExperimentSet self, size_t const & index)"""
        return _COPASI.CExperimentSet_removeExperiment(self, index)

    def getExperiment(self, *args):
        r"""
        getExperiment(CExperimentSet self, size_t const & index) -> CExperiment
        getExperiment(CExperimentSet self, std::string const & name) -> CExperiment
        """
        return _COPASI.CExperimentSet_getExperiment(self, *args)

    def hasDataForTaskType(self, type):
        r"""hasDataForTaskType(CExperimentSet self, CTaskEnum::Task const & type) -> bool"""
        return _COPASI.CExperimentSet_hasDataForTaskType(self, type)

    def getExperimentType(self, index):
        r"""getExperimentType(CExperimentSet self, size_t const & index) -> CTaskEnum::Task const &"""
        return _COPASI.CExperimentSet_getExperimentType(self, index)

    def getIndependentData(self, index):
        r"""getIndependentData(CExperimentSet self, size_t const & index) -> FloatMatrix"""
        return _COPASI.CExperimentSet_getIndependentData(self, index)

    def getDependentData(self, index):
        r"""getDependentData(CExperimentSet self, size_t const & index) -> FloatMatrix"""
        return _COPASI.CExperimentSet_getDependentData(self, index)

    def keyToIndex(self, key):
        r"""keyToIndex(CExperimentSet self, std::string const & key) -> size_t"""
        return _COPASI.CExperimentSet_keyToIndex(self, key)

    def sort(self):
        r"""sort(CExperimentSet self)"""
        return _COPASI.CExperimentSet_sort(self)

    def getFileNames(self):
        r"""getFileNames(CExperimentSet self) -> StringStdVector"""
        return _COPASI.CExperimentSet_getFileNames(self)

    def getDataPointCount(self):
        r"""getDataPointCount(CExperimentSet self) -> size_t"""
        return _COPASI.CExperimentSet_getDataPointCount(self)

    def getValidValueCount(self):
        r"""getValidValueCount(CExperimentSet self) -> size_t const &"""
        return _COPASI.CExperimentSet_getValidValueCount(self)

    def getDependentObjects(self):
        r"""getDependentObjects(CExperimentSet self) -> ConstObjectInterfaceVector"""
        return _COPASI.CExperimentSet_getDependentObjects(self)

    def getDependentObjectiveValues(self):
        r"""getDependentObjectiveValues(CExperimentSet self) -> FloatVector"""
        return _COPASI.CExperimentSet_getDependentObjectiveValues(self)

    def getDependentRMS(self):
        r"""getDependentRMS(CExperimentSet self) -> FloatVector"""
        return _COPASI.CExperimentSet_getDependentRMS(self)

    def getDependentErrorMean(self):
        r"""getDependentErrorMean(CExperimentSet self) -> FloatVector"""
        return _COPASI.CExperimentSet_getDependentErrorMean(self)

    def getDependentErrorMeanSD(self):
        r"""getDependentErrorMeanSD(CExperimentSet self) -> FloatVector"""
        return _COPASI.CExperimentSet_getDependentErrorMeanSD(self)

    def getDependentDataCount(self):
        r"""getDependentDataCount(CExperimentSet self) -> SizeTVector"""
        return _COPASI.CExperimentSet_getDependentDataCount(self)

    def fixBuild55(self):
        r"""fixBuild55(CExperimentSet self)"""
        return _COPASI.CExperimentSet_fixBuild55(self)

    def __len__(self):
        r"""__len__(CExperimentSet self) -> size_t"""
        return _COPASI.CExperimentSet___len__(self)

    def __getitem__(self, *args):
        r"""
        __getitem__(CExperimentSet self, std::string const & name) -> CExperiment
        __getitem__(CExperimentSet self, unsigned int index) -> CExperiment
        """
        return _COPASI.CExperimentSet___getitem__(self, *args)

# Register CExperimentSet in _COPASI:
_COPASI.CExperimentSet_swigregister(CExperimentSet)
class CCrossValidationSet(CExperimentSet):
    r"""Proxy of C++ CCrossValidationSet class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CCrossValidationSet self, CDataContainer pParent, std::string const & name="Validation Set") -> CCrossValidationSet
        __init__(CCrossValidationSet self, CCrossValidationSet src, CDataContainer pParent) -> CCrossValidationSet
        __init__(CCrossValidationSet self, CCopasiParameterGroup group, CDataContainer pParent) -> CCrossValidationSet
        """
        _COPASI.CCrossValidationSet_swiginit(self, _COPASI.new_CCrossValidationSet(*args))
    __swig_destroy__ = _COPASI.delete_CCrossValidationSet

    def setWeight(self, weight):
        r"""setWeight(CCrossValidationSet self, double const & weight)"""
        return _COPASI.CCrossValidationSet_setWeight(self, weight)

    def getWeight(self):
        r"""getWeight(CCrossValidationSet self) -> double const &"""
        return _COPASI.CCrossValidationSet_getWeight(self)

    def setThreshold(self, threshold):
        r"""setThreshold(CCrossValidationSet self, unsigned int const & threshold)"""
        return _COPASI.CCrossValidationSet_setThreshold(self, threshold)

    def getThreshold(self):
        r"""getThreshold(CCrossValidationSet self) -> unsigned int const &"""
        return _COPASI.CCrossValidationSet_getThreshold(self)

# Register CCrossValidationSet in _COPASI:
_COPASI.CCrossValidationSet_swigregister(CCrossValidationSet)
class CExperimentObjectMap(CCopasiParameterGroup):
    r"""Proxy of C++ CExperimentObjectMap class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CExperimentObjectMap self, std::string const & name="Object Map", CDataContainer pParent=static_cast< CDataContainer * >((void *) 0)) -> CExperimentObjectMap
        __init__(CExperimentObjectMap self, CExperimentObjectMap src, CDataContainer pParent) -> CExperimentObjectMap
        __init__(CExperimentObjectMap self, CCopasiParameterGroup group, CDataContainer pParent) -> CExperimentObjectMap
        """
        _COPASI.CExperimentObjectMap_swiginit(self, _COPASI.new_CExperimentObjectMap(*args))
    __swig_destroy__ = _COPASI.delete_CExperimentObjectMap

    def elevateChildren(self):
        r"""elevateChildren(CExperimentObjectMap self) -> bool"""
        return _COPASI.CExperimentObjectMap_elevateChildren(self)

    def setNumCols(self, numCols):
        r"""setNumCols(CExperimentObjectMap self, size_t const & numCols) -> bool"""
        return _COPASI.CExperimentObjectMap_setNumCols(self, numCols)

    def getLastNotIgnoredColumn(self):
        r"""getLastNotIgnoredColumn(CExperimentObjectMap self) -> size_t"""
        return _COPASI.CExperimentObjectMap_getLastNotIgnoredColumn(self)

    def getName(self, index):
        r"""getName(CExperimentObjectMap self, size_t const & index) -> std::string const &"""
        return _COPASI.CExperimentObjectMap_getName(self, index)

    def setRole(self, index, role):
        r"""setRole(CExperimentObjectMap self, size_t const & index, CExperiment::Type const & role) -> bool"""
        return _COPASI.CExperimentObjectMap_setRole(self, index, role)

    def getRole(self, index):
        r"""getRole(CExperimentObjectMap self, size_t const & index) -> CExperiment::Type"""
        return _COPASI.CExperimentObjectMap_getRole(self, index)

    def getNthCnOfType(self, index, role):
        r"""getNthCnOfType(CExperimentObjectMap self, size_t index, CExperiment::Type role) -> std::string"""
        return _COPASI.CExperimentObjectMap_getNthCnOfType(self, index, role)

    def setObjectCN(self, index, objectCN):
        r"""setObjectCN(CExperimentObjectMap self, size_t const & index, std::string const & objectCN) -> bool"""
        return _COPASI.CExperimentObjectMap_setObjectCN(self, index, objectCN)

    def getObjectCN(self, index):
        r"""getObjectCN(CExperimentObjectMap self, size_t const & index) -> std::string"""
        return _COPASI.CExperimentObjectMap_getObjectCN(self, index)

    def setScale(self, index, scale):
        r"""setScale(CExperimentObjectMap self, size_t const & index, double const & scale) -> bool"""
        return _COPASI.CExperimentObjectMap_setScale(self, index, scale)

    def getScale(self, index):
        r"""getScale(CExperimentObjectMap self, size_t const & index) -> double"""
        return _COPASI.CExperimentObjectMap_getScale(self, index)

    def getDefaultScale(self, index):
        r"""getDefaultScale(CExperimentObjectMap self, size_t const & index) -> double"""
        return _COPASI.CExperimentObjectMap_getDefaultScale(self, index)

    def compile(self, pMathContainer):
        r"""compile(CExperimentObjectMap self, CMathContainer pMathContainer) -> bool"""
        return _COPASI.CExperimentObjectMap_compile(self, pMathContainer)

    def getDataObjects(self):
        r"""getDataObjects(CExperimentObjectMap self) -> ConstObjectVector"""
        return _COPASI.CExperimentObjectMap_getDataObjects(self)

    def getLastColumn(self):
        r"""getLastColumn(CExperimentObjectMap self) -> size_t const &"""
        return _COPASI.CExperimentObjectMap_getLastColumn(self)

    def fixBuild55(self):
        r"""fixBuild55(CExperimentObjectMap self)"""
        return _COPASI.CExperimentObjectMap_fixBuild55(self)

# Register CExperimentObjectMap in _COPASI:
_COPASI.CExperimentObjectMap_swigregister(CExperimentObjectMap)
class CFitItem(COptItem):
    r"""Proxy of C++ CFitItem class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CFitItem self, CDataContainer pParent, std::string const & name="FitItem") -> CFitItem
        __init__(CFitItem self, CFitItem src, CDataContainer pParent) -> CFitItem
        __init__(CFitItem self, CCopasiParameterGroup group, CDataContainer pParent) -> CFitItem
        """
        _COPASI.CFitItem_swiginit(self, _COPASI.new_CFitItem(*args))
    __swig_destroy__ = _COPASI.delete_CFitItem

    def elevateChildren(self):
        r"""elevateChildren(CFitItem self) -> bool"""
        return _COPASI.CFitItem_elevateChildren(self)

    @staticmethod
    def isValid(*args):
        r"""
        isValid() -> bool
        isValid(CCopasiParameterGroup group) -> bool
        """
        return _COPASI.CFitItem_isValid(*args)

    def compile(self, *args):
        r"""compile(CFitItem self, ContainerList listOfContainer=EmptyList) -> bool"""
        return _COPASI.CFitItem_compile(self, *args)

    def checkConstraint(self):
        r"""checkConstraint(CFitItem self) -> int"""
        return _COPASI.CFitItem_checkConstraint(self)

    def getConstraintViolation(self):
        r"""getConstraintViolation(CFitItem self) -> double"""
        return _COPASI.CFitItem_getConstraintViolation(self)

    def setLocalValue(self, value):
        r"""setLocalValue(CFitItem self, double const & value)"""
        return _COPASI.CFitItem_setLocalValue(self, value)

    def getLocalValue(self):
        r"""getLocalValue(CFitItem self) -> double const &"""
        return _COPASI.CFitItem_getLocalValue(self)

    def addExperiment(self, key):
        r"""addExperiment(CFitItem self, std::string const & key) -> bool"""
        return _COPASI.CFitItem_addExperiment(self, key)

    def getExperiment(self, index):
        r"""getExperiment(CFitItem self, size_t const & index) -> std::string const &"""
        return _COPASI.CFitItem_getExperiment(self, index)

    def removeExperiment(self, index):
        r"""removeExperiment(CFitItem self, size_t const & index) -> bool"""
        return _COPASI.CFitItem_removeExperiment(self, index)

    def getExperimentCount(self):
        r"""getExperimentCount(CFitItem self) -> size_t"""
        return _COPASI.CFitItem_getExperimentCount(self)

    def getExperiments(self):
        r"""getExperiments(CFitItem self) -> std::string"""
        return _COPASI.CFitItem_getExperiments(self)

    def addCrossValidation(self, key):
        r"""addCrossValidation(CFitItem self, std::string const & key) -> bool"""
        return _COPASI.CFitItem_addCrossValidation(self, key)

    def getCrossValidation(self, index):
        r"""getCrossValidation(CFitItem self, size_t const & index) -> std::string const &"""
        return _COPASI.CFitItem_getCrossValidation(self, index)

    def removeCrossValidation(self, index):
        r"""removeCrossValidation(CFitItem self, size_t const & index) -> bool"""
        return _COPASI.CFitItem_removeCrossValidation(self, index)

    def getCrossValidationCount(self):
        r"""getCrossValidationCount(CFitItem self) -> size_t"""
        return _COPASI.CFitItem_getCrossValidationCount(self)

    def getCrossValidations(self):
        r"""getCrossValidations(CFitItem self) -> std::string"""
        return _COPASI.CFitItem_getCrossValidations(self)

    def getObjectValue(self):
        r"""getObjectValue(CFitItem self) -> double"""
        return _COPASI.CFitItem_getObjectValue(self)

# Register CFitItem in _COPASI:
_COPASI.CFitItem_swigregister(CFitItem)
class CFitConstraint(CFitItem):
    r"""Proxy of C++ CFitConstraint class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CFitConstraint self, CDataContainer pParent, std::string const & name="FitItem") -> CFitConstraint
        __init__(CFitConstraint self, CFitConstraint src, CDataContainer pParent) -> CFitConstraint
        __init__(CFitConstraint self, CCopasiParameterGroup group, CDataContainer pParent) -> CFitConstraint
        """
        _COPASI.CFitConstraint_swiginit(self, _COPASI.new_CFitConstraint(*args))
    __swig_destroy__ = _COPASI.delete_CFitConstraint

    def resetConstraintViolation(self):
        r"""resetConstraintViolation(CFitConstraint self)"""
        return _COPASI.CFitConstraint_resetConstraintViolation(self)

    def calculateConstraintViolation(self):
        r"""calculateConstraintViolation(CFitConstraint self)"""
        return _COPASI.CFitConstraint_calculateConstraintViolation(self)

    def checkConstraint(self):
        r"""checkConstraint(CFitConstraint self) -> int"""
        return _COPASI.CFitConstraint_checkConstraint(self)

    def getConstraintViolation(self):
        r"""getConstraintViolation(CFitConstraint self) -> double"""
        return _COPASI.CFitConstraint_getConstraintViolation(self)

# Register CFitConstraint in _COPASI:
_COPASI.CFitConstraint_swigregister(CFitConstraint)
class CFitProblem(COptProblem):
    r"""Proxy of C++ CFitProblem class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CFitProblem self, CTaskEnum::Task const & type=parameterFitting, CDataContainer pParent=static_cast< CDataContainer * >((void *) 0)) -> CFitProblem
        __init__(CFitProblem self, CFitProblem src, CDataContainer pParent) -> CFitProblem
        """
        _COPASI.CFitProblem_swiginit(self, _COPASI.new_CFitProblem(*args))
    __swig_destroy__ = _COPASI.delete_CFitProblem

    def elevateChildren(self):
        r"""elevateChildren(CFitProblem self) -> bool"""
        return _COPASI.CFitProblem_elevateChildren(self)

    def setCallBack(self, callBack):
        r"""setCallBack(CFitProblem self, CProcessReportLevel callBack) -> bool"""
        return _COPASI.CFitProblem_setCallBack(self, callBack)

    def restore(self, updateModel, pExp):
        r"""restore(CFitProblem self, bool const & updateModel, CExperiment pExp) -> bool"""
        return _COPASI.CFitProblem_restore(self, updateModel, pExp)

    def updateInitialState(self):
        r"""updateInitialState(CFitProblem self)"""
        return _COPASI.CFitProblem_updateInitialState(self)

    def setResidualsRequired(self, required):
        r"""setResidualsRequired(CFitProblem self, bool const & required) -> bool"""
        return _COPASI.CFitProblem_setResidualsRequired(self, required)

    def getResiduals(self):
        r"""getResiduals(CFitProblem self) -> FloatVector"""
        return _COPASI.CFitProblem_getResiduals(self)

    def calcFIM(self, jacobian, fim):
        r"""calcFIM(CFitProblem self, FloatMatrix jacobian, FloatMatrix fim)"""
        return _COPASI.CFitProblem_calcFIM(self, jacobian, fim)

    def calcPartialFIM(self, jacobian, fim, a, b, exclude=False):
        r"""calcPartialFIM(CFitProblem self, FloatMatrix jacobian, FloatMatrix fim, size_t a, size_t b, bool exclude=False)"""
        return _COPASI.CFitProblem_calcPartialFIM(self, jacobian, fim, a, b, exclude)

    def calcEigen(self, fim, eigenvalues, eigenvectors):
        r"""calcEigen(CFitProblem self, FloatMatrix fim, FloatMatrix eigenvalues, FloatMatrix eigenvectors)"""
        return _COPASI.CFitProblem_calcEigen(self, fim, eigenvalues, eigenvectors)

    def calcCov(self, fim, corr, sd, scale):
        r"""calcCov(CFitProblem self, FloatMatrix fim, FloatMatrix corr, FloatVector sd, bool scale) -> bool"""
        return _COPASI.CFitProblem_calcCov(self, fim, corr, sd, scale)

    def calculateStatistics(self, factor=1.0e-003, resolution=1.0e-009):
        r"""calculateStatistics(CFitProblem self, double const & factor=1.0e-003, double const & resolution=1.0e-009) -> bool"""
        return _COPASI.CFitProblem_calculateStatistics(self, factor, resolution)

    def getRMS(self):
        r"""getRMS(CFitProblem self) -> double const &"""
        return _COPASI.CFitProblem_getRMS(self)

    def getStdDeviation(self):
        r"""getStdDeviation(CFitProblem self) -> double const &"""
        return _COPASI.CFitProblem_getStdDeviation(self)

    def getVariableStdDeviations(self):
        r"""getVariableStdDeviations(CFitProblem self) -> FloatVector"""
        return _COPASI.CFitProblem_getVariableStdDeviations(self)

    def getParameterEstimationJacobian(self):
        r"""getParameterEstimationJacobian(CFitProblem self) -> CDataArray"""
        return _COPASI.CFitProblem_getParameterEstimationJacobian(self)

    def getScaledParameterEstimationJacobian(self):
        r"""getScaledParameterEstimationJacobian(CFitProblem self) -> CDataArray"""
        return _COPASI.CFitProblem_getScaledParameterEstimationJacobian(self)

    def getFisherInformation(self):
        r"""getFisherInformation(CFitProblem self) -> CDataArray"""
        return _COPASI.CFitProblem_getFisherInformation(self)

    def getFisherInformationEigenvalues(self):
        r"""getFisherInformationEigenvalues(CFitProblem self) -> CDataArray"""
        return _COPASI.CFitProblem_getFisherInformationEigenvalues(self)

    def getFisherInformationEigenvectors(self):
        r"""getFisherInformationEigenvectors(CFitProblem self) -> CDataArray"""
        return _COPASI.CFitProblem_getFisherInformationEigenvectors(self)

    def getScaledFisherInformation(self):
        r"""getScaledFisherInformation(CFitProblem self) -> CDataArray"""
        return _COPASI.CFitProblem_getScaledFisherInformation(self)

    def getScaledFisherInformationEigenvalues(self):
        r"""getScaledFisherInformationEigenvalues(CFitProblem self) -> CDataArray"""
        return _COPASI.CFitProblem_getScaledFisherInformationEigenvalues(self)

    def getScaledFisherInformationEigenvectors(self):
        r"""getScaledFisherInformationEigenvectors(CFitProblem self) -> CDataArray"""
        return _COPASI.CFitProblem_getScaledFisherInformationEigenvectors(self)

    def getCorrelations(self):
        r"""getCorrelations(CFitProblem self) -> CDataArray"""
        return _COPASI.CFitProblem_getCorrelations(self)

    def getExperimentSet(self):
        r"""getExperimentSet(CFitProblem self) -> CExperimentSet"""
        return _COPASI.CFitProblem_getExperimentSet(self)

    def getCrossValidationSet(self):
        r"""getCrossValidationSet(CFitProblem self) -> CCrossValidationSet"""
        return _COPASI.CFitProblem_getCrossValidationSet(self)

    def addFitItem(self, objectCN):
        r"""addFitItem(CFitProblem self, CCommonName objectCN) -> CFitItem"""
        return _COPASI.CFitProblem_addFitItem(self, objectCN)

    def addFitConstraint(self, objectCN):
        r"""addFitConstraint(CFitProblem self, CCommonName objectCN) -> CFitConstraint"""
        return _COPASI.CFitProblem_addFitConstraint(self, objectCN)

    def setSolution(self, value, variables, algorithmOrder=False):
        r"""setSolution(CFitProblem self, double const & value, FloatVector variables, bool const & algorithmOrder=False) -> bool"""
        return _COPASI.CFitProblem_setSolution(self, value, variables, algorithmOrder)

    def getCrossValidationSolutionValue(self):
        r"""getCrossValidationSolutionValue(CFitProblem self) -> double const &"""
        return _COPASI.CFitProblem_getCrossValidationSolutionValue(self)

    def getCrossValidationRMS(self):
        r"""getCrossValidationRMS(CFitProblem self) -> double const &"""
        return _COPASI.CFitProblem_getCrossValidationRMS(self)

    def getCrossValidationSD(self):
        r"""getCrossValidationSD(CFitProblem self) -> double const &"""
        return _COPASI.CFitProblem_getCrossValidationSD(self)

    def fixBuild55(self):
        r"""fixBuild55(CFitProblem self)"""
        return _COPASI.CFitProblem_fixBuild55(self)

    def setCreateParameterSets(self, create):
        r"""setCreateParameterSets(CFitProblem self, bool const & create)"""
        return _COPASI.CFitProblem_setCreateParameterSets(self, create)

    def getCreateParameterSets(self):
        r"""getCreateParameterSets(CFitProblem self) -> bool const &"""
        return _COPASI.CFitProblem_getCreateParameterSets(self)

    def setUseTimeSens(self, value):
        r"""setUseTimeSens(CFitProblem self, bool value)"""
        return _COPASI.CFitProblem_setUseTimeSens(self, value)

    def getUseTimeSens(self):
        r"""getUseTimeSens(CFitProblem self) -> bool const &"""
        return _COPASI.CFitProblem_getUseTimeSens(self)

    def createParameterSets(self):
        r"""createParameterSets(CFitProblem self)"""
        return _COPASI.CFitProblem_createParameterSets(self)

    def getTimeSensJac(self, *args):
        r"""
        getTimeSensJac(CFitProblem self) -> FloatMatrix
        getTimeSensJac(CFitProblem self) -> FloatMatrix
        """
        return _COPASI.CFitProblem_getTimeSensJac(self, *args)

# Register CFitProblem in _COPASI:
_COPASI.CFitProblem_swigregister(CFitProblem)
class CFitTask(COptTask):
    r"""Proxy of C++ CFitTask class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CFitTask self, CDataContainer pParent, CTaskEnum::Task const & type=parameterFitting) -> CFitTask
        __init__(CFitTask self, CFitTask src, CDataContainer pParent) -> CFitTask
        """
        _COPASI.CFitTask_swiginit(self, _COPASI.new_CFitTask(*args))
    __swig_destroy__ = _COPASI.delete_CFitTask

    def cleanup(self):
        r"""cleanup(CFitTask self)"""
        return _COPASI.CFitTask_cleanup(self)

    def fixBuild55(self):
        r"""fixBuild55(CFitTask self)"""
        return _COPASI.CFitTask_fixBuild55(self)

    def setCallBack(self, *args):
        r"""
        setCallBack(CFitTask self, CProcessReportLevel callBack) -> bool
        setCallBack(CFitTask self, CProcessReport pHandler) -> bool
        """
        return _COPASI.CFitTask_setCallBack(self, *args)

    def getValidMethods(self):
        r"""getValidMethods(CFitTask self) -> IntStdVector"""
        return _COPASI.CFitTask_getValidMethods(self)

# Register CFitTask in _COPASI:
_COPASI.CFitTask_swigregister(CFitTask)
class CMCAMethod(CCopasiMethod):
    r"""Proxy of C++ CMCAMethod class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CMCAMethod self, CDataContainer pParent, CTaskEnum::Method const & methodType=mcaMethodReder, CTaskEnum::Task const & taskType=mca) -> CMCAMethod
        __init__(CMCAMethod self, CMCAMethod src, CDataContainer pParent) -> CMCAMethod
        """
        _COPASI.CMCAMethod_swiginit(self, _COPASI.new_CMCAMethod(*args))
    __swig_destroy__ = _COPASI.delete_CMCAMethod

    def elevateChildren(self):
        r"""elevateChildren(CMCAMethod self) -> bool"""
        return _COPASI.CMCAMethod_elevateChildren(self)

    def getUnscaledElasticities(self):
        r"""getUnscaledElasticities(CMCAMethod self) -> FloatMatrix"""
        return _COPASI.CMCAMethod_getUnscaledElasticities(self)

    def calculateUnscaledElasticities(self, res):
        r"""calculateUnscaledElasticities(CMCAMethod self, double res)"""
        return _COPASI.CMCAMethod_calculateUnscaledElasticities(self, res)

    def getUnscaledConcentrationCC(self):
        r"""getUnscaledConcentrationCC(CMCAMethod self) -> FloatMatrix"""
        return _COPASI.CMCAMethod_getUnscaledConcentrationCC(self)

    def calculateUnscaledConcentrationCC(self):
        r"""calculateUnscaledConcentrationCC(CMCAMethod self) -> bool"""
        return _COPASI.CMCAMethod_calculateUnscaledConcentrationCC(self)

    def getUnscaledFluxCC(self):
        r"""getUnscaledFluxCC(CMCAMethod self) -> FloatMatrix"""
        return _COPASI.CMCAMethod_getUnscaledFluxCC(self)

    def calculateUnscaledFluxCC(self, status):
        r"""calculateUnscaledFluxCC(CMCAMethod self, bool const & status) -> bool"""
        return _COPASI.CMCAMethod_calculateUnscaledFluxCC(self, status)

    def getScaledElasticities(self):
        r"""getScaledElasticities(CMCAMethod self) -> FloatMatrix"""
        return _COPASI.CMCAMethod_getScaledElasticities(self)

    def getScaledConcentrationCC(self):
        r"""getScaledConcentrationCC(CMCAMethod self) -> FloatMatrix"""
        return _COPASI.CMCAMethod_getScaledConcentrationCC(self)

    def getScaledFluxCC(self):
        r"""getScaledFluxCC(CMCAMethod self) -> FloatMatrix"""
        return _COPASI.CMCAMethod_getScaledFluxCC(self)

    def getUnscaledElasticitiesAnn(self):
        r"""getUnscaledElasticitiesAnn(CMCAMethod self) -> CDataArray"""
        return _COPASI.CMCAMethod_getUnscaledElasticitiesAnn(self)

    def getScaledElasticitiesAnn(self):
        r"""getScaledElasticitiesAnn(CMCAMethod self) -> CDataArray"""
        return _COPASI.CMCAMethod_getScaledElasticitiesAnn(self)

    def getUnscaledConcentrationCCAnn(self):
        r"""getUnscaledConcentrationCCAnn(CMCAMethod self) -> CDataArray"""
        return _COPASI.CMCAMethod_getUnscaledConcentrationCCAnn(self)

    def getScaledConcentrationCCAnn(self):
        r"""getScaledConcentrationCCAnn(CMCAMethod self) -> CDataArray"""
        return _COPASI.CMCAMethod_getScaledConcentrationCCAnn(self)

    def getUnscaledFluxCCAnn(self):
        r"""getUnscaledFluxCCAnn(CMCAMethod self) -> CDataArray"""
        return _COPASI.CMCAMethod_getUnscaledFluxCCAnn(self)

    def getScaledFluxCCAnn(self):
        r"""getScaledFluxCCAnn(CMCAMethod self) -> CDataArray"""
        return _COPASI.CMCAMethod_getScaledFluxCCAnn(self)

    def resizeAllMatrices(self):
        r"""resizeAllMatrices(CMCAMethod self)"""
        return _COPASI.CMCAMethod_resizeAllMatrices(self)

    def scaleMCA(self, status, res):
        r"""scaleMCA(CMCAMethod self, bool const & status, double res) -> bool"""
        return _COPASI.CMCAMethod_scaleMCA(self, status, res)

    def checkSummationTheorems(self, resolution):
        r"""checkSummationTheorems(CMCAMethod self, double const & resolution) -> bool"""
        return _COPASI.CMCAMethod_checkSummationTheorems(self, resolution)

    def getModel(self):
        r"""getModel(CMCAMethod self) -> CModel"""
        return _COPASI.CMCAMethod_getModel(self)

    def CalculateMCA(self, res):
        r"""CalculateMCA(CMCAMethod self, double res) -> bool"""
        return _COPASI.CMCAMethod_CalculateMCA(self, res)

    def process(self):
        r"""process(CMCAMethod self) -> bool"""
        return _COPASI.CMCAMethod_process(self)

    def setSteadyStateTask(self, pSteadyStateTask):
        r"""setSteadyStateTask(CMCAMethod self, CSteadyStateTask pSteadyStateTask)"""
        return _COPASI.CMCAMethod_setSteadyStateTask(self, pSteadyStateTask)

    def getSteadyStateStatus(self):
        r"""getSteadyStateStatus(CMCAMethod self) -> CSteadyStateMethod::ReturnCode const &"""
        return _COPASI.CMCAMethod_getSteadyStateStatus(self)

    def setFactor(self, factor):
        r"""setFactor(CMCAMethod self, double factor)"""
        return _COPASI.CMCAMethod_setFactor(self, factor)

    def setSteadyStateResolution(self, factor):
        r"""setSteadyStateResolution(CMCAMethod self, double factor)"""
        return _COPASI.CMCAMethod_setSteadyStateResolution(self, factor)

    def isValidProblem(self, pProblem):
        r"""isValidProblem(CMCAMethod self, CCopasiProblem pProblem) -> bool"""
        return _COPASI.CMCAMethod_isValidProblem(self, pProblem)

# Register CMCAMethod in _COPASI:
_COPASI.CMCAMethod_swigregister(CMCAMethod)
class CMCAProblem(CCopasiProblem):
    r"""Proxy of C++ CMCAProblem class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CMCAProblem self, CDataContainer pParent=static_cast< CDataContainer * >((void *) 0)) -> CMCAProblem
        __init__(CMCAProblem self, CMCAProblem src, CDataContainer pParent) -> CMCAProblem
        """
        _COPASI.CMCAProblem_swiginit(self, _COPASI.new_CMCAProblem(*args))
    __swig_destroy__ = _COPASI.delete_CMCAProblem

    def setSteadyStateRequested(self, steadyStateRequested):
        r"""setSteadyStateRequested(CMCAProblem self, bool const & steadyStateRequested)"""
        return _COPASI.CMCAProblem_setSteadyStateRequested(self, steadyStateRequested)

    def isSteadyStateRequested(self):
        r"""isSteadyStateRequested(CMCAProblem self) -> bool"""
        return _COPASI.CMCAProblem_isSteadyStateRequested(self)

    def getSubTask(self):
        r"""getSubTask(CMCAProblem self) -> CCopasiTask"""
        return _COPASI.CMCAProblem_getSubTask(self)

# Register CMCAProblem in _COPASI:
_COPASI.CMCAProblem_swigregister(CMCAProblem)
class CMCATask(CCopasiTask):
    r"""Proxy of C++ CMCATask class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CMCATask self, CDataContainer pParent, CTaskEnum::Task const & type=mca) -> CMCATask
        __init__(CMCATask self, CMCATask src, CDataContainer pParent) -> CMCATask
        """
        _COPASI.CMCATask_swiginit(self, _COPASI.new_CMCATask(*args))
    __swig_destroy__ = _COPASI.delete_CMCATask

    def updateMatrices(self):
        r"""updateMatrices(CMCATask self) -> bool"""
        return _COPASI.CMCATask_updateMatrices(self)

    def setCallBack(self, callBack):
        r"""setCallBack(CMCATask self, CProcessReportLevel callBack) -> bool"""
        return _COPASI.CMCATask_setCallBack(self, callBack)

# Register CMCATask in _COPASI:
_COPASI.CMCATask_swigregister(CMCATask)
class CRootContainer(CDataContainer):
    r"""Proxy of C++ CRootContainer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _COPASI.delete_CRootContainer

    @staticmethod
    def destroy():
        r"""destroy()"""
        return _COPASI.CRootContainer_destroy()

    @staticmethod
    def getRoot():
        r"""getRoot() -> CDataContainer"""
        return _COPASI.CRootContainer_getRoot()

    @staticmethod
    def getConfiguration():
        r"""getConfiguration() -> CConfigurationFile"""
        return _COPASI.CRootContainer_getConfiguration()

    @staticmethod
    def getFunctionList():
        r"""getFunctionList() -> CFunctionDB"""
        return _COPASI.CRootContainer_getFunctionList()

    @staticmethod
    def getDatamodelList():
        r"""getDatamodelList() -> DataModelVector"""
        return _COPASI.CRootContainer_getDatamodelList()

    @staticmethod
    def getUnitList():
        r"""getUnitList() -> CUnitDefinitionDB *"""
        return _COPASI.CRootContainer_getUnitList()

    @staticmethod
    def getUnitDefFromSymbol(symbol):
        r"""getUnitDefFromSymbol(std::string const symbol) -> CUnitDefinition const *"""
        return _COPASI.CRootContainer_getUnitDefFromSymbol(symbol)

    @staticmethod
    def quoteUnitDefSymbol(symbol):
        r"""quoteUnitDefSymbol(std::string const & symbol) -> std::string"""
        return _COPASI.CRootContainer_quoteUnitDefSymbol(symbol)

    @staticmethod
    def replaceSymbol(oldSymbol, newSymbol):
        r"""replaceSymbol(std::string const & oldSymbol, std::string const & newSymbol)"""
        return _COPASI.CRootContainer_replaceSymbol(oldSymbol, newSymbol)

    @staticmethod
    def addDatamodel():
        r"""addDatamodel() -> CDataModel"""
        return _COPASI.CRootContainer_addDatamodel()

    @staticmethod
    def getUndefinedFunction():
        r"""getUndefinedFunction() -> CFunction"""
        return _COPASI.CRootContainer_getUndefinedFunction()

    @staticmethod
    def functionDefinitionChanged(pFunction):
        r"""functionDefinitionChanged(CFunction pFunction)"""
        return _COPASI.CRootContainer_functionDefinitionChanged(pFunction)

    @staticmethod
    def getKeyFactory():
        r"""getKeyFactory() -> CKeyFactory"""
        return _COPASI.CRootContainer_getKeyFactory()

    @staticmethod
    def getUnknownMiriamResource():
        r"""getUnknownMiriamResource() -> CMIRIAMResource"""
        return _COPASI.CRootContainer_getUnknownMiriamResource()

    @staticmethod
    def removeDatamodel(pDatamodel):
        r"""removeDatamodel(CDataModel pDatamodel) -> bool"""
        return _COPASI.CRootContainer_removeDatamodel(pDatamodel)

    @staticmethod
    def removeDatamodelWithIndex(index):
        r"""removeDatamodelWithIndex(unsigned int const index) -> bool"""
        return _COPASI.CRootContainer_removeDatamodelWithIndex(index)

    @staticmethod
    def getLicenseTxt():
        r"""getLicenseTxt() -> char const *"""
        return _COPASI.CRootContainer_getLicenseTxt()

    @staticmethod
    def getLicenseHTML():
        r"""getLicenseHTML() -> char const *"""
        return _COPASI.CRootContainer_getLicenseHTML()

    @staticmethod
    def get(index):
        r"""get(unsigned int index) -> CDataModel"""
        return _COPASI.CRootContainer_get(index)

    def getDatamodel(self, index):
        r"""getDatamodel(CRootContainer self, unsigned int index) -> CDataModel"""
        return _COPASI.CRootContainer_getDatamodel(self, index)

    @staticmethod
    def init():
        r"""init()"""
        return _COPASI.CRootContainer_init()

# Register CRootContainer in _COPASI:
_COPASI.CRootContainer_swigregister(CRootContainer)
class CEventAssignment(CDataContainer):
    r"""Proxy of C++ CEventAssignment class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def fromData(data, pParent):
        r"""fromData(CData data, CUndoObjectInterface pParent) -> CEventAssignment"""
        return _COPASI.CEventAssignment_fromData(data, pParent)

    def __init__(self, *args):
        r"""
        __init__(CEventAssignment self, std::string const & targetCN="", CDataContainer pParent=static_cast< CDataContainer * >((void *) 0)) -> CEventAssignment
        __init__(CEventAssignment self, CEventAssignment src, CDataContainer pParent) -> CEventAssignment
        """
        _COPASI.CEventAssignment_swiginit(self, _COPASI.new_CEventAssignment(*args))
    __swig_destroy__ = _COPASI.delete_CEventAssignment

    def __ne__(self, rhs):
        r"""__ne__(CEventAssignment self, CEventAssignment rhs) -> bool"""
        return _COPASI.CEventAssignment___ne__(self, rhs)

    def setObjectParent(self, pParent):
        r"""setObjectParent(CEventAssignment self, CDataContainer pParent) -> bool"""
        return _COPASI.CEventAssignment_setObjectParent(self, pParent)

    def compile(self, listOfContainer):
        r"""compile(CEventAssignment self, ContainerList listOfContainer) -> CIssue"""
        return _COPASI.CEventAssignment_compile(self, listOfContainer)

    def getKey(self):
        r"""getKey(CEventAssignment self) -> std::string const &"""
        return _COPASI.CEventAssignment_getKey(self)

    def setTargetCN(self, targetCN):
        r"""setTargetCN(CEventAssignment self, std::string const & targetCN) -> bool"""
        return _COPASI.CEventAssignment_setTargetCN(self, targetCN)

    def getTargetCN(self):
        r"""getTargetCN(CEventAssignment self) -> std::string const &"""
        return _COPASI.CEventAssignment_getTargetCN(self)

    def getXmlTargetCN(self):
        r"""getXmlTargetCN(CEventAssignment self) -> std::string"""
        return _COPASI.CEventAssignment_getXmlTargetCN(self)

    def getTargetObject(self):
        r"""getTargetObject(CEventAssignment self) -> CDataObject"""
        return _COPASI.CEventAssignment_getTargetObject(self)

    def setExpression(self, expression):
        r"""setExpression(CEventAssignment self, std::string const & expression) -> bool"""
        return _COPASI.CEventAssignment_setExpression(self, expression)

    def setExpressionPtr(self, pExpression):
        r"""setExpressionPtr(CEventAssignment self, CExpression pExpression) -> bool"""
        val = _COPASI.CEventAssignment_setExpressionPtr(self, pExpression)

        if(len(args) > 0 and args[0] != None and isinstance(args[0], COPASI.CExpression)):
          args[0].__disown__()


        return val


    def getExpression(self):
        r"""getExpression(CEventAssignment self) -> std::string"""
        return _COPASI.CEventAssignment_getExpression(self)

    def getExpressionPtr(self):
        r"""getExpressionPtr(CEventAssignment self) -> CExpression"""
        return _COPASI.CEventAssignment_getExpressionPtr(self)

# Register CEventAssignment in _COPASI:
_COPASI.CEventAssignment_swigregister(CEventAssignment)
class CEvent(CDataContainer, CAnnotation):
    r"""Proxy of C++ CEvent class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Assignment = _COPASI.CEvent_Assignment
    
    Discontinuity = _COPASI.CEvent_Discontinuity
    
    Callback = _COPASI.CEvent_Callback
    
    Stop = _COPASI.CEvent_Stop
    

    @staticmethod
    def fromData(data, pParent):
        r"""fromData(CData data, CUndoObjectInterface pParent) -> CEvent"""
        return _COPASI.CEvent_fromData(data, pParent)

    def __init__(self, *args):
        r"""
        __init__(CEvent self, std::string const & name="NoName", CDataContainer pParent=static_cast< CDataContainer * >((void *) 0)) -> CEvent
        __init__(CEvent self, CEvent src, CDataContainer pParent) -> CEvent
        """
        _COPASI.CEvent_swiginit(self, _COPASI.new_CEvent(*args))
    __swig_destroy__ = _COPASI.delete_CEvent

    def setObjectParent(self, pParent):
        r"""setObjectParent(CEvent self, CDataContainer pParent) -> bool"""
        return _COPASI.CEvent_setObjectParent(self, pParent)

    def getObjectDisplayName(self):
        r"""getObjectDisplayName(CEvent self) -> std::string"""
        return _COPASI.CEvent_getObjectDisplayName(self)

    def getKey(self):
        r"""getKey(CEvent self) -> std::string const &"""
        return _COPASI.CEvent_getKey(self)

    def getOriginFor(self, deletedObjects):
        r"""getOriginFor(CEvent self, DataObjectSet deletedObjects) -> std::string"""
        return _COPASI.CEvent_getOriginFor(self, deletedObjects)

    def compile(self, listOfContainer):
        r"""compile(CEvent self, ContainerList listOfContainer) -> CIssue"""
        return _COPASI.CEvent_compile(self, listOfContainer)

    def setSBMLId(self, id):
        r"""setSBMLId(CEvent self, std::string const & id)"""
        return _COPASI.CEvent_setSBMLId(self, id)

    def getSBMLId(self):
        r"""getSBMLId(CEvent self) -> std::string const &"""
        return _COPASI.CEvent_getSBMLId(self)

    def setDelayAssignment(self, delayCalculation):
        r"""setDelayAssignment(CEvent self, bool const & delayCalculation)"""
        return _COPASI.CEvent_setDelayAssignment(self, delayCalculation)

    def getDelayAssignment(self):
        r"""getDelayAssignment(CEvent self) -> bool const &"""
        return _COPASI.CEvent_getDelayAssignment(self)

    def setFireAtInitialTime(self, fireAtInitialTime):
        r"""setFireAtInitialTime(CEvent self, bool const & fireAtInitialTime)"""
        return _COPASI.CEvent_setFireAtInitialTime(self, fireAtInitialTime)

    def getFireAtInitialTime(self):
        r"""getFireAtInitialTime(CEvent self) -> bool const &"""
        return _COPASI.CEvent_getFireAtInitialTime(self)

    def setPersistentTrigger(self, persistentTrigger):
        r"""setPersistentTrigger(CEvent self, bool const & persistentTrigger)"""
        return _COPASI.CEvent_setPersistentTrigger(self, persistentTrigger)

    def getPersistentTrigger(self):
        r"""getPersistentTrigger(CEvent self) -> bool const &"""
        return _COPASI.CEvent_getPersistentTrigger(self)

    def setTriggerExpression(self, expression):
        r"""setTriggerExpression(CEvent self, std::string const & expression) -> bool"""
        return _COPASI.CEvent_setTriggerExpression(self, expression)

    def setTriggerExpressionPtr(self, pExpression):
        r"""setTriggerExpressionPtr(CEvent self, CExpression pExpression) -> bool"""
        val = _COPASI.CEvent_setTriggerExpressionPtr(self, pExpression)

        if(len(args) > 0 and args[0] != None and isinstance(args[0], COPASI.CExpression)):
          args[0].__disown__()


        return val


    def getTriggerExpression(self):
        r"""getTriggerExpression(CEvent self) -> std::string"""
        return _COPASI.CEvent_getTriggerExpression(self)

    def getTriggerExpressionPtr(self):
        r"""getTriggerExpressionPtr(CEvent self) -> CExpression"""
        return _COPASI.CEvent_getTriggerExpressionPtr(self)

    def setDelayExpression(self, expression):
        r"""setDelayExpression(CEvent self, std::string const & expression) -> bool"""
        return _COPASI.CEvent_setDelayExpression(self, expression)

    def setDelayExpressionPtr(self, pExpression):
        r"""setDelayExpressionPtr(CEvent self, CExpression pExpression) -> bool"""
        val = _COPASI.CEvent_setDelayExpressionPtr(self, pExpression)

        if(len(args) > 0 and args[0] != None and isinstance(args[0], COPASI.CExpression)):
          args[0].__disown__()


        return val


    def getDelayExpression(self):
        r"""getDelayExpression(CEvent self) -> std::string"""
        return _COPASI.CEvent_getDelayExpression(self)

    def getDelayExpressionPtr(self):
        r"""getDelayExpressionPtr(CEvent self) -> CExpression"""
        return _COPASI.CEvent_getDelayExpressionPtr(self)

    def setPriorityExpression(self, expression):
        r"""setPriorityExpression(CEvent self, std::string const & expression) -> bool"""
        return _COPASI.CEvent_setPriorityExpression(self, expression)

    def setPriorityExpressionPtr(self, pExpression):
        r"""setPriorityExpressionPtr(CEvent self, CExpression pExpression) -> bool"""
        return _COPASI.CEvent_setPriorityExpressionPtr(self, pExpression)

    def getPriorityExpression(self):
        r"""getPriorityExpression(CEvent self) -> std::string"""
        return _COPASI.CEvent_getPriorityExpression(self)

    def getPriorityExpressionPtr(self):
        r"""getPriorityExpressionPtr(CEvent self) -> CExpression"""
        return _COPASI.CEvent_getPriorityExpressionPtr(self)

    def getAssignments(self):
        r"""getAssignments(CEvent self) -> EventAssignmentVectorN"""
        return _COPASI.CEvent_getAssignments(self)

    def deleteAssignment(self, key):
        r"""deleteAssignment(CEvent self, std::string const & key)"""
        return _COPASI.CEvent_deleteAssignment(self, key)

    def getType(self):
        r"""getType(CEvent self) -> CEvent::Type const &"""
        return _COPASI.CEvent_getType(self)

    def setType(self, type):
        r"""setType(CEvent self, CEvent::Type const & type)"""
        return _COPASI.CEvent_setType(self, type)

    def createAssignment(self, *args):
        r"""createAssignment(CEvent self, std::string targetCN="") -> CEventAssignment"""
        return _COPASI.CEvent_createAssignment(self, *args)

    def getNumAssignments(self):
        r"""getNumAssignments(CEvent self) -> unsigned int"""
        return _COPASI.CEvent_getNumAssignments(self)

    def getAssignment(self, index):
        r"""getAssignment(CEvent self, unsigned int index) -> CEventAssignment"""
        return _COPASI.CEvent_getAssignment(self, index)

    def setNotes(self, notes):
        r"""setNotes(CEvent self, std::string const & notes)"""
        return _COPASI.CEvent_setNotes(self, notes)

    def getNotes(self):
        r"""getNotes(CEvent self) -> std::string const &"""
        return _COPASI.CEvent_getNotes(self)

    def getMiriamAnnotation(self):
        r"""getMiriamAnnotation(CEvent self) -> std::string const &"""
        return _COPASI.CEvent_getMiriamAnnotation(self)

    def setMiriamAnnotation(self, miriamAnnotation, newId, oldId):
        r"""setMiriamAnnotation(CEvent self, std::string const & miriamAnnotation, std::string const & newId, std::string const & oldId)"""
        return _COPASI.CEvent_setMiriamAnnotation(self, miriamAnnotation, newId, oldId)

    def hasUnsupportedAnnotation(self, name):
        r"""hasUnsupportedAnnotation(CEvent self, std::string name) -> bool"""
        return _COPASI.CEvent_hasUnsupportedAnnotation(self, name)

    def getNumUnsupportedAnnotations(self):
        r"""getNumUnsupportedAnnotations(CEvent self) -> int"""
        return _COPASI.CEvent_getNumUnsupportedAnnotations(self)

    def getUnsupportedAnnotation(self, *args):
        r"""
        getUnsupportedAnnotation(CEvent self, std::string name) -> std::string
        getUnsupportedAnnotation(CEvent self, int index) -> std::string
        """
        return _COPASI.CEvent_getUnsupportedAnnotation(self, *args)

    def getUnsupportedAnnotationName(self, index):
        r"""getUnsupportedAnnotationName(CEvent self, int index) -> std::string"""
        return _COPASI.CEvent_getUnsupportedAnnotationName(self, index)

    def addUnsupportedAnnotation(self, name, xml):
        r"""addUnsupportedAnnotation(CEvent self, std::string const & name, std::string const & xml) -> bool"""
        return _COPASI.CEvent_addUnsupportedAnnotation(self, name, xml)

    def replaceUnsupportedAnnotation(self, name, xml):
        r"""replaceUnsupportedAnnotation(CEvent self, std::string const & name, std::string const & xml) -> bool"""
        return _COPASI.CEvent_replaceUnsupportedAnnotation(self, name, xml)

    def removeUnsupportedAnnotation(self, name):
        r"""removeUnsupportedAnnotation(CEvent self, std::string const & name) -> bool"""
        return _COPASI.CEvent_removeUnsupportedAnnotation(self, name)

# Register CEvent in _COPASI:
_COPASI.CEvent_swigregister(CEvent)
class CLBase(object):
    r"""Proxy of C++ CLBase class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CLBase self) -> CLBase
        __init__(CLBase self, CLBase b) -> CLBase
        """
        _COPASI.CLBase_swiginit(self, _COPASI.new_CLBase(*args))
    __swig_destroy__ = _COPASI.delete_CLBase

    def moveBy(self, arg2):
        r"""moveBy(CLBase self, CLPoint arg2)"""
        return _COPASI.CLBase_moveBy(self, arg2)

    def getTag(self):
        r"""getTag(CLBase self) -> std::string const &"""
        return _COPASI.CLBase_getTag(self)

    def setTag(self, tag):
        r"""setTag(CLBase self, std::string const & tag)"""
        return _COPASI.CLBase_setTag(self, tag)

    def hasTag(self):
        r"""hasTag(CLBase self) -> bool"""
        return _COPASI.CLBase_hasTag(self)

# Register CLBase in _COPASI:
_COPASI.CLBase_swigregister(CLBase)
class CLPoint(CLBase):
    r"""Proxy of C++ CLPoint class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CLPoint self) -> CLPoint
        __init__(CLPoint self, double const & x, double const & y, double const & z=0.0) -> CLPoint
        """
        _COPASI.CLPoint_swiginit(self, _COPASI.new_CLPoint(*args))

    def setX(self, x):
        r"""setX(CLPoint self, double const & x)"""
        return _COPASI.CLPoint_setX(self, x)

    def setY(self, y):
        r"""setY(CLPoint self, double const & y)"""
        return _COPASI.CLPoint_setY(self, y)

    def setZ(self, z):
        r"""setZ(CLPoint self, double const & z)"""
        return _COPASI.CLPoint_setZ(self, z)

    def scale(self, scaleFactor):
        r"""scale(CLPoint self, double const & scaleFactor)"""
        return _COPASI.CLPoint_scale(self, scaleFactor)

    def __eq__(self, rhs):
        r"""__eq__(CLPoint self, CLPoint rhs) -> bool"""
        return _COPASI.CLPoint___eq__(self, rhs)

    def sub(self, rhs):
        r"""sub(CLPoint self, CLPoint rhs) -> CLPoint"""
        return _COPASI.CLPoint_sub(self, rhs)

    def add(self, rhs):
        r"""add(CLPoint self, CLPoint rhs) -> CLPoint"""
        return _COPASI.CLPoint_add(self, rhs)

    def moveBy(self, p):
        r"""moveBy(CLPoint self, CLPoint p)"""
        return _COPASI.CLPoint_moveBy(self, p)

    def mul(self, rhs):
        r"""mul(CLPoint self, double const & rhs) -> CLPoint"""
        return _COPASI.CLPoint_mul(self, rhs)

    def dot(self, rhs):
        r"""dot(CLPoint self, CLPoint rhs) -> double"""
        return _COPASI.CLPoint_dot(self, rhs)

    def isEmpty(self):
        r"""isEmpty(CLPoint self) -> bool"""
        return _COPASI.CLPoint_isEmpty(self)

    def getX(self):
        r"""getX(CLPoint self) -> double"""
        return _COPASI.CLPoint_getX(self)

    def getY(self):
        r"""getY(CLPoint self) -> double"""
        return _COPASI.CLPoint_getY(self)
    __swig_destroy__ = _COPASI.delete_CLPoint

# Register CLPoint in _COPASI:
_COPASI.CLPoint_swigregister(CLPoint)
class CLDimensions(CLBase):
    r"""Proxy of C++ CLDimensions class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CLDimensions self) -> CLDimensions
        __init__(CLDimensions self, double const & w, double const & h, double const & d=0.0) -> CLDimensions
        """
        _COPASI.CLDimensions_swiginit(self, _COPASI.new_CLDimensions(*args))

    def setWidth(self, w):
        r"""setWidth(CLDimensions self, double const & w)"""
        return _COPASI.CLDimensions_setWidth(self, w)

    def setHeight(self, h):
        r"""setHeight(CLDimensions self, double const & h)"""
        return _COPASI.CLDimensions_setHeight(self, h)

    def setDepth(self, d):
        r"""setDepth(CLDimensions self, double const & d)"""
        return _COPASI.CLDimensions_setDepth(self, d)

    def scale(self, scaleFactor):
        r"""scale(CLDimensions self, double const & scaleFactor)"""
        return _COPASI.CLDimensions_scale(self, scaleFactor)

    def isEmpty(self):
        r"""isEmpty(CLDimensions self) -> bool"""
        return _COPASI.CLDimensions_isEmpty(self)

    def getHeight(self):
        r"""getHeight(CLDimensions self) -> double"""
        return _COPASI.CLDimensions_getHeight(self)

    def getWidth(self):
        r"""getWidth(CLDimensions self) -> double"""
        return _COPASI.CLDimensions_getWidth(self)
    __swig_destroy__ = _COPASI.delete_CLDimensions

# Register CLDimensions in _COPASI:
_COPASI.CLDimensions_swigregister(CLDimensions)
class CLBoundingBox(CLBase):
    r"""Proxy of C++ CLBoundingBox class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CLBoundingBox self) -> CLBoundingBox
        __init__(CLBoundingBox self, CLPoint p, CLDimensions d) -> CLBoundingBox
        """
        _COPASI.CLBoundingBox_swiginit(self, _COPASI.new_CLBoundingBox(*args))

    def getPosition(self):
        r"""getPosition(CLBoundingBox self) -> CLPoint"""
        return _COPASI.CLBoundingBox_getPosition(self)

    def getCenter(self):
        r"""getCenter(CLBoundingBox self) -> CLPoint"""
        return _COPASI.CLBoundingBox_getCenter(self)

    def getDimensions(self):
        r"""getDimensions(CLBoundingBox self) -> CLDimensions"""
        return _COPASI.CLBoundingBox_getDimensions(self)

    def setPosition(self, p):
        r"""setPosition(CLBoundingBox self, CLPoint p)"""
        return _COPASI.CLBoundingBox_setPosition(self, p)

    def setDimensions(self, d):
        r"""setDimensions(CLBoundingBox self, CLDimensions d)"""
        return _COPASI.CLBoundingBox_setDimensions(self, d)

    def isEmpty(self):
        r"""isEmpty(CLBoundingBox self) -> bool"""
        return _COPASI.CLBoundingBox_isEmpty(self)

    def moveBy(self, p):
        r"""moveBy(CLBoundingBox self, CLPoint p)"""
        return _COPASI.CLBoundingBox_moveBy(self, p)

    def scale(self, scaleFactor):
        r"""scale(CLBoundingBox self, double const & scaleFactor)"""
        return _COPASI.CLBoundingBox_scale(self, scaleFactor)
    __swig_destroy__ = _COPASI.delete_CLBoundingBox

# Register CLBoundingBox in _COPASI:
_COPASI.CLBoundingBox_swigregister(CLBoundingBox)
class CLGraphicalObject(CLBase, CDataContainer):
    r"""Proxy of C++ CLGraphicalObject class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def fromData(data, pParent):
        r"""fromData(CData data, CUndoObjectInterface pParent) -> CLGraphicalObject"""
        return _COPASI.CLGraphicalObject_fromData(data, pParent)

    def __init__(self, *args):
        r"""
        __init__(CLGraphicalObject self, std::string const & name="GraphicalObject", CDataContainer pParent=static_cast< CDataContainer * >((void *) 0)) -> CLGraphicalObject
        __init__(CLGraphicalObject self, CLGraphicalObject src, CDataContainer pParent) -> CLGraphicalObject
        """
        _COPASI.CLGraphicalObject_swiginit(self, _COPASI.new_CLGraphicalObject(*args))
    __swig_destroy__ = _COPASI.delete_CLGraphicalObject

    def getKey(self):
        r"""getKey(CLGraphicalObject self) -> std::string const &"""
        return _COPASI.CLGraphicalObject_getKey(self)

    def clone(self):
        r"""clone(CLGraphicalObject self) -> CLGraphicalObject"""
        return _COPASI.CLGraphicalObject_clone(self)

    def moveBy(self, p):
        r"""moveBy(CLGraphicalObject self, CLPoint p)"""
        return _COPASI.CLGraphicalObject_moveBy(self, p)

    def getBoundingBox(self):
        r"""getBoundingBox(CLGraphicalObject self) -> CLBoundingBox"""
        return _COPASI.CLGraphicalObject_getBoundingBox(self)

    def setBoundingBox(self, bb):
        r"""setBoundingBox(CLGraphicalObject self, CLBoundingBox bb)"""
        return _COPASI.CLGraphicalObject_setBoundingBox(self, bb)

    def getPosition(self):
        r"""getPosition(CLGraphicalObject self) -> CLPoint"""
        return _COPASI.CLGraphicalObject_getPosition(self)

    def setPosition(self, p):
        r"""setPosition(CLGraphicalObject self, CLPoint p)"""
        return _COPASI.CLGraphicalObject_setPosition(self, p)

    def getX(self):
        r"""getX(CLGraphicalObject self) -> double const &"""
        return _COPASI.CLGraphicalObject_getX(self)

    def setX(self, x):
        r"""setX(CLGraphicalObject self, double const & x)"""
        return _COPASI.CLGraphicalObject_setX(self, x)

    def getY(self):
        r"""getY(CLGraphicalObject self) -> double const &"""
        return _COPASI.CLGraphicalObject_getY(self)

    def setY(self, y):
        r"""setY(CLGraphicalObject self, double const & y)"""
        return _COPASI.CLGraphicalObject_setY(self, y)

    def getDimensions(self):
        r"""getDimensions(CLGraphicalObject self) -> CLDimensions"""
        return _COPASI.CLGraphicalObject_getDimensions(self)

    def setDimensions(self, d):
        r"""setDimensions(CLGraphicalObject self, CLDimensions d)"""
        return _COPASI.CLGraphicalObject_setDimensions(self, d)

    def getWidth(self):
        r"""getWidth(CLGraphicalObject self) -> double const &"""
        return _COPASI.CLGraphicalObject_getWidth(self)

    def setWidth(self, w):
        r"""setWidth(CLGraphicalObject self, double const & w)"""
        return _COPASI.CLGraphicalObject_setWidth(self, w)

    def getHeight(self):
        r"""getHeight(CLGraphicalObject self) -> double const &"""
        return _COPASI.CLGraphicalObject_getHeight(self)

    def setHeight(self, h):
        r"""setHeight(CLGraphicalObject self, double const & h)"""
        return _COPASI.CLGraphicalObject_setHeight(self, h)

    def getModelObjectKey(self):
        r"""getModelObjectKey(CLGraphicalObject self) -> std::string const &"""
        return _COPASI.CLGraphicalObject_getModelObjectKey(self)

    def setModelObjectKey(self, k):
        r"""setModelObjectKey(CLGraphicalObject self, std::string const & k)"""
        return _COPASI.CLGraphicalObject_setModelObjectKey(self, k)

    def getModelObject(self):
        r"""getModelObject(CLGraphicalObject self) -> CDataObject"""
        return _COPASI.CLGraphicalObject_getModelObject(self)

    def getModelObjectName(self):
        r"""getModelObjectName(CLGraphicalObject self) -> std::string"""
        return _COPASI.CLGraphicalObject_getModelObjectName(self)

    def getModelObjectDisplayName(self, regular=True, richtext=False):
        r"""getModelObjectDisplayName(CLGraphicalObject self, bool regular=True, bool richtext=False) -> std::string"""
        return _COPASI.CLGraphicalObject_getModelObjectDisplayName(self, regular, richtext)

    def setObjectRole(self, role):
        r"""setObjectRole(CLGraphicalObject self, std::string const & role)"""
        return _COPASI.CLGraphicalObject_setObjectRole(self, role)

    def getObjectRole(self):
        r"""getObjectRole(CLGraphicalObject self) -> std::string const &"""
        return _COPASI.CLGraphicalObject_getObjectRole(self)

    def hasValidModelReference(self):
        r"""hasValidModelReference(CLGraphicalObject self) -> bool"""
        return _COPASI.CLGraphicalObject_hasValidModelReference(self)

# Register CLGraphicalObject in _COPASI:
_COPASI.CLGraphicalObject_swigregister(CLGraphicalObject)
class CLMetabGlyph(CLGraphicalObject):
    r"""Proxy of C++ CLMetabGlyph class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def fromData(data, pParent):
        r"""fromData(CData data, CUndoObjectInterface pParent) -> CLMetabGlyph"""
        return _COPASI.CLMetabGlyph_fromData(data, pParent)

    def __init__(self, *args):
        r"""
        __init__(CLMetabGlyph self, std::string const & name="MetabGlyph", CDataContainer pParent=static_cast< CDataContainer * >((void *) 0)) -> CLMetabGlyph
        __init__(CLMetabGlyph self, CLMetabGlyph src, CDataContainer pParent) -> CLMetabGlyph
        """
        _COPASI.CLMetabGlyph_swiginit(self, _COPASI.new_CLMetabGlyph(*args))

    def clone(self):
        r"""clone(CLMetabGlyph self) -> CLGraphicalObject"""
        return _COPASI.CLMetabGlyph_clone(self)
    __swig_destroy__ = _COPASI.delete_CLMetabGlyph

# Register CLMetabGlyph in _COPASI:
_COPASI.CLMetabGlyph_swigregister(CLMetabGlyph)
class CLCompartmentGlyph(CLGraphicalObject):
    r"""Proxy of C++ CLCompartmentGlyph class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def fromData(data, pParent):
        r"""fromData(CData data, CUndoObjectInterface pParent) -> CLCompartmentGlyph"""
        return _COPASI.CLCompartmentGlyph_fromData(data, pParent)

    def __init__(self, *args):
        r"""
        __init__(CLCompartmentGlyph self, std::string const & name="CompartmentGlyph", CDataContainer pParent=static_cast< CDataContainer * >((void *) 0)) -> CLCompartmentGlyph
        __init__(CLCompartmentGlyph self, CLCompartmentGlyph src, CDataContainer pParent) -> CLCompartmentGlyph
        """
        _COPASI.CLCompartmentGlyph_swiginit(self, _COPASI.new_CLCompartmentGlyph(*args))

    def clone(self):
        r"""clone(CLCompartmentGlyph self) -> CLGraphicalObject"""
        return _COPASI.CLCompartmentGlyph_clone(self)
    __swig_destroy__ = _COPASI.delete_CLCompartmentGlyph

# Register CLCompartmentGlyph in _COPASI:
_COPASI.CLCompartmentGlyph_swigregister(CLCompartmentGlyph)
class CLTextGlyph(CLGraphicalObject):
    r"""Proxy of C++ CLTextGlyph class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def fromData(data, pParent):
        r"""fromData(CData data, CUndoObjectInterface pParent) -> CLTextGlyph"""
        return _COPASI.CLTextGlyph_fromData(data, pParent)

    def __init__(self, *args):
        r"""
        __init__(CLTextGlyph self, std::string const & name="TextGlyph", CDataContainer pParent=static_cast< CDataContainer * >((void *) 0)) -> CLTextGlyph
        __init__(CLTextGlyph self, CLTextGlyph src, CDataContainer pParent) -> CLTextGlyph
        """
        _COPASI.CLTextGlyph_swiginit(self, _COPASI.new_CLTextGlyph(*args))

    def getText(self):
        r"""getText(CLTextGlyph self) -> std::string"""
        return _COPASI.CLTextGlyph_getText(self)

    def setText(self, t):
        r"""setText(CLTextGlyph self, std::string const & t)"""
        return _COPASI.CLTextGlyph_setText(self, t)

    def clearText(self):
        r"""clearText(CLTextGlyph self)"""
        return _COPASI.CLTextGlyph_clearText(self)

    def isTextSet(self):
        r"""isTextSet(CLTextGlyph self) -> bool"""
        return _COPASI.CLTextGlyph_isTextSet(self)

    def getGraphicalObjectKey(self):
        r"""getGraphicalObjectKey(CLTextGlyph self) -> std::string const &"""
        return _COPASI.CLTextGlyph_getGraphicalObjectKey(self)

    def getGraphicalObject(self):
        r"""getGraphicalObject(CLTextGlyph self) -> CLGraphicalObject"""
        return _COPASI.CLTextGlyph_getGraphicalObject(self)

    def setGraphicalObjectKey(self, k):
        r"""setGraphicalObjectKey(CLTextGlyph self, std::string const & k)"""
        return _COPASI.CLTextGlyph_setGraphicalObjectKey(self, k)

    def clone(self):
        r"""clone(CLTextGlyph self) -> CLGraphicalObject"""
        return _COPASI.CLTextGlyph_clone(self)
    __swig_destroy__ = _COPASI.delete_CLTextGlyph

# Register CLTextGlyph in _COPASI:
_COPASI.CLTextGlyph_swigregister(CLTextGlyph)
class CLLineSegment(CLBase):
    r"""Proxy of C++ CLLineSegment class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CLLineSegment self) -> CLLineSegment
        __init__(CLLineSegment self, CLPoint s, CLPoint e) -> CLLineSegment
        __init__(CLLineSegment self, CLPoint s, CLPoint e, CLPoint b1, CLPoint b2) -> CLLineSegment
        """
        _COPASI.CLLineSegment_swiginit(self, _COPASI.new_CLLineSegment(*args))

    def getStart(self):
        r"""getStart(CLLineSegment self) -> CLPoint"""
        return _COPASI.CLLineSegment_getStart(self)

    def getEnd(self):
        r"""getEnd(CLLineSegment self) -> CLPoint"""
        return _COPASI.CLLineSegment_getEnd(self)

    def setStart(self, p):
        r"""setStart(CLLineSegment self, CLPoint p)"""
        return _COPASI.CLLineSegment_setStart(self, p)

    def setEnd(self, p):
        r"""setEnd(CLLineSegment self, CLPoint p)"""
        return _COPASI.CLLineSegment_setEnd(self, p)

    def getBase1(self):
        r"""getBase1(CLLineSegment self) -> CLPoint"""
        return _COPASI.CLLineSegment_getBase1(self)

    def getBase2(self):
        r"""getBase2(CLLineSegment self) -> CLPoint"""
        return _COPASI.CLLineSegment_getBase2(self)

    def setBase1(self, p):
        r"""setBase1(CLLineSegment self, CLPoint p)"""
        return _COPASI.CLLineSegment_setBase1(self, p)

    def setBase2(self, p):
        r"""setBase2(CLLineSegment self, CLPoint p)"""
        return _COPASI.CLLineSegment_setBase2(self, p)

    def isBezier(self):
        r"""isBezier(CLLineSegment self) -> bool"""
        return _COPASI.CLLineSegment_isBezier(self)

    def setIsBezier(self, b):
        r"""setIsBezier(CLLineSegment self, bool b)"""
        return _COPASI.CLLineSegment_setIsBezier(self, b)

    def __eq__(self, rhs):
        r"""__eq__(CLLineSegment self, CLLineSegment rhs) -> bool"""
        return _COPASI.CLLineSegment___eq__(self, rhs)

    def scale(self, scaleFactor):
        r"""scale(CLLineSegment self, double const & scaleFactor)"""
        return _COPASI.CLLineSegment_scale(self, scaleFactor)
    __swig_destroy__ = _COPASI.delete_CLLineSegment

# Register CLLineSegment in _COPASI:
_COPASI.CLLineSegment_swigregister(CLLineSegment)
class CLCurve(CLBase):
    r"""Proxy of C++ CLCurve class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CLCurve self) -> CLCurve
        __init__(CLCurve self, CLCurve c) -> CLCurve
        """
        _COPASI.CLCurve_swiginit(self, _COPASI.new_CLCurve(*args))
    __swig_destroy__ = _COPASI.delete_CLCurve

    def getCurveSegments(self):
        r"""getCurveSegments(CLCurve self) -> LineSegmentStdVector"""
        return _COPASI.CLCurve_getCurveSegments(self)

    def getSegmentAt(self, i):
        r"""getSegmentAt(CLCurve self, size_t i) -> CLLineSegment"""
        return _COPASI.CLCurve_getSegmentAt(self, i)

    def getNumCurveSegments(self):
        r"""getNumCurveSegments(CLCurve self) -> size_t"""
        return _COPASI.CLCurve_getNumCurveSegments(self)

    def clear(self):
        r"""clear(CLCurve self)"""
        return _COPASI.CLCurve_clear(self)

    def addCurveSegment(self, ls):
        r"""addCurveSegment(CLCurve self, CLLineSegment ls)"""
        return _COPASI.CLCurve_addCurveSegment(self, ls)

    def isContinuous(self):
        r"""isContinuous(CLCurve self) -> bool"""
        return _COPASI.CLCurve_isContinuous(self)

    def getListOfPoints(self):
        r"""getListOfPoints(CLCurve self) -> PointStdVector"""
        return _COPASI.CLCurve_getListOfPoints(self)

    def __eq__(self, rhs):
        r"""__eq__(CLCurve self, CLCurve rhs) -> bool"""
        return _COPASI.CLCurve___eq__(self, rhs)

    def scale(self, scaleFactor):
        r"""scale(CLCurve self, double const & scaleFactor)"""
        return _COPASI.CLCurve_scale(self, scaleFactor)

    def calculateBoundingBox(self):
        r"""calculateBoundingBox(CLCurve self) -> CLBoundingBox"""
        return _COPASI.CLCurve_calculateBoundingBox(self)

    def moveBy(self, p):
        r"""moveBy(CLCurve self, CLPoint p)"""
        return _COPASI.CLCurve_moveBy(self, p)

# Register CLCurve in _COPASI:
_COPASI.CLCurve_swigregister(CLCurve)
class CLGlyphWithCurve(CLGraphicalObject):
    r"""Proxy of C++ CLGlyphWithCurve class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CLGlyphWithCurve self, std::string const & name="ReferenceGlyph", CDataContainer pParent=static_cast< CDataContainer * >((void *) 0)) -> CLGlyphWithCurve
        __init__(CLGlyphWithCurve self, CLGlyphWithCurve src, CDataContainer pParent) -> CLGlyphWithCurve
        """
        _COPASI.CLGlyphWithCurve_swiginit(self, _COPASI.new_CLGlyphWithCurve(*args))

    def getCurve(self):
        r"""getCurve(CLGlyphWithCurve self) -> CLCurve"""
        return _COPASI.CLGlyphWithCurve_getCurve(self)

    def setCurve(self, c):
        r"""setCurve(CLGlyphWithCurve self, CLCurve c)"""
        return _COPASI.CLGlyphWithCurve_setCurve(self, c)

    def moveBy(self, p):
        r"""moveBy(CLGlyphWithCurve self, CLPoint p)"""
        return _COPASI.CLGlyphWithCurve_moveBy(self, p)
    __swig_destroy__ = _COPASI.delete_CLGlyphWithCurve

# Register CLGlyphWithCurve in _COPASI:
_COPASI.CLGlyphWithCurve_swigregister(CLGlyphWithCurve)
class CLReferenceGlyph(CLGlyphWithCurve):
    r"""Proxy of C++ CLReferenceGlyph class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def fromData(data, pParent):
        r"""fromData(CData data, CUndoObjectInterface pParent) -> CLReferenceGlyph"""
        return _COPASI.CLReferenceGlyph_fromData(data, pParent)

    def __init__(self, *args):
        r"""
        __init__(CLReferenceGlyph self, std::string const & name="ReferenceGlyph", CDataContainer pParent=static_cast< CDataContainer * >((void *) 0)) -> CLReferenceGlyph
        __init__(CLReferenceGlyph self, CLReferenceGlyph src, CDataContainer pParent) -> CLReferenceGlyph
        """
        _COPASI.CLReferenceGlyph_swiginit(self, _COPASI.new_CLReferenceGlyph(*args))

    def getRole(self):
        r"""getRole(CLReferenceGlyph self) -> std::string const &"""
        return _COPASI.CLReferenceGlyph_getRole(self)

    def setRole(self, r):
        r"""setRole(CLReferenceGlyph self, std::string const & r)"""
        return _COPASI.CLReferenceGlyph_setRole(self, r)

    def getTargetGlyphKey(self):
        r"""getTargetGlyphKey(CLReferenceGlyph self) -> std::string const &"""
        return _COPASI.CLReferenceGlyph_getTargetGlyphKey(self)

    def getTargetGlyph(self):
        r"""getTargetGlyph(CLReferenceGlyph self) -> CLGraphicalObject"""
        return _COPASI.CLReferenceGlyph_getTargetGlyph(self)

    def setTargetGlyphKey(self, k):
        r"""setTargetGlyphKey(CLReferenceGlyph self, std::string const & k)"""
        return _COPASI.CLReferenceGlyph_setTargetGlyphKey(self, k)

    def clone(self):
        r"""clone(CLReferenceGlyph self) -> CLGraphicalObject"""
        return _COPASI.CLReferenceGlyph_clone(self)
    __swig_destroy__ = _COPASI.delete_CLReferenceGlyph

# Register CLReferenceGlyph in _COPASI:
_COPASI.CLReferenceGlyph_swigregister(CLReferenceGlyph)
class CLMetabReferenceGlyph(CLGlyphWithCurve):
    r"""Proxy of C++ CLMetabReferenceGlyph class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    UNDEFINED = _COPASI.CLMetabReferenceGlyph_UNDEFINED
    
    SUBSTRATE = _COPASI.CLMetabReferenceGlyph_SUBSTRATE
    
    PRODUCT = _COPASI.CLMetabReferenceGlyph_PRODUCT
    
    SIDESUBSTRATE = _COPASI.CLMetabReferenceGlyph_SIDESUBSTRATE
    
    SIDEPRODUCT = _COPASI.CLMetabReferenceGlyph_SIDEPRODUCT
    
    MODIFIER = _COPASI.CLMetabReferenceGlyph_MODIFIER
    
    ACTIVATOR = _COPASI.CLMetabReferenceGlyph_ACTIVATOR
    
    INHIBITOR = _COPASI.CLMetabReferenceGlyph_INHIBITOR
    

    @staticmethod
    def fromData(data, pParent):
        r"""fromData(CData data, CUndoObjectInterface pParent) -> CLMetabReferenceGlyph"""
        return _COPASI.CLMetabReferenceGlyph_fromData(data, pParent)

    def __init__(self, *args):
        r"""
        __init__(CLMetabReferenceGlyph self, std::string const & name="MetabReferenceGlyph", CDataContainer pParent=static_cast< CDataContainer * >((void *) 0)) -> CLMetabReferenceGlyph
        __init__(CLMetabReferenceGlyph self, CLMetabReferenceGlyph src, CDataContainer pParent) -> CLMetabReferenceGlyph
        """
        _COPASI.CLMetabReferenceGlyph_swiginit(self, _COPASI.new_CLMetabReferenceGlyph(*args))

    def getMetabGlyphKey(self):
        r"""getMetabGlyphKey(CLMetabReferenceGlyph self) -> std::string const &"""
        return _COPASI.CLMetabReferenceGlyph_getMetabGlyphKey(self)

    def getMetabGlyph(self):
        r"""getMetabGlyph(CLMetabReferenceGlyph self) -> CLMetabGlyph"""
        return _COPASI.CLMetabReferenceGlyph_getMetabGlyph(self)

    def setMetabGlyphKey(self, k):
        r"""setMetabGlyphKey(CLMetabReferenceGlyph self, std::string const & k)"""
        return _COPASI.CLMetabReferenceGlyph_setMetabGlyphKey(self, k)

    def getRole(self):
        r"""getRole(CLMetabReferenceGlyph self) -> CLMetabReferenceGlyph::Role"""
        return _COPASI.CLMetabReferenceGlyph_getRole(self)

    def setRole(self, r):
        r"""setRole(CLMetabReferenceGlyph self, CLMetabReferenceGlyph::Role r)"""
        return _COPASI.CLMetabReferenceGlyph_setRole(self, r)

    def getFunctionalRole(self):
        r"""getFunctionalRole(CLMetabReferenceGlyph self) -> CLMetabReferenceGlyph::Role"""
        return _COPASI.CLMetabReferenceGlyph_getFunctionalRole(self)

    def setFunctionalRole(self, r):
        r"""setFunctionalRole(CLMetabReferenceGlyph self, CLMetabReferenceGlyph::Role r)"""
        return _COPASI.CLMetabReferenceGlyph_setFunctionalRole(self, r)

    def getRoleDisplayName(self):
        r"""getRoleDisplayName(CLMetabReferenceGlyph self) -> std::string const &"""
        return _COPASI.CLMetabReferenceGlyph_getRoleDisplayName(self)

    def clone(self):
        r"""clone(CLMetabReferenceGlyph self) -> CLGraphicalObject"""
        return _COPASI.CLMetabReferenceGlyph_clone(self)
    __swig_destroy__ = _COPASI.delete_CLMetabReferenceGlyph

# Register CLMetabReferenceGlyph in _COPASI:
_COPASI.CLMetabReferenceGlyph_swigregister(CLMetabReferenceGlyph)
class CLGeneralGlyph(CLGlyphWithCurve):
    r"""Proxy of C++ CLGeneralGlyph class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def fromData(data, pParent):
        r"""fromData(CData data, CUndoObjectInterface pParent) -> CLGeneralGlyph"""
        return _COPASI.CLGeneralGlyph_fromData(data, pParent)

    def __init__(self, *args):
        r"""
        __init__(CLGeneralGlyph self, std::string const & name="GeneralGlyph", CDataContainer pParent=static_cast< CDataContainer * >((void *) 0)) -> CLGeneralGlyph
        __init__(CLGeneralGlyph self, CLGeneralGlyph src, CDataContainer pParent) -> CLGeneralGlyph
        """
        _COPASI.CLGeneralGlyph_swiginit(self, _COPASI.new_CLGeneralGlyph(*args))

    def getListOfReferenceGlyphs(self):
        r"""getListOfReferenceGlyphs(CLGeneralGlyph self) -> ReferenceGlyphVector"""
        return _COPASI.CLGeneralGlyph_getListOfReferenceGlyphs(self)

    def getListOfSubglyphs(self):
        r"""getListOfSubglyphs(CLGeneralGlyph self) -> GraphicalObjectVector"""
        return _COPASI.CLGeneralGlyph_getListOfSubglyphs(self)

    def addReferenceGlyph(self, glyph):
        r"""addReferenceGlyph(CLGeneralGlyph self, CLReferenceGlyph glyph)"""
        return _COPASI.CLGeneralGlyph_addReferenceGlyph(self, glyph)

    def addSubglyph(self, glyph):
        r"""addSubglyph(CLGeneralGlyph self, CLGraphicalObject glyph)"""
        return _COPASI.CLGeneralGlyph_addSubglyph(self, glyph)

    def moveBy(self, p):
        r"""moveBy(CLGeneralGlyph self, CLPoint p)"""
        return _COPASI.CLGeneralGlyph_moveBy(self, p)

    def clone(self):
        r"""clone(CLGeneralGlyph self) -> CLGraphicalObject"""
        return _COPASI.CLGeneralGlyph_clone(self)
    __swig_destroy__ = _COPASI.delete_CLGeneralGlyph

# Register CLGeneralGlyph in _COPASI:
_COPASI.CLGeneralGlyph_swigregister(CLGeneralGlyph)
class CLReactionGlyph(CLGlyphWithCurve):
    r"""Proxy of C++ CLReactionGlyph class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def fromData(data, pParent):
        r"""fromData(CData data, CUndoObjectInterface pParent) -> CLReactionGlyph"""
        return _COPASI.CLReactionGlyph_fromData(data, pParent)

    def __init__(self, *args):
        r"""
        __init__(CLReactionGlyph self, std::string const & name="ReactionGlyph", CDataContainer pParent=static_cast< CDataContainer * >((void *) 0)) -> CLReactionGlyph
        __init__(CLReactionGlyph self, CLReactionGlyph src, CDataContainer pParent) -> CLReactionGlyph
        """
        _COPASI.CLReactionGlyph_swiginit(self, _COPASI.new_CLReactionGlyph(*args))

    def getListOfMetabReferenceGlyphs(self):
        r"""getListOfMetabReferenceGlyphs(CLReactionGlyph self) -> MetabReferenceGlyphVector"""
        return _COPASI.CLReactionGlyph_getListOfMetabReferenceGlyphs(self)

    def addMetabReferenceGlyph(self, glyph):
        r"""addMetabReferenceGlyph(CLReactionGlyph self, CLMetabReferenceGlyph glyph)"""
        return _COPASI.CLReactionGlyph_addMetabReferenceGlyph(self, glyph)

    def moveBy(self, p):
        r"""moveBy(CLReactionGlyph self, CLPoint p)"""
        return _COPASI.CLReactionGlyph_moveBy(self, p)

    def clone(self):
        r"""clone(CLReactionGlyph self) -> CLGraphicalObject"""
        return _COPASI.CLReactionGlyph_clone(self)
    __swig_destroy__ = _COPASI.delete_CLReactionGlyph

# Register CLReactionGlyph in _COPASI:
_COPASI.CLReactionGlyph_swigregister(CLReactionGlyph)
class MetabReferenceGlyphVector(CDataContainer):
    r"""Proxy of C++ CDataVector< CLMetabReferenceGlyph > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _COPASI.delete_MetabReferenceGlyphVector

    def cleanup(self):
        r"""cleanup(MetabReferenceGlyphVector self)"""
        return _COPASI.MetabReferenceGlyphVector_cleanup(self)

    def addCopy(self, src):
        r"""addCopy(MetabReferenceGlyphVector self, CLMetabReferenceGlyph src) -> bool"""
        return _COPASI.MetabReferenceGlyphVector_addCopy(self, src)

    def swap(self, indexFrom, indexTo):
        r"""swap(MetabReferenceGlyphVector self, size_t const & indexFrom, size_t const & indexTo)"""
        return _COPASI.MetabReferenceGlyphVector_swap(self, indexFrom, indexTo)

    def add(self, pObject, adopt=True):
        
        return _COPASI.MetabReferenceGlyphVector_add(self, pObject, adopt)

    def getObject(self, name):
        r"""getObject(MetabReferenceGlyphVector self, CCommonName name) -> CObjectInterface"""
        return _COPASI.MetabReferenceGlyphVector_getObject(self, name)

    def size(self):
        r"""size(MetabReferenceGlyphVector self) -> size_t"""
        return _COPASI.MetabReferenceGlyphVector_size(self)

    def empty(self):
        r"""empty(MetabReferenceGlyphVector self) -> bool"""
        return _COPASI.MetabReferenceGlyphVector_empty(self)

    def clear(self):
        r"""clear(MetabReferenceGlyphVector self)"""
        return _COPASI.MetabReferenceGlyphVector_clear(self)

    def getIndex(self, pObject):
        r"""getIndex(MetabReferenceGlyphVector self, CDataObject pObject) -> size_t"""
        return _COPASI.MetabReferenceGlyphVector_getIndex(self, pObject)

    def remove(self, index):
        r"""remove(MetabReferenceGlyphVector self, unsigned int index)"""
        return _COPASI.MetabReferenceGlyphVector_remove(self, index)

    def get(self, index):
        r"""get(MetabReferenceGlyphVector self, unsigned int index) -> CDataObject"""
        return _COPASI.MetabReferenceGlyphVector_get(self, index)

    def addAndOwn(self, DISOWN):
        r"""addAndOwn(MetabReferenceGlyphVector self, CLMetabReferenceGlyph DISOWN) -> bool"""
        return _COPASI.MetabReferenceGlyphVector_addAndOwn(self, DISOWN)

    def removeObject(self, pObject):
        r"""removeObject(MetabReferenceGlyphVector self, CDataObject pObject) -> bool"""
        return _COPASI.MetabReferenceGlyphVector_removeObject(self, pObject)

    def __len__(self):
        r"""__len__(MetabReferenceGlyphVector self) -> size_t"""
        return _COPASI.MetabReferenceGlyphVector___len__(self)

    def __getitem__(self, index):
        r"""__getitem__(MetabReferenceGlyphVector self, unsigned int index) -> CDataObject"""
        return _COPASI.MetabReferenceGlyphVector___getitem__(self, index)

# Register MetabReferenceGlyphVector in _COPASI:
_COPASI.MetabReferenceGlyphVector_swigregister(MetabReferenceGlyphVector)
class ReferenceGlyphVector(CDataContainer):
    r"""Proxy of C++ CDataVector< CLReferenceGlyph > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _COPASI.delete_ReferenceGlyphVector

    def cleanup(self):
        r"""cleanup(ReferenceGlyphVector self)"""
        return _COPASI.ReferenceGlyphVector_cleanup(self)

    def addCopy(self, src):
        r"""addCopy(ReferenceGlyphVector self, CLReferenceGlyph src) -> bool"""
        return _COPASI.ReferenceGlyphVector_addCopy(self, src)

    def swap(self, indexFrom, indexTo):
        r"""swap(ReferenceGlyphVector self, size_t const & indexFrom, size_t const & indexTo)"""
        return _COPASI.ReferenceGlyphVector_swap(self, indexFrom, indexTo)

    def add(self, pObject, adopt=True):
        
        return _COPASI.ReferenceGlyphVector_add(self, pObject, adopt)

    def getObject(self, name):
        r"""getObject(ReferenceGlyphVector self, CCommonName name) -> CObjectInterface"""
        return _COPASI.ReferenceGlyphVector_getObject(self, name)

    def size(self):
        r"""size(ReferenceGlyphVector self) -> size_t"""
        return _COPASI.ReferenceGlyphVector_size(self)

    def empty(self):
        r"""empty(ReferenceGlyphVector self) -> bool"""
        return _COPASI.ReferenceGlyphVector_empty(self)

    def clear(self):
        r"""clear(ReferenceGlyphVector self)"""
        return _COPASI.ReferenceGlyphVector_clear(self)

    def getIndex(self, pObject):
        r"""getIndex(ReferenceGlyphVector self, CDataObject pObject) -> size_t"""
        return _COPASI.ReferenceGlyphVector_getIndex(self, pObject)

    def remove(self, index):
        r"""remove(ReferenceGlyphVector self, unsigned int index)"""
        return _COPASI.ReferenceGlyphVector_remove(self, index)

    def get(self, index):
        r"""get(ReferenceGlyphVector self, unsigned int index) -> CDataObject"""
        return _COPASI.ReferenceGlyphVector_get(self, index)

    def addAndOwn(self, DISOWN):
        r"""addAndOwn(ReferenceGlyphVector self, CLReferenceGlyph DISOWN) -> bool"""
        return _COPASI.ReferenceGlyphVector_addAndOwn(self, DISOWN)

    def removeObject(self, pObject):
        r"""removeObject(ReferenceGlyphVector self, CDataObject pObject) -> bool"""
        return _COPASI.ReferenceGlyphVector_removeObject(self, pObject)

    def __len__(self):
        r"""__len__(ReferenceGlyphVector self) -> size_t"""
        return _COPASI.ReferenceGlyphVector___len__(self)

    def __getitem__(self, index):
        r"""__getitem__(ReferenceGlyphVector self, unsigned int index) -> CDataObject"""
        return _COPASI.ReferenceGlyphVector___getitem__(self, index)

# Register ReferenceGlyphVector in _COPASI:
_COPASI.ReferenceGlyphVector_swigregister(ReferenceGlyphVector)
class GeneralGlyphVector(CDataContainer):
    r"""Proxy of C++ CDataVector< CLGeneralGlyph > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _COPASI.delete_GeneralGlyphVector

    def cleanup(self):
        r"""cleanup(GeneralGlyphVector self)"""
        return _COPASI.GeneralGlyphVector_cleanup(self)

    def addCopy(self, src):
        r"""addCopy(GeneralGlyphVector self, CLGeneralGlyph src) -> bool"""
        return _COPASI.GeneralGlyphVector_addCopy(self, src)

    def swap(self, indexFrom, indexTo):
        r"""swap(GeneralGlyphVector self, size_t const & indexFrom, size_t const & indexTo)"""
        return _COPASI.GeneralGlyphVector_swap(self, indexFrom, indexTo)

    def add(self, pObject, adopt=True):
        
        return _COPASI.GeneralGlyphVector_add(self, pObject, adopt)

    def getObject(self, name):
        r"""getObject(GeneralGlyphVector self, CCommonName name) -> CObjectInterface"""
        return _COPASI.GeneralGlyphVector_getObject(self, name)

    def size(self):
        r"""size(GeneralGlyphVector self) -> size_t"""
        return _COPASI.GeneralGlyphVector_size(self)

    def empty(self):
        r"""empty(GeneralGlyphVector self) -> bool"""
        return _COPASI.GeneralGlyphVector_empty(self)

    def clear(self):
        r"""clear(GeneralGlyphVector self)"""
        return _COPASI.GeneralGlyphVector_clear(self)

    def getIndex(self, pObject):
        r"""getIndex(GeneralGlyphVector self, CDataObject pObject) -> size_t"""
        return _COPASI.GeneralGlyphVector_getIndex(self, pObject)

    def remove(self, index):
        r"""remove(GeneralGlyphVector self, unsigned int index)"""
        return _COPASI.GeneralGlyphVector_remove(self, index)

    def get(self, index):
        r"""get(GeneralGlyphVector self, unsigned int index) -> CDataObject"""
        return _COPASI.GeneralGlyphVector_get(self, index)

    def addAndOwn(self, DISOWN):
        r"""addAndOwn(GeneralGlyphVector self, CLGeneralGlyph DISOWN) -> bool"""
        return _COPASI.GeneralGlyphVector_addAndOwn(self, DISOWN)

    def removeObject(self, pObject):
        r"""removeObject(GeneralGlyphVector self, CDataObject pObject) -> bool"""
        return _COPASI.GeneralGlyphVector_removeObject(self, pObject)

    def __len__(self):
        r"""__len__(GeneralGlyphVector self) -> size_t"""
        return _COPASI.GeneralGlyphVector___len__(self)

    def __getitem__(self, index):
        r"""__getitem__(GeneralGlyphVector self, unsigned int index) -> CDataObject"""
        return _COPASI.GeneralGlyphVector___getitem__(self, index)

# Register GeneralGlyphVector in _COPASI:
_COPASI.GeneralGlyphVector_swigregister(GeneralGlyphVector)
class CompartmentGlyphVector(CDataContainer):
    r"""Proxy of C++ CDataVector< CLCompartmentGlyph > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _COPASI.delete_CompartmentGlyphVector

    def cleanup(self):
        r"""cleanup(CompartmentGlyphVector self)"""
        return _COPASI.CompartmentGlyphVector_cleanup(self)

    def addCopy(self, src):
        r"""addCopy(CompartmentGlyphVector self, CLCompartmentGlyph src) -> bool"""
        return _COPASI.CompartmentGlyphVector_addCopy(self, src)

    def swap(self, indexFrom, indexTo):
        r"""swap(CompartmentGlyphVector self, size_t const & indexFrom, size_t const & indexTo)"""
        return _COPASI.CompartmentGlyphVector_swap(self, indexFrom, indexTo)

    def add(self, pObject, adopt=True):
        
        return _COPASI.CompartmentGlyphVector_add(self, pObject, adopt)

    def getObject(self, name):
        r"""getObject(CompartmentGlyphVector self, CCommonName name) -> CObjectInterface"""
        return _COPASI.CompartmentGlyphVector_getObject(self, name)

    def size(self):
        r"""size(CompartmentGlyphVector self) -> size_t"""
        return _COPASI.CompartmentGlyphVector_size(self)

    def empty(self):
        r"""empty(CompartmentGlyphVector self) -> bool"""
        return _COPASI.CompartmentGlyphVector_empty(self)

    def clear(self):
        r"""clear(CompartmentGlyphVector self)"""
        return _COPASI.CompartmentGlyphVector_clear(self)

    def getIndex(self, pObject):
        r"""getIndex(CompartmentGlyphVector self, CDataObject pObject) -> size_t"""
        return _COPASI.CompartmentGlyphVector_getIndex(self, pObject)

    def remove(self, index):
        r"""remove(CompartmentGlyphVector self, unsigned int index)"""
        return _COPASI.CompartmentGlyphVector_remove(self, index)

    def get(self, index):
        r"""get(CompartmentGlyphVector self, unsigned int index) -> CDataObject"""
        return _COPASI.CompartmentGlyphVector_get(self, index)

    def addAndOwn(self, DISOWN):
        r"""addAndOwn(CompartmentGlyphVector self, CLCompartmentGlyph DISOWN) -> bool"""
        return _COPASI.CompartmentGlyphVector_addAndOwn(self, DISOWN)

    def removeObject(self, pObject):
        r"""removeObject(CompartmentGlyphVector self, CDataObject pObject) -> bool"""
        return _COPASI.CompartmentGlyphVector_removeObject(self, pObject)

    def __len__(self):
        r"""__len__(CompartmentGlyphVector self) -> size_t"""
        return _COPASI.CompartmentGlyphVector___len__(self)

    def __getitem__(self, index):
        r"""__getitem__(CompartmentGlyphVector self, unsigned int index) -> CDataObject"""
        return _COPASI.CompartmentGlyphVector___getitem__(self, index)

# Register CompartmentGlyphVector in _COPASI:
_COPASI.CompartmentGlyphVector_swigregister(CompartmentGlyphVector)
class MetabGlyphVector(CDataContainer):
    r"""Proxy of C++ CDataVector< CLMetabGlyph > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _COPASI.delete_MetabGlyphVector

    def cleanup(self):
        r"""cleanup(MetabGlyphVector self)"""
        return _COPASI.MetabGlyphVector_cleanup(self)

    def addCopy(self, src):
        r"""addCopy(MetabGlyphVector self, CLMetabGlyph src) -> bool"""
        return _COPASI.MetabGlyphVector_addCopy(self, src)

    def swap(self, indexFrom, indexTo):
        r"""swap(MetabGlyphVector self, size_t const & indexFrom, size_t const & indexTo)"""
        return _COPASI.MetabGlyphVector_swap(self, indexFrom, indexTo)

    def add(self, pObject, adopt=True):
        
        return _COPASI.MetabGlyphVector_add(self, pObject, adopt)

    def getObject(self, name):
        r"""getObject(MetabGlyphVector self, CCommonName name) -> CObjectInterface"""
        return _COPASI.MetabGlyphVector_getObject(self, name)

    def size(self):
        r"""size(MetabGlyphVector self) -> size_t"""
        return _COPASI.MetabGlyphVector_size(self)

    def empty(self):
        r"""empty(MetabGlyphVector self) -> bool"""
        return _COPASI.MetabGlyphVector_empty(self)

    def clear(self):
        r"""clear(MetabGlyphVector self)"""
        return _COPASI.MetabGlyphVector_clear(self)

    def getIndex(self, pObject):
        r"""getIndex(MetabGlyphVector self, CDataObject pObject) -> size_t"""
        return _COPASI.MetabGlyphVector_getIndex(self, pObject)

    def remove(self, index):
        r"""remove(MetabGlyphVector self, unsigned int index)"""
        return _COPASI.MetabGlyphVector_remove(self, index)

    def get(self, index):
        r"""get(MetabGlyphVector self, unsigned int index) -> CDataObject"""
        return _COPASI.MetabGlyphVector_get(self, index)

    def addAndOwn(self, DISOWN):
        r"""addAndOwn(MetabGlyphVector self, CLMetabGlyph DISOWN) -> bool"""
        return _COPASI.MetabGlyphVector_addAndOwn(self, DISOWN)

    def removeObject(self, pObject):
        r"""removeObject(MetabGlyphVector self, CDataObject pObject) -> bool"""
        return _COPASI.MetabGlyphVector_removeObject(self, pObject)

    def __len__(self):
        r"""__len__(MetabGlyphVector self) -> size_t"""
        return _COPASI.MetabGlyphVector___len__(self)

    def __getitem__(self, index):
        r"""__getitem__(MetabGlyphVector self, unsigned int index) -> CDataObject"""
        return _COPASI.MetabGlyphVector___getitem__(self, index)

# Register MetabGlyphVector in _COPASI:
_COPASI.MetabGlyphVector_swigregister(MetabGlyphVector)
class ReactionGlyphVector(CDataContainer):
    r"""Proxy of C++ CDataVector< CLReactionGlyph > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _COPASI.delete_ReactionGlyphVector

    def cleanup(self):
        r"""cleanup(ReactionGlyphVector self)"""
        return _COPASI.ReactionGlyphVector_cleanup(self)

    def addCopy(self, src):
        r"""addCopy(ReactionGlyphVector self, CLReactionGlyph src) -> bool"""
        return _COPASI.ReactionGlyphVector_addCopy(self, src)

    def swap(self, indexFrom, indexTo):
        r"""swap(ReactionGlyphVector self, size_t const & indexFrom, size_t const & indexTo)"""
        return _COPASI.ReactionGlyphVector_swap(self, indexFrom, indexTo)

    def add(self, pObject, adopt=True):
        
        return _COPASI.ReactionGlyphVector_add(self, pObject, adopt)

    def getObject(self, name):
        r"""getObject(ReactionGlyphVector self, CCommonName name) -> CObjectInterface"""
        return _COPASI.ReactionGlyphVector_getObject(self, name)

    def size(self):
        r"""size(ReactionGlyphVector self) -> size_t"""
        return _COPASI.ReactionGlyphVector_size(self)

    def empty(self):
        r"""empty(ReactionGlyphVector self) -> bool"""
        return _COPASI.ReactionGlyphVector_empty(self)

    def clear(self):
        r"""clear(ReactionGlyphVector self)"""
        return _COPASI.ReactionGlyphVector_clear(self)

    def getIndex(self, pObject):
        r"""getIndex(ReactionGlyphVector self, CDataObject pObject) -> size_t"""
        return _COPASI.ReactionGlyphVector_getIndex(self, pObject)

    def remove(self, index):
        r"""remove(ReactionGlyphVector self, unsigned int index)"""
        return _COPASI.ReactionGlyphVector_remove(self, index)

    def get(self, index):
        r"""get(ReactionGlyphVector self, unsigned int index) -> CDataObject"""
        return _COPASI.ReactionGlyphVector_get(self, index)

    def addAndOwn(self, DISOWN):
        r"""addAndOwn(ReactionGlyphVector self, CLReactionGlyph DISOWN) -> bool"""
        return _COPASI.ReactionGlyphVector_addAndOwn(self, DISOWN)

    def removeObject(self, pObject):
        r"""removeObject(ReactionGlyphVector self, CDataObject pObject) -> bool"""
        return _COPASI.ReactionGlyphVector_removeObject(self, pObject)

    def __len__(self):
        r"""__len__(ReactionGlyphVector self) -> size_t"""
        return _COPASI.ReactionGlyphVector___len__(self)

    def __getitem__(self, index):
        r"""__getitem__(ReactionGlyphVector self, unsigned int index) -> CDataObject"""
        return _COPASI.ReactionGlyphVector___getitem__(self, index)

# Register ReactionGlyphVector in _COPASI:
_COPASI.ReactionGlyphVector_swigregister(ReactionGlyphVector)
class TextGlyphVector(CDataContainer):
    r"""Proxy of C++ CDataVector< CLTextGlyph > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _COPASI.delete_TextGlyphVector

    def cleanup(self):
        r"""cleanup(TextGlyphVector self)"""
        return _COPASI.TextGlyphVector_cleanup(self)

    def addCopy(self, src):
        r"""addCopy(TextGlyphVector self, CLTextGlyph src) -> bool"""
        return _COPASI.TextGlyphVector_addCopy(self, src)

    def swap(self, indexFrom, indexTo):
        r"""swap(TextGlyphVector self, size_t const & indexFrom, size_t const & indexTo)"""
        return _COPASI.TextGlyphVector_swap(self, indexFrom, indexTo)

    def add(self, pObject, adopt=True):
        
        return _COPASI.TextGlyphVector_add(self, pObject, adopt)

    def getObject(self, name):
        r"""getObject(TextGlyphVector self, CCommonName name) -> CObjectInterface"""
        return _COPASI.TextGlyphVector_getObject(self, name)

    def size(self):
        r"""size(TextGlyphVector self) -> size_t"""
        return _COPASI.TextGlyphVector_size(self)

    def empty(self):
        r"""empty(TextGlyphVector self) -> bool"""
        return _COPASI.TextGlyphVector_empty(self)

    def clear(self):
        r"""clear(TextGlyphVector self)"""
        return _COPASI.TextGlyphVector_clear(self)

    def getIndex(self, pObject):
        r"""getIndex(TextGlyphVector self, CDataObject pObject) -> size_t"""
        return _COPASI.TextGlyphVector_getIndex(self, pObject)

    def remove(self, index):
        r"""remove(TextGlyphVector self, unsigned int index)"""
        return _COPASI.TextGlyphVector_remove(self, index)

    def get(self, index):
        r"""get(TextGlyphVector self, unsigned int index) -> CDataObject"""
        return _COPASI.TextGlyphVector_get(self, index)

    def addAndOwn(self, DISOWN):
        r"""addAndOwn(TextGlyphVector self, CLTextGlyph DISOWN) -> bool"""
        return _COPASI.TextGlyphVector_addAndOwn(self, DISOWN)

    def removeObject(self, pObject):
        r"""removeObject(TextGlyphVector self, CDataObject pObject) -> bool"""
        return _COPASI.TextGlyphVector_removeObject(self, pObject)

    def __len__(self):
        r"""__len__(TextGlyphVector self) -> size_t"""
        return _COPASI.TextGlyphVector___len__(self)

    def __getitem__(self, index):
        r"""__getitem__(TextGlyphVector self, unsigned int index) -> CDataObject"""
        return _COPASI.TextGlyphVector___getitem__(self, index)

# Register TextGlyphVector in _COPASI:
_COPASI.TextGlyphVector_swigregister(TextGlyphVector)
class GraphicalObjectVector(CDataContainer):
    r"""Proxy of C++ CDataVector< CLGraphicalObject > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _COPASI.delete_GraphicalObjectVector

    def cleanup(self):
        r"""cleanup(GraphicalObjectVector self)"""
        return _COPASI.GraphicalObjectVector_cleanup(self)

    def addCopy(self, src):
        r"""addCopy(GraphicalObjectVector self, CLGraphicalObject src) -> bool"""
        return _COPASI.GraphicalObjectVector_addCopy(self, src)

    def swap(self, indexFrom, indexTo):
        r"""swap(GraphicalObjectVector self, size_t const & indexFrom, size_t const & indexTo)"""
        return _COPASI.GraphicalObjectVector_swap(self, indexFrom, indexTo)

    def add(self, pObject, adopt=True):
        
        return _COPASI.GraphicalObjectVector_add(self, pObject, adopt)

    def getObject(self, name):
        r"""getObject(GraphicalObjectVector self, CCommonName name) -> CObjectInterface"""
        return _COPASI.GraphicalObjectVector_getObject(self, name)

    def size(self):
        r"""size(GraphicalObjectVector self) -> size_t"""
        return _COPASI.GraphicalObjectVector_size(self)

    def empty(self):
        r"""empty(GraphicalObjectVector self) -> bool"""
        return _COPASI.GraphicalObjectVector_empty(self)

    def clear(self):
        r"""clear(GraphicalObjectVector self)"""
        return _COPASI.GraphicalObjectVector_clear(self)

    def getIndex(self, pObject):
        r"""getIndex(GraphicalObjectVector self, CDataObject pObject) -> size_t"""
        return _COPASI.GraphicalObjectVector_getIndex(self, pObject)

    def remove(self, index):
        r"""remove(GraphicalObjectVector self, unsigned int index)"""
        return _COPASI.GraphicalObjectVector_remove(self, index)

    def get(self, index):
        r"""get(GraphicalObjectVector self, unsigned int index) -> CDataObject"""
        return _COPASI.GraphicalObjectVector_get(self, index)

    def addAndOwn(self, DISOWN):
        r"""addAndOwn(GraphicalObjectVector self, CLGraphicalObject DISOWN) -> bool"""
        return _COPASI.GraphicalObjectVector_addAndOwn(self, DISOWN)

    def removeObject(self, pObject):
        r"""removeObject(GraphicalObjectVector self, CDataObject pObject) -> bool"""
        return _COPASI.GraphicalObjectVector_removeObject(self, pObject)

    def __len__(self):
        r"""__len__(GraphicalObjectVector self) -> size_t"""
        return _COPASI.GraphicalObjectVector___len__(self)

    def __getitem__(self, index):
        r"""__getitem__(GraphicalObjectVector self, unsigned int index) -> CDataObject"""
        return _COPASI.GraphicalObjectVector___getitem__(self, index)

# Register GraphicalObjectVector in _COPASI:
_COPASI.GraphicalObjectVector_swigregister(GraphicalObjectVector)
class CLayout(CLBase, CDataContainer):
    r"""Proxy of C++ CLayout class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def fromData(data, pParent):
        r"""fromData(CData data, CUndoObjectInterface pParent) -> CLayout"""
        return _COPASI.CLayout_fromData(data, pParent)

    def __init__(self, *args):
        r"""
        __init__(CLayout self, std::string const & name="Layout", CDataContainer pParent=static_cast< CDataContainer * >((void *) 0)) -> CLayout
        __init__(CLayout self, CLayout src, CDataContainer pParent) -> CLayout
        """
        _COPASI.CLayout_swiginit(self, _COPASI.new_CLayout(*args))
    __swig_destroy__ = _COPASI.delete_CLayout

    def getKey(self):
        r"""getKey(CLayout self) -> std::string const &"""
        return _COPASI.CLayout_getKey(self)

    def moveBy(self, p):
        r"""moveBy(CLayout self, CLPoint p)"""
        return _COPASI.CLayout_moveBy(self, p)

    def getDimensions(self):
        r"""getDimensions(CLayout self) -> CLDimensions"""
        return _COPASI.CLayout_getDimensions(self)

    def setDimensions(self, d):
        r"""setDimensions(CLayout self, CLDimensions d)"""
        return _COPASI.CLayout_setDimensions(self, d)

    def getListOfCompartmentGlyphs(self):
        r"""getListOfCompartmentGlyphs(CLayout self) -> CompartmentGlyphVector"""
        return _COPASI.CLayout_getListOfCompartmentGlyphs(self)

    def addCompartmentGlyph(self, glyph):
        r"""addCompartmentGlyph(CLayout self, CLCompartmentGlyph glyph)"""
        return _COPASI.CLayout_addCompartmentGlyph(self, glyph)

    def addMetaboliteGlyph(self, glyph):
        r"""addMetaboliteGlyph(CLayout self, CLMetabGlyph glyph)"""
        return _COPASI.CLayout_addMetaboliteGlyph(self, glyph)

    def getListOfReactionGlyphs(self):
        r"""getListOfReactionGlyphs(CLayout self) -> ReactionGlyphVector"""
        return _COPASI.CLayout_getListOfReactionGlyphs(self)

    def addReactionGlyph(self, glyph):
        r"""addReactionGlyph(CLayout self, CLReactionGlyph glyph)"""
        return _COPASI.CLayout_addReactionGlyph(self, glyph)

    def addTextGlyph(self, glyph):
        r"""addTextGlyph(CLayout self, CLTextGlyph glyph)"""
        return _COPASI.CLayout_addTextGlyph(self, glyph)

    def getListOfGeneralGlyphs(self):
        r"""getListOfGeneralGlyphs(CLayout self) -> GeneralGlyphVector"""
        return _COPASI.CLayout_getListOfGeneralGlyphs(self)

    def addGeneralGlyph(self, glyph):
        r"""addGeneralGlyph(CLayout self, CLGeneralGlyph glyph)"""
        return _COPASI.CLayout_addGeneralGlyph(self, glyph)

    def addLocalRenderInformation(self, pRenderInfo):
        r"""addLocalRenderInformation(CLayout self, CLLocalRenderInformation pRenderInfo)"""
        return _COPASI.CLayout_addLocalRenderInformation(self, pRenderInfo)

    def calculateBoundingBox(self):
        r"""calculateBoundingBox(CLayout self) -> CLBoundingBox"""
        return _COPASI.CLayout_calculateBoundingBox(self)

    def calculateAndAssignBounds(self):
        r"""calculateAndAssignBounds(CLayout self)"""
        return _COPASI.CLayout_calculateAndAssignBounds(self)

    def scale(self, scaleFactor):
        r"""scale(CLayout self, double const & scaleFactor)"""
        return _COPASI.CLayout_scale(self, scaleFactor)

# Register CLayout in _COPASI:
_COPASI.CLayout_swigregister(CLayout)
class LayoutVector(CDataContainer):
    r"""Proxy of C++ CDataVector< CLayout > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _COPASI.delete_LayoutVector

    def cleanup(self):
        r"""cleanup(LayoutVector self)"""
        return _COPASI.LayoutVector_cleanup(self)

    def addCopy(self, src):
        r"""addCopy(LayoutVector self, CLayout src) -> bool"""
        return _COPASI.LayoutVector_addCopy(self, src)

    def swap(self, indexFrom, indexTo):
        r"""swap(LayoutVector self, size_t const & indexFrom, size_t const & indexTo)"""
        return _COPASI.LayoutVector_swap(self, indexFrom, indexTo)

    def add(self, pObject, adopt=True):
        
        return _COPASI.LayoutVector_add(self, pObject, adopt)

    def getObject(self, name):
        r"""getObject(LayoutVector self, CCommonName name) -> CObjectInterface"""
        return _COPASI.LayoutVector_getObject(self, name)

    def size(self):
        r"""size(LayoutVector self) -> size_t"""
        return _COPASI.LayoutVector_size(self)

    def empty(self):
        r"""empty(LayoutVector self) -> bool"""
        return _COPASI.LayoutVector_empty(self)

    def clear(self):
        r"""clear(LayoutVector self)"""
        return _COPASI.LayoutVector_clear(self)

    def getIndex(self, pObject):
        r"""getIndex(LayoutVector self, CDataObject pObject) -> size_t"""
        return _COPASI.LayoutVector_getIndex(self, pObject)

    def remove(self, index):
        r"""remove(LayoutVector self, unsigned int index)"""
        return _COPASI.LayoutVector_remove(self, index)

    def get(self, index):
        r"""get(LayoutVector self, unsigned int index) -> CDataObject"""
        return _COPASI.LayoutVector_get(self, index)

    def addAndOwn(self, DISOWN):
        r"""addAndOwn(LayoutVector self, CLayout DISOWN) -> bool"""
        return _COPASI.LayoutVector_addAndOwn(self, DISOWN)

    def removeObject(self, pObject):
        r"""removeObject(LayoutVector self, CDataObject pObject) -> bool"""
        return _COPASI.LayoutVector_removeObject(self, pObject)

    def __len__(self):
        r"""__len__(LayoutVector self) -> size_t"""
        return _COPASI.LayoutVector___len__(self)

    def __getitem__(self, index):
        r"""__getitem__(LayoutVector self, unsigned int index) -> CDataObject"""
        return _COPASI.LayoutVector___getitem__(self, index)

# Register LayoutVector in _COPASI:
_COPASI.LayoutVector_swigregister(LayoutVector)
class LayoutVectorN(LayoutVector):
    r"""Proxy of C++ CDataVectorN< CLayout > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(LayoutVectorN self, std::string const & name="NoName", CDataContainer pParent=static_cast< CDataContainer * >((void *) 0)) -> LayoutVectorN
        __init__(LayoutVectorN self, LayoutVectorN src, CDataContainer pParent) -> LayoutVectorN
        """
        _COPASI.LayoutVectorN_swiginit(self, _COPASI.new_LayoutVectorN(*args))
    __swig_destroy__ = _COPASI.delete_LayoutVectorN

    def addCopy(self, src):
        r"""addCopy(LayoutVectorN self, CLayout src) -> bool"""
        return _COPASI.LayoutVectorN_addCopy(self, src)

    def add(self, pObject, adopt=True):
        
        return _COPASI.LayoutVectorN_add(self, pObject, adopt)

    def remove(self, name):
        r"""remove(LayoutVectorN self, std::string const & name)"""
        return _COPASI.LayoutVectorN_remove(self, name)

    def getObject(self, name):
        r"""getObject(LayoutVectorN self, CCommonName name) -> CObjectInterface"""
        return _COPASI.LayoutVectorN_getObject(self, name)

    def getIndex(self, name):
        r"""getIndex(LayoutVectorN self, std::string const & name) -> size_t"""
        return _COPASI.LayoutVectorN_getIndex(self, name)

    def createUniqueName(self, name):
        r"""createUniqueName(LayoutVectorN self, std::string & name)"""
        return _COPASI.LayoutVectorN_createUniqueName(self, name)

    def getByName(self, name):
        r"""getByName(LayoutVectorN self, std::string const & name) -> CDataObject"""
        return _COPASI.LayoutVectorN_getByName(self, name)

    def removeByName(self, name):
        r"""removeByName(LayoutVectorN self, std::string const & name) -> bool"""
        return _COPASI.LayoutVectorN_removeByName(self, name)

    def getIndexByName(self, name):
        r"""getIndexByName(LayoutVectorN self, std::string const & name) -> size_t"""
        return _COPASI.LayoutVectorN_getIndexByName(self, name)

    def __getitem__(self, *args):
        r"""
        __getitem__(LayoutVectorN self, std::string const & name) -> CDataObject
        __getitem__(LayoutVectorN self, unsigned int index) -> CDataObject
        """
        return _COPASI.LayoutVectorN___getitem__(self, *args)

# Register LayoutVectorN in _COPASI:
_COPASI.LayoutVectorN_swigregister(LayoutVectorN)
class CListOfLayouts(LayoutVectorN):
    r"""Proxy of C++ CListOfLayouts class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(CListOfLayouts self, std::string const & name="ListOfLayouts", CDataContainer pParent=None) -> CListOfLayouts"""
        _COPASI.CListOfLayouts_swiginit(self, _COPASI.new_CListOfLayouts(*args))
    __swig_destroy__ = _COPASI.delete_CListOfLayouts

    def getKey(self):
        r"""getKey(CListOfLayouts self) -> std::string const &"""
        return _COPASI.CListOfLayouts_getKey(self)

    def getListOfGlobalRenderInformationObjects(self):
        r"""getListOfGlobalRenderInformationObjects(CListOfLayouts self) -> GlobalRenderInformationVector"""
        return _COPASI.CListOfLayouts_getListOfGlobalRenderInformationObjects(self)

    def addGlobalRenderInformation(self, pRenderInfo):
        r"""addGlobalRenderInformation(CListOfLayouts self, CLGlobalRenderInformation pRenderInfo)"""
        return _COPASI.CListOfLayouts_addGlobalRenderInformation(self, pRenderInfo)

    def getRenderInformation(self, index):
        r"""getRenderInformation(CListOfLayouts self, size_t index) -> CLGlobalRenderInformation"""
        return _COPASI.CListOfLayouts_getRenderInformation(self, index)

    def addLayout(self, pLayout):
        r"""addLayout(CListOfLayouts self, CLayout pLayout)"""
        return _COPASI.CListOfLayouts_addLayout(self, pLayout)

# Register CListOfLayouts in _COPASI:
_COPASI.CListOfLayouts_swigregister(CListOfLayouts)
class CSensMethodLocalData(object):
    r"""Proxy of C++ CSensMethodLocalData class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    tmp1 = property(_COPASI.CSensMethodLocalData_tmp1_get, _COPASI.CSensMethodLocalData_tmp1_set, doc=r"""tmp1 : CArray""")
    tmp2 = property(_COPASI.CSensMethodLocalData_tmp2_get, _COPASI.CSensMethodLocalData_tmp2_set, doc=r"""tmp2 : CArray""")
    mInitialStateVariables = property(_COPASI.CSensMethodLocalData_mInitialStateVariables_get, _COPASI.CSensMethodLocalData_mInitialStateVariables_set, doc=r"""mInitialStateVariables : CVector<(p.double)>""")
    mInitialSequences = property(_COPASI.CSensMethodLocalData_mInitialSequences_get, _COPASI.CSensMethodLocalData_mInitialSequences_set, doc=r"""mInitialSequences : CCore::CUpdateSequence""")
    index = property(_COPASI.CSensMethodLocalData_index_get, _COPASI.CSensMethodLocalData_index_set, doc=r"""index : size_t""")

    def __init__(self):
        r"""__init__(CSensMethodLocalData self) -> CSensMethodLocalData"""
        _COPASI.CSensMethodLocalData_swiginit(self, _COPASI.new_CSensMethodLocalData())
    __swig_destroy__ = _COPASI.delete_CSensMethodLocalData

# Register CSensMethodLocalData in _COPASI:
_COPASI.CSensMethodLocalData_swigregister(CSensMethodLocalData)
class CSensMethod(CCopasiMethod):
    r"""Proxy of C++ CSensMethod class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CSensMethod self, CDataContainer pParent, CTaskEnum::Method const & methodType, CTaskEnum::Task const & taskType=sens) -> CSensMethod
        __init__(CSensMethod self, CSensMethod src, CDataContainer pParent) -> CSensMethod
        """
        _COPASI.CSensMethod_swiginit(self, _COPASI.new_CSensMethod(*args))
    __swig_destroy__ = _COPASI.delete_CSensMethod

    def process(self):
        r"""process(CSensMethod self) -> bool"""
        return _COPASI.CSensMethod_process(self)

    def initialize(self, problem):
        r"""initialize(CSensMethod self, CSensProblem problem) -> bool"""
        return _COPASI.CSensMethod_initialize(self, problem)

    def restore(self, updateModel):
        r"""restore(CSensMethod self, bool const & updateModel) -> bool"""
        return _COPASI.CSensMethod_restore(self, updateModel)

    def isValidProblem(self, pProblem):
        r"""isValidProblem(CSensMethod self, CCopasiProblem pProblem) -> bool"""
        return _COPASI.CSensMethod_isValidProblem(self, pProblem)

    def setCallBack(self, callBack):
        r"""setCallBack(CSensMethod self, CProcessReportLevel callBack) -> bool"""
        return _COPASI.CSensMethod_setCallBack(self, callBack)

    def getNumberOfSubtaskCalculations(self):
        r"""getNumberOfSubtaskCalculations(CSensMethod self) -> size_t"""
        return _COPASI.CSensMethod_getNumberOfSubtaskCalculations(self)

# Register CSensMethod in _COPASI:
_COPASI.CSensMethod_swigregister(CSensMethod)
class CSensItem(object):
    r"""Proxy of C++ CSensItem class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CSensItem self) -> CSensItem
        __init__(CSensItem self, std::string const & cn) -> CSensItem
        __init__(CSensItem self, CObjectLists::ListType type) -> CSensItem
        """
        _COPASI.CSensItem_swiginit(self, _COPASI.new_CSensItem(*args))

    def isSingleObject(self):
        r"""isSingleObject(CSensItem self) -> bool"""
        return _COPASI.CSensItem_isSingleObject(self)

    def setSingleObjectCN(self, cn):
        r"""setSingleObjectCN(CSensItem self, CCommonName cn)"""
        return _COPASI.CSensItem_setSingleObjectCN(self, cn)

    def getSingleObjectCN(self):
        r"""getSingleObjectCN(CSensItem self) -> CCommonName"""
        return _COPASI.CSensItem_getSingleObjectCN(self)

    def getSingleObjectDisplayName(self, pDataModel):
        r"""getSingleObjectDisplayName(CSensItem self, CDataModel pDataModel) -> std::string"""
        return _COPASI.CSensItem_getSingleObjectDisplayName(self, pDataModel)

    def setListType(self, lt):
        r"""setListType(CSensItem self, CObjectLists::ListType lt)"""
        return _COPASI.CSensItem_setListType(self, lt)

    def getListType(self):
        r"""getListType(CSensItem self) -> CObjectLists::ListType const &"""
        return _COPASI.CSensItem_getListType(self)

    def getListTypeDisplayName(self):
        r"""getListTypeDisplayName(CSensItem self) -> std::string"""
        return _COPASI.CSensItem_getListTypeDisplayName(self)

    def getVariablesPointerList(self, pDataModel):
        r"""getVariablesPointerList(CSensItem self, CDataModel pDataModel) -> ObjectStdVector"""
        return _COPASI.CSensItem_getVariablesPointerList(self, pDataModel)
    __swig_destroy__ = _COPASI.delete_CSensItem

# Register CSensItem in _COPASI:
_COPASI.CSensItem_swigregister(CSensItem)
class CSensProblem(CCopasiProblem):
    r"""Proxy of C++ CSensProblem class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Evaluation = _COPASI.CSensProblem_Evaluation
    
    SteadyState = _COPASI.CSensProblem_SteadyState
    
    TimeSeries = _COPASI.CSensProblem_TimeSeries
    
    ParameterEstimation = _COPASI.CSensProblem_ParameterEstimation
    
    Optimization = _COPASI.CSensProblem_Optimization
    
    CrossSection = _COPASI.CSensProblem_CrossSection
    
    __SIZE = _COPASI.CSensProblem___SIZE
    

    @staticmethod
    def getPossibleTargetFunctions(arg1):
        r"""getPossibleTargetFunctions(CSensProblem::SubTaskType arg1) -> ObjectListTypeStdVector"""
        return _COPASI.CSensProblem_getPossibleTargetFunctions(arg1)

    @staticmethod
    def getPossibleVariables(arg1):
        r"""getPossibleVariables(CSensProblem::SubTaskType arg1) -> ObjectListTypeStdVector"""
        return _COPASI.CSensProblem_getPossibleVariables(arg1)

    def __init__(self, *args):
        r"""
        __init__(CSensProblem self, CDataContainer pParent=static_cast< CDataContainer * >((void *) 0)) -> CSensProblem
        __init__(CSensProblem self, CSensProblem src, CDataContainer pParent) -> CSensProblem
        """
        _COPASI.CSensProblem_swiginit(self, _COPASI.new_CSensProblem(*args))
    __swig_destroy__ = _COPASI.delete_CSensProblem

    def getSubTask(self):
        r"""getSubTask(CSensProblem self) -> CCopasiTask"""
        return _COPASI.CSensProblem_getSubTask(self)

    def setSubTaskType(self, type):
        r"""setSubTaskType(CSensProblem self, CSensProblem::SubTaskType const & type)"""
        return _COPASI.CSensProblem_setSubTaskType(self, type)

    def getSubTaskType(self):
        r"""getSubTaskType(CSensProblem self) -> CSensProblem::SubTaskType"""
        return _COPASI.CSensProblem_getSubTaskType(self)

    def getTargetFunctions(self):
        r"""getTargetFunctions(CSensProblem self) -> CSensItem"""
        return _COPASI.CSensProblem_getTargetFunctions(self)

    def setTargetFunctions(self, item):
        r"""setTargetFunctions(CSensProblem self, CSensItem item)"""
        return _COPASI.CSensProblem_setTargetFunctions(self, item)

    def getNumberOfVariables(self):
        r"""getNumberOfVariables(CSensProblem self) -> size_t"""
        return _COPASI.CSensProblem_getNumberOfVariables(self)

    def getVariables(self, index):
        r"""getVariables(CSensProblem self, size_t index) -> CSensItem"""
        return _COPASI.CSensProblem_getVariables(self, index)

    def addVariables(self, item):
        r"""addVariables(CSensProblem self, CSensItem item)"""
        return _COPASI.CSensProblem_addVariables(self, item)

    def changeVariables(self, index, item):
        r"""changeVariables(CSensProblem self, size_t index, CSensItem item) -> bool"""
        return _COPASI.CSensProblem_changeVariables(self, index, item)

    def removeVariables(self, *args):
        r"""
        removeVariables(CSensProblem self, size_t index) -> bool
        removeVariables(CSensProblem self) -> bool
        """
        return _COPASI.CSensProblem_removeVariables(self, *args)

    def getResult(self):
        r"""getResult(CSensProblem self) -> CArray"""
        return _COPASI.CSensProblem_getResult(self)

    def getResultAnnotated(self):
        r"""getResultAnnotated(CSensProblem self) -> CDataArray"""
        return _COPASI.CSensProblem_getResultAnnotated(self)

    def getScaledResult(self):
        r"""getScaledResult(CSensProblem self) -> CArray"""
        return _COPASI.CSensProblem_getScaledResult(self)

    def getScaledResultAnnotated(self):
        r"""getScaledResultAnnotated(CSensProblem self) -> CDataArray"""
        return _COPASI.CSensProblem_getScaledResultAnnotated(self)

    def getCollapsedResult(self):
        r"""getCollapsedResult(CSensProblem self) -> CArray"""
        return _COPASI.CSensProblem_getCollapsedResult(self)

    def getCollapsedResultAnnotated(self):
        r"""getCollapsedResultAnnotated(CSensProblem self) -> CDataArray"""
        return _COPASI.CSensProblem_getCollapsedResultAnnotated(self)

    def collapsRequested(self):
        r"""collapsRequested(CSensProblem self) -> bool"""
        return _COPASI.CSensProblem_collapsRequested(self)

# Register CSensProblem in _COPASI:
_COPASI.CSensProblem_swigregister(CSensProblem)
CSensProblem.SubTaskTypeToTask = _COPASI.cvar.CSensProblem_SubTaskTypeToTask

class CSensTask(CCopasiTask):
    r"""Proxy of C++ CSensTask class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CSensTask self, CDataContainer pParent, CTaskEnum::Task const & type=sens) -> CSensTask
        __init__(CSensTask self, CSensTask src, CDataContainer pParent) -> CSensTask
        """
        _COPASI.CSensTask_swiginit(self, _COPASI.new_CSensTask(*args))
    __swig_destroy__ = _COPASI.delete_CSensTask

    def updateMatrices(self):
        r"""updateMatrices(CSensTask self) -> bool"""
        return _COPASI.CSensTask_updateMatrices(self)

    def getValidMethods(self):
        r"""getValidMethods(CSensTask self) -> IntStdVector"""
        return _COPASI.CSensTask_getValidMethods(self)

# Register CSensTask in _COPASI:
_COPASI.CSensTask_swigregister(CSensTask)
class CBiologicalDescription(CDataContainer):
    r"""Proxy of C++ CBiologicalDescription class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def fromData(data, pParent):
        r"""fromData(CData data, CUndoObjectInterface pParent) -> CBiologicalDescription"""
        return _COPASI.CBiologicalDescription_fromData(data, pParent)

    def __init__(self, *args):
        r"""
        __init__(CBiologicalDescription self, std::string const & objectName, CDataContainer pParent=static_cast< CDataContainer * >((void *) 0)) -> CBiologicalDescription
        __init__(CBiologicalDescription self, CRDFTriplet triplet, std::string const & objectName="", CDataContainer pParent=static_cast< CDataContainer * >((void *) 0)) -> CBiologicalDescription
        __init__(CBiologicalDescription self, CBiologicalDescription src, CDataContainer pParent) -> CBiologicalDescription
        """
        _COPASI.CBiologicalDescription_swiginit(self, _COPASI.new_CBiologicalDescription(*args))
    __swig_destroy__ = _COPASI.delete_CBiologicalDescription

    def getMIRIAMResourceObject(self):
        r"""getMIRIAMResourceObject(CBiologicalDescription self) -> CMIRIAMResourceObject"""
        return _COPASI.CBiologicalDescription_getMIRIAMResourceObject(self)

    def getTriplet(self):
        r"""getTriplet(CBiologicalDescription self) -> CRDFTriplet"""
        return _COPASI.CBiologicalDescription_getTriplet(self)

    def getKey(self):
        r"""getKey(CBiologicalDescription self) -> std::string const &"""
        return _COPASI.CBiologicalDescription_getKey(self)

    def getPredicate(self):
        r"""getPredicate(CBiologicalDescription self) -> std::string"""
        return _COPASI.CBiologicalDescription_getPredicate(self)

    def getResource(self):
        r"""getResource(CBiologicalDescription self) -> std::string"""
        return _COPASI.CBiologicalDescription_getResource(self)

    def getId(self):
        r"""getId(CBiologicalDescription self) -> std::string const &"""
        return _COPASI.CBiologicalDescription_getId(self)

    def getURI(self):
        r"""getURI(CBiologicalDescription self) -> std::string"""
        return _COPASI.CBiologicalDescription_getURI(self)

    def setPredicate(self, predicate):
        r"""setPredicate(CBiologicalDescription self, std::string const & predicate)"""
        return _COPASI.CBiologicalDescription_setPredicate(self, predicate)

    def setResource(self, resource):
        r"""setResource(CBiologicalDescription self, std::string const & resource)"""
        return _COPASI.CBiologicalDescription_setResource(self, resource)

    def setId(self, id):
        r"""setId(CBiologicalDescription self, std::string const & id)"""
        return _COPASI.CBiologicalDescription_setId(self, id)

    def clearInvalidEntries(self):
        r"""clearInvalidEntries(CBiologicalDescription self)"""
        return _COPASI.CBiologicalDescription_clearInvalidEntries(self)

# Register CBiologicalDescription in _COPASI:
_COPASI.CBiologicalDescription_swigregister(CBiologicalDescription)
class CMIRIAMResourceObject(object):
    r"""Proxy of C++ CMIRIAMResourceObject class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getResource(self, URI):
        r"""getResource(CMIRIAMResourceObject self, std::string const & URI) -> size_t"""
        return _COPASI.CMIRIAMResourceObject_getResource(self, URI)

    @staticmethod
    def getResourceList():
        r"""getResourceList() -> CMIRIAMResources"""
        return _COPASI.CMIRIAMResourceObject_getResourceList()

    def __init__(self, *args):
        r"""
        __init__(CMIRIAMResourceObject self, std::string const & displayName, std::string const & id) -> CMIRIAMResourceObject
        __init__(CMIRIAMResourceObject self, CMIRIAMResourceObject src) -> CMIRIAMResourceObject
        """
        _COPASI.CMIRIAMResourceObject_swiginit(self, _COPASI.new_CMIRIAMResourceObject(*args))

    def setId(self, id):
        r"""setId(CMIRIAMResourceObject self, std::string const & id) -> bool"""
        return _COPASI.CMIRIAMResourceObject_setId(self, id)

    def getId(self):
        r"""getId(CMIRIAMResourceObject self) -> std::string const &"""
        return _COPASI.CMIRIAMResourceObject_getId(self)

    def setURI(self, URI):
        r"""setURI(CMIRIAMResourceObject self, std::string const & URI) -> bool"""
        return _COPASI.CMIRIAMResourceObject_setURI(self, URI)

    def getURI(self):
        r"""getURI(CMIRIAMResourceObject self) -> std::string"""
        return _COPASI.CMIRIAMResourceObject_getURI(self)

    def getIdentifiersOrgURL(self):
        r"""getIdentifiersOrgURL(CMIRIAMResourceObject self) -> std::string"""
        return _COPASI.CMIRIAMResourceObject_getIdentifiersOrgURL(self)

    def setDisplayName(self, displayName):
        r"""setDisplayName(CMIRIAMResourceObject self, std::string const & displayName) -> bool"""
        return _COPASI.CMIRIAMResourceObject_setDisplayName(self, displayName)

    def getDisplayName(self):
        r"""getDisplayName(CMIRIAMResourceObject self) -> std::string"""
        return _COPASI.CMIRIAMResourceObject_getDisplayName(self)

    def isValid(self, *args):
        r"""
        isValid(CMIRIAMResourceObject self) -> bool
        isValid(CMIRIAMResourceObject self, std::string const & URI) -> bool
        """
        return _COPASI.CMIRIAMResourceObject_isValid(self, *args)

    @staticmethod
    def setMIRIAMResources(pResources):
        r"""setMIRIAMResources(CMIRIAMResources pResources)"""
        return _COPASI.CMIRIAMResourceObject_setMIRIAMResources(pResources)
    __swig_destroy__ = _COPASI.delete_CMIRIAMResourceObject

# Register CMIRIAMResourceObject in _COPASI:
_COPASI.CMIRIAMResourceObject_swigregister(CMIRIAMResourceObject)
class CReference(CDataContainer):
    r"""Proxy of C++ CReference class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def fromData(data, pParent):
        r"""fromData(CData data, CUndoObjectInterface pParent) -> CReference"""
        return _COPASI.CReference_fromData(data, pParent)

    def __init__(self, *args):
        r"""
        __init__(CReference self, std::string const & objectName, CDataContainer pParent=static_cast< CDataContainer * >((void *) 0)) -> CReference
        __init__(CReference self, CRDFTriplet triplet, std::string const & objectName="", CDataContainer pParent=static_cast< CDataContainer * >((void *) 0)) -> CReference
        __init__(CReference self, CReference src, CDataContainer pParent) -> CReference
        """
        _COPASI.CReference_swiginit(self, _COPASI.new_CReference(*args))
    __swig_destroy__ = _COPASI.delete_CReference

    def getTriplet(self):
        r"""getTriplet(CReference self) -> CRDFTriplet"""
        return _COPASI.CReference_getTriplet(self)

    def getMIRIAMResourceObject(self):
        r"""getMIRIAMResourceObject(CReference self) -> CMIRIAMResourceObject"""
        return _COPASI.CReference_getMIRIAMResourceObject(self)

    def getKey(self):
        r"""getKey(CReference self) -> std::string const &"""
        return _COPASI.CReference_getKey(self)

    def getResource(self):
        r"""getResource(CReference self) -> std::string"""
        return _COPASI.CReference_getResource(self)

    def getId(self):
        r"""getId(CReference self) -> std::string const &"""
        return _COPASI.CReference_getId(self)

    def getDescription(self):
        r"""getDescription(CReference self) -> std::string const &"""
        return _COPASI.CReference_getDescription(self)

    def getURI(self):
        r"""getURI(CReference self) -> std::string"""
        return _COPASI.CReference_getURI(self)

    def setResource(self, resource):
        r"""setResource(CReference self, std::string const & resource)"""
        return _COPASI.CReference_setResource(self, resource)

    def setId(self, id):
        r"""setId(CReference self, std::string const & id)"""
        return _COPASI.CReference_setId(self, id)

    def setDescription(self, description):
        r"""setDescription(CReference self, std::string const & description)"""
        return _COPASI.CReference_setDescription(self, description)

    def clearInvalidEntries(self):
        r"""clearInvalidEntries(CReference self)"""
        return _COPASI.CReference_clearInvalidEntries(self)

# Register CReference in _COPASI:
_COPASI.CReference_swigregister(CReference)
class CCreator(CDataContainer):
    r"""Proxy of C++ CCreator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def fromData(data, pParent):
        r"""fromData(CData data, CUndoObjectInterface pParent) -> CCreator"""
        return _COPASI.CCreator_fromData(data, pParent)

    def __init__(self, *args):
        r"""
        __init__(CCreator self, std::string const & objectName, CDataContainer pParent=static_cast< CDataContainer * >((void *) 0)) -> CCreator
        __init__(CCreator self, CRDFTriplet triplet, std::string const & objectName="", CDataContainer pParent=static_cast< CDataContainer * >((void *) 0)) -> CCreator
        __init__(CCreator self, CCreator src, CDataContainer pParent) -> CCreator
        """
        _COPASI.CCreator_swiginit(self, _COPASI.new_CCreator(*args))
    __swig_destroy__ = _COPASI.delete_CCreator

    def getTriplet(self):
        r"""getTriplet(CCreator self) -> CRDFTriplet"""
        return _COPASI.CCreator_getTriplet(self)

    def getKey(self):
        r"""getKey(CCreator self) -> std::string const &"""
        return _COPASI.CCreator_getKey(self)

    def getFamilyName(self):
        r"""getFamilyName(CCreator self) -> std::string const &"""
        return _COPASI.CCreator_getFamilyName(self)

    def getGivenName(self):
        r"""getGivenName(CCreator self) -> std::string const &"""
        return _COPASI.CCreator_getGivenName(self)

    def getEmail(self):
        r"""getEmail(CCreator self) -> std::string const &"""
        return _COPASI.CCreator_getEmail(self)

    def getORG(self):
        r"""getORG(CCreator self) -> std::string const &"""
        return _COPASI.CCreator_getORG(self)

    def setFamilyName(self, familyName):
        r"""setFamilyName(CCreator self, std::string const & familyName)"""
        return _COPASI.CCreator_setFamilyName(self, familyName)

    def setGivenName(self, givenName):
        r"""setGivenName(CCreator self, std::string const & givenName)"""
        return _COPASI.CCreator_setGivenName(self, givenName)

    def setEmail(self, Email):
        r"""setEmail(CCreator self, std::string const & Email)"""
        return _COPASI.CCreator_setEmail(self, Email)

    def setORG(self, Orgname):
        r"""setORG(CCreator self, std::string const & Orgname)"""
        return _COPASI.CCreator_setORG(self, Orgname)

# Register CCreator in _COPASI:
_COPASI.CCreator_swigregister(CCreator)
class CModification(CDataContainer):
    r"""Proxy of C++ CModification class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def fromData(data, pParent):
        r"""fromData(CData data, CUndoObjectInterface pParent) -> CModification"""
        return _COPASI.CModification_fromData(data, pParent)

    def __init__(self, *args):
        r"""
        __init__(CModification self, std::string const & objectName, CDataContainer pParent=static_cast< CDataContainer * >((void *) 0)) -> CModification
        __init__(CModification self, CRDFTriplet triplet, std::string const & objectName="", CDataContainer pParent=static_cast< CDataContainer * >((void *) 0)) -> CModification
        __init__(CModification self, CModification src, CDataContainer pParent) -> CModification
        """
        _COPASI.CModification_swiginit(self, _COPASI.new_CModification(*args))
    __swig_destroy__ = _COPASI.delete_CModification

    def getTriplet(self):
        r"""getTriplet(CModification self) -> CRDFTriplet"""
        return _COPASI.CModification_getTriplet(self)

    def getKey(self):
        r"""getKey(CModification self) -> std::string const &"""
        return _COPASI.CModification_getKey(self)

    def setDate(self, date):
        r"""setDate(CModification self, std::string const & date)"""
        return _COPASI.CModification_setDate(self, date)

    def getDate(self):
        r"""getDate(CModification self) -> std::string const &"""
        return _COPASI.CModification_getDate(self)

# Register CModification in _COPASI:
_COPASI.CModification_swigregister(CModification)
class CMIRIAMResource(CCopasiParameterGroup):
    r"""Proxy of C++ CMIRIAMResource class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CMIRIAMResource self, std::string const & name="MIRIAM Resource", CDataContainer pParent=static_cast< CDataContainer * >((void *) 0)) -> CMIRIAMResource
        __init__(CMIRIAMResource self, CMIRIAMResource src, CDataContainer pParent) -> CMIRIAMResource
        __init__(CMIRIAMResource self, CCopasiParameterGroup group, CDataContainer pParent) -> CMIRIAMResource
        """
        _COPASI.CMIRIAMResource_swiginit(self, _COPASI.new_CMIRIAMResource(*args))
    __swig_destroy__ = _COPASI.delete_CMIRIAMResource

    def getMIRIAMMIRIAMResource(self):
        r"""getMIRIAMMIRIAMResource(CMIRIAMResource self) -> CMIRIAMResource"""
        return _COPASI.CMIRIAMResource_getMIRIAMMIRIAMResource(self)

    def setMIRIAMDisplayName(self, displayName):
        r"""setMIRIAMDisplayName(CMIRIAMResource self, std::string const & displayName)"""
        return _COPASI.CMIRIAMResource_setMIRIAMDisplayName(self, displayName)

    def getMIRIAMDisplayName(self):
        r"""getMIRIAMDisplayName(CMIRIAMResource self) -> std::string const &"""
        return _COPASI.CMIRIAMResource_getMIRIAMDisplayName(self)

    def setMIRIAMURI(self, URI):
        r"""setMIRIAMURI(CMIRIAMResource self, std::string const & URI)"""
        return _COPASI.CMIRIAMResource_setMIRIAMURI(self, URI)

    def getMIRIAMURI(self):
        r"""getMIRIAMURI(CMIRIAMResource self) -> std::string const &"""
        return _COPASI.CMIRIAMResource_getMIRIAMURI(self)

    def getIdentifiersOrgURL(self, compact):
        r"""getIdentifiersOrgURL(CMIRIAMResource self, bool const & compact) -> std::string"""
        return _COPASI.CMIRIAMResource_getIdentifiersOrgURL(self, compact)

    def createIdentifiersOrgURL(self, id):
        r"""createIdentifiersOrgURL(CMIRIAMResource self, std::string const id) -> std::string"""
        return _COPASI.CMIRIAMResource_createIdentifiersOrgURL(self, id)

    def setMIRIAMPattern(self, pattern):
        r"""setMIRIAMPattern(CMIRIAMResource self, std::string const & pattern)"""
        return _COPASI.CMIRIAMResource_setMIRIAMPattern(self, pattern)

    def getMIRIAMPattern(self):
        r"""getMIRIAMPattern(CMIRIAMResource self) -> std::string const &"""
        return _COPASI.CMIRIAMResource_getMIRIAMPattern(self)

    def setMIRIAMCitation(self, isCitation):
        r"""setMIRIAMCitation(CMIRIAMResource self, bool const & isCitation)"""
        return _COPASI.CMIRIAMResource_setMIRIAMCitation(self, isCitation)

    def getMIRIAMCitation(self):
        r"""getMIRIAMCitation(CMIRIAMResource self) -> bool const &"""
        return _COPASI.CMIRIAMResource_getMIRIAMCitation(self)

    def setMIRIAMNamespaceEmbeddedInPattern(self, isNamespaceEmbeddedInPattern):
        r"""setMIRIAMNamespaceEmbeddedInPattern(CMIRIAMResource self, bool const & isNamespaceEmbeddedInPattern)"""
        return _COPASI.CMIRIAMResource_setMIRIAMNamespaceEmbeddedInPattern(self, isNamespaceEmbeddedInPattern)

    def getMIRIAMNamespaceEmbeddedInPattern(self):
        r"""getMIRIAMNamespaceEmbeddedInPattern(CMIRIAMResource self) -> bool const &"""
        return _COPASI.CMIRIAMResource_getMIRIAMNamespaceEmbeddedInPattern(self)

    def addDeprecatedURL(self, URL):
        r"""addDeprecatedURL(CMIRIAMResource self, std::string const & URL)"""
        return _COPASI.CMIRIAMResource_addDeprecatedURL(self, URL)

    def getMIRIAMDeprecated(self):
        r"""getMIRIAMDeprecated(CMIRIAMResource self) -> CCopasiParameterGroup"""
        return _COPASI.CMIRIAMResource_getMIRIAMDeprecated(self)

    def extractId(self, uri):
        r"""extractId(CMIRIAMResource self, std::string const & uri) -> std::string"""
        return _COPASI.CMIRIAMResource_extractId(self, uri)

# Register CMIRIAMResource in _COPASI:
_COPASI.CMIRIAMResource_swigregister(CMIRIAMResource)
class CMIRIAMResources(CCopasiParameterGroup):
    r"""Proxy of C++ CMIRIAMResources class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def isCitation(*args):
        r"""
        isCitation(void * pData, void * pCallee)
        isCitation(std::string const & uri) -> bool
        """
        return _COPASI.CMIRIAMResources_isCitation(*args)

    def __init__(self, *args):
        r"""
        __init__(CMIRIAMResources self, std::string const & name="MIRIAM Resources", CDataContainer pParent=static_cast< CDataContainer * >((void *) 0)) -> CMIRIAMResources
        __init__(CMIRIAMResources self, CMIRIAMResources src, CDataContainer pParent) -> CMIRIAMResources
        __init__(CMIRIAMResources self, CCopasiParameterGroup group, CDataContainer pParent) -> CMIRIAMResources
        """
        _COPASI.CMIRIAMResources_swiginit(self, _COPASI.new_CMIRIAMResources(*args))
    __swig_destroy__ = _COPASI.delete_CMIRIAMResources

    def elevateChildren(self):
        r"""elevateChildren(CMIRIAMResources self) -> bool"""
        return _COPASI.CMIRIAMResources_elevateChildren(self)

    def addMIRIAMResource(self, pMIRIAMResource):
        r"""addMIRIAMResource(CMIRIAMResources self, CMIRIAMResource pMIRIAMResource)"""
        return _COPASI.CMIRIAMResources_addMIRIAMResource(self, pMIRIAMResource)

    def getMIRIAMResources(self):
        r"""getMIRIAMResources(CMIRIAMResources self) -> CMIRIAMResources"""
        return _COPASI.CMIRIAMResources_getMIRIAMResources(self)

    def getMIRIAMLastUpdateDate(self):
        r"""getMIRIAMLastUpdateDate(CMIRIAMResources self) -> unsigned int const &"""
        return _COPASI.CMIRIAMResources_getMIRIAMLastUpdateDate(self)

    def getMIRIAMUpdateFrequency(self):
        r"""getMIRIAMUpdateFrequency(CMIRIAMResources self) -> unsigned int const &"""
        return _COPASI.CMIRIAMResources_getMIRIAMUpdateFrequency(self)

    def setMIRIAMUpdateFrequencyInDays(self, days):
        r"""setMIRIAMUpdateFrequencyInDays(CMIRIAMResources self, size_t const & days)"""
        return _COPASI.CMIRIAMResources_setMIRIAMUpdateFrequencyInDays(self, days)

    def updateMIRIAMResourcesFromFile(self, pProcessReport, filename):
        r"""updateMIRIAMResourcesFromFile(CMIRIAMResources self, CProcessReport pProcessReport, std::string const & filename) -> bool"""
        return _COPASI.CMIRIAMResources_updateMIRIAMResourcesFromFile(self, pProcessReport, filename)

    def getMIRIAMResource(self, index):
        r"""getMIRIAMResource(CMIRIAMResources self, size_t const index) -> CMIRIAMResource"""
        return _COPASI.CMIRIAMResources_getMIRIAMResource(self, index)

    def getMIRIAMResourceIndex(self, URI):
        r"""getMIRIAMResourceIndex(CMIRIAMResources self, std::string const & URI) -> size_t"""
        return _COPASI.CMIRIAMResources_getMIRIAMResourceIndex(self, URI)

    def getResourceIndexFromDisplayName(self, displayName):
        r"""getResourceIndexFromDisplayName(CMIRIAMResources self, std::string const & displayName) -> size_t"""
        return _COPASI.CMIRIAMResources_getResourceIndexFromDisplayName(self, displayName)

    def getResourceList(self):
        r"""getResourceList(CMIRIAMResources self) -> CCopasiParameterGroup"""
        return _COPASI.CMIRIAMResources_getResourceList(self)

    def initializeParameter(self):
        r"""initializeParameter(CMIRIAMResources self)"""
        return _COPASI.CMIRIAMResources_initializeParameter(self)

# Register CMIRIAMResources in _COPASI:
_COPASI.CMIRIAMResources_swigregister(CMIRIAMResources)
class CRDFGraph(object):
    r"""Proxy of C++ CRDFGraph class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(CRDFGraph self) -> CRDFGraph"""
        _COPASI.CRDFGraph_swiginit(self, _COPASI.new_CRDFGraph())
    __swig_destroy__ = _COPASI.delete_CRDFGraph

    def guessGraphRoot(self, *args):
        r"""guessGraphRoot(CRDFGraph self, std::string const & about=" ") -> bool"""
        return _COPASI.CRDFGraph_guessGraphRoot(self, *args)

    def addNameSpace(self, prefix, uri):
        r"""addNameSpace(CRDFGraph self, std::string const & prefix, std::string const & uri) -> bool"""
        return _COPASI.CRDFGraph_addNameSpace(self, prefix, uri)

    def generatedNodeId(self, *args):
        r"""generatedNodeId(CRDFGraph self, std::string const & existingId="") -> std::string"""
        return _COPASI.CRDFGraph_generatedNodeId(self, *args)

    def clean(self):
        r"""clean(CRDFGraph self)"""
        return _COPASI.CRDFGraph_clean(self)

    def updateNamespaces(self):
        r"""updateNamespaces(CRDFGraph self)"""
        return _COPASI.CRDFGraph_updateNamespaces(self)

    def empty(self):
        r"""empty(CRDFGraph self) -> bool"""
        return _COPASI.CRDFGraph_empty(self)

# Register CRDFGraph in _COPASI:
_COPASI.CRDFGraph_swigregister(CRDFGraph)
class CRDFTriplet(object):
    r"""Proxy of C++ CRDFTriplet class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _COPASI.delete_CRDFTriplet

    def __eq__(self, rhs):
        r"""__eq__(CRDFTriplet self, CRDFTriplet rhs) -> bool"""
        return _COPASI.CRDFTriplet___eq__(self, rhs)

# Register CRDFTriplet in _COPASI:
_COPASI.CRDFTriplet_swigregister(CRDFTriplet)
class CMIRIAMInfo(CDataContainer):
    r"""Proxy of C++ CMIRIAMInfo class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(CMIRIAMInfo self) -> CMIRIAMInfo"""
        _COPASI.CMIRIAMInfo_swiginit(self, _COPASI.new_CMIRIAMInfo())
    __swig_destroy__ = _COPASI.delete_CMIRIAMInfo

    def load(self, pObject):
        r"""load(CMIRIAMInfo self, CDataContainer pObject)"""
        return _COPASI.CMIRIAMInfo_load(self, pObject)

    def save(self):
        r"""save(CMIRIAMInfo self) -> bool"""
        return _COPASI.CMIRIAMInfo_save(self)

    def getRDFGraph(self):
        r"""getRDFGraph(CMIRIAMInfo self) -> CRDFGraph"""
        return _COPASI.CMIRIAMInfo_getRDFGraph(self)

    def empty(self):
        r"""empty(CMIRIAMInfo self) -> bool"""
        return _COPASI.CMIRIAMInfo_empty(self)

    def getCreators(self):
        r"""getCreators(CMIRIAMInfo self) -> CreatorVector"""
        return _COPASI.CMIRIAMInfo_getCreators(self)

    def createCreator(self, objectName):
        r"""createCreator(CMIRIAMInfo self, std::string const & objectName) -> CCreator"""
        return _COPASI.CMIRIAMInfo_createCreator(self, objectName)

    def removeCreator(self, pCreator):
        r"""removeCreator(CMIRIAMInfo self, CCreator pCreator) -> bool"""
        return _COPASI.CMIRIAMInfo_removeCreator(self, pCreator)

    def loadCreators(self):
        r"""loadCreators(CMIRIAMInfo self)"""
        return _COPASI.CMIRIAMInfo_loadCreators(self)

    def addDefaultCreator(self, force=False):
        r"""addDefaultCreator(CMIRIAMInfo self, bool force=False) -> CCreator"""
        return _COPASI.CMIRIAMInfo_addDefaultCreator(self, force)

    def getReferences(self):
        r"""getReferences(CMIRIAMInfo self) -> ReferenceVector"""
        return _COPASI.CMIRIAMInfo_getReferences(self)

    def createReference(self, objectName):
        r"""createReference(CMIRIAMInfo self, std::string const & objectName) -> CReference"""
        return _COPASI.CMIRIAMInfo_createReference(self, objectName)

    def removeReference(self, pReference):
        r"""removeReference(CMIRIAMInfo self, CReference pReference) -> bool"""
        return _COPASI.CMIRIAMInfo_removeReference(self, pReference)

    def loadReferences(self):
        r"""loadReferences(CMIRIAMInfo self)"""
        return _COPASI.CMIRIAMInfo_loadReferences(self)

    def getCreatedDT(self):
        r"""getCreatedDT(CMIRIAMInfo self) -> std::string const"""
        return _COPASI.CMIRIAMInfo_getCreatedDT(self)

    def setCreatedDT(self, dt):
        r"""setCreatedDT(CMIRIAMInfo self, std::string const & dt)"""
        return _COPASI.CMIRIAMInfo_setCreatedDT(self, dt)

    def addDefaultCreatedDT(self):
        r"""addDefaultCreatedDT(CMIRIAMInfo self) -> bool"""
        return _COPASI.CMIRIAMInfo_addDefaultCreatedDT(self)

    def getModifications(self):
        r"""getModifications(CMIRIAMInfo self) -> ModificationVector"""
        return _COPASI.CMIRIAMInfo_getModifications(self)

    def createModification(self, objectName):
        r"""createModification(CMIRIAMInfo self, std::string const & objectName) -> CModification"""
        return _COPASI.CMIRIAMInfo_createModification(self, objectName)

    def removeModification(self, pModified):
        r"""removeModification(CMIRIAMInfo self, CModification pModified) -> bool"""
        return _COPASI.CMIRIAMInfo_removeModification(self, pModified)

    def loadModifications(self):
        r"""loadModifications(CMIRIAMInfo self)"""
        return _COPASI.CMIRIAMInfo_loadModifications(self)

    def getBiologicalDescriptions(self):
        r"""getBiologicalDescriptions(CMIRIAMInfo self) -> BiologicalDescriptionVector"""
        return _COPASI.CMIRIAMInfo_getBiologicalDescriptions(self)

    def createBiologicalDescription(self):
        r"""createBiologicalDescription(CMIRIAMInfo self) -> CBiologicalDescription"""
        return _COPASI.CMIRIAMInfo_createBiologicalDescription(self)

    def removeBiologicalDescription(self, pBiologicalDescription):
        r"""removeBiologicalDescription(CMIRIAMInfo self, CBiologicalDescription pBiologicalDescription) -> bool"""
        return _COPASI.CMIRIAMInfo_removeBiologicalDescription(self, pBiologicalDescription)

    def loadBiologicalDescriptions(self):
        r"""loadBiologicalDescriptions(CMIRIAMInfo self)"""
        return _COPASI.CMIRIAMInfo_loadBiologicalDescriptions(self)

    def getKey(self):
        r"""getKey(CMIRIAMInfo self) -> std::string const &"""
        return _COPASI.CMIRIAMInfo_getKey(self)

# Register CMIRIAMInfo in _COPASI:
_COPASI.CMIRIAMInfo_swigregister(CMIRIAMInfo)
class CLColorDefinition(CLBase, CDataObject):
    r"""Proxy of C++ CLColorDefinition class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def fromData(data, pParent):
        r"""fromData(CData data, CUndoObjectInterface pParent) -> CLColorDefinition"""
        return _COPASI.CLColorDefinition_fromData(data, pParent)

    def __init__(self, *args):
        r"""
        __init__(CLColorDefinition self, CDataContainer pParent=None) -> CLColorDefinition
        __init__(CLColorDefinition self, unsigned char r, unsigned char g, unsigned char b, unsigned char a=255, CDataContainer pParent=None) -> CLColorDefinition
        __init__(CLColorDefinition self, CLColorDefinition source, CDataContainer pParent=None) -> CLColorDefinition
        """
        _COPASI.CLColorDefinition_swiginit(self, _COPASI.new_CLColorDefinition(*args))
    __swig_destroy__ = _COPASI.delete_CLColorDefinition

    def getRed(self):
        r"""getRed(CLColorDefinition self) -> unsigned char"""
        return _COPASI.CLColorDefinition_getRed(self)

    def getGreen(self):
        r"""getGreen(CLColorDefinition self) -> unsigned char"""
        return _COPASI.CLColorDefinition_getGreen(self)

    def getBlue(self):
        r"""getBlue(CLColorDefinition self) -> unsigned char"""
        return _COPASI.CLColorDefinition_getBlue(self)

    def getAlpha(self):
        r"""getAlpha(CLColorDefinition self) -> unsigned char"""
        return _COPASI.CLColorDefinition_getAlpha(self)

    def setRed(self, c):
        r"""setRed(CLColorDefinition self, unsigned char c)"""
        return _COPASI.CLColorDefinition_setRed(self, c)

    def setGreen(self, c):
        r"""setGreen(CLColorDefinition self, unsigned char c)"""
        return _COPASI.CLColorDefinition_setGreen(self, c)

    def setBlue(self, c):
        r"""setBlue(CLColorDefinition self, unsigned char c)"""
        return _COPASI.CLColorDefinition_setBlue(self, c)

    def setAlpha(self, c):
        r"""setAlpha(CLColorDefinition self, unsigned char c)"""
        return _COPASI.CLColorDefinition_setAlpha(self, c)

    def setRGBA(self, r, g, b, a=255):
        r"""setRGBA(CLColorDefinition self, unsigned char r, unsigned char g, unsigned char b, unsigned char a=255)"""
        return _COPASI.CLColorDefinition_setRGBA(self, r, g, b, a)

    def setColorValue(self, valueString):
        r"""setColorValue(CLColorDefinition self, std::string const & valueString) -> bool"""
        return _COPASI.CLColorDefinition_setColorValue(self, valueString)

    def createValueString(self):
        r"""createValueString(CLColorDefinition self) -> std::string"""
        return _COPASI.CLColorDefinition_createValueString(self)

    def getKey(self):
        r"""getKey(CLColorDefinition self) -> std::string const &"""
        return _COPASI.CLColorDefinition_getKey(self)

    def getId(self):
        r"""getId(CLColorDefinition self) -> std::string const &"""
        return _COPASI.CLColorDefinition_getId(self)

    def setId(self, id):
        r"""setId(CLColorDefinition self, std::string const & id)"""
        return _COPASI.CLColorDefinition_setId(self, id)

# Register CLColorDefinition in _COPASI:
_COPASI.CLColorDefinition_swigregister(CLColorDefinition)
class CLGradientStop(CLBase, CDataObject):
    r"""Proxy of C++ CLGradientStop class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def fromData(data, pParent):
        r"""fromData(CData data, CUndoObjectInterface pParent) -> CLGradientStop"""
        return _COPASI.CLGradientStop_fromData(data, pParent)

    def __init__(self, *args):
        r"""
        __init__(CLGradientStop self, CDataContainer pParent=None) -> CLGradientStop
        __init__(CLGradientStop self, CLGradientStop source, CDataContainer pParent=None) -> CLGradientStop
        """
        _COPASI.CLGradientStop_swiginit(self, _COPASI.new_CLGradientStop(*args))
    __swig_destroy__ = _COPASI.delete_CLGradientStop

    def getOffset(self):
        r"""getOffset(CLGradientStop self) -> CLRelAbsVector"""
        return _COPASI.CLGradientStop_getOffset(self)

    def setOffset(self, *args):
        r"""
        setOffset(CLGradientStop self, double x, double y)
        setOffset(CLGradientStop self, std::string const & arg2)
        setOffset(CLGradientStop self, CLRelAbsVector co)
        """
        return _COPASI.CLGradientStop_setOffset(self, *args)

    def getStopColor(self):
        r"""getStopColor(CLGradientStop self) -> std::string const &"""
        return _COPASI.CLGradientStop_getStopColor(self)

    def setStopColor(self, key):
        r"""setStopColor(CLGradientStop self, std::string const & key)"""
        return _COPASI.CLGradientStop_setStopColor(self, key)

    def getKey(self):
        r"""getKey(CLGradientStop self) -> std::string const &"""
        return _COPASI.CLGradientStop_getKey(self)

# Register CLGradientStop in _COPASI:
_COPASI.CLGradientStop_swigregister(CLGradientStop)
class CLGradientBase(CLBase, CDataContainer):
    r"""Proxy of C++ CLGradientBase class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    PAD = _COPASI.CLGradientBase_PAD
    
    REFLECT = _COPASI.CLGradientBase_REFLECT
    
    REPEAT = _COPASI.CLGradientBase_REPEAT
    

    @staticmethod
    def fromData(data, pParent):
        r"""fromData(CData data, CUndoObjectInterface pParent) -> CLGradientBase"""
        return _COPASI.CLGradientBase_fromData(data, pParent)

    def __init__(self, *args):
        r"""
        __init__(CLGradientBase self, std::string const & name, CDataContainer pParent=None) -> CLGradientBase
        __init__(CLGradientBase self, CLGradientBase source, CDataContainer pParent=None) -> CLGradientBase
        """
        _COPASI.CLGradientBase_swiginit(self, _COPASI.new_CLGradientBase(*args))
    __swig_destroy__ = _COPASI.delete_CLGradientBase

    def getSpreadMethod(self):
        r"""getSpreadMethod(CLGradientBase self) -> CLGradientBase::SPREADMETHOD"""
        return _COPASI.CLGradientBase_getSpreadMethod(self)

    def setSpreadMethod(self, method):
        r"""setSpreadMethod(CLGradientBase self, CLGradientBase::SPREADMETHOD method)"""
        return _COPASI.CLGradientBase_setSpreadMethod(self, method)

    def getNumGradientStops(self):
        r"""getNumGradientStops(CLGradientBase self) -> size_t"""
        return _COPASI.CLGradientBase_getNumGradientStops(self)

    def getListOfGradientStops(self):
        r"""getListOfGradientStops(CLGradientBase self) -> GradientStopVector"""
        return _COPASI.CLGradientBase_getListOfGradientStops(self)

    def getGradientStop(self, i):
        r"""getGradientStop(CLGradientBase self, size_t i) -> CLGradientStop"""
        return _COPASI.CLGradientBase_getGradientStop(self, i)

    def createGradientStop(self):
        r"""createGradientStop(CLGradientBase self) -> CLGradientStop"""
        return _COPASI.CLGradientBase_createGradientStop(self)

    def addGradientStop(self, pStop):
        r"""addGradientStop(CLGradientBase self, CLGradientStop pStop)"""
        return _COPASI.CLGradientBase_addGradientStop(self, pStop)

    def getKey(self):
        r"""getKey(CLGradientBase self) -> std::string const &"""
        return _COPASI.CLGradientBase_getKey(self)

    def getId(self):
        r"""getId(CLGradientBase self) -> std::string const &"""
        return _COPASI.CLGradientBase_getId(self)

    def setId(self, id):
        r"""setId(CLGradientBase self, std::string const & id)"""
        return _COPASI.CLGradientBase_setId(self, id)

# Register CLGradientBase in _COPASI:
_COPASI.CLGradientBase_swigregister(CLGradientBase)
class CLLinearGradient(CLGradientBase):
    r"""Proxy of C++ CLLinearGradient class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CLLinearGradient self, CDataContainer pParent=None) -> CLLinearGradient
        __init__(CLLinearGradient self, CLLinearGradient source, CDataContainer pParent=None) -> CLLinearGradient
        """
        _COPASI.CLLinearGradient_swiginit(self, _COPASI.new_CLLinearGradient(*args))

    def setCoordinates(self, *args):
        r"""
        setCoordinates(CLLinearGradient self, CLRelAbsVector x1, CLRelAbsVector y1, CLRelAbsVector z1, CLRelAbsVector x2, CLRelAbsVector y2, CLRelAbsVector z2)
        setCoordinates(CLLinearGradient self, CLRelAbsVector x1, CLRelAbsVector y1, CLRelAbsVector x2, CLRelAbsVector y2)
        """
        return _COPASI.CLLinearGradient_setCoordinates(self, *args)

    def setPoint1(self, *args):
        r"""setPoint1(CLLinearGradient self, CLRelAbsVector x1, CLRelAbsVector y1, CLRelAbsVector z1=CLRelAbsVector(0.0, 0.0))"""
        return _COPASI.CLLinearGradient_setPoint1(self, *args)

    def setPoint2(self, *args):
        r"""setPoint2(CLLinearGradient self, CLRelAbsVector x1, CLRelAbsVector y1, CLRelAbsVector z1=CLRelAbsVector(0.0, 0.0))"""
        return _COPASI.CLLinearGradient_setPoint2(self, *args)

    def getXPoint1(self):
        r"""getXPoint1(CLLinearGradient self) -> CLRelAbsVector"""
        return _COPASI.CLLinearGradient_getXPoint1(self)

    def getYPoint1(self):
        r"""getYPoint1(CLLinearGradient self) -> CLRelAbsVector"""
        return _COPASI.CLLinearGradient_getYPoint1(self)

    def getZPoint1(self):
        r"""getZPoint1(CLLinearGradient self) -> CLRelAbsVector"""
        return _COPASI.CLLinearGradient_getZPoint1(self)

    def getXPoint2(self):
        r"""getXPoint2(CLLinearGradient self) -> CLRelAbsVector"""
        return _COPASI.CLLinearGradient_getXPoint2(self)

    def getYPoint2(self):
        r"""getYPoint2(CLLinearGradient self) -> CLRelAbsVector"""
        return _COPASI.CLLinearGradient_getYPoint2(self)

    def getZPoint2(self):
        r"""getZPoint2(CLLinearGradient self) -> CLRelAbsVector"""
        return _COPASI.CLLinearGradient_getZPoint2(self)
    __swig_destroy__ = _COPASI.delete_CLLinearGradient

# Register CLLinearGradient in _COPASI:
_COPASI.CLLinearGradient_swigregister(CLLinearGradient)
class CLRadialGradient(CLGradientBase):
    r"""Proxy of C++ CLRadialGradient class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CLRadialGradient self, CDataContainer pParent=None) -> CLRadialGradient
        __init__(CLRadialGradient self, CLRadialGradient source, CDataContainer pParent=None) -> CLRadialGradient
        """
        _COPASI.CLRadialGradient_swiginit(self, _COPASI.new_CLRadialGradient(*args))

    def setCoordinates(self, *args):
        r"""
        setCoordinates(CLRadialGradient self, CLRelAbsVector x, CLRelAbsVector y, CLRelAbsVector z, CLRelAbsVector r, CLRelAbsVector fx, CLRelAbsVector fy, CLRelAbsVector fz)
        setCoordinates(CLRadialGradient self, CLRelAbsVector x, CLRelAbsVector y, CLRelAbsVector r, CLRelAbsVector fx, CLRelAbsVector fy)
        """
        return _COPASI.CLRadialGradient_setCoordinates(self, *args)

    def setCenter(self, *args):
        r"""setCenter(CLRadialGradient self, CLRelAbsVector x, CLRelAbsVector y, CLRelAbsVector z=CLRelAbsVector(0.0, 0.0))"""
        return _COPASI.CLRadialGradient_setCenter(self, *args)

    def setFocalPoint(self, *args):
        r"""setFocalPoint(CLRadialGradient self, CLRelAbsVector x, CLRelAbsVector y, CLRelAbsVector z=CLRelAbsVector(0.0, 0.0))"""
        return _COPASI.CLRadialGradient_setFocalPoint(self, *args)

    def setRadius(self, r):
        r"""setRadius(CLRadialGradient self, CLRelAbsVector r)"""
        return _COPASI.CLRadialGradient_setRadius(self, r)

    def getCenterX(self):
        r"""getCenterX(CLRadialGradient self) -> CLRelAbsVector"""
        return _COPASI.CLRadialGradient_getCenterX(self)

    def getCenterY(self):
        r"""getCenterY(CLRadialGradient self) -> CLRelAbsVector"""
        return _COPASI.CLRadialGradient_getCenterY(self)

    def getCenterZ(self):
        r"""getCenterZ(CLRadialGradient self) -> CLRelAbsVector"""
        return _COPASI.CLRadialGradient_getCenterZ(self)

    def getFocalPointX(self):
        r"""getFocalPointX(CLRadialGradient self) -> CLRelAbsVector"""
        return _COPASI.CLRadialGradient_getFocalPointX(self)

    def getFocalPointY(self):
        r"""getFocalPointY(CLRadialGradient self) -> CLRelAbsVector"""
        return _COPASI.CLRadialGradient_getFocalPointY(self)

    def getFocalPointZ(self):
        r"""getFocalPointZ(CLRadialGradient self) -> CLRelAbsVector"""
        return _COPASI.CLRadialGradient_getFocalPointZ(self)

    def getRadius(self):
        r"""getRadius(CLRadialGradient self) -> CLRelAbsVector"""
        return _COPASI.CLRadialGradient_getRadius(self)
    __swig_destroy__ = _COPASI.delete_CLRadialGradient

# Register CLRadialGradient in _COPASI:
_COPASI.CLRadialGradient_swigregister(CLRadialGradient)
class CLStyle(CLBase, CDataContainer):
    r"""Proxy of C++ CLStyle class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CLStyle self, std::string const & name, CDataContainer pParent=None) -> CLStyle
        __init__(CLStyle self, CLStyle source, CDataContainer pParent=None) -> CLStyle
        """
        _COPASI.CLStyle_swiginit(self, _COPASI.new_CLStyle(*args))
    __swig_destroy__ = _COPASI.delete_CLStyle

    def setGroup(self, pGroup):
        r"""setGroup(CLStyle self, CLGroup pGroup)"""
        return _COPASI.CLStyle_setGroup(self, pGroup)

    def getGroup(self):
        r"""getGroup(CLStyle self) -> CLGroup"""
        return _COPASI.CLStyle_getGroup(self)

    def getNumRoles(self):
        r"""getNumRoles(CLStyle self) -> size_t"""
        return _COPASI.CLStyle_getNumRoles(self)

    def addRole(self, role):
        r"""addRole(CLStyle self, std::string const & role)"""
        return _COPASI.CLStyle_addRole(self, role)

    def isInRoleList(self, role):
        r"""isInRoleList(CLStyle self, std::string const & role) -> bool"""
        return _COPASI.CLStyle_isInRoleList(self, role)

    def removeRole(self, role):
        r"""removeRole(CLStyle self, std::string const & role)"""
        return _COPASI.CLStyle_removeRole(self, role)

    def getRoleListString(self):
        r"""getRoleListString(CLStyle self) -> std::string"""
        return _COPASI.CLStyle_getRoleListString(self)

    def getTypeListString(self):
        r"""getTypeListString(CLStyle self) -> std::string"""
        return _COPASI.CLStyle_getTypeListString(self)

    def getNumTypes(self):
        r"""getNumTypes(CLStyle self) -> size_t"""
        return _COPASI.CLStyle_getNumTypes(self)

    def addType(self, type):
        r"""addType(CLStyle self, std::string const & type)"""
        return _COPASI.CLStyle_addType(self, type)

    def isInTypeList(self, type):
        r"""isInTypeList(CLStyle self, std::string const & type) -> bool"""
        return _COPASI.CLStyle_isInTypeList(self, type)

    def removeType(self, type):
        r"""removeType(CLStyle self, std::string const & type)"""
        return _COPASI.CLStyle_removeType(self, type)

    def getKey(self):
        r"""getKey(CLStyle self) -> std::string const &"""
        return _COPASI.CLStyle_getKey(self)

    def appliesTo(self, pObject):
        r"""appliesTo(CLStyle self, CLGraphicalObject pObject) -> int"""
        return _COPASI.CLStyle_appliesTo(self, pObject)

# Register CLStyle in _COPASI:
_COPASI.CLStyle_swigregister(CLStyle)
class CLGlobalStyle(CLStyle):
    r"""Proxy of C++ CLGlobalStyle class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def fromData(data, pParent):
        r"""fromData(CData data, CUndoObjectInterface pParent) -> CLGlobalStyle"""
        return _COPASI.CLGlobalStyle_fromData(data, pParent)

    def __init__(self, *args):
        r"""
        __init__(CLGlobalStyle self, CDataContainer pParent=None) -> CLGlobalStyle
        __init__(CLGlobalStyle self, CLGlobalStyle source, CDataContainer pParent=None) -> CLGlobalStyle
        """
        _COPASI.CLGlobalStyle_swiginit(self, _COPASI.new_CLGlobalStyle(*args))
    __swig_destroy__ = _COPASI.delete_CLGlobalStyle

# Register CLGlobalStyle in _COPASI:
_COPASI.CLGlobalStyle_swigregister(CLGlobalStyle)
class CLLocalStyle(CLStyle):
    r"""Proxy of C++ CLLocalStyle class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def fromData(data, pParent):
        r"""fromData(CData data, CUndoObjectInterface pParent) -> CLLocalStyle"""
        return _COPASI.CLLocalStyle_fromData(data, pParent)

    def __init__(self, *args):
        r"""
        __init__(CLLocalStyle self, CDataContainer pParent=None) -> CLLocalStyle
        __init__(CLLocalStyle self, CLLocalStyle source, CDataContainer pParent=None) -> CLLocalStyle
        """
        _COPASI.CLLocalStyle_swiginit(self, _COPASI.new_CLLocalStyle(*args))

    def getNumKeys(self):
        r"""getNumKeys(CLLocalStyle self) -> size_t"""
        return _COPASI.CLLocalStyle_getNumKeys(self)

    def isKeyInSet(self, key):
        r"""isKeyInSet(CLLocalStyle self, std::string const & key) -> bool"""
        return _COPASI.CLLocalStyle_isKeyInSet(self, key)

    def addKey(self, key):
        r"""addKey(CLLocalStyle self, std::string const & key)"""
        return _COPASI.CLLocalStyle_addKey(self, key)

    def removeKey(self, key):
        r"""removeKey(CLLocalStyle self, std::string const & key)"""
        return _COPASI.CLLocalStyle_removeKey(self, key)

    def appliesTo(self, pObject):
        r"""appliesTo(CLLocalStyle self, CLGraphicalObject pObject) -> int"""
        return _COPASI.CLLocalStyle_appliesTo(self, pObject)
    __swig_destroy__ = _COPASI.delete_CLLocalStyle

# Register CLLocalStyle in _COPASI:
_COPASI.CLLocalStyle_swigregister(CLLocalStyle)
class CLTransformation(CLBase):
    r"""Proxy of C++ CLTransformation class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(CLTransformation self) -> CLTransformation"""
        _COPASI.CLTransformation_swiginit(self, _COPASI.new_CLTransformation())

    def isSetMatrix(self):
        r"""isSetMatrix(CLTransformation self) -> bool"""
        return _COPASI.CLTransformation_isSetMatrix(self)

    def isIdentityMatrix(self):
        r"""isIdentityMatrix(CLTransformation self) -> bool"""
        return _COPASI.CLTransformation_isIdentityMatrix(self)

    def is2DTransformation(self):
        r"""is2DTransformation(CLTransformation self) -> bool"""
        return _COPASI.CLTransformation_is2DTransformation(self)

    def get3DTransformationString(self):
        r"""get3DTransformationString(CLTransformation self) -> std::string"""
        return _COPASI.CLTransformation_get3DTransformationString(self)

    def parseTransformation(self, transformationString):
        r"""parseTransformation(CLTransformation self, std::string const & transformationString)"""
        return _COPASI.CLTransformation_parseTransformation(self, transformationString)
    __swig_destroy__ = _COPASI.delete_CLTransformation

# Register CLTransformation in _COPASI:
_COPASI.CLTransformation_swigregister(CLTransformation)
class CLTransformation2D(CLTransformation):
    r"""Proxy of C++ CLTransformation2D class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(CLTransformation2D self) -> CLTransformation2D"""
        _COPASI.CLTransformation2D_swiginit(self, _COPASI.new_CLTransformation2D())

    def get2DTransformationString(self):
        r"""get2DTransformationString(CLTransformation2D self) -> std::string"""
        return _COPASI.CLTransformation2D_get2DTransformationString(self)

    def parseTransformation(self, transformationString):
        r"""parseTransformation(CLTransformation2D self, std::string const & transformationString)"""
        return _COPASI.CLTransformation2D_parseTransformation(self, transformationString)
    __swig_destroy__ = _COPASI.delete_CLTransformation2D

# Register CLTransformation2D in _COPASI:
_COPASI.CLTransformation2D_swigregister(CLTransformation2D)
class CLGraphicalPrimitive1D(CLTransformation2D):
    r"""Proxy of C++ CLGraphicalPrimitive1D class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(CLGraphicalPrimitive1D self) -> CLGraphicalPrimitive1D"""
        _COPASI.CLGraphicalPrimitive1D_swiginit(self, _COPASI.new_CLGraphicalPrimitive1D())

    def setStroke(self, key):
        r"""setStroke(CLGraphicalPrimitive1D self, std::string const & key)"""
        return _COPASI.CLGraphicalPrimitive1D_setStroke(self, key)

    def setStrokeWidth(self, width):
        r"""setStrokeWidth(CLGraphicalPrimitive1D self, double width)"""
        return _COPASI.CLGraphicalPrimitive1D_setStrokeWidth(self, width)

    def setDashArray(self, array):
        r"""setDashArray(CLGraphicalPrimitive1D self, std::vector< unsigned int,std::allocator< unsigned int > > const & array)"""
        return _COPASI.CLGraphicalPrimitive1D_setDashArray(self, array)

    def getStroke(self):
        r"""getStroke(CLGraphicalPrimitive1D self) -> std::string const &"""
        return _COPASI.CLGraphicalPrimitive1D_getStroke(self)

    def getStrokeWidth(self):
        r"""getStrokeWidth(CLGraphicalPrimitive1D self) -> double"""
        return _COPASI.CLGraphicalPrimitive1D_getStrokeWidth(self)

    def getDashArray(self):
        r"""getDashArray(CLGraphicalPrimitive1D self) -> std::vector< unsigned int,std::allocator< unsigned int > > const &"""
        return _COPASI.CLGraphicalPrimitive1D_getDashArray(self)

    def isSetStrokeWidth(self):
        r"""isSetStrokeWidth(CLGraphicalPrimitive1D self) -> bool"""
        return _COPASI.CLGraphicalPrimitive1D_isSetStrokeWidth(self)

    def isSetStroke(self):
        r"""isSetStroke(CLGraphicalPrimitive1D self) -> bool"""
        return _COPASI.CLGraphicalPrimitive1D_isSetStroke(self)

    def isSetDashArray(self):
        r"""isSetDashArray(CLGraphicalPrimitive1D self) -> bool"""
        return _COPASI.CLGraphicalPrimitive1D_isSetDashArray(self)

    def parseDashArray(self, s):
        r"""parseDashArray(CLGraphicalPrimitive1D self, std::string const & s)"""
        return _COPASI.CLGraphicalPrimitive1D_parseDashArray(self, s)
    __swig_destroy__ = _COPASI.delete_CLGraphicalPrimitive1D

# Register CLGraphicalPrimitive1D in _COPASI:
_COPASI.CLGraphicalPrimitive1D_swigregister(CLGraphicalPrimitive1D)
class CLGraphicalPrimitive2D(CLGraphicalPrimitive1D):
    r"""Proxy of C++ CLGraphicalPrimitive2D class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    UNSET = _COPASI.CLGraphicalPrimitive2D_UNSET
    
    NONZERO = _COPASI.CLGraphicalPrimitive2D_NONZERO
    
    EVENODD = _COPASI.CLGraphicalPrimitive2D_EVENODD
    
    INHERIT = _COPASI.CLGraphicalPrimitive2D_INHERIT
    

    def __init__(self):
        r"""__init__(CLGraphicalPrimitive2D self) -> CLGraphicalPrimitive2D"""
        _COPASI.CLGraphicalPrimitive2D_swiginit(self, _COPASI.new_CLGraphicalPrimitive2D())

    def setFillColor(self, color):
        r"""setFillColor(CLGraphicalPrimitive2D self, std::string const & color)"""
        return _COPASI.CLGraphicalPrimitive2D_setFillColor(self, color)

    def setFillRule(self, rule):
        r"""setFillRule(CLGraphicalPrimitive2D self, CLGraphicalPrimitive2D::FILL_RULE rule)"""
        return _COPASI.CLGraphicalPrimitive2D_setFillRule(self, rule)

    def getFillColor(self):
        r"""getFillColor(CLGraphicalPrimitive2D self) -> std::string const &"""
        return _COPASI.CLGraphicalPrimitive2D_getFillColor(self)

    def getFillRule(self):
        r"""getFillRule(CLGraphicalPrimitive2D self) -> CLGraphicalPrimitive2D::FILL_RULE"""
        return _COPASI.CLGraphicalPrimitive2D_getFillRule(self)

    def isSetFill(self):
        r"""isSetFill(CLGraphicalPrimitive2D self) -> bool"""
        return _COPASI.CLGraphicalPrimitive2D_isSetFill(self)

    def isSetFillRule(self):
        r"""isSetFillRule(CLGraphicalPrimitive2D self) -> bool"""
        return _COPASI.CLGraphicalPrimitive2D_isSetFillRule(self)
    __swig_destroy__ = _COPASI.delete_CLGraphicalPrimitive2D

# Register CLGraphicalPrimitive2D in _COPASI:
_COPASI.CLGraphicalPrimitive2D_swigregister(CLGraphicalPrimitive2D)
class CLRelAbsVector(object):
    r"""Proxy of C++ CLRelAbsVector class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CLRelAbsVector self, double a=0.0, double r=0.0) -> CLRelAbsVector
        __init__(CLRelAbsVector self, std::string const & coordString) -> CLRelAbsVector
        """
        _COPASI.CLRelAbsVector_swiginit(self, _COPASI.new_CLRelAbsVector(*args))

    def setCoordinate(self, *args):
        r"""
        setCoordinate(CLRelAbsVector self, double abs, double rel=0.0)
        setCoordinate(CLRelAbsVector self, std::string const & coordString)
        """
        return _COPASI.CLRelAbsVector_setCoordinate(self, *args)

    def setAbsoluteValue(self, abs):
        r"""setAbsoluteValue(CLRelAbsVector self, double abs)"""
        return _COPASI.CLRelAbsVector_setAbsoluteValue(self, abs)

    def setRelativeValue(self, rel):
        r"""setRelativeValue(CLRelAbsVector self, double rel)"""
        return _COPASI.CLRelAbsVector_setRelativeValue(self, rel)

    def getAbsoluteValue(self):
        r"""getAbsoluteValue(CLRelAbsVector self) -> double"""
        return _COPASI.CLRelAbsVector_getAbsoluteValue(self)

    def getRelativeValue(self):
        r"""getRelativeValue(CLRelAbsVector self) -> double"""
        return _COPASI.CLRelAbsVector_getRelativeValue(self)

    def add(self, other):
        r"""add(CLRelAbsVector self, CLRelAbsVector other) -> CLRelAbsVector"""
        return _COPASI.CLRelAbsVector_add(self, other)

    def __truediv__(self, *args):
        return _COPASI.CLRelAbsVector___truediv__(self, *args)
    __div__ = __truediv__



    def __eq__(self, other):
        r"""__eq__(CLRelAbsVector self, CLRelAbsVector other) -> bool"""
        return _COPASI.CLRelAbsVector___eq__(self, other)

    def __ne__(self, other):
        r"""__ne__(CLRelAbsVector self, CLRelAbsVector other) -> bool"""
        return _COPASI.CLRelAbsVector___ne__(self, other)

    def toString(self):
        r"""toString(CLRelAbsVector self) -> std::string"""
        return _COPASI.CLRelAbsVector_toString(self)
    __swig_destroy__ = _COPASI.delete_CLRelAbsVector

# Register CLRelAbsVector in _COPASI:
_COPASI.CLRelAbsVector_swigregister(CLRelAbsVector)
class CLRenderPoint(CLBase):
    r"""Proxy of C++ CLRenderPoint class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CLRenderPoint self) -> CLRenderPoint
        __init__(CLRenderPoint self, CLRenderPoint orig) -> CLRenderPoint
        __init__(CLRenderPoint self, CLRelAbsVector x, CLRelAbsVector y, CLRelAbsVector z=CLRelAbsVector(0.0, 0.0)) -> CLRenderPoint
        """
        _COPASI.CLRenderPoint_swiginit(self, _COPASI.new_CLRenderPoint(*args))
    __swig_destroy__ = _COPASI.delete_CLRenderPoint

    def __eq__(self, left):
        r"""__eq__(CLRenderPoint self, CLRenderPoint left) -> bool"""
        return _COPASI.CLRenderPoint___eq__(self, left)

    def x(self):
        r"""x(CLRenderPoint self) -> CLRelAbsVector"""
        return _COPASI.CLRenderPoint_x(self)

    def y(self):
        r"""y(CLRenderPoint self) -> CLRelAbsVector"""
        return _COPASI.CLRenderPoint_y(self)

    def z(self):
        r"""z(CLRenderPoint self) -> CLRelAbsVector"""
        return _COPASI.CLRenderPoint_z(self)

    def getXOffset(self):
        r"""getXOffset(CLRenderPoint self) -> CLRelAbsVector"""
        return _COPASI.CLRenderPoint_getXOffset(self)

    def getYOffset(self):
        r"""getYOffset(CLRenderPoint self) -> CLRelAbsVector"""
        return _COPASI.CLRenderPoint_getYOffset(self)

    def getZOffset(self):
        r"""getZOffset(CLRenderPoint self) -> CLRelAbsVector"""
        return _COPASI.CLRenderPoint_getZOffset(self)

    def setX(self, x):
        r"""setX(CLRenderPoint self, CLRelAbsVector x)"""
        return _COPASI.CLRenderPoint_setX(self, x)

    def setY(self, y):
        r"""setY(CLRenderPoint self, CLRelAbsVector y)"""
        return _COPASI.CLRenderPoint_setY(self, y)

    def setZ(self, z):
        r"""setZ(CLRenderPoint self, CLRelAbsVector z)"""
        return _COPASI.CLRenderPoint_setZ(self, z)

    def setXOffset(self, x):
        r"""setXOffset(CLRenderPoint self, CLRelAbsVector x)"""
        return _COPASI.CLRenderPoint_setXOffset(self, x)

    def setYOffset(self, y):
        r"""setYOffset(CLRenderPoint self, CLRelAbsVector y)"""
        return _COPASI.CLRenderPoint_setYOffset(self, y)

    def setZOffset(self, z):
        r"""setZOffset(CLRenderPoint self, CLRelAbsVector z)"""
        return _COPASI.CLRenderPoint_setZOffset(self, z)

    def setOffsets(self, *args):
        r"""setOffsets(CLRenderPoint self, CLRelAbsVector x, CLRelAbsVector y, CLRelAbsVector z=CLRelAbsVector(0.0, 0.0))"""
        return _COPASI.CLRenderPoint_setOffsets(self, *args)

    def initDefaults(self):
        r"""initDefaults(CLRenderPoint self)"""
        return _COPASI.CLRenderPoint_initDefaults(self)

# Register CLRenderPoint in _COPASI:
_COPASI.CLRenderPoint_swigregister(CLRenderPoint)
class CLRenderCurve(CLGraphicalPrimitive1D, CDataObject):
    r"""Proxy of C++ CLRenderCurve class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CLRenderCurve self, CDataContainer pParent=None) -> CLRenderCurve
        __init__(CLRenderCurve self, CLRenderCurve source, CDataContainer pParent=None) -> CLRenderCurve
        """
        _COPASI.CLRenderCurve_swiginit(self, _COPASI.new_CLRenderCurve(*args))
    __swig_destroy__ = _COPASI.delete_CLRenderCurve

    def setStartHead(self, startHead):
        r"""setStartHead(CLRenderCurve self, std::string const & startHead)"""
        return _COPASI.CLRenderCurve_setStartHead(self, startHead)

    def setEndHead(self, endHead):
        r"""setEndHead(CLRenderCurve self, std::string const & endHead)"""
        return _COPASI.CLRenderCurve_setEndHead(self, endHead)

    def getStartHead(self):
        r"""getStartHead(CLRenderCurve self) -> std::string const &"""
        return _COPASI.CLRenderCurve_getStartHead(self)

    def getEndHead(self):
        r"""getEndHead(CLRenderCurve self) -> std::string const &"""
        return _COPASI.CLRenderCurve_getEndHead(self)

    def getNumElements(self):
        r"""getNumElements(CLRenderCurve self) -> size_t"""
        return _COPASI.CLRenderCurve_getNumElements(self)

    def createCubicBezier(self):
        r"""createCubicBezier(CLRenderCurve self) -> CLRenderCubicBezier"""
        return _COPASI.CLRenderCurve_createCubicBezier(self)

    def createPoint(self):
        r"""createPoint(CLRenderCurve self) -> CLRenderPoint"""
        return _COPASI.CLRenderCurve_createPoint(self)

    def getCurveElement(self, index):
        r"""getCurveElement(CLRenderCurve self, size_t index) -> CLRenderPoint"""
        return _COPASI.CLRenderCurve_getCurveElement(self, index)

    def addCurveElement(self, cs):
        r"""addCurveElement(CLRenderCurve self, CLRenderPoint cs)"""
        return _COPASI.CLRenderCurve_addCurveElement(self, cs)

    def removeCurveElement(self, i):
        r"""removeCurveElement(CLRenderCurve self, size_t i)"""
        return _COPASI.CLRenderCurve_removeCurveElement(self, i)

    def getListOfCurveElements(self):
        r"""getListOfCurveElements(CLRenderCurve self) -> RenderPointStdVector"""
        return _COPASI.CLRenderCurve_getListOfCurveElements(self)

    def isSetStartHead(self):
        r"""isSetStartHead(CLRenderCurve self) -> bool"""
        return _COPASI.CLRenderCurve_isSetStartHead(self)

    def isSetEndHead(self):
        r"""isSetEndHead(CLRenderCurve self) -> bool"""
        return _COPASI.CLRenderCurve_isSetEndHead(self)

    def getKey(self):
        r"""getKey(CLRenderCurve self) -> std::string const &"""
        return _COPASI.CLRenderCurve_getKey(self)

# Register CLRenderCurve in _COPASI:
_COPASI.CLRenderCurve_swigregister(CLRenderCurve)
class CLRenderCubicBezier(CLRenderPoint):
    r"""Proxy of C++ CLRenderCubicBezier class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CLRenderCubicBezier self) -> CLRenderCubicBezier
        __init__(CLRenderCubicBezier self, CLRenderCubicBezier orig) -> CLRenderCubicBezier
        __init__(CLRenderCubicBezier self, CLRelAbsVector bp1_x, CLRelAbsVector bp1_y, CLRelAbsVector bp1_z, CLRelAbsVector bp2_x, CLRelAbsVector bp2_y, CLRelAbsVector bp2_z, CLRelAbsVector end_x, CLRelAbsVector end_y, CLRelAbsVector end_z) -> CLRenderCubicBezier
        """
        _COPASI.CLRenderCubicBezier_swiginit(self, _COPASI.new_CLRenderCubicBezier(*args))
    __swig_destroy__ = _COPASI.delete_CLRenderCubicBezier

    def basePoint1_X(self):
        r"""basePoint1_X(CLRenderCubicBezier self) -> CLRelAbsVector"""
        return _COPASI.CLRenderCubicBezier_basePoint1_X(self)

    def basePoint1_Y(self):
        r"""basePoint1_Y(CLRenderCubicBezier self) -> CLRelAbsVector"""
        return _COPASI.CLRenderCubicBezier_basePoint1_Y(self)

    def basePoint1_Z(self):
        r"""basePoint1_Z(CLRenderCubicBezier self) -> CLRelAbsVector"""
        return _COPASI.CLRenderCubicBezier_basePoint1_Z(self)

    def basePoint2_X(self):
        r"""basePoint2_X(CLRenderCubicBezier self) -> CLRelAbsVector"""
        return _COPASI.CLRenderCubicBezier_basePoint2_X(self)

    def basePoint2_Y(self):
        r"""basePoint2_Y(CLRenderCubicBezier self) -> CLRelAbsVector"""
        return _COPASI.CLRenderCubicBezier_basePoint2_Y(self)

    def basePoint2_Z(self):
        r"""basePoint2_Z(CLRenderCubicBezier self) -> CLRelAbsVector"""
        return _COPASI.CLRenderCubicBezier_basePoint2_Z(self)

    def setBasePoint1_X(self, v):
        r"""setBasePoint1_X(CLRenderCubicBezier self, CLRelAbsVector v)"""
        return _COPASI.CLRenderCubicBezier_setBasePoint1_X(self, v)

    def setBasePoint1_Y(self, v):
        r"""setBasePoint1_Y(CLRenderCubicBezier self, CLRelAbsVector v)"""
        return _COPASI.CLRenderCubicBezier_setBasePoint1_Y(self, v)

    def setBasePoint1_Z(self, v):
        r"""setBasePoint1_Z(CLRenderCubicBezier self, CLRelAbsVector v)"""
        return _COPASI.CLRenderCubicBezier_setBasePoint1_Z(self, v)

    def setBasePoint2_X(self, v):
        r"""setBasePoint2_X(CLRenderCubicBezier self, CLRelAbsVector v)"""
        return _COPASI.CLRenderCubicBezier_setBasePoint2_X(self, v)

    def setBasePoint2_Y(self, v):
        r"""setBasePoint2_Y(CLRenderCubicBezier self, CLRelAbsVector v)"""
        return _COPASI.CLRenderCubicBezier_setBasePoint2_Y(self, v)

    def setBasePoint2_Z(self, v):
        r"""setBasePoint2_Z(CLRenderCubicBezier self, CLRelAbsVector v)"""
        return _COPASI.CLRenderCubicBezier_setBasePoint2_Z(self, v)

    def setBasePoint1(self, *args):
        r"""setBasePoint1(CLRenderCubicBezier self, CLRelAbsVector x, CLRelAbsVector y, CLRelAbsVector z=CLRelAbsVector(0.0, 0.0))"""
        return _COPASI.CLRenderCubicBezier_setBasePoint1(self, *args)

    def setBasePoint2(self, *args):
        r"""setBasePoint2(CLRenderCubicBezier self, CLRelAbsVector x, CLRelAbsVector y, CLRelAbsVector z=CLRelAbsVector(0.0, 0.0))"""
        return _COPASI.CLRenderCubicBezier_setBasePoint2(self, *args)

# Register CLRenderCubicBezier in _COPASI:
_COPASI.CLRenderCubicBezier_swigregister(CLRenderCubicBezier)
class CLRectangle(CLGraphicalPrimitive2D, CDataObject):
    r"""Proxy of C++ CLRectangle class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CLRectangle self, CDataContainer pParent=None) -> CLRectangle
        __init__(CLRectangle self, CLRectangle source, CDataContainer pParent=None) -> CLRectangle
        __init__(CLRectangle self, CLRelAbsVector x, CLRelAbsVector y, CLRelAbsVector z, CLRelAbsVector w, CLRelAbsVector h, CDataContainer pParent=None) -> CLRectangle
        __init__(CLRectangle self, CLRelAbsVector x, CLRelAbsVector y, CLRelAbsVector w, CLRelAbsVector h, CDataContainer pParent=None) -> CLRectangle
        """
        _COPASI.CLRectangle_swiginit(self, _COPASI.new_CLRectangle(*args))
    __swig_destroy__ = _COPASI.delete_CLRectangle

    def setCoordinatesAndSize(self, x, y, z, w, h):
        r"""setCoordinatesAndSize(CLRectangle self, CLRelAbsVector x, CLRelAbsVector y, CLRelAbsVector z, CLRelAbsVector w, CLRelAbsVector h)"""
        return _COPASI.CLRectangle_setCoordinatesAndSize(self, x, y, z, w, h)

    def setCoordinates(self, x, y, z):
        r"""setCoordinates(CLRectangle self, CLRelAbsVector x, CLRelAbsVector y, CLRelAbsVector z)"""
        return _COPASI.CLRectangle_setCoordinates(self, x, y, z)

    def setSize(self, w, h):
        r"""setSize(CLRectangle self, CLRelAbsVector w, CLRelAbsVector h)"""
        return _COPASI.CLRectangle_setSize(self, w, h)

    def setWidth(self, w):
        r"""setWidth(CLRectangle self, CLRelAbsVector w)"""
        return _COPASI.CLRectangle_setWidth(self, w)

    def setHeight(self, h):
        r"""setHeight(CLRectangle self, CLRelAbsVector h)"""
        return _COPASI.CLRectangle_setHeight(self, h)

    def setRadii(self, rx, ry):
        r"""setRadii(CLRectangle self, CLRelAbsVector rx, CLRelAbsVector ry)"""
        return _COPASI.CLRectangle_setRadii(self, rx, ry)

    def setRadiusX(self, rx):
        r"""setRadiusX(CLRectangle self, CLRelAbsVector rx)"""
        return _COPASI.CLRectangle_setRadiusX(self, rx)

    def setRadiusY(self, ry):
        r"""setRadiusY(CLRectangle self, CLRelAbsVector ry)"""
        return _COPASI.CLRectangle_setRadiusY(self, ry)

    def setX(self, x):
        r"""setX(CLRectangle self, CLRelAbsVector x)"""
        return _COPASI.CLRectangle_setX(self, x)

    def setY(self, y):
        r"""setY(CLRectangle self, CLRelAbsVector y)"""
        return _COPASI.CLRectangle_setY(self, y)

    def setZ(self, z):
        r"""setZ(CLRectangle self, CLRelAbsVector z)"""
        return _COPASI.CLRectangle_setZ(self, z)

    def getX(self):
        r"""getX(CLRectangle self) -> CLRelAbsVector"""
        return _COPASI.CLRectangle_getX(self)

    def getY(self):
        r"""getY(CLRectangle self) -> CLRelAbsVector"""
        return _COPASI.CLRectangle_getY(self)

    def getZ(self):
        r"""getZ(CLRectangle self) -> CLRelAbsVector"""
        return _COPASI.CLRectangle_getZ(self)

    def getWidth(self):
        r"""getWidth(CLRectangle self) -> CLRelAbsVector"""
        return _COPASI.CLRectangle_getWidth(self)

    def getHeight(self):
        r"""getHeight(CLRectangle self) -> CLRelAbsVector"""
        return _COPASI.CLRectangle_getHeight(self)

    def getRadiusX(self):
        r"""getRadiusX(CLRectangle self) -> CLRelAbsVector"""
        return _COPASI.CLRectangle_getRadiusX(self)

    def getRadiusY(self):
        r"""getRadiusY(CLRectangle self) -> CLRelAbsVector"""
        return _COPASI.CLRectangle_getRadiusY(self)

    def getKey(self):
        r"""getKey(CLRectangle self) -> std::string const &"""
        return _COPASI.CLRectangle_getKey(self)

# Register CLRectangle in _COPASI:
_COPASI.CLRectangle_swigregister(CLRectangle)
class CLEllipse(CLGraphicalPrimitive2D, CDataObject):
    r"""Proxy of C++ CLEllipse class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CLEllipse self, CDataContainer pParent=None) -> CLEllipse
        __init__(CLEllipse self, CLRelAbsVector cx, CLRelAbsVector cy, CLRelAbsVector r, CDataContainer pParent=None) -> CLEllipse
        __init__(CLEllipse self, CLRelAbsVector cx, CLRelAbsVector cy, CLRelAbsVector rx, CLRelAbsVector ry, CDataContainer pParent=None) -> CLEllipse
        __init__(CLEllipse self, CLRelAbsVector cx, CLRelAbsVector cy, CLRelAbsVector cz, CLRelAbsVector rx, CLRelAbsVector ry, CDataContainer pParent=None) -> CLEllipse
        __init__(CLEllipse self, CLEllipse source, CDataContainer pParent=None) -> CLEllipse
        """
        _COPASI.CLEllipse_swiginit(self, _COPASI.new_CLEllipse(*args))
    __swig_destroy__ = _COPASI.delete_CLEllipse

    def getCX(self):
        r"""getCX(CLEllipse self) -> CLRelAbsVector"""
        return _COPASI.CLEllipse_getCX(self)

    def getCY(self):
        r"""getCY(CLEllipse self) -> CLRelAbsVector"""
        return _COPASI.CLEllipse_getCY(self)

    def getCZ(self):
        r"""getCZ(CLEllipse self) -> CLRelAbsVector"""
        return _COPASI.CLEllipse_getCZ(self)

    def getRX(self):
        r"""getRX(CLEllipse self) -> CLRelAbsVector"""
        return _COPASI.CLEllipse_getRX(self)

    def getRY(self):
        r"""getRY(CLEllipse self) -> CLRelAbsVector"""
        return _COPASI.CLEllipse_getRY(self)

    def setCX(self, cx):
        r"""setCX(CLEllipse self, CLRelAbsVector cx)"""
        return _COPASI.CLEllipse_setCX(self, cx)

    def setCY(self, cy):
        r"""setCY(CLEllipse self, CLRelAbsVector cy)"""
        return _COPASI.CLEllipse_setCY(self, cy)

    def setCZ(self, cz):
        r"""setCZ(CLEllipse self, CLRelAbsVector cz)"""
        return _COPASI.CLEllipse_setCZ(self, cz)

    def setRX(self, rx):
        r"""setRX(CLEllipse self, CLRelAbsVector rx)"""
        return _COPASI.CLEllipse_setRX(self, rx)

    def setRY(self, ry):
        r"""setRY(CLEllipse self, CLRelAbsVector ry)"""
        return _COPASI.CLEllipse_setRY(self, ry)

    def setCenter2D(self, cx, cy):
        r"""setCenter2D(CLEllipse self, CLRelAbsVector cx, CLRelAbsVector cy)"""
        return _COPASI.CLEllipse_setCenter2D(self, cx, cy)

    def setCenter3D(self, cx, cy, cz):
        r"""setCenter3D(CLEllipse self, CLRelAbsVector cx, CLRelAbsVector cy, CLRelAbsVector cz)"""
        return _COPASI.CLEllipse_setCenter3D(self, cx, cy, cz)

    def setRadii(self, rx, ry):
        r"""setRadii(CLEllipse self, CLRelAbsVector rx, CLRelAbsVector ry)"""
        return _COPASI.CLEllipse_setRadii(self, rx, ry)

    def getKey(self):
        r"""getKey(CLEllipse self) -> std::string const &"""
        return _COPASI.CLEllipse_getKey(self)

# Register CLEllipse in _COPASI:
_COPASI.CLEllipse_swigregister(CLEllipse)
class CLGroup(CLGraphicalPrimitive2D, CDataContainer):
    r"""Proxy of C++ CLGroup class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CLGroup self, CDataContainer pParent=None) -> CLGroup
        __init__(CLGroup self, CLGroup source, CDataContainer pParent=None) -> CLGroup
        """
        _COPASI.CLGroup_swiginit(self, _COPASI.new_CLGroup(*args))
    __swig_destroy__ = _COPASI.delete_CLGroup

    def setFontFamily(self, family):
        r"""setFontFamily(CLGroup self, std::string const & family)"""
        return _COPASI.CLGroup_setFontFamily(self, family)

    def setFontSize(self, size):
        r"""setFontSize(CLGroup self, CLRelAbsVector size)"""
        return _COPASI.CLGroup_setFontSize(self, size)

    def setFontWeight(self, weight):
        r"""setFontWeight(CLGroup self, CLText::FONT_WEIGHT weight)"""
        return _COPASI.CLGroup_setFontWeight(self, weight)

    def setFontStyle(self, style):
        r"""setFontStyle(CLGroup self, CLText::FONT_STYLE style)"""
        return _COPASI.CLGroup_setFontStyle(self, style)

    def setTextAnchor(self, anchor):
        r"""setTextAnchor(CLGroup self, CLText::TEXT_ANCHOR anchor)"""
        return _COPASI.CLGroup_setTextAnchor(self, anchor)

    def setVTextAnchor(self, anchor):
        r"""setVTextAnchor(CLGroup self, CLText::TEXT_ANCHOR anchor)"""
        return _COPASI.CLGroup_setVTextAnchor(self, anchor)

    def setStartHead(self, key):
        r"""setStartHead(CLGroup self, std::string const & key)"""
        return _COPASI.CLGroup_setStartHead(self, key)

    def setEndHead(self, key):
        r"""setEndHead(CLGroup self, std::string const & key)"""
        return _COPASI.CLGroup_setEndHead(self, key)

    def getFontFamily(self):
        r"""getFontFamily(CLGroup self) -> std::string const &"""
        return _COPASI.CLGroup_getFontFamily(self)

    def getFontSize(self):
        r"""getFontSize(CLGroup self) -> CLRelAbsVector"""
        return _COPASI.CLGroup_getFontSize(self)

    def getFontWeight(self):
        r"""getFontWeight(CLGroup self) -> CLText::FONT_WEIGHT"""
        return _COPASI.CLGroup_getFontWeight(self)

    def getFontStyle(self):
        r"""getFontStyle(CLGroup self) -> CLText::FONT_STYLE"""
        return _COPASI.CLGroup_getFontStyle(self)

    def getTextAnchor(self):
        r"""getTextAnchor(CLGroup self) -> CLText::TEXT_ANCHOR"""
        return _COPASI.CLGroup_getTextAnchor(self)

    def getVTextAnchor(self):
        r"""getVTextAnchor(CLGroup self) -> CLText::TEXT_ANCHOR"""
        return _COPASI.CLGroup_getVTextAnchor(self)

    def getStartHead(self):
        r"""getStartHead(CLGroup self) -> std::string const &"""
        return _COPASI.CLGroup_getStartHead(self)

    def getEndHead(self):
        r"""getEndHead(CLGroup self) -> std::string const &"""
        return _COPASI.CLGroup_getEndHead(self)

    def getNumElements(self):
        r"""getNumElements(CLGroup self) -> size_t"""
        return _COPASI.CLGroup_getNumElements(self)

    def getListOfElements(self):
        r"""getListOfElements(CLGroup self) -> CDataObjectVector"""
        return _COPASI.CLGroup_getListOfElements(self)

    def getElement(self, n):
        r"""getElement(CLGroup self, size_t n) -> CDataObject"""
        return _COPASI.CLGroup_getElement(self, n)

    def isSetTextAnchor(self):
        r"""isSetTextAnchor(CLGroup self) -> bool"""
        return _COPASI.CLGroup_isSetTextAnchor(self)

    def isSetVTextAnchor(self):
        r"""isSetVTextAnchor(CLGroup self) -> bool"""
        return _COPASI.CLGroup_isSetVTextAnchor(self)

    def createImage(self):
        r"""createImage(CLGroup self) -> CLImage"""
        return _COPASI.CLGroup_createImage(self)

    def createGroup(self):
        r"""createGroup(CLGroup self) -> CLGroup"""
        return _COPASI.CLGroup_createGroup(self)

    def createRectangle(self):
        r"""createRectangle(CLGroup self) -> CLRectangle"""
        return _COPASI.CLGroup_createRectangle(self)

    def createEllipse(self):
        r"""createEllipse(CLGroup self) -> CLEllipse"""
        return _COPASI.CLGroup_createEllipse(self)

    def createCurve(self):
        r"""createCurve(CLGroup self) -> CLRenderCurve"""
        return _COPASI.CLGroup_createCurve(self)

    def createPolygon(self):
        r"""createPolygon(CLGroup self) -> CLPolygon"""
        return _COPASI.CLGroup_createPolygon(self)

    def createText(self):
        r"""createText(CLGroup self) -> CLText"""
        return _COPASI.CLGroup_createText(self)

    def addChildElement(self, pChild):
        r"""addChildElement(CLGroup self, CLTransformation2D pChild)"""
        return _COPASI.CLGroup_addChildElement(self, pChild)

    def isSetStartHead(self):
        r"""isSetStartHead(CLGroup self) -> bool"""
        return _COPASI.CLGroup_isSetStartHead(self)

    def isSetEndHead(self):
        r"""isSetEndHead(CLGroup self) -> bool"""
        return _COPASI.CLGroup_isSetEndHead(self)

    def isSetFontFamily(self):
        r"""isSetFontFamily(CLGroup self) -> bool"""
        return _COPASI.CLGroup_isSetFontFamily(self)

    def isSetFontSize(self):
        r"""isSetFontSize(CLGroup self) -> bool"""
        return _COPASI.CLGroup_isSetFontSize(self)

    def isSetFontWeight(self):
        r"""isSetFontWeight(CLGroup self) -> bool"""
        return _COPASI.CLGroup_isSetFontWeight(self)

    def isSetFontStyle(self):
        r"""isSetFontStyle(CLGroup self) -> bool"""
        return _COPASI.CLGroup_isSetFontStyle(self)

    def getKey(self):
        r"""getKey(CLGroup self) -> std::string const &"""
        return _COPASI.CLGroup_getKey(self)

# Register CLGroup in _COPASI:
_COPASI.CLGroup_swigregister(CLGroup)
class CLImage(CLTransformation2D, CDataObject):
    r"""Proxy of C++ CLImage class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CLImage self, CDataContainer pParent=None) -> CLImage
        __init__(CLImage self, CLImage source, CDataContainer pParent=None) -> CLImage
        """
        _COPASI.CLImage_swiginit(self, _COPASI.new_CLImage(*args))
    __swig_destroy__ = _COPASI.delete_CLImage

    def setCoordinates(self, *args):
        r"""setCoordinates(CLImage self, CLRelAbsVector x, CLRelAbsVector y, CLRelAbsVector z=CLRelAbsVector(0.0, 0.0))"""
        return _COPASI.CLImage_setCoordinates(self, *args)

    def setX(self, coord):
        r"""setX(CLImage self, CLRelAbsVector coord)"""
        return _COPASI.CLImage_setX(self, coord)

    def setY(self, coord):
        r"""setY(CLImage self, CLRelAbsVector coord)"""
        return _COPASI.CLImage_setY(self, coord)

    def setZ(self, coord):
        r"""setZ(CLImage self, CLRelAbsVector coord)"""
        return _COPASI.CLImage_setZ(self, coord)

    def getX(self):
        r"""getX(CLImage self) -> CLRelAbsVector"""
        return _COPASI.CLImage_getX(self)

    def getY(self):
        r"""getY(CLImage self) -> CLRelAbsVector"""
        return _COPASI.CLImage_getY(self)

    def getZ(self):
        r"""getZ(CLImage self) -> CLRelAbsVector"""
        return _COPASI.CLImage_getZ(self)

    def setDimensions(self, width, height):
        r"""setDimensions(CLImage self, CLRelAbsVector width, CLRelAbsVector height)"""
        return _COPASI.CLImage_setDimensions(self, width, height)

    def setWidth(self, width):
        r"""setWidth(CLImage self, CLRelAbsVector width)"""
        return _COPASI.CLImage_setWidth(self, width)

    def setHeight(self, height):
        r"""setHeight(CLImage self, CLRelAbsVector height)"""
        return _COPASI.CLImage_setHeight(self, height)

    def getWidth(self):
        r"""getWidth(CLImage self) -> CLRelAbsVector"""
        return _COPASI.CLImage_getWidth(self)

    def getHeight(self):
        r"""getHeight(CLImage self) -> CLRelAbsVector"""
        return _COPASI.CLImage_getHeight(self)

    def setImageReference(self, ref):
        r"""setImageReference(CLImage self, std::string const & ref)"""
        return _COPASI.CLImage_setImageReference(self, ref)

    def getImageReference(self):
        r"""getImageReference(CLImage self) -> std::string const &"""
        return _COPASI.CLImage_getImageReference(self)

    def isSetImageReference(self):
        r"""isSetImageReference(CLImage self) -> bool"""
        return _COPASI.CLImage_isSetImageReference(self)

    def getKey(self):
        r"""getKey(CLImage self) -> std::string const &"""
        return _COPASI.CLImage_getKey(self)

# Register CLImage in _COPASI:
_COPASI.CLImage_swigregister(CLImage)
class CLPolygon(CLGraphicalPrimitive2D, CDataObject):
    r"""Proxy of C++ CLPolygon class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CLPolygon self, CDataContainer pParent=None) -> CLPolygon
        __init__(CLPolygon self, CLPolygon source, CDataContainer pParent) -> CLPolygon
        """
        _COPASI.CLPolygon_swiginit(self, _COPASI.new_CLPolygon(*args))
    __swig_destroy__ = _COPASI.delete_CLPolygon

    def getNumElements(self):
        r"""getNumElements(CLPolygon self) -> size_t"""
        return _COPASI.CLPolygon_getNumElements(self)

    def getListOfElements(self):
        r"""getListOfElements(CLPolygon self) -> RenderPointStdVector"""
        return _COPASI.CLPolygon_getListOfElements(self)

    def createPoint(self):
        r"""createPoint(CLPolygon self) -> CLRenderPoint"""
        return _COPASI.CLPolygon_createPoint(self)

    def createCubicBezier(self):
        r"""createCubicBezier(CLPolygon self) -> CLRenderCubicBezier"""
        return _COPASI.CLPolygon_createCubicBezier(self)

    def getElement(self, index):
        r"""getElement(CLPolygon self, size_t index) -> CLRenderPoint"""
        return _COPASI.CLPolygon_getElement(self, index)

    def addElement(self, ls):
        r"""addElement(CLPolygon self, CLRenderPoint ls)"""
        return _COPASI.CLPolygon_addElement(self, ls)

    def removeElement(self, i):
        r"""removeElement(CLPolygon self, size_t i)"""
        return _COPASI.CLPolygon_removeElement(self, i)

    def getKey(self):
        r"""getKey(CLPolygon self) -> std::string const &"""
        return _COPASI.CLPolygon_getKey(self)

# Register CLPolygon in _COPASI:
_COPASI.CLPolygon_swigregister(CLPolygon)
class CLText(CLGraphicalPrimitive1D, CDataObject):
    r"""Proxy of C++ CLText class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    WEIGHT_UNSET = _COPASI.CLText_WEIGHT_UNSET
    
    WEIGHT_NORMAL = _COPASI.CLText_WEIGHT_NORMAL
    
    WEIGHT_BOLD = _COPASI.CLText_WEIGHT_BOLD
    
    STYLE_UNSET = _COPASI.CLText_STYLE_UNSET
    
    STYLE_NORMAL = _COPASI.CLText_STYLE_NORMAL
    
    STYLE_ITALIC = _COPASI.CLText_STYLE_ITALIC
    
    ANCHOR_UNSET = _COPASI.CLText_ANCHOR_UNSET
    
    ANCHOR_START = _COPASI.CLText_ANCHOR_START
    
    ANCHOR_MIDDLE = _COPASI.CLText_ANCHOR_MIDDLE
    
    ANCHOR_END = _COPASI.CLText_ANCHOR_END
    
    ANCHOR_TOP = _COPASI.CLText_ANCHOR_TOP
    
    ANCHOR_BOTTOM = _COPASI.CLText_ANCHOR_BOTTOM
    

    def __init__(self, *args):
        r"""
        __init__(CLText self, CDataContainer pParent) -> CLText
        __init__(CLText self, CLRelAbsVector x=CLRelAbsVector(0.0, 0.0), CLRelAbsVector y=CLRelAbsVector(0.0, 0.0), CLRelAbsVector z=CLRelAbsVector(0.0, 0.0), CDataContainer pParent=None) -> CLText
        __init__(CLText self, CLText source, CDataContainer pParent=None) -> CLText
        """
        _COPASI.CLText_swiginit(self, _COPASI.new_CLText(*args))
    __swig_destroy__ = _COPASI.delete_CLText

    def setCoordinates(self, *args):
        r"""setCoordinates(CLText self, CLRelAbsVector x, CLRelAbsVector y, CLRelAbsVector z=CLRelAbsVector(0.0, 0.0))"""
        return _COPASI.CLText_setCoordinates(self, *args)

    def setX(self, coord):
        r"""setX(CLText self, CLRelAbsVector coord)"""
        return _COPASI.CLText_setX(self, coord)

    def setY(self, coord):
        r"""setY(CLText self, CLRelAbsVector coord)"""
        return _COPASI.CLText_setY(self, coord)

    def setZ(self, coord):
        r"""setZ(CLText self, CLRelAbsVector coord)"""
        return _COPASI.CLText_setZ(self, coord)

    def getX(self):
        r"""getX(CLText self) -> CLRelAbsVector"""
        return _COPASI.CLText_getX(self)

    def getY(self):
        r"""getY(CLText self) -> CLRelAbsVector"""
        return _COPASI.CLText_getY(self)

    def getZ(self):
        r"""getZ(CLText self) -> CLRelAbsVector"""
        return _COPASI.CLText_getZ(self)

    def setFontFamily(self, family):
        r"""setFontFamily(CLText self, std::string const & family)"""
        return _COPASI.CLText_setFontFamily(self, family)

    def setFontSize(self, size):
        r"""setFontSize(CLText self, CLRelAbsVector size)"""
        return _COPASI.CLText_setFontSize(self, size)

    def setFontWeight(self, weight):
        r"""setFontWeight(CLText self, CLText::FONT_WEIGHT weight)"""
        return _COPASI.CLText_setFontWeight(self, weight)

    def setFontStyle(self, style):
        r"""setFontStyle(CLText self, CLText::FONT_STYLE style)"""
        return _COPASI.CLText_setFontStyle(self, style)

    def setTextAnchor(self, anchor):
        r"""setTextAnchor(CLText self, CLText::TEXT_ANCHOR anchor)"""
        return _COPASI.CLText_setTextAnchor(self, anchor)

    def setVTextAnchor(self, anchor):
        r"""setVTextAnchor(CLText self, CLText::TEXT_ANCHOR anchor)"""
        return _COPASI.CLText_setVTextAnchor(self, anchor)

    def getFontFamily(self):
        r"""getFontFamily(CLText self) -> std::string const &"""
        return _COPASI.CLText_getFontFamily(self)

    def getFontSize(self):
        r"""getFontSize(CLText self) -> CLRelAbsVector"""
        return _COPASI.CLText_getFontSize(self)

    def getFontWeight(self):
        r"""getFontWeight(CLText self) -> CLText::FONT_WEIGHT"""
        return _COPASI.CLText_getFontWeight(self)

    def getFontStyle(self):
        r"""getFontStyle(CLText self) -> CLText::FONT_STYLE"""
        return _COPASI.CLText_getFontStyle(self)

    def getTextAnchor(self):
        r"""getTextAnchor(CLText self) -> CLText::TEXT_ANCHOR"""
        return _COPASI.CLText_getTextAnchor(self)

    def getVTextAnchor(self):
        r"""getVTextAnchor(CLText self) -> CLText::TEXT_ANCHOR"""
        return _COPASI.CLText_getVTextAnchor(self)

    def isSetTextAnchor(self):
        r"""isSetTextAnchor(CLText self) -> bool"""
        return _COPASI.CLText_isSetTextAnchor(self)

    def isSetVTextAnchor(self):
        r"""isSetVTextAnchor(CLText self) -> bool"""
        return _COPASI.CLText_isSetVTextAnchor(self)

    def getText(self):
        r"""getText(CLText self) -> std::string const &"""
        return _COPASI.CLText_getText(self)

    def setText(self, text):
        r"""setText(CLText self, std::string const & text)"""
        return _COPASI.CLText_setText(self, text)

    def isSetText(self):
        r"""isSetText(CLText self) -> bool"""
        return _COPASI.CLText_isSetText(self)

    def isSetFontFamily(self):
        r"""isSetFontFamily(CLText self) -> bool"""
        return _COPASI.CLText_isSetFontFamily(self)

    def isSetFontSize(self):
        r"""isSetFontSize(CLText self) -> bool"""
        return _COPASI.CLText_isSetFontSize(self)

    def isSetFontWeight(self):
        r"""isSetFontWeight(CLText self) -> bool"""
        return _COPASI.CLText_isSetFontWeight(self)

    def isSetFontStyle(self):
        r"""isSetFontStyle(CLText self) -> bool"""
        return _COPASI.CLText_isSetFontStyle(self)

    def getKey(self):
        r"""getKey(CLText self) -> std::string const &"""
        return _COPASI.CLText_getKey(self)

# Register CLText in _COPASI:
_COPASI.CLText_swigregister(CLText)
class CLLineEnding(CLGraphicalPrimitive2D, CDataContainer):
    r"""Proxy of C++ CLLineEnding class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def fromData(data, pParent):
        r"""fromData(CData data, CUndoObjectInterface pParent) -> CLLineEnding"""
        return _COPASI.CLLineEnding_fromData(data, pParent)

    def __init__(self, *args):
        r"""
        __init__(CLLineEnding self, CDataContainer pParent=None) -> CLLineEnding
        __init__(CLLineEnding self, CLLineEnding source, CDataContainer pParent=None) -> CLLineEnding
        """
        _COPASI.CLLineEnding_swiginit(self, _COPASI.new_CLLineEnding(*args))

    def setEnableRotationalMapping(self, enable):
        r"""setEnableRotationalMapping(CLLineEnding self, bool enable)"""
        return _COPASI.CLLineEnding_setEnableRotationalMapping(self, enable)

    def getIsEnabledRotationalMapping(self):
        r"""getIsEnabledRotationalMapping(CLLineEnding self) -> bool"""
        return _COPASI.CLLineEnding_getIsEnabledRotationalMapping(self)

    def setBoundingBox(self, box):
        r"""setBoundingBox(CLLineEnding self, CLBoundingBox box)"""
        return _COPASI.CLLineEnding_setBoundingBox(self, box)

    def getBoundingBox(self):
        r"""getBoundingBox(CLLineEnding self) -> CLBoundingBox"""
        return _COPASI.CLLineEnding_getBoundingBox(self)

    def setGroup(self, group):
        r"""setGroup(CLLineEnding self, CLGroup group)"""
        return _COPASI.CLLineEnding_setGroup(self, group)

    def getGroup(self):
        r"""getGroup(CLLineEnding self) -> CLGroup"""
        return _COPASI.CLLineEnding_getGroup(self)

    def getKey(self):
        r"""getKey(CLLineEnding self) -> std::string const &"""
        return _COPASI.CLLineEnding_getKey(self)

    def getId(self):
        r"""getId(CLLineEnding self) -> std::string const &"""
        return _COPASI.CLLineEnding_getId(self)

    def setId(self, id):
        r"""setId(CLLineEnding self, std::string const & id)"""
        return _COPASI.CLLineEnding_setId(self, id)
    __swig_destroy__ = _COPASI.delete_CLLineEnding

# Register CLLineEnding in _COPASI:
_COPASI.CLLineEnding_swigregister(CLLineEnding)
class CLRenderInformationBase(CLBase, CDataContainer):
    r"""Proxy of C++ CLRenderInformationBase class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _COPASI.delete_CLRenderInformationBase

    def getReferenceRenderInformationKey(self):
        r"""getReferenceRenderInformationKey(CLRenderInformationBase self) -> std::string const &"""
        return _COPASI.CLRenderInformationBase_getReferenceRenderInformationKey(self)

    def setReferenceRenderInformationKey(self, key):
        r"""setReferenceRenderInformationKey(CLRenderInformationBase self, std::string const & key)"""
        return _COPASI.CLRenderInformationBase_setReferenceRenderInformationKey(self, key)

    def getNumColorDefinitions(self):
        r"""getNumColorDefinitions(CLRenderInformationBase self) -> size_t"""
        return _COPASI.CLRenderInformationBase_getNumColorDefinitions(self)

    def getListOfColorDefinitions(self):
        r"""getListOfColorDefinitions(CLRenderInformationBase self) -> ColorDefinitionVector"""
        return _COPASI.CLRenderInformationBase_getListOfColorDefinitions(self)

    def getColorDefinition(self, index):
        r"""getColorDefinition(CLRenderInformationBase self, size_t index) -> CLColorDefinition"""
        return _COPASI.CLRenderInformationBase_getColorDefinition(self, index)

    def createColorDefinition(self):
        r"""createColorDefinition(CLRenderInformationBase self) -> CLColorDefinition"""
        return _COPASI.CLRenderInformationBase_createColorDefinition(self)

    def removeColorDefinition(self, index):
        r"""removeColorDefinition(CLRenderInformationBase self, size_t index)"""
        return _COPASI.CLRenderInformationBase_removeColorDefinition(self, index)

    def addColorDefinition(self, cd):
        r"""addColorDefinition(CLRenderInformationBase self, CLColorDefinition cd)"""
        return _COPASI.CLRenderInformationBase_addColorDefinition(self, cd)

    def getNumGradientDefinitions(self):
        r"""getNumGradientDefinitions(CLRenderInformationBase self) -> size_t"""
        return _COPASI.CLRenderInformationBase_getNumGradientDefinitions(self)

    def getListOfGradientDefinitions(self):
        r"""getListOfGradientDefinitions(CLRenderInformationBase self) -> GradientBaseVector"""
        return _COPASI.CLRenderInformationBase_getListOfGradientDefinitions(self)

    def getGradientDefinition(self, index):
        r"""getGradientDefinition(CLRenderInformationBase self, size_t index) -> CLGradientBase"""
        return _COPASI.CLRenderInformationBase_getGradientDefinition(self, index)

    def createLinearGradientDefinition(self):
        r"""createLinearGradientDefinition(CLRenderInformationBase self) -> CLLinearGradient"""
        return _COPASI.CLRenderInformationBase_createLinearGradientDefinition(self)

    def createRadialGradientDefinition(self):
        r"""createRadialGradientDefinition(CLRenderInformationBase self) -> CLRadialGradient"""
        return _COPASI.CLRenderInformationBase_createRadialGradientDefinition(self)

    def removeGradientDefinition(self, index):
        r"""removeGradientDefinition(CLRenderInformationBase self, size_t index)"""
        return _COPASI.CLRenderInformationBase_removeGradientDefinition(self, index)

    def addGradientDefinition(self, gradient):
        r"""addGradientDefinition(CLRenderInformationBase self, CLGradientBase gradient)"""
        return _COPASI.CLRenderInformationBase_addGradientDefinition(self, gradient)

    def getNumLineEndings(self):
        r"""getNumLineEndings(CLRenderInformationBase self) -> size_t"""
        return _COPASI.CLRenderInformationBase_getNumLineEndings(self)

    def getListOfLineEndings(self):
        r"""getListOfLineEndings(CLRenderInformationBase self) -> LineEndingVector"""
        return _COPASI.CLRenderInformationBase_getListOfLineEndings(self)

    def getLineEnding(self, index):
        r"""getLineEnding(CLRenderInformationBase self, size_t index) -> CLLineEnding"""
        return _COPASI.CLRenderInformationBase_getLineEnding(self, index)

    def createLineEnding(self):
        r"""createLineEnding(CLRenderInformationBase self) -> CLLineEnding"""
        return _COPASI.CLRenderInformationBase_createLineEnding(self)

    def removeLineEnding(self, index):
        r"""removeLineEnding(CLRenderInformationBase self, size_t index)"""
        return _COPASI.CLRenderInformationBase_removeLineEnding(self, index)

    def addLineEnding(self, le):
        r"""addLineEnding(CLRenderInformationBase self, CLLineEnding le)"""
        return _COPASI.CLRenderInformationBase_addLineEnding(self, le)

    def getBackgroundColor(self):
        r"""getBackgroundColor(CLRenderInformationBase self) -> std::string const &"""
        return _COPASI.CLRenderInformationBase_getBackgroundColor(self)

    def setBackgroundColor(self, bg):
        r"""setBackgroundColor(CLRenderInformationBase self, std::string const & bg)"""
        return _COPASI.CLRenderInformationBase_setBackgroundColor(self, bg)

    def getKey(self):
        r"""getKey(CLRenderInformationBase self) -> std::string const &"""
        return _COPASI.CLRenderInformationBase_getKey(self)

    def getName(self):
        r"""getName(CLRenderInformationBase self) -> std::string const &"""
        return _COPASI.CLRenderInformationBase_getName(self)

    def setName(self, name):
        r"""setName(CLRenderInformationBase self, std::string const & name)"""
        return _COPASI.CLRenderInformationBase_setName(self, name)

    def createStyle(self):
        r"""createStyle(CLRenderInformationBase self) -> CLStyle"""
        return _COPASI.CLRenderInformationBase_createStyle(self)

    def getStyleForGraphicalObject(self, pObject):
        r"""getStyleForGraphicalObject(CLRenderInformationBase self, CLGraphicalObject pObject) -> CLStyle"""
        return _COPASI.CLRenderInformationBase_getStyleForGraphicalObject(self, pObject)

    def getNumStyles(self):
        r"""getNumStyles(CLRenderInformationBase self) -> size_t"""
        return _COPASI.CLRenderInformationBase_getNumStyles(self)

    def getStyle(self, *args):
        r"""
        getStyle(CLRenderInformationBase self, size_t index) -> CLStyle
        getStyle(CLRenderInformationBase self, size_t index) -> CLStyle
        """
        return _COPASI.CLRenderInformationBase_getStyle(self, *args)

# Register CLRenderInformationBase in _COPASI:
_COPASI.CLRenderInformationBase_swigregister(CLRenderInformationBase)
class CLLocalRenderInformation(CLRenderInformationBase):
    r"""Proxy of C++ CLLocalRenderInformation class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def fromData(data, pParent):
        r"""fromData(CData data, CUndoObjectInterface pParent) -> CLLocalRenderInformation"""
        return _COPASI.CLLocalRenderInformation_fromData(data, pParent)

    def __init__(self, *args):
        r"""
        __init__(CLLocalRenderInformation self, CDataContainer pParent=None) -> CLLocalRenderInformation
        __init__(CLLocalRenderInformation self, CLLocalRenderInformation source, CDataContainer pParent=None) -> CLLocalRenderInformation
        """
        _COPASI.CLLocalRenderInformation_swiginit(self, _COPASI.new_CLLocalRenderInformation(*args))

    def getNumStyles(self):
        r"""getNumStyles(CLLocalRenderInformation self) -> size_t"""
        return _COPASI.CLLocalRenderInformation_getNumStyles(self)

    def getListOfStyles(self):
        r"""getListOfStyles(CLLocalRenderInformation self) -> LocalStyleVector"""
        return _COPASI.CLLocalRenderInformation_getListOfStyles(self)

    def getStyle(self, i):
        r"""getStyle(CLLocalRenderInformation self, size_t i) -> CLLocalStyle"""
        return _COPASI.CLLocalRenderInformation_getStyle(self, i)

    def createStyle(self):
        r"""createStyle(CLLocalRenderInformation self) -> CLStyle"""
        return _COPASI.CLLocalRenderInformation_createStyle(self)

    def getStyleForGraphicalObject(self, pObject):
        r"""getStyleForGraphicalObject(CLLocalRenderInformation self, CLGraphicalObject pObject) -> CLStyle"""
        return _COPASI.CLLocalRenderInformation_getStyleForGraphicalObject(self, pObject)

    def addStyle(self, pStyle):
        r"""addStyle(CLLocalRenderInformation self, CLLocalStyle pStyle)"""
        return _COPASI.CLLocalRenderInformation_addStyle(self, pStyle)
    __swig_destroy__ = _COPASI.delete_CLLocalRenderInformation

# Register CLLocalRenderInformation in _COPASI:
_COPASI.CLLocalRenderInformation_swigregister(CLLocalRenderInformation)
class CLGlobalRenderInformation(CLRenderInformationBase):
    r"""Proxy of C++ CLGlobalRenderInformation class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def fromData(data, pParent):
        r"""fromData(CData data, CUndoObjectInterface pParent) -> CLGlobalRenderInformation"""
        return _COPASI.CLGlobalRenderInformation_fromData(data, pParent)

    def __init__(self, *args):
        r"""
        __init__(CLGlobalRenderInformation self, CDataContainer pParent=None) -> CLGlobalRenderInformation
        __init__(CLGlobalRenderInformation self, CLGlobalRenderInformation source, CDataContainer pParent=None) -> CLGlobalRenderInformation
        """
        _COPASI.CLGlobalRenderInformation_swiginit(self, _COPASI.new_CLGlobalRenderInformation(*args))

    def getNumStyles(self):
        r"""getNumStyles(CLGlobalRenderInformation self) -> size_t"""
        return _COPASI.CLGlobalRenderInformation_getNumStyles(self)

    def getListOfStyles(self):
        r"""getListOfStyles(CLGlobalRenderInformation self) -> GlobalStyleVector"""
        return _COPASI.CLGlobalRenderInformation_getListOfStyles(self)

    def getStyle(self, i):
        r"""getStyle(CLGlobalRenderInformation self, size_t i) -> CLStyle"""
        return _COPASI.CLGlobalRenderInformation_getStyle(self, i)

    def createStyle(self):
        r"""createStyle(CLGlobalRenderInformation self) -> CLStyle"""
        return _COPASI.CLGlobalRenderInformation_createStyle(self)

    def getStyleForGraphicalObject(self, pObject):
        r"""getStyleForGraphicalObject(CLGlobalRenderInformation self, CLGraphicalObject pObject) -> CLStyle"""
        return _COPASI.CLGlobalRenderInformation_getStyleForGraphicalObject(self, pObject)

    @staticmethod
    def getTypeForObject(pObject):
        r"""getTypeForObject(CLGraphicalObject pObject) -> std::string"""
        return _COPASI.CLGlobalRenderInformation_getTypeForObject(pObject)

    def addStyle(self, pStyle):
        r"""addStyle(CLGlobalRenderInformation self, CLGlobalStyle pStyle)"""
        return _COPASI.CLGlobalRenderInformation_addStyle(self, pStyle)
    __swig_destroy__ = _COPASI.delete_CLGlobalRenderInformation

# Register CLGlobalRenderInformation in _COPASI:
_COPASI.CLGlobalRenderInformation_swigregister(CLGlobalRenderInformation)
class ColorDefinitionVector(CDataContainer):
    r"""Proxy of C++ CDataVector< CLColorDefinition > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _COPASI.delete_ColorDefinitionVector

    def cleanup(self):
        r"""cleanup(ColorDefinitionVector self)"""
        return _COPASI.ColorDefinitionVector_cleanup(self)

    def addCopy(self, src):
        r"""addCopy(ColorDefinitionVector self, CLColorDefinition src) -> bool"""
        return _COPASI.ColorDefinitionVector_addCopy(self, src)

    def swap(self, indexFrom, indexTo):
        r"""swap(ColorDefinitionVector self, size_t const & indexFrom, size_t const & indexTo)"""
        return _COPASI.ColorDefinitionVector_swap(self, indexFrom, indexTo)

    def add(self, pObject, adopt=True):
        
        return _COPASI.ColorDefinitionVector_add(self, pObject, adopt)

    def getObject(self, name):
        r"""getObject(ColorDefinitionVector self, CCommonName name) -> CObjectInterface"""
        return _COPASI.ColorDefinitionVector_getObject(self, name)

    def size(self):
        r"""size(ColorDefinitionVector self) -> size_t"""
        return _COPASI.ColorDefinitionVector_size(self)

    def empty(self):
        r"""empty(ColorDefinitionVector self) -> bool"""
        return _COPASI.ColorDefinitionVector_empty(self)

    def clear(self):
        r"""clear(ColorDefinitionVector self)"""
        return _COPASI.ColorDefinitionVector_clear(self)

    def getIndex(self, pObject):
        r"""getIndex(ColorDefinitionVector self, CDataObject pObject) -> size_t"""
        return _COPASI.ColorDefinitionVector_getIndex(self, pObject)

    def remove(self, index):
        r"""remove(ColorDefinitionVector self, unsigned int index)"""
        return _COPASI.ColorDefinitionVector_remove(self, index)

    def get(self, index):
        r"""get(ColorDefinitionVector self, unsigned int index) -> CDataObject"""
        return _COPASI.ColorDefinitionVector_get(self, index)

    def addAndOwn(self, DISOWN):
        r"""addAndOwn(ColorDefinitionVector self, CLColorDefinition DISOWN) -> bool"""
        return _COPASI.ColorDefinitionVector_addAndOwn(self, DISOWN)

    def removeObject(self, pObject):
        r"""removeObject(ColorDefinitionVector self, CDataObject pObject) -> bool"""
        return _COPASI.ColorDefinitionVector_removeObject(self, pObject)

    def __len__(self):
        r"""__len__(ColorDefinitionVector self) -> size_t"""
        return _COPASI.ColorDefinitionVector___len__(self)

    def __getitem__(self, index):
        r"""__getitem__(ColorDefinitionVector self, unsigned int index) -> CDataObject"""
        return _COPASI.ColorDefinitionVector___getitem__(self, index)

# Register ColorDefinitionVector in _COPASI:
_COPASI.ColorDefinitionVector_swigregister(ColorDefinitionVector)
class GlobalRenderInformationVector(CDataContainer):
    r"""Proxy of C++ CDataVector< CLGlobalRenderInformation > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _COPASI.delete_GlobalRenderInformationVector

    def cleanup(self):
        r"""cleanup(GlobalRenderInformationVector self)"""
        return _COPASI.GlobalRenderInformationVector_cleanup(self)

    def addCopy(self, src):
        r"""addCopy(GlobalRenderInformationVector self, CLGlobalRenderInformation src) -> bool"""
        return _COPASI.GlobalRenderInformationVector_addCopy(self, src)

    def swap(self, indexFrom, indexTo):
        r"""swap(GlobalRenderInformationVector self, size_t const & indexFrom, size_t const & indexTo)"""
        return _COPASI.GlobalRenderInformationVector_swap(self, indexFrom, indexTo)

    def add(self, pObject, adopt=True):
        
        return _COPASI.GlobalRenderInformationVector_add(self, pObject, adopt)

    def getObject(self, name):
        r"""getObject(GlobalRenderInformationVector self, CCommonName name) -> CObjectInterface"""
        return _COPASI.GlobalRenderInformationVector_getObject(self, name)

    def size(self):
        r"""size(GlobalRenderInformationVector self) -> size_t"""
        return _COPASI.GlobalRenderInformationVector_size(self)

    def empty(self):
        r"""empty(GlobalRenderInformationVector self) -> bool"""
        return _COPASI.GlobalRenderInformationVector_empty(self)

    def clear(self):
        r"""clear(GlobalRenderInformationVector self)"""
        return _COPASI.GlobalRenderInformationVector_clear(self)

    def getIndex(self, pObject):
        r"""getIndex(GlobalRenderInformationVector self, CDataObject pObject) -> size_t"""
        return _COPASI.GlobalRenderInformationVector_getIndex(self, pObject)

    def remove(self, index):
        r"""remove(GlobalRenderInformationVector self, unsigned int index)"""
        return _COPASI.GlobalRenderInformationVector_remove(self, index)

    def get(self, index):
        r"""get(GlobalRenderInformationVector self, unsigned int index) -> CDataObject"""
        return _COPASI.GlobalRenderInformationVector_get(self, index)

    def addAndOwn(self, DISOWN):
        r"""addAndOwn(GlobalRenderInformationVector self, CLGlobalRenderInformation DISOWN) -> bool"""
        return _COPASI.GlobalRenderInformationVector_addAndOwn(self, DISOWN)

    def removeObject(self, pObject):
        r"""removeObject(GlobalRenderInformationVector self, CDataObject pObject) -> bool"""
        return _COPASI.GlobalRenderInformationVector_removeObject(self, pObject)

    def __len__(self):
        r"""__len__(GlobalRenderInformationVector self) -> size_t"""
        return _COPASI.GlobalRenderInformationVector___len__(self)

    def __getitem__(self, index):
        r"""__getitem__(GlobalRenderInformationVector self, unsigned int index) -> CDataObject"""
        return _COPASI.GlobalRenderInformationVector___getitem__(self, index)

# Register GlobalRenderInformationVector in _COPASI:
_COPASI.GlobalRenderInformationVector_swigregister(GlobalRenderInformationVector)
class GlobalStyleVector(CDataContainer):
    r"""Proxy of C++ CDataVector< CLGlobalStyle > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _COPASI.delete_GlobalStyleVector

    def cleanup(self):
        r"""cleanup(GlobalStyleVector self)"""
        return _COPASI.GlobalStyleVector_cleanup(self)

    def addCopy(self, src):
        r"""addCopy(GlobalStyleVector self, CLGlobalStyle src) -> bool"""
        return _COPASI.GlobalStyleVector_addCopy(self, src)

    def swap(self, indexFrom, indexTo):
        r"""swap(GlobalStyleVector self, size_t const & indexFrom, size_t const & indexTo)"""
        return _COPASI.GlobalStyleVector_swap(self, indexFrom, indexTo)

    def add(self, pObject, adopt=True):
        
        return _COPASI.GlobalStyleVector_add(self, pObject, adopt)

    def getObject(self, name):
        r"""getObject(GlobalStyleVector self, CCommonName name) -> CObjectInterface"""
        return _COPASI.GlobalStyleVector_getObject(self, name)

    def size(self):
        r"""size(GlobalStyleVector self) -> size_t"""
        return _COPASI.GlobalStyleVector_size(self)

    def empty(self):
        r"""empty(GlobalStyleVector self) -> bool"""
        return _COPASI.GlobalStyleVector_empty(self)

    def clear(self):
        r"""clear(GlobalStyleVector self)"""
        return _COPASI.GlobalStyleVector_clear(self)

    def getIndex(self, pObject):
        r"""getIndex(GlobalStyleVector self, CDataObject pObject) -> size_t"""
        return _COPASI.GlobalStyleVector_getIndex(self, pObject)

    def remove(self, index):
        r"""remove(GlobalStyleVector self, unsigned int index)"""
        return _COPASI.GlobalStyleVector_remove(self, index)

    def get(self, index):
        r"""get(GlobalStyleVector self, unsigned int index) -> CDataObject"""
        return _COPASI.GlobalStyleVector_get(self, index)

    def addAndOwn(self, DISOWN):
        r"""addAndOwn(GlobalStyleVector self, CLGlobalStyle DISOWN) -> bool"""
        return _COPASI.GlobalStyleVector_addAndOwn(self, DISOWN)

    def removeObject(self, pObject):
        r"""removeObject(GlobalStyleVector self, CDataObject pObject) -> bool"""
        return _COPASI.GlobalStyleVector_removeObject(self, pObject)

    def __len__(self):
        r"""__len__(GlobalStyleVector self) -> size_t"""
        return _COPASI.GlobalStyleVector___len__(self)

    def __getitem__(self, index):
        r"""__getitem__(GlobalStyleVector self, unsigned int index) -> CDataObject"""
        return _COPASI.GlobalStyleVector___getitem__(self, index)

# Register GlobalStyleVector in _COPASI:
_COPASI.GlobalStyleVector_swigregister(GlobalStyleVector)
class LocalStyleVector(CDataContainer):
    r"""Proxy of C++ CDataVector< CLLocalStyle > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _COPASI.delete_LocalStyleVector

    def cleanup(self):
        r"""cleanup(LocalStyleVector self)"""
        return _COPASI.LocalStyleVector_cleanup(self)

    def addCopy(self, src):
        r"""addCopy(LocalStyleVector self, CLLocalStyle src) -> bool"""
        return _COPASI.LocalStyleVector_addCopy(self, src)

    def swap(self, indexFrom, indexTo):
        r"""swap(LocalStyleVector self, size_t const & indexFrom, size_t const & indexTo)"""
        return _COPASI.LocalStyleVector_swap(self, indexFrom, indexTo)

    def add(self, pObject, adopt=True):
        
        return _COPASI.LocalStyleVector_add(self, pObject, adopt)

    def getObject(self, name):
        r"""getObject(LocalStyleVector self, CCommonName name) -> CObjectInterface"""
        return _COPASI.LocalStyleVector_getObject(self, name)

    def size(self):
        r"""size(LocalStyleVector self) -> size_t"""
        return _COPASI.LocalStyleVector_size(self)

    def empty(self):
        r"""empty(LocalStyleVector self) -> bool"""
        return _COPASI.LocalStyleVector_empty(self)

    def clear(self):
        r"""clear(LocalStyleVector self)"""
        return _COPASI.LocalStyleVector_clear(self)

    def getIndex(self, pObject):
        r"""getIndex(LocalStyleVector self, CDataObject pObject) -> size_t"""
        return _COPASI.LocalStyleVector_getIndex(self, pObject)

    def remove(self, index):
        r"""remove(LocalStyleVector self, unsigned int index)"""
        return _COPASI.LocalStyleVector_remove(self, index)

    def get(self, index):
        r"""get(LocalStyleVector self, unsigned int index) -> CDataObject"""
        return _COPASI.LocalStyleVector_get(self, index)

    def addAndOwn(self, DISOWN):
        r"""addAndOwn(LocalStyleVector self, CLLocalStyle DISOWN) -> bool"""
        return _COPASI.LocalStyleVector_addAndOwn(self, DISOWN)

    def removeObject(self, pObject):
        r"""removeObject(LocalStyleVector self, CDataObject pObject) -> bool"""
        return _COPASI.LocalStyleVector_removeObject(self, pObject)

    def __len__(self):
        r"""__len__(LocalStyleVector self) -> size_t"""
        return _COPASI.LocalStyleVector___len__(self)

    def __getitem__(self, index):
        r"""__getitem__(LocalStyleVector self, unsigned int index) -> CDataObject"""
        return _COPASI.LocalStyleVector___getitem__(self, index)

# Register LocalStyleVector in _COPASI:
_COPASI.LocalStyleVector_swigregister(LocalStyleVector)
class GradientBaseVector(CDataContainer):
    r"""Proxy of C++ CDataVector< CLGradientBase > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _COPASI.delete_GradientBaseVector

    def cleanup(self):
        r"""cleanup(GradientBaseVector self)"""
        return _COPASI.GradientBaseVector_cleanup(self)

    def addCopy(self, src):
        r"""addCopy(GradientBaseVector self, CLGradientBase src) -> bool"""
        return _COPASI.GradientBaseVector_addCopy(self, src)

    def swap(self, indexFrom, indexTo):
        r"""swap(GradientBaseVector self, size_t const & indexFrom, size_t const & indexTo)"""
        return _COPASI.GradientBaseVector_swap(self, indexFrom, indexTo)

    def add(self, pObject, adopt=True):
        
        return _COPASI.GradientBaseVector_add(self, pObject, adopt)

    def getObject(self, name):
        r"""getObject(GradientBaseVector self, CCommonName name) -> CObjectInterface"""
        return _COPASI.GradientBaseVector_getObject(self, name)

    def size(self):
        r"""size(GradientBaseVector self) -> size_t"""
        return _COPASI.GradientBaseVector_size(self)

    def empty(self):
        r"""empty(GradientBaseVector self) -> bool"""
        return _COPASI.GradientBaseVector_empty(self)

    def clear(self):
        r"""clear(GradientBaseVector self)"""
        return _COPASI.GradientBaseVector_clear(self)

    def getIndex(self, pObject):
        r"""getIndex(GradientBaseVector self, CDataObject pObject) -> size_t"""
        return _COPASI.GradientBaseVector_getIndex(self, pObject)

    def remove(self, index):
        r"""remove(GradientBaseVector self, unsigned int index)"""
        return _COPASI.GradientBaseVector_remove(self, index)

    def get(self, index):
        r"""get(GradientBaseVector self, unsigned int index) -> CDataObject"""
        return _COPASI.GradientBaseVector_get(self, index)

    def addAndOwn(self, DISOWN):
        r"""addAndOwn(GradientBaseVector self, CLGradientBase DISOWN) -> bool"""
        return _COPASI.GradientBaseVector_addAndOwn(self, DISOWN)

    def removeObject(self, pObject):
        r"""removeObject(GradientBaseVector self, CDataObject pObject) -> bool"""
        return _COPASI.GradientBaseVector_removeObject(self, pObject)

    def __len__(self):
        r"""__len__(GradientBaseVector self) -> size_t"""
        return _COPASI.GradientBaseVector___len__(self)

    def __getitem__(self, index):
        r"""__getitem__(GradientBaseVector self, unsigned int index) -> CDataObject"""
        return _COPASI.GradientBaseVector___getitem__(self, index)

# Register GradientBaseVector in _COPASI:
_COPASI.GradientBaseVector_swigregister(GradientBaseVector)
class CDataObjectVector(CDataContainer):
    r"""Proxy of C++ CDataVector< CDataObject > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _COPASI.delete_CDataObjectVector

    def cleanup(self):
        r"""cleanup(CDataObjectVector self)"""
        return _COPASI.CDataObjectVector_cleanup(self)

    def addCopy(self, src):
        r"""addCopy(CDataObjectVector self, CDataObject src) -> bool"""
        return _COPASI.CDataObjectVector_addCopy(self, src)

    def swap(self, indexFrom, indexTo):
        r"""swap(CDataObjectVector self, size_t const & indexFrom, size_t const & indexTo)"""
        return _COPASI.CDataObjectVector_swap(self, indexFrom, indexTo)

    def add(self, pObject, adopt=True):
        
        return _COPASI.CDataObjectVector_add(self, pObject, adopt)

    def getObject(self, name):
        r"""getObject(CDataObjectVector self, CCommonName name) -> CObjectInterface"""
        return _COPASI.CDataObjectVector_getObject(self, name)

    def size(self):
        r"""size(CDataObjectVector self) -> size_t"""
        return _COPASI.CDataObjectVector_size(self)

    def empty(self):
        r"""empty(CDataObjectVector self) -> bool"""
        return _COPASI.CDataObjectVector_empty(self)

    def clear(self):
        r"""clear(CDataObjectVector self)"""
        return _COPASI.CDataObjectVector_clear(self)

    def getIndex(self, pObject):
        r"""getIndex(CDataObjectVector self, CDataObject pObject) -> size_t"""
        return _COPASI.CDataObjectVector_getIndex(self, pObject)

    def remove(self, index):
        r"""remove(CDataObjectVector self, unsigned int index)"""
        return _COPASI.CDataObjectVector_remove(self, index)

    def get(self, index):
        r"""get(CDataObjectVector self, unsigned int index) -> CDataObject"""
        return _COPASI.CDataObjectVector_get(self, index)

    def addAndOwn(self, DISOWN):
        r"""addAndOwn(CDataObjectVector self, CDataObject DISOWN) -> bool"""
        return _COPASI.CDataObjectVector_addAndOwn(self, DISOWN)

    def removeObject(self, pObject):
        r"""removeObject(CDataObjectVector self, CDataObject pObject) -> bool"""
        return _COPASI.CDataObjectVector_removeObject(self, pObject)

    def __len__(self):
        r"""__len__(CDataObjectVector self) -> size_t"""
        return _COPASI.CDataObjectVector___len__(self)

    def __getitem__(self, index):
        r"""__getitem__(CDataObjectVector self, unsigned int index) -> CDataObject"""
        return _COPASI.CDataObjectVector___getitem__(self, index)

# Register CDataObjectVector in _COPASI:
_COPASI.CDataObjectVector_swigregister(CDataObjectVector)
class GradientStopVector(CDataContainer):
    r"""Proxy of C++ CDataVector< CLGradientStop > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _COPASI.delete_GradientStopVector

    def cleanup(self):
        r"""cleanup(GradientStopVector self)"""
        return _COPASI.GradientStopVector_cleanup(self)

    def addCopy(self, src):
        r"""addCopy(GradientStopVector self, CLGradientStop src) -> bool"""
        return _COPASI.GradientStopVector_addCopy(self, src)

    def swap(self, indexFrom, indexTo):
        r"""swap(GradientStopVector self, size_t const & indexFrom, size_t const & indexTo)"""
        return _COPASI.GradientStopVector_swap(self, indexFrom, indexTo)

    def add(self, pObject, adopt=True):
        
        return _COPASI.GradientStopVector_add(self, pObject, adopt)

    def getObject(self, name):
        r"""getObject(GradientStopVector self, CCommonName name) -> CObjectInterface"""
        return _COPASI.GradientStopVector_getObject(self, name)

    def size(self):
        r"""size(GradientStopVector self) -> size_t"""
        return _COPASI.GradientStopVector_size(self)

    def empty(self):
        r"""empty(GradientStopVector self) -> bool"""
        return _COPASI.GradientStopVector_empty(self)

    def clear(self):
        r"""clear(GradientStopVector self)"""
        return _COPASI.GradientStopVector_clear(self)

    def getIndex(self, pObject):
        r"""getIndex(GradientStopVector self, CDataObject pObject) -> size_t"""
        return _COPASI.GradientStopVector_getIndex(self, pObject)

    def remove(self, index):
        r"""remove(GradientStopVector self, unsigned int index)"""
        return _COPASI.GradientStopVector_remove(self, index)

    def get(self, index):
        r"""get(GradientStopVector self, unsigned int index) -> CDataObject"""
        return _COPASI.GradientStopVector_get(self, index)

    def addAndOwn(self, DISOWN):
        r"""addAndOwn(GradientStopVector self, CLGradientStop DISOWN) -> bool"""
        return _COPASI.GradientStopVector_addAndOwn(self, DISOWN)

    def removeObject(self, pObject):
        r"""removeObject(GradientStopVector self, CDataObject pObject) -> bool"""
        return _COPASI.GradientStopVector_removeObject(self, pObject)

    def __len__(self):
        r"""__len__(GradientStopVector self) -> size_t"""
        return _COPASI.GradientStopVector___len__(self)

    def __getitem__(self, index):
        r"""__getitem__(GradientStopVector self, unsigned int index) -> CDataObject"""
        return _COPASI.GradientStopVector___getitem__(self, index)

# Register GradientStopVector in _COPASI:
_COPASI.GradientStopVector_swigregister(GradientStopVector)
class LineEndingVector(CDataContainer):
    r"""Proxy of C++ CDataVector< CLLineEnding > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _COPASI.delete_LineEndingVector

    def cleanup(self):
        r"""cleanup(LineEndingVector self)"""
        return _COPASI.LineEndingVector_cleanup(self)

    def addCopy(self, src):
        r"""addCopy(LineEndingVector self, CLLineEnding src) -> bool"""
        return _COPASI.LineEndingVector_addCopy(self, src)

    def swap(self, indexFrom, indexTo):
        r"""swap(LineEndingVector self, size_t const & indexFrom, size_t const & indexTo)"""
        return _COPASI.LineEndingVector_swap(self, indexFrom, indexTo)

    def add(self, pObject, adopt=True):
        
        return _COPASI.LineEndingVector_add(self, pObject, adopt)

    def getObject(self, name):
        r"""getObject(LineEndingVector self, CCommonName name) -> CObjectInterface"""
        return _COPASI.LineEndingVector_getObject(self, name)

    def size(self):
        r"""size(LineEndingVector self) -> size_t"""
        return _COPASI.LineEndingVector_size(self)

    def empty(self):
        r"""empty(LineEndingVector self) -> bool"""
        return _COPASI.LineEndingVector_empty(self)

    def clear(self):
        r"""clear(LineEndingVector self)"""
        return _COPASI.LineEndingVector_clear(self)

    def getIndex(self, pObject):
        r"""getIndex(LineEndingVector self, CDataObject pObject) -> size_t"""
        return _COPASI.LineEndingVector_getIndex(self, pObject)

    def remove(self, index):
        r"""remove(LineEndingVector self, unsigned int index)"""
        return _COPASI.LineEndingVector_remove(self, index)

    def get(self, index):
        r"""get(LineEndingVector self, unsigned int index) -> CDataObject"""
        return _COPASI.LineEndingVector_get(self, index)

    def addAndOwn(self, DISOWN):
        r"""addAndOwn(LineEndingVector self, CLLineEnding DISOWN) -> bool"""
        return _COPASI.LineEndingVector_addAndOwn(self, DISOWN)

    def removeObject(self, pObject):
        r"""removeObject(LineEndingVector self, CDataObject pObject) -> bool"""
        return _COPASI.LineEndingVector_removeObject(self, pObject)

    def __len__(self):
        r"""__len__(LineEndingVector self) -> size_t"""
        return _COPASI.LineEndingVector___len__(self)

    def __getitem__(self, index):
        r"""__getitem__(LineEndingVector self, unsigned int index) -> CDataObject"""
        return _COPASI.LineEndingVector___getitem__(self, index)

# Register LineEndingVector in _COPASI:
_COPASI.LineEndingVector_swigregister(LineEndingVector)
class RenderPointStdVector(object):
    r"""Proxy of C++ std::vector< CLRenderPoint * > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(RenderPointStdVector self) -> SwigPyIterator"""
        return _COPASI.RenderPointStdVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(RenderPointStdVector self) -> bool"""
        return _COPASI.RenderPointStdVector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(RenderPointStdVector self) -> bool"""
        return _COPASI.RenderPointStdVector___bool__(self)

    def __len__(self):
        r"""__len__(RenderPointStdVector self) -> std::vector< CLRenderPoint * >::size_type"""
        return _COPASI.RenderPointStdVector___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(RenderPointStdVector self, std::vector< CLRenderPoint * >::difference_type i, std::vector< CLRenderPoint * >::difference_type j) -> RenderPointStdVector"""
        return _COPASI.RenderPointStdVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(RenderPointStdVector self, std::vector< CLRenderPoint * >::difference_type i, std::vector< CLRenderPoint * >::difference_type j)
        __setslice__(RenderPointStdVector self, std::vector< CLRenderPoint * >::difference_type i, std::vector< CLRenderPoint * >::difference_type j, RenderPointStdVector v)
        """
        return _COPASI.RenderPointStdVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(RenderPointStdVector self, std::vector< CLRenderPoint * >::difference_type i, std::vector< CLRenderPoint * >::difference_type j)"""
        return _COPASI.RenderPointStdVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(RenderPointStdVector self, std::vector< CLRenderPoint * >::difference_type i)
        __delitem__(RenderPointStdVector self, SWIGPY_SLICEOBJECT * slice)
        """
        return _COPASI.RenderPointStdVector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(RenderPointStdVector self, SWIGPY_SLICEOBJECT * slice) -> RenderPointStdVector
        __getitem__(RenderPointStdVector self, std::vector< CLRenderPoint * >::difference_type i) -> CLRenderPoint
        """
        return _COPASI.RenderPointStdVector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(RenderPointStdVector self, SWIGPY_SLICEOBJECT * slice, RenderPointStdVector v)
        __setitem__(RenderPointStdVector self, SWIGPY_SLICEOBJECT * slice)
        __setitem__(RenderPointStdVector self, std::vector< CLRenderPoint * >::difference_type i, CLRenderPoint x)
        """
        return _COPASI.RenderPointStdVector___setitem__(self, *args)

    def pop(self):
        r"""pop(RenderPointStdVector self) -> CLRenderPoint"""
        return _COPASI.RenderPointStdVector_pop(self)

    def append(self, x):
        r"""append(RenderPointStdVector self, CLRenderPoint x)"""
        return _COPASI.RenderPointStdVector_append(self, x)

    def empty(self):
        r"""empty(RenderPointStdVector self) -> bool"""
        return _COPASI.RenderPointStdVector_empty(self)

    def size(self):
        r"""size(RenderPointStdVector self) -> std::vector< CLRenderPoint * >::size_type"""
        return _COPASI.RenderPointStdVector_size(self)

    def swap(self, v):
        r"""swap(RenderPointStdVector self, RenderPointStdVector v)"""
        return _COPASI.RenderPointStdVector_swap(self, v)

    def rbegin(self):
        r"""rbegin(RenderPointStdVector self) -> std::vector< CLRenderPoint * >::reverse_iterator"""
        return _COPASI.RenderPointStdVector_rbegin(self)

    def rend(self):
        r"""rend(RenderPointStdVector self) -> std::vector< CLRenderPoint * >::reverse_iterator"""
        return _COPASI.RenderPointStdVector_rend(self)

    def clear(self):
        r"""clear(RenderPointStdVector self)"""
        return _COPASI.RenderPointStdVector_clear(self)

    def get_allocator(self):
        r"""get_allocator(RenderPointStdVector self) -> std::vector< CLRenderPoint * >::allocator_type"""
        return _COPASI.RenderPointStdVector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(RenderPointStdVector self)"""
        return _COPASI.RenderPointStdVector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(RenderPointStdVector self, std::vector< CLRenderPoint * >::iterator pos) -> std::vector< CLRenderPoint * >::iterator
        erase(RenderPointStdVector self, std::vector< CLRenderPoint * >::iterator first, std::vector< CLRenderPoint * >::iterator last) -> std::vector< CLRenderPoint * >::iterator
        """
        return _COPASI.RenderPointStdVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(RenderPointStdVector self) -> RenderPointStdVector
        __init__(RenderPointStdVector self, RenderPointStdVector other) -> RenderPointStdVector
        __init__(RenderPointStdVector self, std::vector< CLRenderPoint * >::size_type size) -> RenderPointStdVector
        __init__(RenderPointStdVector self, std::vector< CLRenderPoint * >::size_type size, CLRenderPoint value) -> RenderPointStdVector
        """
        _COPASI.RenderPointStdVector_swiginit(self, _COPASI.new_RenderPointStdVector(*args))

    def push_back(self, x):
        r"""push_back(RenderPointStdVector self, CLRenderPoint x)"""
        return _COPASI.RenderPointStdVector_push_back(self, x)

    def front(self):
        r"""front(RenderPointStdVector self) -> CLRenderPoint"""
        return _COPASI.RenderPointStdVector_front(self)

    def back(self):
        r"""back(RenderPointStdVector self) -> CLRenderPoint"""
        return _COPASI.RenderPointStdVector_back(self)

    def assign(self, n, x):
        r"""assign(RenderPointStdVector self, std::vector< CLRenderPoint * >::size_type n, CLRenderPoint x)"""
        return _COPASI.RenderPointStdVector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(RenderPointStdVector self, std::vector< CLRenderPoint * >::size_type new_size)
        resize(RenderPointStdVector self, std::vector< CLRenderPoint * >::size_type new_size, CLRenderPoint x)
        """
        return _COPASI.RenderPointStdVector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(RenderPointStdVector self, std::vector< CLRenderPoint * >::iterator pos, CLRenderPoint x) -> std::vector< CLRenderPoint * >::iterator
        insert(RenderPointStdVector self, std::vector< CLRenderPoint * >::iterator pos, std::vector< CLRenderPoint * >::size_type n, CLRenderPoint x)
        """
        return _COPASI.RenderPointStdVector_insert(self, *args)

    def reserve(self, n):
        r"""reserve(RenderPointStdVector self, std::vector< CLRenderPoint * >::size_type n)"""
        return _COPASI.RenderPointStdVector_reserve(self, n)

    def capacity(self):
        r"""capacity(RenderPointStdVector self) -> std::vector< CLRenderPoint * >::size_type"""
        return _COPASI.RenderPointStdVector_capacity(self)
    __swig_destroy__ = _COPASI.delete_RenderPointStdVector

# Register RenderPointStdVector in _COPASI:
_COPASI.RenderPointStdVector_swigregister(RenderPointStdVector)
class CFluxMode(object):
    r"""Proxy of C++ CFluxMode class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CFluxMode self) -> CFluxMode
        __init__(CFluxMode self, CFluxMode src) -> CFluxMode
        """
        _COPASI.CFluxMode_swiginit(self, _COPASI.new_CFluxMode(*args))
    __swig_destroy__ = _COPASI.delete_CFluxMode

    def isReversible(self):
        r"""isReversible(CFluxMode self) -> bool"""
        return _COPASI.CFluxMode_isReversible(self)

    def size(self):
        r"""size(CFluxMode self) -> size_t"""
        return _COPASI.CFluxMode_size(self)

    def isReversed(self, mode):
        r"""isReversed(CFluxMode self, CFluxMode mode) -> bool"""
        return _COPASI.CFluxMode_isReversed(self, mode)

    def getMultiplier(self, index):
        r"""getMultiplier(CFluxMode self, size_t const & index) -> double"""
        return _COPASI.CFluxMode_getMultiplier(self, index)

# Register CFluxMode in _COPASI:
_COPASI.CFluxMode_swigregister(CFluxMode)
class CEFMTask(CCopasiTask):
    r"""Proxy of C++ CEFMTask class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CEFMTask self, CDataContainer pParent, CTaskEnum::Task const & type=fluxMode) -> CEFMTask
        __init__(CEFMTask self, CEFMTask src, CDataContainer pParent) -> CEFMTask
        """
        _COPASI.CEFMTask_swiginit(self, _COPASI.new_CEFMTask(*args))
    __swig_destroy__ = _COPASI.delete_CEFMTask

    def setCallBack(self, callBack):
        r"""setCallBack(CEFMTask self, CProcessReportLevel callBack) -> bool"""
        return _COPASI.CEFMTask_setCallBack(self, callBack)

    def getFluxModes(self):
        r"""getFluxModes(CEFMTask self) -> CFluxModeStdVector"""
        return _COPASI.CEFMTask_getFluxModes(self)

    def getFluxModeDescription(self, fluxMode):
        r"""getFluxModeDescription(CEFMTask self, CFluxMode fluxMode) -> std::string"""
        return _COPASI.CEFMTask_getFluxModeDescription(self, fluxMode)

    def getNetReaction(self, fluxMode):
        r"""getNetReaction(CEFMTask self, CFluxMode fluxMode) -> std::string"""
        return _COPASI.CEFMTask_getNetReaction(self, fluxMode)

    def getInternalSpecies(self, fluxMode):
        r"""getInternalSpecies(CEFMTask self, CFluxMode fluxMode) -> std::string"""
        return _COPASI.CEFMTask_getInternalSpecies(self, fluxMode)

# Register CEFMTask in _COPASI:
_COPASI.CEFMTask_swigregister(CEFMTask)
class CEFMMethod(CCopasiMethod):
    r"""Proxy of C++ CEFMMethod class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CEFMMethod self, CDataContainer pParent, CTaskEnum::Method const & methodType, CTaskEnum::Task const & taskType=fluxMode) -> CEFMMethod
        __init__(CEFMMethod self, CEFMMethod src, CDataContainer pParent) -> CEFMMethod
        """
        _COPASI.CEFMMethod_swiginit(self, _COPASI.new_CEFMMethod(*args))
    __swig_destroy__ = _COPASI.delete_CEFMMethod

    def calculate(self):
        r"""calculate(CEFMMethod self) -> bool"""
        return _COPASI.CEFMMethod_calculate(self)

    def initialize(self):
        r"""initialize(CEFMMethod self) -> bool"""
        return _COPASI.CEFMMethod_initialize(self)

    def isValidProblem(self, pProblem):
        r"""isValidProblem(CEFMMethod self, CCopasiProblem pProblem) -> bool"""
        return _COPASI.CEFMMethod_isValidProblem(self, pProblem)

# Register CEFMMethod in _COPASI:
_COPASI.CEFMMethod_swigregister(CEFMMethod)
class CEFMProblem(CCopasiProblem):
    r"""Proxy of C++ CEFMProblem class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CEFMProblem self, CDataContainer pParent=static_cast< CDataContainer * >((void *) 0)) -> CEFMProblem
        __init__(CEFMProblem self, CEFMProblem src, CDataContainer pParent) -> CEFMProblem
        """
        _COPASI.CEFMProblem_swiginit(self, _COPASI.new_CEFMProblem(*args))
    __swig_destroy__ = _COPASI.delete_CEFMProblem

    def elevateChildren(self):
        r"""elevateChildren(CEFMProblem self) -> bool"""
        return _COPASI.CEFMProblem_elevateChildren(self)

    def setCallBack(self, callBack):
        r"""setCallBack(CEFMProblem self, CProcessReportLevel callBack) -> bool"""
        return _COPASI.CEFMProblem_setCallBack(self, callBack)

    def getFluxModes(self):
        r"""getFluxModes(CEFMProblem self) -> CFluxModeStdVector"""
        return _COPASI.CEFMProblem_getFluxModes(self)

# Register CEFMProblem in _COPASI:
_COPASI.CEFMProblem_swigregister(CEFMProblem)
class CCrossSectionTask(CTrajectoryTask):
    r"""Proxy of C++ CCrossSectionTask class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CCrossSectionTask self, CDataContainer pParent, CTaskEnum::Task const & type=crosssection) -> CCrossSectionTask
        __init__(CCrossSectionTask self, CCrossSectionTask src, CDataContainer pParent) -> CCrossSectionTask
        """
        _COPASI.CCrossSectionTask_swiginit(self, _COPASI.new_CCrossSectionTask(*args))
    __swig_destroy__ = _COPASI.delete_CCrossSectionTask

    def createEvent(self):
        r"""createEvent(CCrossSectionTask self)"""
        return _COPASI.CCrossSectionTask_createEvent(self)

    def removeEvent(self):
        r"""removeEvent(CCrossSectionTask self)"""
        return _COPASI.CCrossSectionTask_removeEvent(self)

    def restore(self, updateModel=True):
        r"""restore(CCrossSectionTask self, bool const & updateModel=True) -> bool"""
        return _COPASI.CCrossSectionTask_restore(self, updateModel)

# Register CCrossSectionTask in _COPASI:
_COPASI.CCrossSectionTask_swigregister(CCrossSectionTask)
class CCrossSectionMethod(CCopasiMethod):
    r"""Proxy of C++ CCrossSectionMethod class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CCrossSectionMethod self, CDataContainer pParent, CTaskEnum::Method const & methodType, CTaskEnum::Task const & taskType=crosssection) -> CCrossSectionMethod
        __init__(CCrossSectionMethod self, CCrossSectionMethod src, CDataContainer pParent) -> CCrossSectionMethod
        """
        _COPASI.CCrossSectionMethod_swiginit(self, _COPASI.new_CCrossSectionMethod(*args))
    __swig_destroy__ = _COPASI.delete_CCrossSectionMethod

    def process(self):
        r"""process(CCrossSectionMethod self) -> bool"""
        return _COPASI.CCrossSectionMethod_process(self)

    def initialize(self, problem):
        r"""initialize(CCrossSectionMethod self, CCrossSectionProblem problem) -> bool"""
        return _COPASI.CCrossSectionMethod_initialize(self, problem)

    def isValidProblem(self, pProblem):
        r"""isValidProblem(CCrossSectionMethod self, CCopasiProblem pProblem) -> bool"""
        return _COPASI.CCrossSectionMethod_isValidProblem(self, pProblem)

# Register CCrossSectionMethod in _COPASI:
_COPASI.CCrossSectionMethod_swigregister(CCrossSectionMethod)
class CCrossSectionProblem(CTrajectoryProblem):
    r"""Proxy of C++ CCrossSectionProblem class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CCrossSectionProblem self, CDataContainer pParent=static_cast< CDataContainer * >((void *) 0)) -> CCrossSectionProblem
        __init__(CCrossSectionProblem self, CCrossSectionProblem src, CDataContainer pParent) -> CCrossSectionProblem
        """
        _COPASI.CCrossSectionProblem_swiginit(self, _COPASI.new_CCrossSectionProblem(*args))
    __swig_destroy__ = _COPASI.delete_CCrossSectionProblem

    def getFlagLimitCrossings(self):
        r"""getFlagLimitCrossings(CCrossSectionProblem self) -> bool"""
        return _COPASI.CCrossSectionProblem_getFlagLimitCrossings(self)

    def getCrossingsLimit(self):
        r"""getCrossingsLimit(CCrossSectionProblem self) -> unsigned int const &"""
        return _COPASI.CCrossSectionProblem_getCrossingsLimit(self)

    def getFlagLimitOutCrossings(self):
        r"""getFlagLimitOutCrossings(CCrossSectionProblem self) -> bool"""
        return _COPASI.CCrossSectionProblem_getFlagLimitOutCrossings(self)

    def getOutCrossingsLimit(self):
        r"""getOutCrossingsLimit(CCrossSectionProblem self) -> unsigned int const &"""
        return _COPASI.CCrossSectionProblem_getOutCrossingsLimit(self)

    def getFlagLimitOutTime(self):
        r"""getFlagLimitOutTime(CCrossSectionProblem self) -> bool"""
        return _COPASI.CCrossSectionProblem_getFlagLimitOutTime(self)

    def getTimeLimit(self):
        r"""getTimeLimit(CCrossSectionProblem self) -> double const &"""
        return _COPASI.CCrossSectionProblem_getTimeLimit(self)

    def getSingleObjectCN(self):
        r"""getSingleObjectCN(CCrossSectionProblem self) -> std::string const &"""
        return _COPASI.CCrossSectionProblem_getSingleObjectCN(self)

    def setSingleObjectCN(self, *args):
        r"""
        setSingleObjectCN(CCrossSectionProblem self, std::string const & cn)
        setSingleObjectCN(CCrossSectionProblem self, CDataObject pObject)
        """
        return _COPASI.CCrossSectionProblem_setSingleObjectCN(self, *args)

    def getThreshold(self):
        r"""getThreshold(CCrossSectionProblem self) -> double const &"""
        return _COPASI.CCrossSectionProblem_getThreshold(self)

    def setThreshold(self, threshold):
        r"""setThreshold(CCrossSectionProblem self, double const & threshold)"""
        return _COPASI.CCrossSectionProblem_setThreshold(self, threshold)

    def getFlagLimitConvergence(self):
        r"""getFlagLimitConvergence(CCrossSectionProblem self) -> bool"""
        return _COPASI.CCrossSectionProblem_getFlagLimitConvergence(self)

    def getConvergenceTolerance(self):
        r"""getConvergenceTolerance(CCrossSectionProblem self) -> double const &"""
        return _COPASI.CCrossSectionProblem_getConvergenceTolerance(self)

    def setFlagLimitConvergence(self, flagLimitConvergence):
        r"""setFlagLimitConvergence(CCrossSectionProblem self, bool flagLimitConvergence)"""
        return _COPASI.CCrossSectionProblem_setFlagLimitConvergence(self, flagLimitConvergence)

    def setConvergenceTolerance(self, convergenceTolerance):
        r"""setConvergenceTolerance(CCrossSectionProblem self, double const & convergenceTolerance)"""
        return _COPASI.CCrossSectionProblem_setConvergenceTolerance(self, convergenceTolerance)

    def getFlagLimitOutConvergence(self):
        r"""getFlagLimitOutConvergence(CCrossSectionProblem self) -> bool"""
        return _COPASI.CCrossSectionProblem_getFlagLimitOutConvergence(self)

    def getConvergenceOutTolerance(self):
        r"""getConvergenceOutTolerance(CCrossSectionProblem self) -> double const &"""
        return _COPASI.CCrossSectionProblem_getConvergenceOutTolerance(self)

    def setFlagLimitOutConvergence(self, flagLimitConvergence):
        r"""setFlagLimitOutConvergence(CCrossSectionProblem self, bool flagLimitConvergence)"""
        return _COPASI.CCrossSectionProblem_setFlagLimitOutConvergence(self, flagLimitConvergence)

    def setConvergenceOutTolerance(self, convergenceTolerance):
        r"""setConvergenceOutTolerance(CCrossSectionProblem self, double const & convergenceTolerance)"""
        return _COPASI.CCrossSectionProblem_setConvergenceOutTolerance(self, convergenceTolerance)

    def isPositiveDirection(self):
        r"""isPositiveDirection(CCrossSectionProblem self) -> bool"""
        return _COPASI.CCrossSectionProblem_isPositiveDirection(self)

    def setPositiveDirection(self, isPositive):
        r"""setPositiveDirection(CCrossSectionProblem self, bool isPositive)"""
        return _COPASI.CCrossSectionProblem_setPositiveDirection(self, isPositive)

    def setFlagLimitCrossings(self, flagLimitCrossing):
        r"""setFlagLimitCrossings(CCrossSectionProblem self, bool flagLimitCrossing)"""
        return _COPASI.CCrossSectionProblem_setFlagLimitCrossings(self, flagLimitCrossing)

    def setCrossingsLimit(self, crossingLimit):
        r"""setCrossingsLimit(CCrossSectionProblem self, unsigned int const & crossingLimit)"""
        return _COPASI.CCrossSectionProblem_setCrossingsLimit(self, crossingLimit)

    def setFlagLimitOutCrossings(self, flagLimitCrossing):
        r"""setFlagLimitOutCrossings(CCrossSectionProblem self, bool flagLimitCrossing)"""
        return _COPASI.CCrossSectionProblem_setFlagLimitOutCrossings(self, flagLimitCrossing)

    def setOutCrossingsLimit(self, crossingLimit):
        r"""setOutCrossingsLimit(CCrossSectionProblem self, unsigned int const & crossingLimit)"""
        return _COPASI.CCrossSectionProblem_setOutCrossingsLimit(self, crossingLimit)

    def setFlagLimitOutTime(self, flagLimitTime):
        r"""setFlagLimitOutTime(CCrossSectionProblem self, bool flagLimitTime)"""
        return _COPASI.CCrossSectionProblem_setFlagLimitOutTime(self, flagLimitTime)

    def setTimeLimit(self, timeLimit):
        r"""setTimeLimit(CCrossSectionProblem self, double const & timeLimit)"""
        return _COPASI.CCrossSectionProblem_setTimeLimit(self, timeLimit)

# Register CCrossSectionProblem in _COPASI:
_COPASI.CCrossSectionProblem_swigregister(CCrossSectionProblem)
class CMoietiesTask(CCopasiTask):
    r"""Proxy of C++ CMoietiesTask class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CMoietiesTask self, CDataContainer pParent, CTaskEnum::Task const & type=moieties) -> CMoietiesTask
        __init__(CMoietiesTask self, CMoietiesTask src, CDataContainer pParent) -> CMoietiesTask
        """
        _COPASI.CMoietiesTask_swiginit(self, _COPASI.new_CMoietiesTask(*args))
    __swig_destroy__ = _COPASI.delete_CMoietiesTask

    def setCallBack(self, callBack):
        r"""setCallBack(CMoietiesTask self, CProcessReportLevel callBack) -> bool"""
        return _COPASI.CMoietiesTask_setCallBack(self, callBack)

# Register CMoietiesTask in _COPASI:
_COPASI.CMoietiesTask_swigregister(CMoietiesTask)
class CMoietiesProblem(CCopasiProblem):
    r"""Proxy of C++ CMoietiesProblem class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CMoietiesProblem self, CTaskEnum::Task const & type=moieties, CDataContainer pParent=static_cast< CDataContainer * >((void *) 0)) -> CMoietiesProblem
        __init__(CMoietiesProblem self, CMoietiesProblem src, CDataContainer pParent) -> CMoietiesProblem
        """
        _COPASI.CMoietiesProblem_swiginit(self, _COPASI.new_CMoietiesProblem(*args))
    __swig_destroy__ = _COPASI.delete_CMoietiesProblem

# Register CMoietiesProblem in _COPASI:
_COPASI.CMoietiesProblem_swigregister(CMoietiesProblem)
class CMoietiesMethod(CCopasiMethod):
    r"""Proxy of C++ CMoietiesMethod class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CMoietiesMethod self, CDataContainer pParent, CTaskEnum::Method const & methodType=Householder, CTaskEnum::Task const & taskType=moieties) -> CMoietiesMethod
        __init__(CMoietiesMethod self, CMoietiesMethod src, CDataContainer pParent) -> CMoietiesMethod
        """
        _COPASI.CMoietiesMethod_swiginit(self, _COPASI.new_CMoietiesMethod(*args))
    __swig_destroy__ = _COPASI.delete_CMoietiesMethod

    def process(self):
        r"""process(CMoietiesMethod self) -> bool"""
        return _COPASI.CMoietiesMethod_process(self)

    def setProblem(self, pProblem):
        r"""setProblem(CMoietiesMethod self, CMoietiesProblem pProblem)"""
        return _COPASI.CMoietiesMethod_setProblem(self, pProblem)

# Register CMoietiesMethod in _COPASI:
_COPASI.CMoietiesMethod_swigregister(CMoietiesMethod)
class CLNATask(CCopasiTask):
    r"""Proxy of C++ CLNATask class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CLNATask self, CDataContainer pParent, CTaskEnum::Task const & type=lna) -> CLNATask
        __init__(CLNATask self, CLNATask src, CDataContainer pParent) -> CLNATask
        """
        _COPASI.CLNATask_swiginit(self, _COPASI.new_CLNATask(*args))
    __swig_destroy__ = _COPASI.delete_CLNATask

    def updateMatrices(self):
        r"""updateMatrices(CLNATask self) -> bool"""
        return _COPASI.CLNATask_updateMatrices(self)

    def setCallBack(self, callBack):
        r"""setCallBack(CLNATask self, CProcessReportLevel callBack) -> bool"""
        return _COPASI.CLNATask_setCallBack(self, callBack)

# Register CLNATask in _COPASI:
_COPASI.CLNATask_swigregister(CLNATask)
class CLNAProblem(CCopasiProblem):
    r"""Proxy of C++ CLNAProblem class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CLNAProblem self, CDataContainer pParent=static_cast< CDataContainer * >((void *) 0)) -> CLNAProblem
        __init__(CLNAProblem self, CLNAProblem src, CDataContainer pParent) -> CLNAProblem
        """
        _COPASI.CLNAProblem_swiginit(self, _COPASI.new_CLNAProblem(*args))
    __swig_destroy__ = _COPASI.delete_CLNAProblem

    def setSteadyStateRequested(self, steadyStateRequested):
        r"""setSteadyStateRequested(CLNAProblem self, bool const & steadyStateRequested)"""
        return _COPASI.CLNAProblem_setSteadyStateRequested(self, steadyStateRequested)

    def isSteadyStateRequested(self):
        r"""isSteadyStateRequested(CLNAProblem self) -> bool"""
        return _COPASI.CLNAProblem_isSteadyStateRequested(self)

    def getSubTask(self):
        r"""getSubTask(CLNAProblem self) -> CCopasiTask"""
        return _COPASI.CLNAProblem_getSubTask(self)

# Register CLNAProblem in _COPASI:
_COPASI.CLNAProblem_swigregister(CLNAProblem)
LNA_OK = _COPASI.LNA_OK

LNA_NOT_OK = _COPASI.LNA_NOT_OK

class CLNAMethod(CCopasiMethod):
    r"""Proxy of C++ CLNAMethod class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    allNeg = _COPASI.CLNAMethod_allNeg
    
    nonNegEigenvaluesExist = _COPASI.CLNAMethod_nonNegEigenvaluesExist
    

    def __init__(self, *args):
        r"""
        __init__(CLNAMethod self, CDataContainer pParent, CTaskEnum::Method const & methodType=linearNoiseApproximation, CTaskEnum::Task const & taskType=lna) -> CLNAMethod
        __init__(CLNAMethod self, CLNAMethod src, CDataContainer pParent) -> CLNAMethod
        """
        _COPASI.CLNAMethod_swiginit(self, _COPASI.new_CLNAMethod(*args))
    __swig_destroy__ = _COPASI.delete_CLNAMethod

    def elevateChildren(self):
        r"""elevateChildren(CLNAMethod self) -> bool"""
        return _COPASI.CLNAMethod_elevateChildren(self)

    def getBMatrixReduced(self):
        r"""getBMatrixReduced(CLNAMethod self) -> FloatMatrix"""
        return _COPASI.CLNAMethod_getBMatrixReduced(self)

    def getBMatrixReducedAnn(self):
        r"""getBMatrixReducedAnn(CLNAMethod self) -> CDataArray"""
        return _COPASI.CLNAMethod_getBMatrixReducedAnn(self)

    def getCovarianceMatrix(self):
        r"""getCovarianceMatrix(CLNAMethod self) -> FloatMatrix"""
        return _COPASI.CLNAMethod_getCovarianceMatrix(self)

    def getCovarianceMatrixAnn(self):
        r"""getCovarianceMatrixAnn(CLNAMethod self) -> CDataArray"""
        return _COPASI.CLNAMethod_getCovarianceMatrixAnn(self)

    def getCovarianceMatrixReduced(self):
        r"""getCovarianceMatrixReduced(CLNAMethod self) -> FloatMatrix"""
        return _COPASI.CLNAMethod_getCovarianceMatrixReduced(self)

    def getCovarianceMatrixReducedAnn(self):
        r"""getCovarianceMatrixReducedAnn(CLNAMethod self) -> CDataArray"""
        return _COPASI.CLNAMethod_getCovarianceMatrixReducedAnn(self)

    def getScaledBMatrixReducedAnn(self):
        r"""getScaledBMatrixReducedAnn(CLNAMethod self) -> CDataArray"""
        return _COPASI.CLNAMethod_getScaledBMatrixReducedAnn(self)

    def getUnscaledBMatrixReducedAnn(self):
        r"""getUnscaledBMatrixReducedAnn(CLNAMethod self) -> CDataArray"""
        return _COPASI.CLNAMethod_getUnscaledBMatrixReducedAnn(self)

    def getScaledCovarianceMatrixAnn(self):
        r"""getScaledCovarianceMatrixAnn(CLNAMethod self) -> CDataArray"""
        return _COPASI.CLNAMethod_getScaledCovarianceMatrixAnn(self)

    def getScaledCovarianceMatrixReducedAnn(self):
        r"""getScaledCovarianceMatrixReducedAnn(CLNAMethod self) -> CDataArray"""
        return _COPASI.CLNAMethod_getScaledCovarianceMatrixReducedAnn(self)

    def getUnscaledCovarianceMatrixAnn(self):
        r"""getUnscaledCovarianceMatrixAnn(CLNAMethod self) -> CDataArray"""
        return _COPASI.CLNAMethod_getUnscaledCovarianceMatrixAnn(self)

    def getUnscaledCovarianceMatrixReducedAnn(self):
        r"""getUnscaledCovarianceMatrixReducedAnn(CLNAMethod self) -> CDataArray"""
        return _COPASI.CLNAMethod_getUnscaledCovarianceMatrixReducedAnn(self)

    def calculateCovarianceMatrixReduced(self):
        r"""calculateCovarianceMatrixReduced(CLNAMethod self) -> int"""
        return _COPASI.CLNAMethod_calculateCovarianceMatrixReduced(self)

    def calculateCovarianceMatrixFull(self):
        r"""calculateCovarianceMatrixFull(CLNAMethod self)"""
        return _COPASI.CLNAMethod_calculateCovarianceMatrixFull(self)

    def resizeAllMatrices(self):
        r"""resizeAllMatrices(CLNAMethod self)"""
        return _COPASI.CLNAMethod_resizeAllMatrices(self)

    def CalculateLNA(self):
        r"""CalculateLNA(CLNAMethod self) -> int"""
        return _COPASI.CLNAMethod_CalculateLNA(self)

    def process(self):
        r"""process(CLNAMethod self) -> bool"""
        return _COPASI.CLNAMethod_process(self)

    def setSteadyStateStatus(self, SSStatus):
        r"""setSteadyStateStatus(CLNAMethod self, CSteadyStateMethod::ReturnCode SSStatus)"""
        return _COPASI.CLNAMethod_setSteadyStateStatus(self, SSStatus)

    def setEigenValueStatus(self, status):
        r"""setEigenValueStatus(CLNAMethod self, CLNAMethod::EVStatus status)"""
        return _COPASI.CLNAMethod_setEigenValueStatus(self, status)

    def getSteadyStateStatus(self):
        r"""getSteadyStateStatus(CLNAMethod self) -> CSteadyStateMethod::ReturnCode const &"""
        return _COPASI.CLNAMethod_getSteadyStateStatus(self)

    def getEigenValueStatus(self):
        r"""getEigenValueStatus(CLNAMethod self) -> CLNAMethod::EVStatus const &"""
        return _COPASI.CLNAMethod_getEigenValueStatus(self)

    def setSteadyStateResolution(self, factor):
        r"""setSteadyStateResolution(CLNAMethod self, double factor)"""
        return _COPASI.CLNAMethod_setSteadyStateResolution(self, factor)

    def isValidProblem(self, pProblem):
        r"""isValidProblem(CLNAMethod self, CCopasiProblem pProblem) -> bool"""
        return _COPASI.CLNAMethod_isValidProblem(self, pProblem)

# Register CLNAMethod in _COPASI:
_COPASI.CLNAMethod_swigregister(CLNAMethod)
class CTSSATask(CCopasiTask):
    r"""Proxy of C++ CTSSATask class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CTSSATask self, CDataContainer pParent, CTaskEnum::Task const & type=tssAnalysis) -> CTSSATask
        __init__(CTSSATask self, CTSSATask src, CDataContainer pParent) -> CTSSATask
        """
        _COPASI.CTSSATask_swiginit(self, _COPASI.new_CTSSATask(*args))
    __swig_destroy__ = _COPASI.delete_CTSSATask

    def updateMatrices(self):
        r"""updateMatrices(CTSSATask self) -> bool"""
        return _COPASI.CTSSATask_updateMatrices(self)

    def processStart(self, useInitialValues):
        r"""processStart(CTSSATask self, bool const & useInitialValues) -> bool"""
        return _COPASI.CTSSATask_processStart(self, useInitialValues)

    def processStep(self, nextTime):
        r"""processStep(CTSSATask self, double const & nextTime) -> bool"""
        return _COPASI.CTSSATask_processStep(self, nextTime)

    def getTimeSeries(self):
        r"""getTimeSeries(CTSSATask self) -> CTimeSeries"""
        return _COPASI.CTSSATask_getTimeSeries(self)

# Register CTSSATask in _COPASI:
_COPASI.CTSSATask_swigregister(CTSSATask)
class CTSSAProblem(CCopasiProblem):
    r"""Proxy of C++ CTSSAProblem class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CTSSAProblem self, CDataContainer pParent=static_cast< CDataContainer * >((void *) 0)) -> CTSSAProblem
        __init__(CTSSAProblem self, CTSSAProblem src, CDataContainer pParent) -> CTSSAProblem
        """
        _COPASI.CTSSAProblem_swiginit(self, _COPASI.new_CTSSAProblem(*args))
    __swig_destroy__ = _COPASI.delete_CTSSAProblem

    def elevateChildren(self):
        r"""elevateChildren(CTSSAProblem self) -> bool"""
        return _COPASI.CTSSAProblem_elevateChildren(self)

    def setStepNumber(self, stepNumber):
        r"""setStepNumber(CTSSAProblem self, unsigned int const & stepNumber)"""
        return _COPASI.CTSSAProblem_setStepNumber(self, stepNumber)

    def getStepNumber(self):
        r"""getStepNumber(CTSSAProblem self) -> unsigned int const &"""
        return _COPASI.CTSSAProblem_getStepNumber(self)

    def setStepSize(self, stepSize):
        r"""setStepSize(CTSSAProblem self, double const & stepSize)"""
        return _COPASI.CTSSAProblem_setStepSize(self, stepSize)

    def getStepSize(self):
        r"""getStepSize(CTSSAProblem self) -> double const &"""
        return _COPASI.CTSSAProblem_getStepSize(self)

    def setDuration(self, duration):
        r"""setDuration(CTSSAProblem self, double const & duration)"""
        return _COPASI.CTSSAProblem_setDuration(self, duration)

    def getDuration(self):
        r"""getDuration(CTSSAProblem self) -> double const &"""
        return _COPASI.CTSSAProblem_getDuration(self)

    def setOutputStartTime(self, endTime):
        r"""setOutputStartTime(CTSSAProblem self, double const & endTime)"""
        return _COPASI.CTSSAProblem_setOutputStartTime(self, endTime)

    def getOutputStartTime(self):
        r"""getOutputStartTime(CTSSAProblem self) -> double const &"""
        return _COPASI.CTSSAProblem_getOutputStartTime(self)

    def setTimeSeriesRequested(self, flag):
        r"""setTimeSeriesRequested(CTSSAProblem self, bool flag)"""
        return _COPASI.CTSSAProblem_setTimeSeriesRequested(self, flag)

    def timeSeriesRequested(self):
        r"""timeSeriesRequested(CTSSAProblem self) -> bool"""
        return _COPASI.CTSSAProblem_timeSeriesRequested(self)

# Register CTSSAProblem in _COPASI:
_COPASI.CTSSAProblem_swigregister(CTSSAProblem)
class CTSSAMethod(CCopasiMethod):
    r"""Proxy of C++ CTSSAMethod class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _COPASI.delete_CTSSAMethod

    def getTableNames(self):
        r"""getTableNames(CTSSAMethod self) -> StringStdVector"""
        return _COPASI.CTSSAMethod_getTableNames(self)

    def getTable(self, name):
        r"""getTable(CTSSAMethod self, std::string const & name) -> CDataArray"""
        return _COPASI.CTSSAMethod_getTable(self, name)

    def setAnnotationM(self, s):
        r"""setAnnotationM(CTSSAMethod self, size_t s) -> bool"""
        return _COPASI.CTSSAMethod_setAnnotationM(self, s)

    def initializeOutput(self):
        r"""initializeOutput(CTSSAMethod self)"""
        return _COPASI.CTSSAMethod_initializeOutput(self)

    def setProblem(self, problem):
        r"""setProblem(CTSSAMethod self, CTSSAProblem problem)"""
        return _COPASI.CTSSAMethod_setProblem(self, problem)

    def step(self, deltaT):
        r"""step(CTSSAMethod self, double const & deltaT)"""
        return _COPASI.CTSSAMethod_step(self, deltaT)

    def start(self):
        r"""start(CTSSAMethod self)"""
        return _COPASI.CTSSAMethod_start(self)

    def isValidProblem(self, pProblem):
        r"""isValidProblem(CTSSAMethod self, CCopasiProblem pProblem) -> bool"""
        return _COPASI.CTSSAMethod_isValidProblem(self, pProblem)

    def initializeParameter(self):
        r"""initializeParameter(CTSSAMethod self)"""
        return _COPASI.CTSSAMethod_initializeParameter(self)

    def getCurrentStep(self):
        r"""getCurrentStep(CTSSAMethod self) -> int const &"""
        return _COPASI.CTSSAMethod_getCurrentStep(self)

    def getVec_TimeScale(self, step):
        r"""getVec_TimeScale(CTSSAMethod self, int step) -> FloatVector"""
        return _COPASI.CTSSAMethod_getVec_TimeScale(self, step)

    def getTimeForStep(self, step):
        r"""getTimeForStep(CTSSAMethod self, int step) -> double"""
        return _COPASI.CTSSAMethod_getTimeForStep(self, step)

    def setVectors(self, slowMode):
        r"""setVectors(CTSSAMethod self, int slowMode)"""
        return _COPASI.CTSSAMethod_setVectors(self, slowMode)

    def emptyVectors(self):
        r"""emptyVectors(CTSSAMethod self)"""
        return _COPASI.CTSSAMethod_emptyVectors(self)

    def createAnnotationsM(self):
        r"""createAnnotationsM(CTSSAMethod self)"""
        return _COPASI.CTSSAMethod_createAnnotationsM(self)

# Register CTSSAMethod in _COPASI:
_COPASI.CTSSAMethod_swigregister(CTSSAMethod)
class COptMethodCoranaWalk(COptMethod):
    r"""Proxy of C++ COptMethodCoranaWalk class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(COptMethodCoranaWalk self, CDataContainer pParent, CTaskEnum::Method const & methodType=CoranaWalk, CTaskEnum::Task const & taskType=optimization) -> COptMethodCoranaWalk
        __init__(COptMethodCoranaWalk self, COptMethodCoranaWalk src, CDataContainer pParent) -> COptMethodCoranaWalk
        """
        _COPASI.COptMethodCoranaWalk_swiginit(self, _COPASI.new_COptMethodCoranaWalk(*args))
    __swig_destroy__ = _COPASI.delete_COptMethodCoranaWalk

    def optimise(self):
        r"""optimise(COptMethodCoranaWalk self) -> bool"""
        return _COPASI.COptMethodCoranaWalk_optimise(self)

    def getMaxLogVerbosity(self):
        r"""getMaxLogVerbosity(COptMethodCoranaWalk self) -> unsigned int"""
        return _COPASI.COptMethodCoranaWalk_getMaxLogVerbosity(self)

    def getBestValue(self):
        r"""getBestValue(COptMethodCoranaWalk self) -> double"""
        return _COPASI.COptMethodCoranaWalk_getBestValue(self)

    def getCurrentValue(self):
        r"""getCurrentValue(COptMethodCoranaWalk self) -> double"""
        return _COPASI.COptMethodCoranaWalk_getCurrentValue(self)

    def getBestParameters(self):
        r"""getBestParameters(COptMethodCoranaWalk self) -> FloatVector"""
        return _COPASI.COptMethodCoranaWalk_getBestParameters(self)

    def getCurrentParameters(self):
        r"""getCurrentParameters(COptMethodCoranaWalk self) -> FloatVector"""
        return _COPASI.COptMethodCoranaWalk_getCurrentParameters(self)

# Register COptMethodCoranaWalk in _COPASI:
_COPASI.COptMethodCoranaWalk_swigregister(COptMethodCoranaWalk)
class COptMethodDE(COptPopulationMethod):
    r"""Proxy of C++ COptMethodDE class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(COptMethodDE self, CDataContainer pParent, CTaskEnum::Method const & methodType=DifferentialEvolution, CTaskEnum::Task const & taskType=optimization) -> COptMethodDE
        __init__(COptMethodDE self, COptMethodDE src, CDataContainer pParent) -> COptMethodDE
        """
        _COPASI.COptMethodDE_swiginit(self, _COPASI.new_COptMethodDE(*args))
    __swig_destroy__ = _COPASI.delete_COptMethodDE

    def optimise(self):
        r"""optimise(COptMethodDE self) -> bool"""
        return _COPASI.COptMethodDE_optimise(self)

    def getMaxLogVerbosity(self):
        r"""getMaxLogVerbosity(COptMethodDE self) -> unsigned int"""
        return _COPASI.COptMethodDE_getMaxLogVerbosity(self)

# Register COptMethodDE in _COPASI:
_COPASI.COptMethodDE_swigregister(COptMethodDE)
class COptMethodEP(COptPopulationMethod):
    r"""Proxy of C++ COptMethodEP class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(COptMethodEP self, COptMethodEP src, CDataContainer pParent) -> COptMethodEP"""
        _COPASI.COptMethodEP_swiginit(self, _COPASI.new_COptMethodEP(*args))
    __swig_destroy__ = _COPASI.delete_COptMethodEP

    def optimise(self):
        r"""optimise(COptMethodEP self) -> bool"""
        return _COPASI.COptMethodEP_optimise(self)

    def getMaxLogVerbosity(self):
        r"""getMaxLogVerbosity(COptMethodEP self) -> unsigned int"""
        return _COPASI.COptMethodEP_getMaxLogVerbosity(self)

# Register COptMethodEP in _COPASI:
_COPASI.COptMethodEP_swigregister(COptMethodEP)
class COptMethodGA(COptPopulationMethod):
    r"""Proxy of C++ COptMethodGA class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(COptMethodGA self, CDataContainer pParent, CTaskEnum::Method const & methodType=GeneticAlgorithm, CTaskEnum::Task const & taskType=optimization) -> COptMethodGA
        __init__(COptMethodGA self, COptMethodGA src, CDataContainer pParent) -> COptMethodGA
        """
        _COPASI.COptMethodGA_swiginit(self, _COPASI.new_COptMethodGA(*args))
    __swig_destroy__ = _COPASI.delete_COptMethodGA

    def optimise(self):
        r"""optimise(COptMethodGA self) -> bool"""
        return _COPASI.COptMethodGA_optimise(self)

    def getMaxLogVerbosity(self):
        r"""getMaxLogVerbosity(COptMethodGA self) -> unsigned int"""
        return _COPASI.COptMethodGA_getMaxLogVerbosity(self)

# Register COptMethodGA in _COPASI:
_COPASI.COptMethodGA_swigregister(COptMethodGA)
class COptMethodGASR(COptPopulationMethod):
    r"""Proxy of C++ COptMethodGASR class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(COptMethodGASR self, COptMethodGASR src, CDataContainer pParent) -> COptMethodGASR"""
        _COPASI.COptMethodGASR_swiginit(self, _COPASI.new_COptMethodGASR(*args))
    __swig_destroy__ = _COPASI.delete_COptMethodGASR

    def optimise(self):
        r"""optimise(COptMethodGASR self) -> bool"""
        return _COPASI.COptMethodGASR_optimise(self)

    def getMaxLogVerbosity(self):
        r"""getMaxLogVerbosity(COptMethodGASR self) -> unsigned int"""
        return _COPASI.COptMethodGASR_getMaxLogVerbosity(self)

# Register COptMethodGASR in _COPASI:
_COPASI.COptMethodGASR_swigregister(COptMethodGASR)
class COptMethodHookeJeeves(COptMethod):
    r"""Proxy of C++ COptMethodHookeJeeves class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(COptMethodHookeJeeves self, COptMethodHookeJeeves src, CDataContainer pParent) -> COptMethodHookeJeeves"""
        _COPASI.COptMethodHookeJeeves_swiginit(self, _COPASI.new_COptMethodHookeJeeves(*args))
    __swig_destroy__ = _COPASI.delete_COptMethodHookeJeeves

    def optimise(self):
        r"""optimise(COptMethodHookeJeeves self) -> bool"""
        return _COPASI.COptMethodHookeJeeves_optimise(self)

    def getMaxLogVerbosity(self):
        r"""getMaxLogVerbosity(COptMethodHookeJeeves self) -> unsigned int"""
        return _COPASI.COptMethodHookeJeeves_getMaxLogVerbosity(self)

    def getBestValue(self):
        r"""getBestValue(COptMethodHookeJeeves self) -> double"""
        return _COPASI.COptMethodHookeJeeves_getBestValue(self)

    def getCurrentValue(self):
        r"""getCurrentValue(COptMethodHookeJeeves self) -> double"""
        return _COPASI.COptMethodHookeJeeves_getCurrentValue(self)

    def getBestParameters(self):
        r"""getBestParameters(COptMethodHookeJeeves self) -> FloatVector"""
        return _COPASI.COptMethodHookeJeeves_getBestParameters(self)

    def getCurrentParameters(self):
        r"""getCurrentParameters(COptMethodHookeJeeves self) -> FloatVector"""
        return _COPASI.COptMethodHookeJeeves_getCurrentParameters(self)

# Register COptMethodHookeJeeves in _COPASI:
_COPASI.COptMethodHookeJeeves_swigregister(COptMethodHookeJeeves)
class COptMethodLevenbergMarquardt(COptMethod):
    r"""Proxy of C++ COptMethodLevenbergMarquardt class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(COptMethodLevenbergMarquardt self, CDataContainer pParent, CTaskEnum::Method const & methodType=LevenbergMarquardt, CTaskEnum::Task const & taskType=optimization) -> COptMethodLevenbergMarquardt
        __init__(COptMethodLevenbergMarquardt self, COptMethodLevenbergMarquardt src, CDataContainer pParent) -> COptMethodLevenbergMarquardt
        """
        _COPASI.COptMethodLevenbergMarquardt_swiginit(self, _COPASI.new_COptMethodLevenbergMarquardt(*args))
    __swig_destroy__ = _COPASI.delete_COptMethodLevenbergMarquardt

    def optimise(self):
        r"""optimise(COptMethodLevenbergMarquardt self) -> bool"""
        return _COPASI.COptMethodLevenbergMarquardt_optimise(self)

    def getMaxLogVerbosity(self):
        r"""getMaxLogVerbosity(COptMethodLevenbergMarquardt self) -> unsigned int"""
        return _COPASI.COptMethodLevenbergMarquardt_getMaxLogVerbosity(self)

    def getBestValue(self):
        r"""getBestValue(COptMethodLevenbergMarquardt self) -> double"""
        return _COPASI.COptMethodLevenbergMarquardt_getBestValue(self)

    def getCurrentValue(self):
        r"""getCurrentValue(COptMethodLevenbergMarquardt self) -> double"""
        return _COPASI.COptMethodLevenbergMarquardt_getCurrentValue(self)

    def getBestParameters(self):
        r"""getBestParameters(COptMethodLevenbergMarquardt self) -> FloatVector"""
        return _COPASI.COptMethodLevenbergMarquardt_getBestParameters(self)

    def getCurrentParameters(self):
        r"""getCurrentParameters(COptMethodLevenbergMarquardt self) -> FloatVector"""
        return _COPASI.COptMethodLevenbergMarquardt_getCurrentParameters(self)

# Register COptMethodLevenbergMarquardt in _COPASI:
_COPASI.COptMethodLevenbergMarquardt_swigregister(COptMethodLevenbergMarquardt)
class COptMethodNelderMead(COptMethod):
    r"""Proxy of C++ COptMethodNelderMead class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(COptMethodNelderMead self, CDataContainer pParent, CTaskEnum::Method const & methodType=NelderMead, CTaskEnum::Task const & taskType=optimization) -> COptMethodNelderMead
        __init__(COptMethodNelderMead self, COptMethodNelderMead src, CDataContainer pParent) -> COptMethodNelderMead
        """
        _COPASI.COptMethodNelderMead_swiginit(self, _COPASI.new_COptMethodNelderMead(*args))
    __swig_destroy__ = _COPASI.delete_COptMethodNelderMead

    def optimise(self):
        r"""optimise(COptMethodNelderMead self) -> bool"""
        return _COPASI.COptMethodNelderMead_optimise(self)

    def getMaxLogVerbosity(self):
        r"""getMaxLogVerbosity(COptMethodNelderMead self) -> unsigned int"""
        return _COPASI.COptMethodNelderMead_getMaxLogVerbosity(self)

    def getBestValue(self):
        r"""getBestValue(COptMethodNelderMead self) -> double"""
        return _COPASI.COptMethodNelderMead_getBestValue(self)

    def getCurrentValue(self):
        r"""getCurrentValue(COptMethodNelderMead self) -> double"""
        return _COPASI.COptMethodNelderMead_getCurrentValue(self)

    def getBestParameters(self):
        r"""getBestParameters(COptMethodNelderMead self) -> FloatVector"""
        return _COPASI.COptMethodNelderMead_getBestParameters(self)

    def getCurrentParameters(self):
        r"""getCurrentParameters(COptMethodNelderMead self) -> FloatVector"""
        return _COPASI.COptMethodNelderMead_getCurrentParameters(self)

# Register COptMethodNelderMead in _COPASI:
_COPASI.COptMethodNelderMead_swigregister(COptMethodNelderMead)
class COptMethodPraxis(COptMethod):
    r"""Proxy of C++ COptMethodPraxis class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(COptMethodPraxis self, COptMethodPraxis src, CDataContainer pParent) -> COptMethodPraxis"""
        _COPASI.COptMethodPraxis_swiginit(self, _COPASI.new_COptMethodPraxis(*args))
    __swig_destroy__ = _COPASI.delete_COptMethodPraxis

    def optimise(self):
        r"""optimise(COptMethodPraxis self) -> bool"""
        return _COPASI.COptMethodPraxis_optimise(self)

    def getMaxLogVerbosity(self):
        r"""getMaxLogVerbosity(COptMethodPraxis self) -> unsigned int"""
        return _COPASI.COptMethodPraxis_getMaxLogVerbosity(self)

    def getBestValue(self):
        r"""getBestValue(COptMethodPraxis self) -> double"""
        return _COPASI.COptMethodPraxis_getBestValue(self)

    def getCurrentValue(self):
        r"""getCurrentValue(COptMethodPraxis self) -> double"""
        return _COPASI.COptMethodPraxis_getCurrentValue(self)

    def getBestParameters(self):
        r"""getBestParameters(COptMethodPraxis self) -> FloatVector"""
        return _COPASI.COptMethodPraxis_getBestParameters(self)

    def getCurrentParameters(self):
        r"""getCurrentParameters(COptMethodPraxis self) -> FloatVector"""
        return _COPASI.COptMethodPraxis_getCurrentParameters(self)

# Register COptMethodPraxis in _COPASI:
_COPASI.COptMethodPraxis_swigregister(COptMethodPraxis)
class COptMethodPS(COptPopulationMethod):
    r"""Proxy of C++ COptMethodPS class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(COptMethodPS self, COptMethodPS src, CDataContainer pParent) -> COptMethodPS"""
        _COPASI.COptMethodPS_swiginit(self, _COPASI.new_COptMethodPS(*args))
    __swig_destroy__ = _COPASI.delete_COptMethodPS

    def optimise(self):
        r"""optimise(COptMethodPS self) -> bool"""
        return _COPASI.COptMethodPS_optimise(self)

    def getMaxLogVerbosity(self):
        r"""getMaxLogVerbosity(COptMethodPS self) -> unsigned int"""
        return _COPASI.COptMethodPS_getMaxLogVerbosity(self)

# Register COptMethodPS in _COPASI:
_COPASI.COptMethodPS_swigregister(COptMethodPS)
class COptMethodSA(COptMethod):
    r"""Proxy of C++ COptMethodSA class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(COptMethodSA self, CDataContainer pParent, CTaskEnum::Method const & methodType=SimulatedAnnealing, CTaskEnum::Task const & taskType=optimization) -> COptMethodSA
        __init__(COptMethodSA self, COptMethodSA src, CDataContainer pParent) -> COptMethodSA
        """
        _COPASI.COptMethodSA_swiginit(self, _COPASI.new_COptMethodSA(*args))
    __swig_destroy__ = _COPASI.delete_COptMethodSA

    def optimise(self):
        r"""optimise(COptMethodSA self) -> bool"""
        return _COPASI.COptMethodSA_optimise(self)

    def getMaxLogVerbosity(self):
        r"""getMaxLogVerbosity(COptMethodSA self) -> unsigned int"""
        return _COPASI.COptMethodSA_getMaxLogVerbosity(self)

    def getBestValue(self):
        r"""getBestValue(COptMethodSA self) -> double"""
        return _COPASI.COptMethodSA_getBestValue(self)

    def getCurrentValue(self):
        r"""getCurrentValue(COptMethodSA self) -> double"""
        return _COPASI.COptMethodSA_getCurrentValue(self)

    def getBestParameters(self):
        r"""getBestParameters(COptMethodSA self) -> FloatVector"""
        return _COPASI.COptMethodSA_getBestParameters(self)

    def getCurrentParameters(self):
        r"""getCurrentParameters(COptMethodSA self) -> FloatVector"""
        return _COPASI.COptMethodSA_getCurrentParameters(self)

# Register COptMethodSA in _COPASI:
_COPASI.COptMethodSA_swigregister(COptMethodSA)
class COptMethodSRES(COptPopulationMethod):
    r"""Proxy of C++ COptMethodSRES class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(COptMethodSRES self, CDataContainer pParent, CTaskEnum::Method const & methodType=SRES, CTaskEnum::Task const & taskType=optimization) -> COptMethodSRES
        __init__(COptMethodSRES self, COptMethodSRES src, CDataContainer pParent) -> COptMethodSRES
        """
        _COPASI.COptMethodSRES_swiginit(self, _COPASI.new_COptMethodSRES(*args))
    __swig_destroy__ = _COPASI.delete_COptMethodSRES

    def optimise(self):
        r"""optimise(COptMethodSRES self) -> bool"""
        return _COPASI.COptMethodSRES_optimise(self)

    def getMaxLogVerbosity(self):
        r"""getMaxLogVerbosity(COptMethodSRES self) -> unsigned int"""
        return _COPASI.COptMethodSRES_getMaxLogVerbosity(self)

# Register COptMethodSRES in _COPASI:
_COPASI.COptMethodSRES_swigregister(COptMethodSRES)
class COptMethodSS(COptPopulationMethod):
    r"""Proxy of C++ COptMethodSS class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(COptMethodSS self, CDataContainer pParent, CTaskEnum::Method const & methodType=ScatterSearch, CTaskEnum::Task const & taskType=optimization) -> COptMethodSS
        __init__(COptMethodSS self, COptMethodSS src, CDataContainer pParent) -> COptMethodSS
        """
        _COPASI.COptMethodSS_swiginit(self, _COPASI.new_COptMethodSS(*args))
    __swig_destroy__ = _COPASI.delete_COptMethodSS

    def elevateChildren(self):
        r"""elevateChildren(COptMethodSS self) -> bool"""
        return _COPASI.COptMethodSS_elevateChildren(self)

    def optimise(self):
        r"""optimise(COptMethodSS self) -> bool"""
        return _COPASI.COptMethodSS_optimise(self)

# Register COptMethodSS in _COPASI:
_COPASI.COptMethodSS_swigregister(COptMethodSS)
class COptMethodStatistics(COptMethod):
    r"""Proxy of C++ COptMethodStatistics class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(COptMethodStatistics self, CDataContainer pParent, CTaskEnum::Method const & methodType=Statistics, CTaskEnum::Task const & taskType=optimization) -> COptMethodStatistics
        __init__(COptMethodStatistics self, COptMethodStatistics src, CDataContainer pParent) -> COptMethodStatistics
        """
        _COPASI.COptMethodStatistics_swiginit(self, _COPASI.new_COptMethodStatistics(*args))
    __swig_destroy__ = _COPASI.delete_COptMethodStatistics

    def optimise(self):
        r"""optimise(COptMethodStatistics self) -> bool"""
        return _COPASI.COptMethodStatistics_optimise(self)

    def getBestValue(self):
        r"""getBestValue(COptMethodStatistics self) -> double"""
        return _COPASI.COptMethodStatistics_getBestValue(self)

    def getCurrentValue(self):
        r"""getCurrentValue(COptMethodStatistics self) -> double"""
        return _COPASI.COptMethodStatistics_getCurrentValue(self)

    def getBestParameters(self):
        r"""getBestParameters(COptMethodStatistics self) -> FloatVector"""
        return _COPASI.COptMethodStatistics_getBestParameters(self)

    def getCurrentParameters(self):
        r"""getCurrentParameters(COptMethodStatistics self) -> FloatVector"""
        return _COPASI.COptMethodStatistics_getCurrentParameters(self)

# Register COptMethodStatistics in _COPASI:
_COPASI.COptMethodStatistics_swigregister(COptMethodStatistics)
class COptMethodSteepestDescent(COptMethod):
    r"""Proxy of C++ COptMethodSteepestDescent class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(COptMethodSteepestDescent self, CDataContainer pParent, CTaskEnum::Method const & methodType=SteepestDescent, CTaskEnum::Task const & taskType=optimization) -> COptMethodSteepestDescent
        __init__(COptMethodSteepestDescent self, COptMethodSteepestDescent src, CDataContainer pParent) -> COptMethodSteepestDescent
        """
        _COPASI.COptMethodSteepestDescent_swiginit(self, _COPASI.new_COptMethodSteepestDescent(*args))
    __swig_destroy__ = _COPASI.delete_COptMethodSteepestDescent

    def optimise(self):
        r"""optimise(COptMethodSteepestDescent self) -> bool"""
        return _COPASI.COptMethodSteepestDescent_optimise(self)

    def getMaxLogVerbosity(self):
        r"""getMaxLogVerbosity(COptMethodSteepestDescent self) -> unsigned int"""
        return _COPASI.COptMethodSteepestDescent_getMaxLogVerbosity(self)

    def getBestValue(self):
        r"""getBestValue(COptMethodSteepestDescent self) -> double"""
        return _COPASI.COptMethodSteepestDescent_getBestValue(self)

    def getCurrentValue(self):
        r"""getCurrentValue(COptMethodSteepestDescent self) -> double"""
        return _COPASI.COptMethodSteepestDescent_getCurrentValue(self)

    def getBestParameters(self):
        r"""getBestParameters(COptMethodSteepestDescent self) -> FloatVector"""
        return _COPASI.COptMethodSteepestDescent_getBestParameters(self)

    def getCurrentParameters(self):
        r"""getCurrentParameters(COptMethodSteepestDescent self) -> FloatVector"""
        return _COPASI.COptMethodSteepestDescent_getCurrentParameters(self)

# Register COptMethodSteepestDescent in _COPASI:
_COPASI.COptMethodSteepestDescent_swigregister(COptMethodSteepestDescent)
class CRandomSearch(COptMethod):
    r"""Proxy of C++ CRandomSearch class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CRandomSearch self, CDataContainer pParent, CTaskEnum::Method const & methodType=RandomSearch, CTaskEnum::Task const & taskType=optimization) -> CRandomSearch
        __init__(CRandomSearch self, CRandomSearch src, CDataContainer pParent) -> CRandomSearch
        """
        _COPASI.CRandomSearch_swiginit(self, _COPASI.new_CRandomSearch(*args))
    __swig_destroy__ = _COPASI.delete_CRandomSearch

    def optimise(self):
        r"""optimise(CRandomSearch self) -> bool"""
        return _COPASI.CRandomSearch_optimise(self)

    def getMaxLogVerbosity(self):
        r"""getMaxLogVerbosity(CRandomSearch self) -> unsigned int"""
        return _COPASI.CRandomSearch_getMaxLogVerbosity(self)

    def getBestValue(self):
        r"""getBestValue(CRandomSearch self) -> double"""
        return _COPASI.CRandomSearch_getBestValue(self)

    def getCurrentValue(self):
        r"""getCurrentValue(CRandomSearch self) -> double"""
        return _COPASI.CRandomSearch_getCurrentValue(self)

    def getBestParameters(self):
        r"""getBestParameters(CRandomSearch self) -> FloatVector"""
        return _COPASI.CRandomSearch_getBestParameters(self)

    def getCurrentParameters(self):
        r"""getCurrentParameters(CRandomSearch self) -> FloatVector"""
        return _COPASI.CRandomSearch_getCurrentParameters(self)

# Register CRandomSearch in _COPASI:
_COPASI.CRandomSearch_swigregister(CRandomSearch)
class COptMethodTruncatedNewton(COptMethod):
    r"""Proxy of C++ COptMethodTruncatedNewton class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(COptMethodTruncatedNewton self, CDataContainer pParent, CTaskEnum::Method const & methodType=TruncatedNewton, CTaskEnum::Task const & taskType=optimization) -> COptMethodTruncatedNewton
        __init__(COptMethodTruncatedNewton self, COptMethodTruncatedNewton src, CDataContainer pParent) -> COptMethodTruncatedNewton
        """
        _COPASI.COptMethodTruncatedNewton_swiginit(self, _COPASI.new_COptMethodTruncatedNewton(*args))
    __swig_destroy__ = _COPASI.delete_COptMethodTruncatedNewton

    def optimise(self):
        r"""optimise(COptMethodTruncatedNewton self) -> bool"""
        return _COPASI.COptMethodTruncatedNewton_optimise(self)

    def getMaxLogVerbosity(self):
        r"""getMaxLogVerbosity(COptMethodTruncatedNewton self) -> unsigned int"""
        return _COPASI.COptMethodTruncatedNewton_getMaxLogVerbosity(self)

    def getBestValue(self):
        r"""getBestValue(COptMethodTruncatedNewton self) -> double"""
        return _COPASI.COptMethodTruncatedNewton_getBestValue(self)

    def getCurrentValue(self):
        r"""getCurrentValue(COptMethodTruncatedNewton self) -> double"""
        return _COPASI.COptMethodTruncatedNewton_getCurrentValue(self)

    def getBestParameters(self):
        r"""getBestParameters(COptMethodTruncatedNewton self) -> FloatVector"""
        return _COPASI.COptMethodTruncatedNewton_getBestParameters(self)

    def getCurrentParameters(self):
        r"""getCurrentParameters(COptMethodTruncatedNewton self) -> FloatVector"""
        return _COPASI.COptMethodTruncatedNewton_getCurrentParameters(self)

# Register COptMethodTruncatedNewton in _COPASI:
_COPASI.COptMethodTruncatedNewton_swigregister(COptMethodTruncatedNewton)
class CFunctionAnalyzer(object):
    r"""Proxy of C++ CFunctionAnalyzer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, f, reaction=None):
        r"""__init__(CFunctionAnalyzer self, CFunction f, CReaction reaction=None) -> CFunctionAnalyzer"""
        _COPASI.CFunctionAnalyzer_swiginit(self, _COPASI.new_CFunctionAnalyzer(f, reaction))

    def checkKineticFunction(self, f, reaction=None):
        r"""checkKineticFunction(CFunctionAnalyzer self, CFunction f, CReaction reaction=None)"""
        return _COPASI.CFunctionAnalyzer_checkKineticFunction(self, f, reaction)

    def getResult(self):
        r"""getResult(CFunctionAnalyzer self) -> CFunctionAnalyzer::Result const &"""
        return _COPASI.CFunctionAnalyzer_getResult(self)
    NOOBJECT = _COPASI.CFunctionAnalyzer_NOOBJECT
    
    GENERAL = _COPASI.CFunctionAnalyzer_GENERAL
    
    POSITIVE = _COPASI.CFunctionAnalyzer_POSITIVE
    
    ACTUAL = _COPASI.CFunctionAnalyzer_ACTUAL
    

    @staticmethod
    def evaluateNode(node, callParameters, mode):
        r"""evaluateNode(CEvaluationNode const * node, std::vector< CFunctionAnalyzer::CValue,std::allocator< CFunctionAnalyzer::CValue > > const & callParameters, CFunctionAnalyzer::Mode mode) -> CFunctionAnalyzer::CValue"""
        return _COPASI.CFunctionAnalyzer_evaluateNode(node, callParameters, mode)

    @staticmethod
    def constructCallParameters(fp, callParameters, posi):
        r"""constructCallParameters(CFunctionParameters fp, std::vector< CFunctionAnalyzer::CValue,std::allocator< CFunctionAnalyzer::CValue > > & callParameters, bool posi)"""
        return _COPASI.CFunctionAnalyzer_constructCallParameters(fp, callParameters, posi)

    @staticmethod
    def write(level, rt, text, longText):
        r"""write(int level, bool rt, std::string const & text, std::string const & longText) -> std::string"""
        return _COPASI.CFunctionAnalyzer_write(level, rt, text, longText)
    __swig_destroy__ = _COPASI.delete_CFunctionAnalyzer

# Register CFunctionAnalyzer in _COPASI:
_COPASI.CFunctionAnalyzer_swigregister(CFunctionAnalyzer)
class CReactionResult(object):
    r"""Proxy of C++ CReactionResult class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(CReactionResult self) -> CReactionResult"""
        _COPASI.CReactionResult_swiginit(self, _COPASI.new_CReactionResult())
    __swig_destroy__ = _COPASI.delete_CReactionResult

    def writeResult(self, os, rt, verbose, writeToStream=True):
        r"""writeResult(CReactionResult self, std::ostream & os, bool rt, bool verbose, bool writeToStream=True) -> bool"""
        return _COPASI.CReactionResult_writeResult(self, os, rt, verbose, writeToStream)

    def hasIssue(self):
        r"""hasIssue(CReactionResult self) -> bool"""
        return _COPASI.CReactionResult_hasIssue(self)

    def getResultString(self, rt, verbose):
        r"""getResultString(CReactionResult self, bool rt, bool verbose) -> std::string"""
        return _COPASI.CReactionResult_getResultString(self, rt, verbose)

    def getName(self):
        r"""getName(CReactionResult self) -> std::string const &"""
        return _COPASI.CReactionResult_getName(self)

# Register CReactionResult in _COPASI:
_COPASI.CReactionResult_swigregister(CReactionResult)
class CModelAnalyzer(object):
    r"""Proxy of C++ CModelAnalyzer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model):
        r"""__init__(CModelAnalyzer self, CModel model) -> CModelAnalyzer"""
        _COPASI.CModelAnalyzer_swiginit(self, _COPASI.new_CModelAnalyzer(model))

    def writeReport(self, os, rt, verbose):
        r"""writeReport(CModelAnalyzer self, std::ostream & os, bool rt, bool verbose)"""
        return _COPASI.CModelAnalyzer_writeReport(self, os, rt, verbose)

    def getReactionResults(self):
        r"""getReactionResults(CModelAnalyzer self) -> CReactionResultStdVector"""
        return _COPASI.CModelAnalyzer_getReactionResults(self)
    __swig_destroy__ = _COPASI.delete_CModelAnalyzer

# Register CModelAnalyzer in _COPASI:
_COPASI.CModelAnalyzer_swigregister(CModelAnalyzer)
class COptions(object):
    r"""Proxy of C++ COptions class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _COPASI.delete_COptions

    @staticmethod
    def init(argc=0, argv=0):
        r"""init(int argc=0, char *[] argv=0)"""
        return _COPASI.COptions_init(argc, argv)

    @staticmethod
    def cleanup():
        r"""cleanup()"""
        return _COPASI.COptions_cleanup()

    @staticmethod
    def isSet(name):
        r"""isSet(std::string const & name) -> bool"""
        return _COPASI.COptions_isSet(name)

    @staticmethod
    def getNonOptions():
        r"""getNonOptions() -> StringStdVector"""
        return _COPASI.COptions_getNonOptions()

    @staticmethod
    def getEnvironmentVariable(name):
        r"""getEnvironmentVariable(std::string const & name) -> std::string"""
        return _COPASI.COptions_getEnvironmentVariable(name)

    @staticmethod
    def getPWD():
        r"""getPWD() -> std::string"""
        return _COPASI.COptions_getPWD()

    @staticmethod
    def getConfigDir():
        r"""getConfigDir() -> std::string"""
        return _COPASI.COptions_getConfigDir()

# Register COptions in _COPASI:
_COPASI.COptions_swigregister(COptions)
class CCheckForUpdates(CCopasiParameterGroup):
    r"""Proxy of C++ CCheckForUpdates class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CCheckForUpdates self, std::string const & name="Check for Updates", CDataContainer pParent=static_cast< CDataContainer * >((void *) 0)) -> CCheckForUpdates
        __init__(CCheckForUpdates self, CCheckForUpdates src, CDataContainer pParent) -> CCheckForUpdates
        __init__(CCheckForUpdates self, CCopasiParameterGroup group, CDataContainer pParent) -> CCheckForUpdates
        """
        _COPASI.CCheckForUpdates_swiginit(self, _COPASI.new_CCheckForUpdates(*args))
    __swig_destroy__ = _COPASI.delete_CCheckForUpdates

    def setEnabled(self, enabled):
        r"""setEnabled(CCheckForUpdates self, bool enabled)"""
        return _COPASI.CCheckForUpdates_setEnabled(self, enabled)

    def isEnabled(self):
        r"""isEnabled(CCheckForUpdates self) -> bool"""
        return _COPASI.CCheckForUpdates_isEnabled(self)

    def setConfirmedCheckForUpdate(self, flag):
        r"""setConfirmedCheckForUpdate(CCheckForUpdates self, bool flag)"""
        return _COPASI.CCheckForUpdates_setConfirmedCheckForUpdate(self, flag)

    def needToConfirmCheckForUpdate(self):
        r"""needToConfirmCheckForUpdate(CCheckForUpdates self) -> bool"""
        return _COPASI.CCheckForUpdates_needToConfirmCheckForUpdate(self)

    def skipVersion(self, version):
        r"""skipVersion(CCheckForUpdates self, CVersion version) -> bool"""
        return _COPASI.CCheckForUpdates_skipVersion(self, version)

    def checkRequired(self):
        r"""checkRequired(CCheckForUpdates self) -> bool"""
        return _COPASI.CCheckForUpdates_checkRequired(self)

    def setSkipVersion(self, version):
        r"""setSkipVersion(CCheckForUpdates self, CVersion version)"""
        return _COPASI.CCheckForUpdates_setSkipVersion(self, version)

    def setChecked(self):
        r"""setChecked(CCheckForUpdates self)"""
        return _COPASI.CCheckForUpdates_setChecked(self)

# Register CCheckForUpdates in _COPASI:
_COPASI.CCheckForUpdates_swigregister(CCheckForUpdates)
class CRecentFiles(CCopasiParameterGroup):
    r"""Proxy of C++ CRecentFiles class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CRecentFiles self, std::string const & name="Recent Files", CDataContainer pParent=static_cast< CDataContainer * >((void *) 0)) -> CRecentFiles
        __init__(CRecentFiles self, CRecentFiles src, CDataContainer pParent) -> CRecentFiles
        __init__(CRecentFiles self, CCopasiParameterGroup group, CDataContainer pParent) -> CRecentFiles
        """
        _COPASI.CRecentFiles_swiginit(self, _COPASI.new_CRecentFiles(*args))
    __swig_destroy__ = _COPASI.delete_CRecentFiles

    def addFile(self, file):
        r"""addFile(CRecentFiles self, std::string const & file)"""
        return _COPASI.CRecentFiles_addFile(self, file)

# Register CRecentFiles in _COPASI:
_COPASI.CRecentFiles_swigregister(CRecentFiles)
class CConfigurationFile(CCopasiParameterGroup):
    r"""Proxy of C++ CConfigurationFile class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CConfigurationFile self, std::string const & name="Configuration", CDataContainer pParent=static_cast< CDataContainer * >((void *) 0)) -> CConfigurationFile
        __init__(CConfigurationFile self, CConfigurationFile src, CDataContainer pParent) -> CConfigurationFile
        """
        _COPASI.CConfigurationFile_swiginit(self, _COPASI.new_CConfigurationFile(*args))
    __swig_destroy__ = _COPASI.delete_CConfigurationFile

    def elevateChildren(self):
        r"""elevateChildren(CConfigurationFile self) -> bool"""
        return _COPASI.CConfigurationFile_elevateChildren(self)

    def save(self):
        r"""save(CConfigurationFile self) -> bool"""
        return _COPASI.CConfigurationFile_save(self)

    def load(self):
        r"""load(CConfigurationFile self) -> bool"""
        return _COPASI.CConfigurationFile_load(self)

    def getRecentFiles(self):
        r"""getRecentFiles(CConfigurationFile self) -> CRecentFiles"""
        return _COPASI.CConfigurationFile_getRecentFiles(self)

    def getRecentSBMLFiles(self):
        r"""getRecentSBMLFiles(CConfigurationFile self) -> CRecentFiles"""
        return _COPASI.CConfigurationFile_getRecentSBMLFiles(self)

    def getRecentSEDMLFiles(self):
        r"""getRecentSEDMLFiles(CConfigurationFile self) -> CRecentFiles"""
        return _COPASI.CConfigurationFile_getRecentSEDMLFiles(self)

    def getRecentMIRIAMResources(self):
        r"""getRecentMIRIAMResources(CConfigurationFile self) -> CMIRIAMResources"""
        return _COPASI.CConfigurationFile_getRecentMIRIAMResources(self)

    def setRecentMIRIAMResources(self, miriamResources):
        r"""setRecentMIRIAMResources(CConfigurationFile self, CMIRIAMResources miriamResources)"""
        return _COPASI.CConfigurationFile_setRecentMIRIAMResources(self, miriamResources)

    def getApplicationFont(self):
        r"""getApplicationFont(CConfigurationFile self) -> std::string const"""
        return _COPASI.CConfigurationFile_getApplicationFont(self)

    def setApplicationFont(self, applicationFont):
        r"""setApplicationFont(CConfigurationFile self, std::string const & applicationFont)"""
        return _COPASI.CConfigurationFile_setApplicationFont(self, applicationFont)

    def validateUnits(self):
        r"""validateUnits(CConfigurationFile self) -> bool"""
        return _COPASI.CConfigurationFile_validateUnits(self)

    def setValidateUnits(self, validateUnits):
        r"""setValidateUnits(CConfigurationFile self, bool validateUnits)"""
        return _COPASI.CConfigurationFile_setValidateUnits(self, validateUnits)

    def showItemIssues(self, kind):
        r"""showItemIssues(CConfigurationFile self, CIssue::eKind kind) -> bool"""
        return _COPASI.CConfigurationFile_showItemIssues(self, kind)

    def useOpenGL(self):
        r"""useOpenGL(CConfigurationFile self) -> bool"""
        return _COPASI.CConfigurationFile_useOpenGL(self)

    def setUseOpenGL(self, useOpenGL):
        r"""setUseOpenGL(CConfigurationFile self, bool useOpenGL)"""
        return _COPASI.CConfigurationFile_setUseOpenGL(self, useOpenGL)

    def useAdvancedSliders(self):
        r"""useAdvancedSliders(CConfigurationFile self) -> bool"""
        return _COPASI.CConfigurationFile_useAdvancedSliders(self)

    def setUseAdvancedSliders(self, useAdvancedSliders):
        r"""setUseAdvancedSliders(CConfigurationFile self, bool useAdvancedSliders)"""
        return _COPASI.CConfigurationFile_setUseAdvancedSliders(self, useAdvancedSliders)

    def useAdvancedEditing(self):
        r"""useAdvancedEditing(CConfigurationFile self) -> bool"""
        return _COPASI.CConfigurationFile_useAdvancedEditing(self)

    def setUseAdvancedEditing(self, useAdvancedEditing):
        r"""setUseAdvancedEditing(CConfigurationFile self, bool useAdvancedEditing)"""
        return _COPASI.CConfigurationFile_setUseAdvancedEditing(self, useAdvancedEditing)

    def normalizePerExperiment(self):
        r"""normalizePerExperiment(CConfigurationFile self) -> bool"""
        return _COPASI.CConfigurationFile_normalizePerExperiment(self)

    def setNormalizePerExperiment(self, flag):
        r"""setNormalizePerExperiment(CConfigurationFile self, bool flag)"""
        return _COPASI.CConfigurationFile_setNormalizePerExperiment(self, flag)

    def enableAdditionalOptimizationParameters(self):
        r"""enableAdditionalOptimizationParameters(CConfigurationFile self) -> bool"""
        return _COPASI.CConfigurationFile_enableAdditionalOptimizationParameters(self)

    def setEnableAdditionalOptimizationParameters(self, enableAdditionalOptimizationParameters):
        r"""setEnableAdditionalOptimizationParameters(CConfigurationFile self, bool enableAdditionalOptimizationParameters)"""
        return _COPASI.CConfigurationFile_setEnableAdditionalOptimizationParameters(self, enableAdditionalOptimizationParameters)

    def displayPopulations(self):
        r"""displayPopulations(CConfigurationFile self) -> bool"""
        return _COPASI.CConfigurationFile_displayPopulations(self)

    def setDisplayPopulations(self, flag):
        r"""setDisplayPopulations(CConfigurationFile self, bool flag)"""
        return _COPASI.CConfigurationFile_setDisplayPopulations(self, flag)

    def resizeToContents(self):
        r"""resizeToContents(CConfigurationFile self) -> bool"""
        return _COPASI.CConfigurationFile_resizeToContents(self)

    def setResizeToContents(self, flag):
        r"""setResizeToContents(CConfigurationFile self, bool flag)"""
        return _COPASI.CConfigurationFile_setResizeToContents(self, flag)

    def getWorkingDirectory(self):
        r"""getWorkingDirectory(CConfigurationFile self) -> std::string const"""
        return _COPASI.CConfigurationFile_getWorkingDirectory(self)

    def setWorkingDirectory(self, workingDirectory):
        r"""setWorkingDirectory(CConfigurationFile self, std::string const & workingDirectory)"""
        return _COPASI.CConfigurationFile_setWorkingDirectory(self, workingDirectory)

    def getProxyServer(self):
        r"""getProxyServer(CConfigurationFile self) -> std::string const"""
        return _COPASI.CConfigurationFile_getProxyServer(self)

    def setProxyServer(self, proxyServer):
        r"""setProxyServer(CConfigurationFile self, std::string const & proxyServer)"""
        return _COPASI.CConfigurationFile_setProxyServer(self, proxyServer)

    def getProxyPort(self):
        r"""getProxyPort(CConfigurationFile self) -> int"""
        return _COPASI.CConfigurationFile_getProxyPort(self)

    def setProxyPort(self, proxyPort):
        r"""setProxyPort(CConfigurationFile self, int proxyPort)"""
        return _COPASI.CConfigurationFile_setProxyPort(self, proxyPort)

    def getProxyUser(self):
        r"""getProxyUser(CConfigurationFile self) -> std::string const"""
        return _COPASI.CConfigurationFile_getProxyUser(self)

    def setProxyUser(self, proxyUser):
        r"""setProxyUser(CConfigurationFile self, std::string const & proxyUser)"""
        return _COPASI.CConfigurationFile_setProxyUser(self, proxyUser)

    def getProxyPassword(self):
        r"""getProxyPassword(CConfigurationFile self) -> std::string const"""
        return _COPASI.CConfigurationFile_getProxyPassword(self)

    def setProxyPassword(self, proxyPassword):
        r"""setProxyPassword(CConfigurationFile self, std::string const & proxyPassword)"""
        return _COPASI.CConfigurationFile_setProxyPassword(self, proxyPassword)

    def getCurrentAuthorGivenName(self):
        r"""getCurrentAuthorGivenName(CConfigurationFile self) -> std::string const &"""
        return _COPASI.CConfigurationFile_getCurrentAuthorGivenName(self)

    def setCurrentAuthorGivenName(self, CurrentAuthorGivenName):
        r"""setCurrentAuthorGivenName(CConfigurationFile self, std::string const & CurrentAuthorGivenName)"""
        return _COPASI.CConfigurationFile_setCurrentAuthorGivenName(self, CurrentAuthorGivenName)

    def getCurrentAuthorFamilyName(self):
        r"""getCurrentAuthorFamilyName(CConfigurationFile self) -> std::string const &"""
        return _COPASI.CConfigurationFile_getCurrentAuthorFamilyName(self)

    def setCurrentAuthorFamilyName(self, CurrentAuthorFamilyName):
        r"""setCurrentAuthorFamilyName(CConfigurationFile self, std::string const & CurrentAuthorFamilyName)"""
        return _COPASI.CConfigurationFile_setCurrentAuthorFamilyName(self, CurrentAuthorFamilyName)

    def getCurrentAuthorOrganization(self):
        r"""getCurrentAuthorOrganization(CConfigurationFile self) -> std::string const &"""
        return _COPASI.CConfigurationFile_getCurrentAuthorOrganization(self)

    def setCurrentAuthorOrganization(self, CurrentAuthorOrganization):
        r"""setCurrentAuthorOrganization(CConfigurationFile self, std::string const & CurrentAuthorOrganization)"""
        return _COPASI.CConfigurationFile_setCurrentAuthorOrganization(self, CurrentAuthorOrganization)

    def getCurrentAuthorEmail(self):
        r"""getCurrentAuthorEmail(CConfigurationFile self) -> std::string const &"""
        return _COPASI.CConfigurationFile_getCurrentAuthorEmail(self)

    def setCurrentAuthorEmail(self, CurrentAuthorEmail):
        r"""setCurrentAuthorEmail(CConfigurationFile self, std::string const & CurrentAuthorEmail)"""
        return _COPASI.CConfigurationFile_setCurrentAuthorEmail(self, CurrentAuthorEmail)

    def getDoublePrecision(self):
        r"""getDoublePrecision(CConfigurationFile self) -> int"""
        return _COPASI.CConfigurationFile_getDoublePrecision(self)

    def setDoublePrecision(self, precision):
        r"""setDoublePrecision(CConfigurationFile self, int precision)"""
        return _COPASI.CConfigurationFile_setDoublePrecision(self, precision)

    def getCheckForUpdates(self):
        r"""getCheckForUpdates(CConfigurationFile self) -> CCheckForUpdates"""
        return _COPASI.CConfigurationFile_getCheckForUpdates(self)

    def getDisableJIT(self):
        r"""getDisableJIT(CConfigurationFile self) -> bool"""
        return _COPASI.CConfigurationFile_getDisableJIT(self)

    def setDisableJIT(self, disableJIT):
        r"""setDisableJIT(CConfigurationFile self, bool disableJIT)"""
        return _COPASI.CConfigurationFile_setDisableJIT(self, disableJIT)

# Register CConfigurationFile in _COPASI:
_COPASI.CConfigurationFile_swigregister(CConfigurationFile)
class CCopasiTimeVariable(object):
    r"""Proxy of C++ CCopasiTimeVariable class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CCopasiTimeVariable self) -> CCopasiTimeVariable
        __init__(CCopasiTimeVariable self, CCopasiTimeVariable src) -> CCopasiTimeVariable
        __init__(CCopasiTimeVariable self, long long const & value) -> CCopasiTimeVariable
        """
        _COPASI.CCopasiTimeVariable_swiginit(self, _COPASI.new_CCopasiTimeVariable(*args))
    __swig_destroy__ = _COPASI.delete_CCopasiTimeVariable

    def add(self, value):
        r"""add(CCopasiTimeVariable self, CCopasiTimeVariable value) -> CCopasiTimeVariable"""
        return _COPASI.CCopasiTimeVariable_add(self, value)

    def sub(self, value):
        r"""sub(CCopasiTimeVariable self, CCopasiTimeVariable value) -> CCopasiTimeVariable"""
        return _COPASI.CCopasiTimeVariable_sub(self, value)

    def __lt__(self, value):
        r"""__lt__(CCopasiTimeVariable self, CCopasiTimeVariable value) -> bool"""
        return _COPASI.CCopasiTimeVariable___lt__(self, value)

    def isoFormat(self, printMicroSecond=True):
        r"""isoFormat(CCopasiTimeVariable self, bool const & printMicroSecond=True) -> std::string"""
        return _COPASI.CCopasiTimeVariable_isoFormat(self, printMicroSecond)

    def getMicroSeconds(self, bounded=False):
        r"""getMicroSeconds(CCopasiTimeVariable self, bool const & bounded=False) -> long long"""
        return _COPASI.CCopasiTimeVariable_getMicroSeconds(self, bounded)

    def getMilliSeconds(self, bounded=False):
        r"""getMilliSeconds(CCopasiTimeVariable self, bool const & bounded=False) -> long long"""
        return _COPASI.CCopasiTimeVariable_getMilliSeconds(self, bounded)

    def getSeconds(self, bounded=False):
        r"""getSeconds(CCopasiTimeVariable self, bool const & bounded=False) -> long long"""
        return _COPASI.CCopasiTimeVariable_getSeconds(self, bounded)

    def getMinutes(self, bounded=False):
        r"""getMinutes(CCopasiTimeVariable self, bool const & bounded=False) -> long long"""
        return _COPASI.CCopasiTimeVariable_getMinutes(self, bounded)

    def getHours(self, bounded=False):
        r"""getHours(CCopasiTimeVariable self, bool const & bounded=False) -> long long"""
        return _COPASI.CCopasiTimeVariable_getHours(self, bounded)

    def getDays(self):
        r"""getDays(CCopasiTimeVariable self) -> long long"""
        return _COPASI.CCopasiTimeVariable_getDays(self)

    def isZero(self):
        r"""isZero(CCopasiTimeVariable self) -> bool"""
        return _COPASI.CCopasiTimeVariable_isZero(self)

    @staticmethod
    def getCurrentWallTime():
        r"""getCurrentWallTime() -> CCopasiTimeVariable"""
        return _COPASI.CCopasiTimeVariable_getCurrentWallTime()

    @staticmethod
    def getProcessTime():
        r"""getProcessTime() -> CCopasiTimeVariable"""
        return _COPASI.CCopasiTimeVariable_getProcessTime()

    @staticmethod
    def getThreadTime():
        r"""getThreadTime() -> CCopasiTimeVariable"""
        return _COPASI.CCopasiTimeVariable_getThreadTime()

    @staticmethod
    def LL2String(value, digits=0):
        r"""LL2String(long long const & value, int const & digits=0) -> std::string"""
        return _COPASI.CCopasiTimeVariable_LL2String(value, digits)

# Register CCopasiTimeVariable in _COPASI:
_COPASI.CCopasiTimeVariable_swigregister(CCopasiTimeVariable)
class CCopasiTimer(CDataObject):
    r"""Proxy of C++ CCopasiTimer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Type_WALL = _COPASI.CCopasiTimer_Type_WALL
    
    Type_PROCESS = _COPASI.CCopasiTimer_Type_PROCESS
    
    Type_THREAD = _COPASI.CCopasiTimer_Type_THREAD
    
    Type_CURRENT = _COPASI.CCopasiTimer_Type_CURRENT
    
    Type___SIZE = _COPASI.CCopasiTimer_Type___SIZE
    

    def __init__(self, *args):
        r"""
        __init__(CCopasiTimer self, CCopasiTimer::Type const & type=WALL, CDataContainer pParent=static_cast< CDataContainer * >((void *) 0)) -> CCopasiTimer
        __init__(CCopasiTimer self, CCopasiTimer src, CDataContainer pParent) -> CCopasiTimer
        """
        _COPASI.CCopasiTimer_swiginit(self, _COPASI.new_CCopasiTimer(*args))
    __swig_destroy__ = _COPASI.delete_CCopasiTimer

    def start(self):
        r"""start(CCopasiTimer self) -> bool"""
        return _COPASI.CCopasiTimer_start(self)

    def calculateValue(self):
        r"""calculateValue(CCopasiTimer self)"""
        return _COPASI.CCopasiTimer_calculateValue(self)

    def getElapsedTime(self):
        r"""getElapsedTime(CCopasiTimer self) -> CCopasiTimeVariable"""
        return _COPASI.CCopasiTimer_getElapsedTime(self)

    def getElapsedTimeSeconds(self):
        r"""getElapsedTimeSeconds(CCopasiTimer self) -> double const &"""
        return _COPASI.CCopasiTimer_getElapsedTimeSeconds(self)

# Register CCopasiTimer in _COPASI:
_COPASI.CCopasiTimer_swigregister(CCopasiTimer)
class CJitCompilerImplementation(object):
    r"""Proxy of C++ CJitCompilerImplementation class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def SetJitBufferSize(size):
        r"""SetJitBufferSize(size_t const size)"""
        return _COPASI.CJitCompilerImplementation_SetJitBufferSize(size)

    @staticmethod
    def GetJitBufferSize():
        r"""GetJitBufferSize() -> size_t const &"""
        return _COPASI.CJitCompilerImplementation_GetJitBufferSize()

    def __init__(self):
        r"""__init__(CJitCompilerImplementation self) -> CJitCompilerImplementation"""
        _COPASI.CJitCompilerImplementation_swiginit(self, _COPASI.new_CJitCompilerImplementation())
    __swig_destroy__ = _COPASI.delete_CJitCompilerImplementation

# Register CJitCompilerImplementation in _COPASI:
_COPASI.CJitCompilerImplementation_swigregister(CJitCompilerImplementation)
class CReactionResultStdVector(object):
    r"""Proxy of C++ std::vector< CReactionResult > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(CReactionResultStdVector self) -> SwigPyIterator"""
        return _COPASI.CReactionResultStdVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(CReactionResultStdVector self) -> bool"""
        return _COPASI.CReactionResultStdVector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(CReactionResultStdVector self) -> bool"""
        return _COPASI.CReactionResultStdVector___bool__(self)

    def __len__(self):
        r"""__len__(CReactionResultStdVector self) -> std::vector< CReactionResult >::size_type"""
        return _COPASI.CReactionResultStdVector___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(CReactionResultStdVector self, std::vector< CReactionResult >::difference_type i, std::vector< CReactionResult >::difference_type j) -> CReactionResultStdVector"""
        return _COPASI.CReactionResultStdVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(CReactionResultStdVector self, std::vector< CReactionResult >::difference_type i, std::vector< CReactionResult >::difference_type j)
        __setslice__(CReactionResultStdVector self, std::vector< CReactionResult >::difference_type i, std::vector< CReactionResult >::difference_type j, CReactionResultStdVector v)
        """
        return _COPASI.CReactionResultStdVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(CReactionResultStdVector self, std::vector< CReactionResult >::difference_type i, std::vector< CReactionResult >::difference_type j)"""
        return _COPASI.CReactionResultStdVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(CReactionResultStdVector self, std::vector< CReactionResult >::difference_type i)
        __delitem__(CReactionResultStdVector self, SWIGPY_SLICEOBJECT * slice)
        """
        return _COPASI.CReactionResultStdVector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(CReactionResultStdVector self, SWIGPY_SLICEOBJECT * slice) -> CReactionResultStdVector
        __getitem__(CReactionResultStdVector self, std::vector< CReactionResult >::difference_type i) -> CReactionResult
        """
        return _COPASI.CReactionResultStdVector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(CReactionResultStdVector self, SWIGPY_SLICEOBJECT * slice, CReactionResultStdVector v)
        __setitem__(CReactionResultStdVector self, SWIGPY_SLICEOBJECT * slice)
        __setitem__(CReactionResultStdVector self, std::vector< CReactionResult >::difference_type i, CReactionResult x)
        """
        return _COPASI.CReactionResultStdVector___setitem__(self, *args)

    def pop(self):
        r"""pop(CReactionResultStdVector self) -> CReactionResult"""
        return _COPASI.CReactionResultStdVector_pop(self)

    def append(self, x):
        r"""append(CReactionResultStdVector self, CReactionResult x)"""
        return _COPASI.CReactionResultStdVector_append(self, x)

    def empty(self):
        r"""empty(CReactionResultStdVector self) -> bool"""
        return _COPASI.CReactionResultStdVector_empty(self)

    def size(self):
        r"""size(CReactionResultStdVector self) -> std::vector< CReactionResult >::size_type"""
        return _COPASI.CReactionResultStdVector_size(self)

    def swap(self, v):
        r"""swap(CReactionResultStdVector self, CReactionResultStdVector v)"""
        return _COPASI.CReactionResultStdVector_swap(self, v)

    def rbegin(self):
        r"""rbegin(CReactionResultStdVector self) -> std::vector< CReactionResult >::reverse_iterator"""
        return _COPASI.CReactionResultStdVector_rbegin(self)

    def rend(self):
        r"""rend(CReactionResultStdVector self) -> std::vector< CReactionResult >::reverse_iterator"""
        return _COPASI.CReactionResultStdVector_rend(self)

    def clear(self):
        r"""clear(CReactionResultStdVector self)"""
        return _COPASI.CReactionResultStdVector_clear(self)

    def get_allocator(self):
        r"""get_allocator(CReactionResultStdVector self) -> std::vector< CReactionResult >::allocator_type"""
        return _COPASI.CReactionResultStdVector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(CReactionResultStdVector self)"""
        return _COPASI.CReactionResultStdVector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(CReactionResultStdVector self, std::vector< CReactionResult >::iterator pos) -> std::vector< CReactionResult >::iterator
        erase(CReactionResultStdVector self, std::vector< CReactionResult >::iterator first, std::vector< CReactionResult >::iterator last) -> std::vector< CReactionResult >::iterator
        """
        return _COPASI.CReactionResultStdVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(CReactionResultStdVector self) -> CReactionResultStdVector
        __init__(CReactionResultStdVector self, CReactionResultStdVector other) -> CReactionResultStdVector
        __init__(CReactionResultStdVector self, std::vector< CReactionResult >::size_type size) -> CReactionResultStdVector
        __init__(CReactionResultStdVector self, std::vector< CReactionResult >::size_type size, CReactionResult value) -> CReactionResultStdVector
        """
        _COPASI.CReactionResultStdVector_swiginit(self, _COPASI.new_CReactionResultStdVector(*args))

    def push_back(self, x):
        r"""push_back(CReactionResultStdVector self, CReactionResult x)"""
        return _COPASI.CReactionResultStdVector_push_back(self, x)

    def front(self):
        r"""front(CReactionResultStdVector self) -> CReactionResult"""
        return _COPASI.CReactionResultStdVector_front(self)

    def back(self):
        r"""back(CReactionResultStdVector self) -> CReactionResult"""
        return _COPASI.CReactionResultStdVector_back(self)

    def assign(self, n, x):
        r"""assign(CReactionResultStdVector self, std::vector< CReactionResult >::size_type n, CReactionResult x)"""
        return _COPASI.CReactionResultStdVector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(CReactionResultStdVector self, std::vector< CReactionResult >::size_type new_size)
        resize(CReactionResultStdVector self, std::vector< CReactionResult >::size_type new_size, CReactionResult x)
        """
        return _COPASI.CReactionResultStdVector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(CReactionResultStdVector self, std::vector< CReactionResult >::iterator pos, CReactionResult x) -> std::vector< CReactionResult >::iterator
        insert(CReactionResultStdVector self, std::vector< CReactionResult >::iterator pos, std::vector< CReactionResult >::size_type n, CReactionResult x)
        """
        return _COPASI.CReactionResultStdVector_insert(self, *args)

    def reserve(self, n):
        r"""reserve(CReactionResultStdVector self, std::vector< CReactionResult >::size_type n)"""
        return _COPASI.CReactionResultStdVector_reserve(self, n)

    def capacity(self):
        r"""capacity(CReactionResultStdVector self) -> std::vector< CReactionResult >::size_type"""
        return _COPASI.CReactionResultStdVector_capacity(self)
    __swig_destroy__ = _COPASI.delete_CReactionResultStdVector

# Register CReactionResultStdVector in _COPASI:
_COPASI.CReactionResultStdVector_swigregister(CReactionResultStdVector)
class CFluxModeStdVector(object):
    r"""Proxy of C++ std::vector< CFluxMode > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(CFluxModeStdVector self) -> SwigPyIterator"""
        return _COPASI.CFluxModeStdVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(CFluxModeStdVector self) -> bool"""
        return _COPASI.CFluxModeStdVector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(CFluxModeStdVector self) -> bool"""
        return _COPASI.CFluxModeStdVector___bool__(self)

    def __len__(self):
        r"""__len__(CFluxModeStdVector self) -> std::vector< CFluxMode >::size_type"""
        return _COPASI.CFluxModeStdVector___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(CFluxModeStdVector self, std::vector< CFluxMode >::difference_type i, std::vector< CFluxMode >::difference_type j) -> CFluxModeStdVector"""
        return _COPASI.CFluxModeStdVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(CFluxModeStdVector self, std::vector< CFluxMode >::difference_type i, std::vector< CFluxMode >::difference_type j)
        __setslice__(CFluxModeStdVector self, std::vector< CFluxMode >::difference_type i, std::vector< CFluxMode >::difference_type j, CFluxModeStdVector v)
        """
        return _COPASI.CFluxModeStdVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(CFluxModeStdVector self, std::vector< CFluxMode >::difference_type i, std::vector< CFluxMode >::difference_type j)"""
        return _COPASI.CFluxModeStdVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(CFluxModeStdVector self, std::vector< CFluxMode >::difference_type i)
        __delitem__(CFluxModeStdVector self, SWIGPY_SLICEOBJECT * slice)
        """
        return _COPASI.CFluxModeStdVector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(CFluxModeStdVector self, SWIGPY_SLICEOBJECT * slice) -> CFluxModeStdVector
        __getitem__(CFluxModeStdVector self, std::vector< CFluxMode >::difference_type i) -> CFluxMode
        """
        return _COPASI.CFluxModeStdVector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(CFluxModeStdVector self, SWIGPY_SLICEOBJECT * slice, CFluxModeStdVector v)
        __setitem__(CFluxModeStdVector self, SWIGPY_SLICEOBJECT * slice)
        __setitem__(CFluxModeStdVector self, std::vector< CFluxMode >::difference_type i, CFluxMode x)
        """
        return _COPASI.CFluxModeStdVector___setitem__(self, *args)

    def pop(self):
        r"""pop(CFluxModeStdVector self) -> CFluxMode"""
        return _COPASI.CFluxModeStdVector_pop(self)

    def append(self, x):
        r"""append(CFluxModeStdVector self, CFluxMode x)"""
        return _COPASI.CFluxModeStdVector_append(self, x)

    def empty(self):
        r"""empty(CFluxModeStdVector self) -> bool"""
        return _COPASI.CFluxModeStdVector_empty(self)

    def size(self):
        r"""size(CFluxModeStdVector self) -> std::vector< CFluxMode >::size_type"""
        return _COPASI.CFluxModeStdVector_size(self)

    def swap(self, v):
        r"""swap(CFluxModeStdVector self, CFluxModeStdVector v)"""
        return _COPASI.CFluxModeStdVector_swap(self, v)

    def rbegin(self):
        r"""rbegin(CFluxModeStdVector self) -> std::vector< CFluxMode >::reverse_iterator"""
        return _COPASI.CFluxModeStdVector_rbegin(self)

    def rend(self):
        r"""rend(CFluxModeStdVector self) -> std::vector< CFluxMode >::reverse_iterator"""
        return _COPASI.CFluxModeStdVector_rend(self)

    def clear(self):
        r"""clear(CFluxModeStdVector self)"""
        return _COPASI.CFluxModeStdVector_clear(self)

    def get_allocator(self):
        r"""get_allocator(CFluxModeStdVector self) -> std::vector< CFluxMode >::allocator_type"""
        return _COPASI.CFluxModeStdVector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(CFluxModeStdVector self)"""
        return _COPASI.CFluxModeStdVector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(CFluxModeStdVector self, std::vector< CFluxMode >::iterator pos) -> std::vector< CFluxMode >::iterator
        erase(CFluxModeStdVector self, std::vector< CFluxMode >::iterator first, std::vector< CFluxMode >::iterator last) -> std::vector< CFluxMode >::iterator
        """
        return _COPASI.CFluxModeStdVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(CFluxModeStdVector self) -> CFluxModeStdVector
        __init__(CFluxModeStdVector self, CFluxModeStdVector other) -> CFluxModeStdVector
        __init__(CFluxModeStdVector self, std::vector< CFluxMode >::size_type size) -> CFluxModeStdVector
        __init__(CFluxModeStdVector self, std::vector< CFluxMode >::size_type size, CFluxMode value) -> CFluxModeStdVector
        """
        _COPASI.CFluxModeStdVector_swiginit(self, _COPASI.new_CFluxModeStdVector(*args))

    def push_back(self, x):
        r"""push_back(CFluxModeStdVector self, CFluxMode x)"""
        return _COPASI.CFluxModeStdVector_push_back(self, x)

    def front(self):
        r"""front(CFluxModeStdVector self) -> CFluxMode"""
        return _COPASI.CFluxModeStdVector_front(self)

    def back(self):
        r"""back(CFluxModeStdVector self) -> CFluxMode"""
        return _COPASI.CFluxModeStdVector_back(self)

    def assign(self, n, x):
        r"""assign(CFluxModeStdVector self, std::vector< CFluxMode >::size_type n, CFluxMode x)"""
        return _COPASI.CFluxModeStdVector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(CFluxModeStdVector self, std::vector< CFluxMode >::size_type new_size)
        resize(CFluxModeStdVector self, std::vector< CFluxMode >::size_type new_size, CFluxMode x)
        """
        return _COPASI.CFluxModeStdVector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(CFluxModeStdVector self, std::vector< CFluxMode >::iterator pos, CFluxMode x) -> std::vector< CFluxMode >::iterator
        insert(CFluxModeStdVector self, std::vector< CFluxMode >::iterator pos, std::vector< CFluxMode >::size_type n, CFluxMode x)
        """
        return _COPASI.CFluxModeStdVector_insert(self, *args)

    def reserve(self, n):
        r"""reserve(CFluxModeStdVector self, std::vector< CFluxMode >::size_type n)"""
        return _COPASI.CFluxModeStdVector_reserve(self, n)

    def capacity(self):
        r"""capacity(CFluxModeStdVector self) -> std::vector< CFluxMode >::size_type"""
        return _COPASI.CFluxModeStdVector_capacity(self)
    __swig_destroy__ = _COPASI.delete_CFluxModeStdVector

# Register CFluxModeStdVector in _COPASI:
_COPASI.CFluxModeStdVector_swigregister(CFluxModeStdVector)


TriUnspecified=-1
TriFalse=0
TriTrue=1

CRootContainer.init=_COPASI.CRootContainer_init
CRootContainer.destroy=_COPASI.CRootContainer_destroy
CRootContainer.getRoot=_COPASI.CRootContainer_getRoot
CRootContainer.getFunctionList=_COPASI.CRootContainer_getFunctionList
CRootContainer.getDatamodelList=_COPASI.CRootContainer_getDatamodelList
CRootContainer.addDatamodel=_COPASI.CRootContainer_addDatamodel
CRootContainer.getUndefinedFunction=_COPASI.CRootContainer_getUndefinedFunction
CRootContainer.getKeyFactory=_COPASI.CRootContainer_getKeyFactory
CRootContainer.removeDatamodel=_COPASI.CRootContainer_removeDatamodel
CRootContainer.removeDatamodelWithIndex=_COPASI.CRootContainer_removeDatamodelWithIndex

CCommonName.escape=_COPASI.CCommonName_escape
CCommonName.unescape=_COPASI.CCommonName_unescape

CCopasiMethod.TypeNameToEnum=_COPASI.CCopasiMethod_TypeNameToEnum

CEvaluationTree.create=_COPASI.CEvaluationTree_create
CEvaluationTree.copy=_COPASI.CEvaluationTree_copy

COutputAssistant.getListOfDefaultOutputDescriptions=_COPASI.COutputAssistant_getListOfDefaultOutputDescriptions
COutputAssistant.getDefaultReportIndex=_COPASI.COutputAssistant_getDefaultReportIndex
COutputAssistant.getItemName=_COPASI.COutputAssistant_getItemName
COutputAssistant.getItem=_COPASI.COutputAssistant_getItem
COutputAssistant.createDefaultOutput=_COPASI.COutputAssistant_createDefaultOutput

CCopasiMessage.peekFirstMessage=_COPASI.CCopasiMessage_peekFirstMessage
CCopasiMessage.peekLastMessage=_COPASI.CCopasiMessage_peekLastMessage
CCopasiMessage.getFirstMessage=_COPASI.CCopasiMessage_getFirstMessage
CCopasiMessage.getLastMessage=_COPASI.CCopasiMessage_getLastMessage
CCopasiMessage.getAllMessageText=_COPASI.CCopasiMessage_getAllMessageText
CCopasiMessage.clearDeque=_COPASI.CCopasiMessage_clearDeque
CCopasiMessage.getHighestSeverity=_COPASI.CCopasiMessage_getHighestSeverity
CCopasiMessage.checkForMessage=_COPASI.CCopasiMessage_checkForMessage
CCopasiMessage.size=_COPASI.CCopasiMessage_size




class _VectorIterator:
    def __init__(self, vector):
#type: (COPASI.MetabVector) -> None
        self.current = 0
        self.high = vector.size() - 1
        self.vector = vector

    def __iter__(self):
        return self

    def __next__(self):
        return self.next()

    def next(self):
        if self.current > self.high:
            raise StopIteration
        else:
            self.current += 1
            return self.vector.get(self.current - 1)

def __add_iterator(self):
    return _VectorIterator(self)


BiologicalDescriptionVector.__iter__ = __add_iterator
CChemEqElementVector.__iter__ = __add_iterator
CDataObjectVector.__iter__ = __add_iterator
CEvaluationTreeVector.__iter__ = __add_iterator
CEvaluationTreeVectorN.__iter__ = __add_iterator
CFunctionVector.__iter__ = __add_iterator
CFunctionVectorN.__iter__ = __add_iterator
CFunctionVectorNS.__iter__ = __add_iterator
CLRelAbsVector.__iter__ = __add_iterator
COutputDefinitionVector.__iter__ = __add_iterator
CReportDefinitionVector.__iter__ = __add_iterator
ColorDefinitionVector.__iter__ = __add_iterator
CompartmentGlyphVector.__iter__ = __add_iterator
CompartmentVector.__iter__ = __add_iterator
CompartmentVectorN.__iter__ = __add_iterator
CompartmentVectorNS.__iter__ = __add_iterator
CreatorVector.__iter__ = __add_iterator
DataModelVector.__iter__ = __add_iterator
EventAssignmentVector.__iter__ = __add_iterator
EventAssignmentVectorN.__iter__ = __add_iterator
EventVector.__iter__ = __add_iterator
EventVectorN.__iter__ = __add_iterator
FittingPointVector.__iter__ = __add_iterator
FloatCVector.__iter__ = __add_iterator
FloatVector.__iter__ = __add_iterator
FloatVectorCore.__iter__ = __add_iterator
GeneralGlyphVector.__iter__ = __add_iterator
GlobalRenderInformationVector.__iter__ = __add_iterator
GlobalStyleVector.__iter__ = __add_iterator
GradientBaseVector.__iter__ = __add_iterator
GradientStopVector.__iter__ = __add_iterator
GraphicalObjectVector.__iter__ = __add_iterator
LayoutVector.__iter__ = __add_iterator
LayoutVectorN.__iter__ = __add_iterator
LineEndingVector.__iter__ = __add_iterator
LocalStyleVector.__iter__ = __add_iterator
MetabGlyphVector.__iter__ = __add_iterator
MetabReferenceGlyphVector.__iter__ = __add_iterator
MetabVector.__iter__ = __add_iterator
MetabVectorN.__iter__ = __add_iterator
MetabVectorNS.__iter__ = __add_iterator
MethodSubTypeVector.__iter__ = __add_iterator
ModelParameterSetVector.__iter__ = __add_iterator
ModelParameterSetVectorN.__iter__ = __add_iterator
ModelValueVector.__iter__ = __add_iterator
ModelValueVectorN.__iter__ = __add_iterator
ModificationVector.__iter__ = __add_iterator
MoietyVector.__iter__ = __add_iterator
ObjectVector.__iter__ = __add_iterator
ObjectVectorCore.__iter__ = __add_iterator
OutputDefinitionVector.__iter__ = __add_iterator
OutputDefinitionVectorN.__iter__ = __add_iterator
ParameterVector.__iter__ = __add_iterator
PlotItemVector.__iter__ = __add_iterator
PlotItemVectorN.__iter__ = __add_iterator
ReactionGlyphVector.__iter__ = __add_iterator
ReactionVector.__iter__ = __add_iterator
ReactionVectorN.__iter__ = __add_iterator
ReactionVectorNS.__iter__ = __add_iterator
ReferenceGlyphVector.__iter__ = __add_iterator
ReferenceVector.__iter__ = __add_iterator
ReportDefinitionVector.__iter__ = __add_iterator
ReportDefinitionVectorN.__iter__ = __add_iterator
ReportItemVector.__iter__ = __add_iterator
SizeTVector.__iter__ = __add_iterator
SizeTVectorCore.__iter__ = __add_iterator
TaskSubTypeVector.__iter__ = __add_iterator
TaskVector.__iter__ = __add_iterator
TaskVectorN.__iter__ = __add_iterator
TextGlyphVector.__iter__ = __add_iterator
VectorOfStringVectors.__iter__ = __add_iterator





__version__ = '4.42.284'
