# Worker microservice

FROM ghcr.io/biosimulators/bio-check-base:latest

# os deps
RUN apt-get update && apt-get install -y libatlas-base-dev \
    libhdf5-serial-dev \
    swig \
    libboost-all-dev \
    git \
    meson \
    build-essential \
    g++ \
    gfortran \
    libblas-dev \
    liblapack-dev \
    gcc \
    gfortran \
    libgfortran5

###################################
# PySCeS

# SUNDIALS --> installation path is default cmake (/usr/local) with LD_LIBRARY_PATH as runtime location
# ignore certificate checking because certificate was expired as of 2021-11-10
ARG SUNDIALS_VERSION=2.6.2
RUN apt-get install -y --no-install-recommends \
        wget \
        cmake \
        make \
        g++ \
    \
    && cd /tmp \
    && wget --no-check-certificate https://computing.llnl.gov/sites/default/files/inline-files/sundials-${SUNDIALS_VERSION}.tar.gz \
    && tar xvvf sundials-${SUNDIALS_VERSION}.tar.gz \
    && cd sundials-${SUNDIALS_VERSION} \
    && mkdir build \
    && cd build \
    && CFLAGS="-fPIC" cmake .. \
    && make \
    && make install \
    \
    && cd /tmp \
    && rm sundials-${SUNDIALS_VERSION}.tar.gz \
    && rm -r sundials-${SUNDIALS_VERSION}
ENV LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH

############################################
# App content

COPY . /app/worker

ENV PATH="/root/.local/bin:$PATH"

# Install only worker deps
RUN poetry install --only=worker --no-cache

# Install Assimulo from source for Pysces
RUN apt-get update \
    && apt-get install -y libblas-dev \
    liblapack-dev \
    libatlas-base-dev \
    python3-distutils \
    python3-dev \
    && git clone https://github.com/modelon-community/Assimulo.git \
    && cd Assimulo \
    && poetry run pip install --upgrade setuptools pip wheel Cython numpy \
    && poetry run python3 setup.py install --sundials-home=/usr/local --blas-home=/usr/lib/x86_64-linux-gnu

# && cd Assimulo \
# && rm -rf build \
# && poetry run python3 setup.py install --sundials-home=/usr/local --blas-home=/usr/lib/x86_64-linux-gnu

# install masspy TODO: do this
# RUN poetry run pip install biosimulators-masspy

WORKDIR /app/worker

RUN python3 -c "import os;files=os.listdir();import shutil;[shutil.rmtree(f) if '__pycache__' in f else None for f in files]"

ENTRYPOINT ["poetry", "run", "python3", "main.py"]

#############################
# Fenics

# TODO: start the fenics implementation
# RUN apt-get update && apt-get install -y petsc-dev \
#     libopenmpi-dev \
#     libspdlog-dev \
#     libpugixml-dev \
#     cmake \
#     gcc \
#     g++ \
#     gfortran \
#     && rm -rf /var/lib/apt/lists/* \
#     && add-apt-repository ppa:fenics-packages/fenics -y \
#     && apt update \
#     && apt install -y fenicsx \
#     && poetry run pip install meson-python meson ninja

# RUN poetry run pip install \
#     biosimulators-utils[logging] \
#     biosimulators-amici \
#     biosimulators-copasi \
#     biosimulators-pysces \
#     biosimulators-tellurium

# add deps with extras
# RUN yes | poetry cache clear PyPI --all \
#     && poetry add biosimulators-utils --extras=logging \
#     && poetry add pysces --extras=sbml \
#     && poetry add biosimulators-copasi --python="^3.10"

# install requirements in poetry via pip prox
# RUN poetry run pip install -r /app/worker/requirements.worker.txt

# install masspy TODO: do this
# RUN poetry run pip install biosimulators-masspy

# install with poetry TODO: remove this eventually
# RUN /app/assets/install_deps.sh /app/worker/requirements.worker.txt