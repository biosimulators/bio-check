name: Continuous Delivery

on:
  release:

jobs:
  build-microservices:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Log in to GHCR
      - name: Log in to GHCR
        run: echo "${{ secrets.REPO_ADMIN_GHCR_TOKEN }}" | docker login ghcr.io -u "${{ secrets.REPO_ADMIN_GH_USERNAME }}" --password-stdin

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/$(curl -s https://api.github.com/repos/docker/compose/releases/latest | grep 'tag_name' | cut -d\" -f4)/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version  # Check if Docker Compose is installed correctly

      - name: Install Python and PyYAML
        run: |
          sudo apt-get update
          sudo apt-get install -y python3 python3-pip
          pip install pyyaml

      - name: Extract API container version
        id: extract_api_version
        run: |
          API_VERSION=$(python3 .github/parse_docker_compose.py api -v)
          echo "API_VERSION=$API_VERSION" >> $GITHUB_ENV
          echo "API Version: $API_VERSION"
          API_IMAGE=$(python3 .github/parse_docker_compose.py api -i)
          echo "API_IMAGE=$API_IMAGE" >> $GITHUB_ENV
          echo "API Image: $API_IMAGE"

      - name: Extract worker container version
        id: extract_worker_version
        run: |
          WORKER_VERSION=$(python3 .github/parse_docker_compose.py worker -v)
          echo "WORKER_VERSION=$WORKER_VERSION" >> $GITHUB_ENV
          echo "WORKER Version: $WORKER_VERSION"
          WORKER_IMAGE=$(python3 .github/parse_docker_compose.py worker -i)
          echo "WORKER_IMAGE=$WORKER_IMAGE" >> $GITHUB_ENV
          echo "WORKER Image: $WORKER_IMAGE"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker containers with Docker Compose
        run: |
          API_TAG=${{ env.API_IMAGE }}
          WORKER_TAG=${{ env.WORKER_IMAGE }}
          docker-compose build --no-cache
          echo $API_TAG > api_tag.txt
          echo $WORKER_TAG > worker_tag.txt

      - name: Upload image tag artifact
        uses: actions/upload-artifact@v3
        with:
          name: api_tag
          path: api_tag.txt

      - name: Upload image tag artifact
        uses: actions/upload-artifact@v3
        with:
          name: worker_tag
          path: worker_tag.txt
      
          
